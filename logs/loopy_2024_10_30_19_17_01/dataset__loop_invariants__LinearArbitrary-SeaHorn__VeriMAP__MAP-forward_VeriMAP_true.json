{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b == 3*i;\nloop invariant a == 3*i + 2*unknown_int()*(i+1)/2;\nloop invariant b == 3*i + unknown_int()*(i+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 3 * i;\nloop invariant a <= 2 * i;\nloop invariant b <= i;\nloop invariant a + b == 3 * i ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n ==> b <= n ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n ==> b >= n ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant (if i < n, then a + b <= 3*(i + 1));\nloop invariant (if i >= n, then a + b == 3*n);\nloop invariant a + b >= 2*n;\nloop invariant (if i < n, then a + b >= 2*(i + 1));\nloop invariant (if i >= n, then a + b == 3*n);\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a + b >= 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b <= 3 * n;\nloop invariant a + b >= 2 * i;\nloop invariant a >= b / 2;\nloop invariant b >= a / 2;\nloop invariant a <= 2 * n;\nloop invariant b <= 2 * n;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3 * n - b;\nloop invariant a <= 2 * i + b;\nloop invariant a >= b;\nloop invariant b >= a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b = 3*i;\nloop invariant a >= b;\nloop invariant \\exists int j; i = (j + 1) * j / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*b;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant (unknown_int() ==> (a >= b));\nloop invariant (!unknown_int() ==> (a <= b));\nloop invariant (unknown_int() ==> (a >= i));\nloop invariant (!unknown_int() ==> (a <= i));\nloop invariant (unknown_int() ==> (b >= i));\nloop invariant (!unknown_int() ==> (b <= i));\nloop invariant (unknown_int() ==> (a <= a+1));\nloop invariant (!unknown_int() ==> (a <= a+2));\nloop invariant (unknown_int() ==> (b <= b+2));\nloop invariant (!unknown_int() ==> (b <= b+1));\nloop invariant (unknown_int() ==> (a <= b+2));\nloop invariant (!unknown_int() ==> (a <= b+1));\nloop invariant (unknown_int() ==> (b <= a+1));\nloop invariant (!unknown_int() ==> (b <= a+2));\nloop invariant (unknown_int() ==> (a <= a+3));\nloop invariant (!unknown_int() ==> (a <= a+4));\nloop invariant (unknown_int() ==> (b <= b+3));\nloop invariant (!unknown_int() ==> (b <= b+4));\nloop invariant (unknown_int() ==> (a <= a+3*i));\nloop invariant (!unknown_int() ==> (a <= a+2*i));\nloop invariant (unknown_int() ==> (b <= b+3*i));\nloop invariant (!unknown_int() ==> (b <= b+2*i));\nloop invariant (unknown_int() ==> (a <= a+3*n));\nloop invariant (!unknown_int() ==> (a <= a+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*n));\nloop invariant (!unknown_int() ==> (b <= b+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*(i + 1);\nloop invariant a + b <= 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b <= 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 2 * i;\nloop invariant b >= i;\nloop invariant a <= 2 * i;\nloop invariant b <= i;\nloop invariant a + b <= 3 * i;\nloop invariant a + b >= 3 * (i + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (a >= 0) && (a <= 3*n);\nloop invariant (b >= 0) && (b <= 3*n);\nloop invariant (a+b >= 0) && (a+b <= 6*n);\nloop invariant (a+b <= 3*n) ==> (a+b == 3*n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n; loop invariant a >= 0; loop invariant b >= 0; loop invariant a + b <= 3*n; loop invariant a + b >= 0; loop invariant a + b >= 2*i; loop invariant a + b >= 3*i - 2*n; loop invariant a + b >= 3*i - 2*n - 1; loop invariant a + b >= 3*i - 2*n - 2; loop invariant a + b >= 3*i - 2*n - 3; loop invariant a + b >= 3*i - 2*n - 4; loop invariant a + b >= 3*i - 2*n - 5; loop invariant a + b >= 3*i - 2*n - 6; loop invariant a + b >= 3*i - 2*n - 7; loop invariant a + b >= 3*i - 2*n - 8; loop invariant a + b >= 3*i - 2*n - 9; loop invariant a + b >= 3*i - 2*n - 10; loop invariant a + b >= 3*i - 2*n - 11; loop invariant a + b >= 3*i - 2*n - 12; loop invariant a + b >= 3*i - 2*n - 13; loop invariant a + b >= 3*i - 2*n - 14; loop invariant a + b >= 3*i - 2*n - 15; loop invariant a + b >= 3*i - 2*n - 16; loop invariant a + b >= 3*i - 2*n - 17; loop invariant a + b >= 3*i - 2*n - 18; loop invariant a + b >= 3*i - 2*n - 19; loop invariant a + b >= 3*i - 2*n - 20; loop invariant a + b >= 3*i - 2*n - 21; loop invariant a + b >= 3*i - 2*n - 22; loop invariant a + b >= 3*i - 2*n - 23; loop invariant a + b >= 3*i - 2*n - 24; loop invariant a + b >= 3*i - 2*n - 25; loop invariant a + b >= 3*i - 2*n - 26; loop invariant a + b >= 3*i - 2*n - 27; loop invariant a + b >= 3*i - 2*n - 28; loop invariant a + b >= 3*i - 2*n - 29; loop invariant a + b >= 3*i - 2*n - 30; loop invariant a + b >= 3*i - 2*n - 31; loop invariant a + b >= 3*i - 2*n - 32; loop invariant a + b >= 3*i - 2*n - 33; loop invariant a + b >= 3*i - 2*n - 34; loop invariant a + b >= 3*i - 2*n - 35; loop invariant a + b >= 3*i - 2*n - 36; loop invariant a + b >= 3*i - 2*n - 37; loop invariant a + b >= 3*i - 2*n - 38; loop invariant a + b >= 3*i - 2*n - 39; loop invariant a + b >= 3*i - 2*n - 40; loop invariant a + b >= 3*i - 2*n - 41; loop invariant a + b >= 3*i - 2*n - 42; loop invariant a + b >= 3*i - 2*n - 43; loop invariant a + b >= 3*i - 2*n - 44; loop invariant a + b >= 3*i - 2*n - 45; loop invariant a + b >= 3*i - 2*n - 46; loop invariant a + b >= 3*i - 2*n - 47; loop invariant a + b >= 3*i - 2*n - 48; loop invariant a + b >= 3*i - 2*n - 49; loop invariant a + b >= 3*i - 2*n - 50; loop invariant a + b >= 3*i - 2*n - 51; loop invariant a + b >= 3*i - 2*n - 52;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b = 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b == 3*i;\nloop invariant (unknown_int() ==> a+2*b == 3*i) && (!unknown_int() ==> a+2*b == 3*i);\nloop invariant (unknown_int() ==> a >= 2*i) && (!unknown_int() ==> a >= 2*i);\nloop invariant (unknown_int() ==> b >= i) && (!unknown_int() ==> b >= i);\nloop invariant (unknown_int() ==> a <= 3*i) && (!unknown_int() ==> a <= 3*i);\nloop invariant (unknown_int() ==> b <= 3*i) && (!unknown_int() ==> b <= 3*i);\nloop invariant (unknown_int() ==> a >= 0) && (!unknown_int() ==> a >= 0);\nloop invariant (unknown_int() ==> b >= 0) && (!unknown_int() ==> b >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a >= 0 ==> i <= a/3;\nloop invariant b >= 0 ==> i <= b/3;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant a >= 0 ==> b <= 2*n - a;\nloop invariant b >= 0 ==> a <= 2*n - b;\nloop invariant a >= 0 ==> a % 3 == 0;\nloop invariant b >= 0 ==> b % 3 == 0;\nloop invariant i >= 0 ==> a % 3 == 0;\nloop invariant i >= 0 ==> b % 3 == 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= i;\nloop invariant a + b >= i + i;\nloop invariant a + b >= i;\nloop invariant a >= 0;\nloop invariant b >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: a >= i;\nloop invariant i6: a - b <= 2*i;\nloop invariant i7: b - a <= i;\nloop invariant i8: a + b >= i + i;\nloop invariant i9: a + b >= i;\nloop invariant i10: a >= 0;\nloop invariant i11: b >= 0;\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b == 3*i;\nloop invariant a == 3*i + 2*unknown_int()*(i+1)/2;\nloop invariant b == 3*i + unknown_int()*(i+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= a <= 3*n;\nloop invariant i2: 0 <= b <= 3*n;\nloop invariant i3: a+b == 3*i;\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 3 * i;\nloop invariant a <= 2 * i;\nloop invariant b <= i;\nloop invariant a + b == 3 * i ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n ==> b <= n ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n ==> b >= n ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a + b == 3 * i;\nloop invariant i5: a <= 2 * i;\n\n\nloop invariant i8: a <= 2 * i ==> a <= 2 * n;\nloop invariant i9: b <= i ==> b <= n;\n\n\n\nloop invariant i13: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i14: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i15: b <= i ==> b <= n ==> b <= n;\nloop invariant i16: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i17: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i18: b >= i ==> b >= n ==> b >= n;\nloop invariant i19: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i20: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i21: b <= i ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i22: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i23: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i24: b >= i ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i25: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i26: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i27: b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i28: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i29: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i30: b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i31: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i32: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i33: b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i34: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i35: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i36: b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i37: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant (if i < n, then a + b <= 3*(i + 1));\nloop invariant (if i >= n, then a + b == 3*n);\nloop invariant a + b >= 2*n;\nloop invariant (if i < n, then a + b >= 2*(i + 1));\nloop invariant (if i >= n, then a + b == 3*n);\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\nloop invariant i9: a + b >= 0;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a + b >= 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\nloop invariant i6: a + b >= 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b <= 3 * n;\nloop invariant a + b >= 2 * i;\nloop invariant a >= b / 2;\nloop invariant b >= a / 2;\nloop invariant a <= 2 * n;\nloop invariant b <= 2 * n;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a <= 3 * n - b;\nloop invariant a <= 2 * i + b;\nloop invariant a >= b;\nloop invariant b >= a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\nloop invariant i5: a + b >= 2 * i;\nloop invariant i6: a >= b / 2;\nloop invariant i7: b >= a / 2;\n\n\nloop invariant i10: i <= n;\nloop invariant i11: i >= 0;\n\nloop invariant i13: a <= 2 * i + b;\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b = 3*i;\nloop invariant a >= b;\nloop invariant \\exists int j; i = (j + 1) * j / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 32,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*b;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant (unknown_int() ==> (a >= b));\nloop invariant (!unknown_int() ==> (a <= b));\nloop invariant (unknown_int() ==> (a >= i));\nloop invariant (!unknown_int() ==> (a <= i));\nloop invariant (unknown_int() ==> (b >= i));\nloop invariant (!unknown_int() ==> (b <= i));\nloop invariant (unknown_int() ==> (a <= a+1));\nloop invariant (!unknown_int() ==> (a <= a+2));\nloop invariant (unknown_int() ==> (b <= b+2));\nloop invariant (!unknown_int() ==> (b <= b+1));\nloop invariant (unknown_int() ==> (a <= b+2));\nloop invariant (!unknown_int() ==> (a <= b+1));\nloop invariant (unknown_int() ==> (b <= a+1));\nloop invariant (!unknown_int() ==> (b <= a+2));\nloop invariant (unknown_int() ==> (a <= a+3));\nloop invariant (!unknown_int() ==> (a <= a+4));\nloop invariant (unknown_int() ==> (b <= b+3));\nloop invariant (!unknown_int() ==> (b <= b+4));\nloop invariant (unknown_int() ==> (a <= a+3*i));\nloop invariant (!unknown_int() ==> (a <= a+2*i));\nloop invariant (unknown_int() ==> (b <= b+3*i));\nloop invariant (!unknown_int() ==> (b <= b+2*i));\nloop invariant (unknown_int() ==> (a <= a+3*n));\nloop invariant (!unknown_int() ==> (a <= a+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*n));\nloop invariant (!unknown_int() ==> (b <= b+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant (!unknown_int() ==> (b <= b+2*i+4*n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a <= 2*b;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*(i + 1);\nloop invariant a + b <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b >= 3*i;\nloop invariant i5: a + b <= 3*(i + 1);\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b <= 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 2 * i;\nloop invariant b >= i;\nloop invariant a <= 2 * i;\nloop invariant b <= i;\nloop invariant a + b <= 3 * i;\nloop invariant a + b >= 3 * (i + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= a <= 2 * n;\n\nloop invariant i3: a + b <= 3 * n;\nloop invariant i4: i >= 0;\nloop invariant i5: i <= n;\n\nloop invariant i7: b >= i;\nloop invariant i8: a <= 2 * i;\n\nloop invariant i10: a + b <= 3 * i;\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (a >= 0) && (a <= 3*n);\nloop invariant (b >= 0) && (b <= 3*n);\nloop invariant (a+b >= 0) && (a+b <= 6*n);\nloop invariant (a+b <= 3*n) ==> (a+b == 3*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant a >= 0; loop invariant b >= 0; loop invariant a + b <= 3*n; loop invariant a + b >= 0; loop invariant a + b >= 2*i; loop invariant a + b >= 3*i - 2*n; loop invariant a + b >= 3*i - 2*n - 1; loop invariant a + b >= 3*i - 2*n - 2; loop invariant a + b >= 3*i - 2*n - 3; loop invariant a + b >= 3*i - 2*n - 4; loop invariant a + b >= 3*i - 2*n - 5; loop invariant a + b >= 3*i - 2*n - 6; loop invariant a + b >= 3*i - 2*n - 7; loop invariant a + b >= 3*i - 2*n - 8; loop invariant a + b >= 3*i - 2*n - 9; loop invariant a + b >= 3*i - 2*n - 10; loop invariant a + b >= 3*i - 2*n - 11; loop invariant a + b >= 3*i - 2*n - 12; loop invariant a + b >= 3*i - 2*n - 13; loop invariant a + b >= 3*i - 2*n - 14; loop invariant a + b >= 3*i - 2*n - 15; loop invariant a + b >= 3*i - 2*n - 16; loop invariant a + b >= 3*i - 2*n - 17; loop invariant a + b >= 3*i - 2*n - 18; loop invariant a + b >= 3*i - 2*n - 19; loop invariant a + b >= 3*i - 2*n - 20; loop invariant a + b >= 3*i - 2*n - 21; loop invariant a + b >= 3*i - 2*n - 22; loop invariant a + b >= 3*i - 2*n - 23; loop invariant a + b >= 3*i - 2*n - 24; loop invariant a + b >= 3*i - 2*n - 25; loop invariant a + b >= 3*i - 2*n - 26; loop invariant a + b >= 3*i - 2*n - 27; loop invariant a + b >= 3*i - 2*n - 28; loop invariant a + b >= 3*i - 2*n - 29; loop invariant a + b >= 3*i - 2*n - 30; loop invariant a + b >= 3*i - 2*n - 31; loop invariant a + b >= 3*i - 2*n - 32; loop invariant a + b >= 3*i - 2*n - 33; loop invariant a + b >= 3*i - 2*n - 34; loop invariant a + b >= 3*i - 2*n - 35; loop invariant a + b >= 3*i - 2*n - 36; loop invariant a + b >= 3*i - 2*n - 37; loop invariant a + b >= 3*i - 2*n - 38; loop invariant a + b >= 3*i - 2*n - 39; loop invariant a + b >= 3*i - 2*n - 40; loop invariant a + b >= 3*i - 2*n - 41; loop invariant a + b >= 3*i - 2*n - 42; loop invariant a + b >= 3*i - 2*n - 43; loop invariant a + b >= 3*i - 2*n - 44; loop invariant a + b >= 3*i - 2*n - 45; loop invariant a + b >= 3*i - 2*n - 46; loop invariant a + b >= 3*i - 2*n - 47; loop invariant a + b >= 3*i - 2*n - 48; loop invariant a + b >= 3*i - 2*n - 49; loop invariant a + b >= 3*i - 2*n - 50; loop invariant a + b >= 3*i - 2*n - 51; loop invariant a + b >= 3*i - 2*n - 52;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n; loop invariant a >= 0; loop invariant b >= 0; loop invariant a + b <= 3*n; loop invariant a + b >= 0; loop invariant a + b >= 2*i; loop invariant a + b >= 3*i - 2*n; loop invariant a + b >= 3*i - 2*n - 1; loop invariant a + b >= 3*i - 2*n - 2; loop invariant a + b >= 3*i - 2*n - 3; loop invariant a + b >= 3*i - 2*n - 4; loop invariant a + b >= 3*i - 2*n - 5; loop invariant a + b >= 3*i - 2*n - 6; loop invariant a + b >= 3*i - 2*n - 7; loop invariant a + b >= 3*i - 2*n - 8; loop invariant a + b >= 3*i - 2*n - 9; loop invariant a + b >= 3*i - 2*n - 10; loop invariant a + b >= 3*i - 2*n - 11; loop invariant a + b >= 3*i - 2*n - 12; loop invariant a + b >= 3*i - 2*n - 13; loop invariant a + b >= 3*i - 2*n - 14; loop invariant a + b >= 3*i - 2*n - 15; loop invariant a + b >= 3*i - 2*n - 16; loop invariant a + b >= 3*i - 2*n - 17; loop invariant a + b >= 3*i - 2*n - 18; loop invariant a + b >= 3*i - 2*n - 19; loop invariant a + b >= 3*i - 2*n - 20; loop invariant a + b >= 3*i - 2*n - 21; loop invariant a + b >= 3*i - 2*n - 22; loop invariant a + b >= 3*i - 2*n - 23; loop invariant a + b >= 3*i - 2*n - 24; loop invariant a + b >= 3*i - 2*n - 25; loop invariant a + b >= 3*i - 2*n - 26; loop invariant a + b >= 3*i - 2*n - 27; loop invariant a + b >= 3*i - 2*n - 28; loop invariant a + b >= 3*i - 2*n - 29; loop invariant a + b >= 3*i - 2*n - 30; loop invariant a + b >= 3*i - 2*n - 31; loop invariant a + b >= 3*i - 2*n - 32; loop invariant a + b >= 3*i - 2*n - 33; loop invariant a + b >= 3*i - 2*n - 34; loop invariant a + b >= 3*i - 2*n - 35; loop invariant a + b >= 3*i - 2*n - 36; loop invariant a + b >= 3*i - 2*n - 37; loop invariant a + b >= 3*i - 2*n - 38; loop invariant a + b >= 3*i - 2*n - 39; loop invariant a + b >= 3*i - 2*n - 40; loop invariant a + b >= 3*i - 2*n - 41; loop invariant a + b >= 3*i - 2*n - 42; loop invariant a + b >= 3*i - 2*n - 43; loop invariant a + b >= 3*i - 2*n - 44; loop invariant a + b >= 3*i - 2*n - 45; loop invariant a + b >= 3*i - 2*n - 46; loop invariant a + b >= 3*i - 2*n - 47; loop invariant a + b >= 3*i - 2*n - 48; loop invariant a + b >= 3*i - 2*n - 49; loop invariant a + b >= 3*i - 2*n - 50; loop invariant a + b >= 3*i - 2*n - 51; loop invariant a + b >= 3*i - 2*n - 52;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b = 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b == 3*i;\nloop invariant (unknown_int() ==> a+2*b == 3*i) && (!unknown_int() ==> a+2*b == 3*i);\nloop invariant (unknown_int() ==> a >= 2*i) && (!unknown_int() ==> a >= 2*i);\nloop invariant (unknown_int() ==> b >= i) && (!unknown_int() ==> b >= i);\nloop invariant (unknown_int() ==> a <= 3*i) && (!unknown_int() ==> a <= 3*i);\nloop invariant (unknown_int() ==> b <= 3*i) && (!unknown_int() ==> b <= 3*i);\nloop invariant (unknown_int() ==> a >= 0) && (!unknown_int() ==> a >= 0);\nloop invariant (unknown_int() ==> b >= 0) && (!unknown_int() ==> b >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a+b == 3*i;\n\n\n\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a >= 0 ==> i <= a/3;\nloop invariant b >= 0 ==> i <= b/3;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant a >= 0 ==> b <= 2*n - a;\nloop invariant b >= 0 ==> a <= 2*n - b;\nloop invariant a >= 0 ==> a % 3 == 0;\nloop invariant b >= 0 ==> b % 3 == 0;\nloop invariant i >= 0 ==> a % 3 == 0;\nloop invariant i >= 0 ==> b % 3 == 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\nloop invariant i >= 0 ==> a <= 2*i;\nloop invariant i >= 0 ==> b <= 2*i;\nloop invariant i >= 0 ==> a >= 0;\nloop invariant i >= 0 ==> b >= 0;\nloop invariant i >= 0 ==> a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2*n;\nloop invariant i3: 0 <= b <= 2*n;\nloop invariant i4: a + b == 3*i;\n\n\nloop invariant i7: i >= 0 ==> a + b == 3*i;\nloop invariant i8: i >= 0 ==> a <= 2*i;\nloop invariant i9: i >= 0 ==> b <= 2*i;\n\n\n\n\n\n\nloop invariant i16: i >= 0 ==> a >= 0;\nloop invariant i17: i >= 0 ==> b >= 0;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b <= 3*n;\nloop invariant i5: a >= i;\nloop invariant i6: a - b <= 2*i;\nloop invariant i7: b - a <= i;\nloop invariant i8: a + b >= i + i;\nloop invariant i9: a + b >= i;\nloop invariant i10: a >= 0;\nloop invariant i11: b >= 0;\nloop invariant i12: a <= 3*n;\nloop invariant i13: b <= 3*n;\nloop invariant i14: a+b == 3*i;\nloop invariant i15: a == 3*i + 2*unknown_int()*(i+1)/2;\nloop invariant i16: b == 3*i + unknown_int()*(i+1)/2;\nloop invariant i17: a + b == 3 * i;\nloop invariant i18: a <= 2 * i;\nloop invariant i19: b <= i;\nloop invariant i20: a + b == 3 * i ==> a + b == 3 * n;\nloop invariant i21: a <= 2 * i ==> a <= 2 * n;\nloop invariant i22: b <= i ==> b <= n;\nloop invariant i23: a + b >= 3 * i ==> a + b >= 3 * n;\nloop invariant i24: a >= 2 * i ==> a >= 2 * n;\nloop invariant i25: b >= i ==> b >= n;\nloop invariant i26: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i27: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i28: b <= i ==> b <= n ==> b <= n;\nloop invariant i29: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i30: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i31: b >= i ==> b >= n ==> b >= n;\nloop invariant i32: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i33: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i34: b <= i ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i35: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i36: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i37: b >= i ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i38: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i39: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i40: b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i41: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i42: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i43: b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i44: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i45: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i46: b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i47: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i48: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i49: b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i50: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i51: 0 <= a <= 2*n;\nloop invariant i52: 0 <= b <= 2*n;\nloop invariant i53: (if i < n, then a + b <= 3*(i + 1));\nloop invariant i54: (if i >= n, then a + b == 3*n);\nloop invariant i55: a + b >= 2*n;\nloop invariant i56: (if i < n, then a + b >= 2*(i + 1));\nloop invariant i57: a + b >= 0;\nloop invariant i58: a <= 2*n;\nloop invariant i59: b <= 2*n;\nloop invariant i60: a + b >= 3*i;\nloop invariant i61: a + b <= 3 * n;\nloop invariant i62: a + b >= 2 * i;\nloop invariant i63: a >= b / 2;\nloop invariant i64: b >= a / 2;\nloop invariant i65: a <= 2 * n;\nloop invariant i66: b <= 2 * n;\nloop invariant i67: i <= n;\nloop invariant i68: i >= 0;\nloop invariant i69: a <= 3 * n - b;\nloop invariant i70: a <= 2 * i + b;\nloop invariant i71: a >= b;\nloop invariant i72: b >= a;\nloop invariant i73: a + b = 3*i;\nloop invariant i74: \\exists int j; i = (j + 1) * j / 2;\nloop invariant i75: a <= 2*b;\nloop invariant i76: (unknown_int() ==> (a >= b));\nloop invariant i77: (!unknown_int() ==> (a <= b));\nloop invariant i78: (unknown_int() ==> (a >= i));\nloop invariant i79: (!unknown_int() ==> (a <= i));\nloop invariant i80: (unknown_int() ==> (b >= i));\nloop invariant i81: (!unknown_int() ==> (b <= i));\nloop invariant i82: (unknown_int() ==> (a <= a+1));\nloop invariant i83: (!unknown_int() ==> (a <= a+2));\nloop invariant i84: (unknown_int() ==> (b <= b+2));\nloop invariant i85: (!unknown_int() ==> (b <= b+1));\nloop invariant i86: (unknown_int() ==> (a <= b+2));\nloop invariant i87: (!unknown_int() ==> (a <= b+1));\nloop invariant i88: (unknown_int() ==> (b <= a+1));\nloop invariant i89: (!unknown_int() ==> (b <= a+2));\nloop invariant i90: (unknown_int() ==> (a <= a+3));\nloop invariant i91: (!unknown_int() ==> (a <= a+4));\nloop invariant i92: (unknown_int() ==> (b <= b+3));\nloop invariant i93: (!unknown_int() ==> (b <= b+4));\nloop invariant i94: (unknown_int() ==> (a <= a+3*i));\nloop invariant i95: (!unknown_int() ==> (a <= a+2*i));\nloop invariant i96: (unknown_int() ==> (b <= b+3*i));\nloop invariant i97: (!unknown_int() ==> (b <= b+2*i));\nloop invariant i98: (unknown_int() ==> (a <= a+3*n));\nloop invariant i99: (!unknown_int() ==> (a <= a+4*n));\nloop invariant i100: (unknown_int() ==> (b <= b+3*n));\nloop invariant i101: (!unknown_int() ==> (b <= b+4*n));\nloop invariant i102: (unknown_int() ==> (a <= a+3*i+3*n));\nloop invariant i103: (!unknown_int() ==> (a <= a+2*i+4*n));\nloop invariant i104: (unknown_int() ==> (b <= b+3*i+3*n));\nloop invariant i105: (!unknown_int() ==> (b <= b+2*i+4*n));\nloop invariant i106: 0 <= a <= n;\nloop invariant i107: a + b <= 3*(i + 1);\nloop invariant i108: 0 <= a <= 2 * n;\nloop invariant i109: 0 <= b <= 2 * n;\nloop invariant i110: a >= 2 * i;\nloop invariant i111: b >= i;\nloop invariant i112: a + b <= 3 * i;\nloop invariant i113: a + b >= 3 * (i + 1);\nloop invariant i114: (a >= 0) && (a <= 3*n);\nloop invariant i115: (b >= 0) && (b <= 3*n);\nloop invariant i116: (a+b >= 0) && (a+b <= 6*n);\nloop invariant i117: (a+b <= 3*n) ==> (a+b == 3*n);\nloop invariant i118: 0 <= i <= n; loop invariant a >= 0; loop invariant b >= 0; loop invariant a + b <= 3*n; loop invariant a + b >= 0; loop invariant a + b >= 2*i; loop invariant a + b >= 3*i - 2*n; loop invariant a + b >= 3*i - 2*n - 1; loop invariant a + b >= 3*i - 2*n - 2; loop invariant a + b >= 3*i - 2*n - 3; loop invariant a + b >= 3*i - 2*n - 4; loop invariant a + b >= 3*i - 2*n - 5; loop invariant a + b >= 3*i - 2*n - 6; loop invariant a + b >= 3*i - 2*n - 7; loop invariant a + b >= 3*i - 2*n - 8; loop invariant a + b >= 3*i - 2*n - 9; loop invariant a + b >= 3*i - 2*n - 10; loop invariant a + b >= 3*i - 2*n - 11; loop invariant a + b >= 3*i - 2*n - 12; loop invariant a + b >= 3*i - 2*n - 13; loop invariant a + b >= 3*i - 2*n - 14; loop invariant a + b >= 3*i - 2*n - 15; loop invariant a + b >= 3*i - 2*n - 16; loop invariant a + b >= 3*i - 2*n - 17; loop invariant a + b >= 3*i - 2*n - 18; loop invariant a + b >= 3*i - 2*n - 19; loop invariant a + b >= 3*i - 2*n - 20; loop invariant a + b >= 3*i - 2*n - 21; loop invariant a + b >= 3*i - 2*n - 22; loop invariant a + b >= 3*i - 2*n - 23; loop invariant a + b >= 3*i - 2*n - 24; loop invariant a + b >= 3*i - 2*n - 25; loop invariant a + b >= 3*i - 2*n - 26; loop invariant a + b >= 3*i - 2*n - 27; loop invariant a + b >= 3*i - 2*n - 28; loop invariant a + b >= 3*i - 2*n - 29; loop invariant a + b >= 3*i - 2*n - 30; loop invariant a + b >= 3*i - 2*n - 31; loop invariant a + b >= 3*i - 2*n - 32; loop invariant a + b >= 3*i - 2*n - 33; loop invariant a + b >= 3*i - 2*n - 34; loop invariant a + b >= 3*i - 2*n - 35; loop invariant a + b >= 3*i - 2*n - 36; loop invariant a + b >= 3*i - 2*n - 37; loop invariant a + b >= 3*i - 2*n - 38; loop invariant a + b >= 3*i - 2*n - 39; loop invariant a + b >= 3*i - 2*n - 40; loop invariant a + b >= 3*i - 2*n - 41; loop invariant a + b >= 3*i - 2*n - 42; loop invariant a + b >= 3*i - 2*n - 43; loop invariant a + b >= 3*i - 2*n - 44; loop invariant a + b >= 3*i - 2*n - 45; loop invariant a + b >= 3*i - 2*n - 46; loop invariant a + b >= 3*i - 2*n - 47; loop invariant a + b >= 3*i - 2*n - 48; loop invariant a + b >= 3*i - 2*n - 49; loop invariant a + b >= 3*i - 2*n - 50; loop invariant a + b >= 3*i - 2*n - 51; loop invariant a + b >= 3*i - 2*n - 52;\nloop invariant i119: a+b = 3*i;\nloop invariant i120: (unknown_int() ==> a+2*b == 3*i) && (!unknown_int() ==> a+2*b == 3*i);\nloop invariant i121: (unknown_int() ==> a >= 2*i) && (!unknown_int() ==> a >= 2*i);\nloop invariant i122: (unknown_int() ==> b >= i) && (!unknown_int() ==> b >= i);\nloop invariant i123: (unknown_int() ==> a <= 3*i) && (!unknown_int() ==> a <= 3*i);\nloop invariant i124: (unknown_int() ==> b <= 3*i) && (!unknown_int() ==> b <= 3*i);\nloop invariant i125: (unknown_int() ==> a >= 0) && (!unknown_int() ==> a >= 0);\nloop invariant i126: (unknown_int() ==> b >= 0) && (!unknown_int() ==> b >= 0);\nloop invariant i127: a + b == 3*i;\nloop invariant i128: a >= 0 ==> i <= a/3;\nloop invariant i129: b >= 0 ==> i <= b/3;\nloop invariant i130: i >= 0 ==> a + b == 3*i;\nloop invariant i131: i >= 0 ==> a <= 2*i;\nloop invariant i132: i >= 0 ==> b <= 2*i;\nloop invariant i133: a >= 0 ==> b <= 2*n - a;\nloop invariant i134: b >= 0 ==> a <= 2*n - b;\nloop invariant i135: a >= 0 ==> a % 3 == 0;\nloop invariant i136: b >= 0 ==> b % 3 == 0;\nloop invariant i137: i >= 0 ==> a % 3 == 0;\nloop invariant i138: i >= 0 ==> b % 3 == 0;\nloop invariant i139: i >= 0 ==> a >= 0;\nloop invariant i140: i >= 0 ==> b >= 0;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 59,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b <= 3*n;\nloop invariant i5: a >= i;\nloop invariant i6: a - b <= 2*i;\nloop invariant i7: b - a <= i;\nloop invariant i8: a + b >= i + i;\nloop invariant i9: a + b >= i;\nloop invariant i10: a >= 0;\nloop invariant i11: b >= 0;\nloop invariant i12: a <= 3*n;\nloop invariant i13: b <= 3*n;\nloop invariant i14: a+b == 3*i;\n\n\nloop invariant i17: a + b == 3 * i;\nloop invariant i18: a <= 2 * i;\n\n\nloop invariant i21: a <= 2 * i ==> a <= 2 * n;\nloop invariant i22: b <= i ==> b <= n;\n\n\n\nloop invariant i26: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i27: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i28: b <= i ==> b <= n ==> b <= n;\nloop invariant i29: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i30: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i31: b >= i ==> b >= n ==> b >= n;\nloop invariant i32: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i33: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i34: b <= i ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i35: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i36: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i37: b >= i ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i38: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i39: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i40: b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i41: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i42: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i43: b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i44: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i45: a <= 2 * i ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n ==> a <= 2 * n;\nloop invariant i46: b <= i ==> b <= n ==> b <= n ==> b <= n ==> b <= n ==> b <= n;\nloop invariant i47: a + b >= 3 * i ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n ==> a + b >= 3 * n;\nloop invariant i48: a >= 2 * i ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n ==> a >= 2 * n;\nloop invariant i49: b >= i ==> b >= n ==> b >= n ==> b >= n ==> b >= n ==> b >= n;\nloop invariant i50: a + b == 3 * i ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n ==> a + b == 3 * n;\nloop invariant i51: 0 <= a <= 2*n;\nloop invariant i52: 0 <= b <= 2*n;\n\n\n\n\nloop invariant i57: a + b >= 0;\nloop invariant i58: a <= 2*n;\nloop invariant i59: b <= 2*n;\nloop invariant i60: a + b >= 3*i;\nloop invariant i61: a + b <= 3 * n;\nloop invariant i62: a + b >= 2 * i;\nloop invariant i63: a >= b / 2;\nloop invariant i64: b >= a / 2;\nloop invariant i65: a <= 2 * n;\nloop invariant i66: b <= 2 * n;\nloop invariant i67: i <= n;\nloop invariant i68: i >= 0;\nloop invariant i69: a <= 3 * n - b;\nloop invariant i70: a <= 2 * i + b;\n\n\n\n\nloop invariant i75: a <= 2*b;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i107: a + b <= 3*(i + 1);\nloop invariant i108: 0 <= a <= 2 * n;\nloop invariant i109: 0 <= b <= 2 * n;\n\nloop invariant i111: b >= i;\nloop invariant i112: a + b <= 3 * i;\n\nloop invariant i114: (a >= 0) && (a <= 3*n);\nloop invariant i115: (b >= 0) && (b <= 3*n);\nloop invariant i116: (a+b >= 0) && (a+b <= 6*n);\n\nloop invariant i118: 0 <= i <= n; loop invariant a >= 0; loop invariant b >= 0; loop invariant a + b <= 3*n; loop invariant a + b >= 0; loop invariant a + b >= 2*i; loop invariant a + b >= 3*i - 2*n; loop invariant a + b >= 3*i - 2*n - 1; loop invariant a + b >= 3*i - 2*n - 2; loop invariant a + b >= 3*i - 2*n - 3; loop invariant a + b >= 3*i - 2*n - 4; loop invariant a + b >= 3*i - 2*n - 5; loop invariant a + b >= 3*i - 2*n - 6; loop invariant a + b >= 3*i - 2*n - 7; loop invariant a + b >= 3*i - 2*n - 8; loop invariant a + b >= 3*i - 2*n - 9; loop invariant a + b >= 3*i - 2*n - 10; loop invariant a + b >= 3*i - 2*n - 11; loop invariant a + b >= 3*i - 2*n - 12; loop invariant a + b >= 3*i - 2*n - 13; loop invariant a + b >= 3*i - 2*n - 14; loop invariant a + b >= 3*i - 2*n - 15; loop invariant a + b >= 3*i - 2*n - 16; loop invariant a + b >= 3*i - 2*n - 17; loop invariant a + b >= 3*i - 2*n - 18; loop invariant a + b >= 3*i - 2*n - 19; loop invariant a + b >= 3*i - 2*n - 20; loop invariant a + b >= 3*i - 2*n - 21; loop invariant a + b >= 3*i - 2*n - 22; loop invariant a + b >= 3*i - 2*n - 23; loop invariant a + b >= 3*i - 2*n - 24; loop invariant a + b >= 3*i - 2*n - 25; loop invariant a + b >= 3*i - 2*n - 26; loop invariant a + b >= 3*i - 2*n - 27; loop invariant a + b >= 3*i - 2*n - 28; loop invariant a + b >= 3*i - 2*n - 29; loop invariant a + b >= 3*i - 2*n - 30; loop invariant a + b >= 3*i - 2*n - 31; loop invariant a + b >= 3*i - 2*n - 32; loop invariant a + b >= 3*i - 2*n - 33; loop invariant a + b >= 3*i - 2*n - 34; loop invariant a + b >= 3*i - 2*n - 35; loop invariant a + b >= 3*i - 2*n - 36; loop invariant a + b >= 3*i - 2*n - 37; loop invariant a + b >= 3*i - 2*n - 38; loop invariant a + b >= 3*i - 2*n - 39; loop invariant a + b >= 3*i - 2*n - 40; loop invariant a + b >= 3*i - 2*n - 41; loop invariant a + b >= 3*i - 2*n - 42; loop invariant a + b >= 3*i - 2*n - 43; loop invariant a + b >= 3*i - 2*n - 44; loop invariant a + b >= 3*i - 2*n - 45; loop invariant a + b >= 3*i - 2*n - 46; loop invariant a + b >= 3*i - 2*n - 47; loop invariant a + b >= 3*i - 2*n - 48; loop invariant a + b >= 3*i - 2*n - 49; loop invariant a + b >= 3*i - 2*n - 50; loop invariant a + b >= 3*i - 2*n - 51; loop invariant a + b >= 3*i - 2*n - 52;\n\n\n\n\n\n\n\n\nloop invariant i127: a + b == 3*i;\n\n\nloop invariant i130: i >= 0 ==> a + b == 3*i;\nloop invariant i131: i >= 0 ==> a <= 2*i;\nloop invariant i132: i >= 0 ==> b <= 2*i;\n\n\n\n\n\n\nloop invariant i139: i >= 0 ==> a >= 0;\nloop invariant i140: i >= 0 ==> b >= 0;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 3,
        "success_count": 3,
        "failure_count": 0,
        "success_rate": 1.0
    }
}