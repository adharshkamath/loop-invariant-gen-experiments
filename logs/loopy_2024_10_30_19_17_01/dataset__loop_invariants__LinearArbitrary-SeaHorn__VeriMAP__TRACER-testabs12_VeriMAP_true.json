{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  while (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (i + unknown_uint());\nloop invariant count >= (i + 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant i <= count <= 100 + i;\nloop invariant i < 100 ==> count > 0;\nloop invariant i < 100 ==> count >= 100;\nloop invariant i < 100 ==> count < 100 + i;\nloop invariant i < 100 ==> count >= 100 + i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= count <= 100000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 100000;\nloop invariant i <= count;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= count <= 100;\nloop invariant !(i > 100 || count < 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (i + 1);\nloop invariant i == (count - 1);\nloop invariant i < 100;\nloop invariant count < 101;\nloop invariant i >= 0;\nloop invariant count > 0;\nloop invariant i >= 0 ==> count >= 1;\nloop invariant count >= 1 ==> i >= 0;\nloop invariant i >= 0 ==> count > 0;\nloop invariant count > 0 ==> i >= 0;\nloop invariant i >= 0 ==> i < 100;\nloop invariant i < 100 ==> i >= 0;\nloop invariant count >= 1 ==> count < 101;\nloop invariant count < 101 ==> count >= 1;\nloop invariant i >= 0 ==> count >= 0;\nloop invariant count >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> i >= 0;\nloop invariant i >= 0 ==> i == (count - 1);\nloop invariant i == (count - 1) ==> i >= 0;\nloop invariant i >= 0 ==> i < 100;\nloop invariant i < 100 ==> i == (count - 1);\nloop invariant i >= 0 ==> count < 101;\nloop invariant count < 101 ==> i >= 0;\nloop invariant i >= 0 ==> count > 0;\nloop invariant count > 0 ==> i >= 0;\nloop invariant i >= 0 ==> i < 100;\nloop invariant i < 100 ==> count > 0;\nloop invariant count >= 1 ==> count < 101;\nloop invariant count < 101 ==> count >= 1;\nloop invariant i >= 0 ==> count >= 0;\nloop invariant count >= 0 ==> count > 0;\nloop invariant i >= 0 ==> i == (count - 1);\nloop invariant i == (count - 1) ==> i >= 0;\nloop invariant i >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> i == (count - 1);\nloop invariant i == (count - 1) ==> count >= 0;\nloop invariant count >= 1 ==> i >= 0;\nloop invariant i >= 0 ==> count >= 1;\nloop invariant count >= 1 ==> i < 100;\nloop invariant i < 100 ==> count >= 1;\nloop invariant count >= 1 ==> count < 101;\nloop invariant count < 101 ==> count >= 1;\nloop invariant count >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> count > 0;\nloop invariant count > 0 ==> i >= 0;\nloop invariant i >= 0 ==> count < 101;\nloop invariant count < 101 ==> count > 0;\nloop invariant i >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> i == (count - 1);\nloop invariant i == (count - 1) ==> count >= 0;\nloop invariant count >= 1 ==> i >= 0;\nloop invariant i >= 0 ==> count >= 1;\nloop invariant count >= 1 ==> i < 100;\nloop invariant i < 100 ==> count >= 1;\nloop invariant count >= 1 ==> count < 101;\nloop invariant count < 101 ==> count >= 1;\nloop invariant count >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> count > 0;\nloop invariant count > 0 ==> i >= 0;\nloop invariant i >= 0 ==> count < 101;\nloop invariant count < 101 ==> count > 0;\nloop invariant i >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count = count' + 1;\nloop invariant i' <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count == (unknown_uint() + i);\n*/\n```",
            "```\n/*@\nloop invariant count >= 0;\nloop invariant i >= 0;\nloop invariant i < 100;\nloop invariant count == i + 1;\nloop invariant i <= count - 1;\nloop invariant count <= 100;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (i + (i*(i-1))/2);\nloop invariant !(i > 100 || count < 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 100;\nloop invariant i <= count;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant !(i > 100 || count < 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (1 + i);\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant count = 1 + i;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (i + unknown_uint());\nloop invariant count >= (i + 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\nloop invariant i4: count >= (i + 0);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant i <= count <= 100 + i;\nloop invariant i < 100 ==> count > 0;\nloop invariant i < 100 ==> count >= 100;\nloop invariant i < 100 ==> count < 100 + i;\nloop invariant i < 100 ==> count >= 100 + i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\n\n\n\n\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= count <= 100000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 100000;\nloop invariant i <= count;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\nloop invariant count <= i + 100;\nloop invariant count >= i + 1;\nloop invariant count >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: i <= 100;\nloop invariant i4: count >= 0;\n\nloop invariant i6: i <= count;\nloop invariant i7: count >= i;\n\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= count <= 100;\nloop invariant !(i > 100 || count < 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\n\nloop invariant i3: !(i > 100 || count < 0);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (i + 1);\nloop invariant i == (count - 1);\nloop invariant i < 100;\nloop invariant count < 101;\nloop invariant i >= 0;\nloop invariant count > 0;\nloop invariant i >= 0 ==> count >= 1;\nloop invariant count >= 1 ==> i >= 0;\nloop invariant i >= 0 ==> count > 0;\nloop invariant count > 0 ==> i >= 0;\nloop invariant i >= 0 ==> i < 100;\nloop invariant i < 100 ==> i >= 0;\nloop invariant count >= 1 ==> count < 101;\nloop invariant count < 101 ==> count >= 1;\nloop invariant i >= 0 ==> count >= 0;\nloop invariant count >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> i >= 0;\nloop invariant i >= 0 ==> i == (count - 1);\nloop invariant i == (count - 1) ==> i >= 0;\nloop invariant i >= 0 ==> i < 100;\nloop invariant i < 100 ==> i == (count - 1);\nloop invariant i >= 0 ==> count < 101;\nloop invariant count < 101 ==> i >= 0;\nloop invariant i >= 0 ==> count > 0;\nloop invariant count > 0 ==> i >= 0;\nloop invariant i >= 0 ==> i < 100;\nloop invariant i < 100 ==> count > 0;\nloop invariant count >= 1 ==> count < 101;\nloop invariant count < 101 ==> count >= 1;\nloop invariant i >= 0 ==> count >= 0;\nloop invariant count >= 0 ==> count > 0;\nloop invariant i >= 0 ==> i == (count - 1);\nloop invariant i == (count - 1) ==> i >= 0;\nloop invariant i >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> i == (count - 1);\nloop invariant i == (count - 1) ==> count >= 0;\nloop invariant count >= 1 ==> i >= 0;\nloop invariant i >= 0 ==> count >= 1;\nloop invariant count >= 1 ==> i < 100;\nloop invariant i < 100 ==> count >= 1;\nloop invariant count >= 1 ==> count < 101;\nloop invariant count < 101 ==> count >= 1;\nloop invariant count >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> count > 0;\nloop invariant count > 0 ==> i >= 0;\nloop invariant i >= 0 ==> count < 101;\nloop invariant count < 101 ==> count > 0;\nloop invariant i >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> i == (count - 1);\nloop invariant i == (count - 1) ==> count >= 0;\nloop invariant count >= 1 ==> i >= 0;\nloop invariant i >= 0 ==> count >= 1;\nloop invariant count >= 1 ==> i < 100;\nloop invariant i < 100 ==> count >= 1;\nloop invariant count >= 1 ==> count < 101;\nloop invariant count < 101 ==> count >= 1;\nloop invariant count >= 0 ==> i >= 0;\nloop invariant i >= 0 ==> count > 0;\nloop invariant count > 0 ==> i >= 0;\nloop invariant i >= 0 ==> count < 101;\nloop invariant count < 101 ==> count > 0;\nloop invariant i >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\nloop invariant count >= 0 ==> count == (i + 1);\nloop invariant count == (i + 1) ==> count >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\n\n\n\nloop invariant i7: i >= 0;\n\n\nloop invariant i10: count >= 1 ==> i >= 0;\n\nloop invariant i12: count > 0 ==> i >= 0;\n\nloop invariant i14: i < 100 ==> i >= 0;\n\n\nloop invariant i17: i >= 0 ==> count >= 0;\nloop invariant i18: count >= 0 ==> i >= 0;\n\nloop invariant i20: count == (i + 1) ==> i >= 0;\n\nloop invariant i22: i == (count - 1) ==> i >= 0;\n\n\nloop invariant i25: count < 101 ==> i >= 0;\n\n\nloop invariant i28: count == (i + 1) ==> count >= 0;\n\n\nloop invariant i31: i == (count - 1) ==> count >= 0;\n\n\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count = count' + 1;\nloop invariant i' <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\n\nloop invariant i3: i' <= i;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count == (unknown_uint() + i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant count >= 0;\nloop invariant i >= 0;\nloop invariant i < 100;\nloop invariant count == i + 1;\nloop invariant i <= count - 1;\nloop invariant count <= 100;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: count >= 0;\nloop invariant i2: i >= 0;\n\n\n\n\nloop invariant i7: i <= 100;\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (i + (i*(i-1))/2);\nloop invariant !(i > 100 || count < 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\nloop invariant i4: !(i > 100 || count < 0);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 100;\nloop invariant i <= count;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\nloop invariant i4: i <= count;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant !(i > 100 || count < 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 100;\nloop invariant i3: count >= 0;\nloop invariant i4: !(i > 100 || count < 0);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (1 + i);\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count <= 10000;\nloop invariant i >= 0;\nloop invariant i <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\nloop invariant i4: i >= 0;\nloop invariant i5: i <= 100;\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant count = 1 + i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\n\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\nloop invariant i3: count == (i + unknown_uint());\nloop invariant i4: count >= (i + 0);\nloop invariant i5: i <= count <= 100 + i;\nloop invariant i6: i < 100 ==> count > 0;\nloop invariant i7: i < 100 ==> count >= 100;\nloop invariant i8: i < 100 ==> count < 100 + i;\nloop invariant i9: i < 100 ==> count >= 100 + i - 1;\nloop invariant i10: 0 <= count <= 100000;\nloop invariant i11: i >= 0;\nloop invariant i12: i <= 100;\nloop invariant i13: count <= 100000;\nloop invariant i14: i <= count;\nloop invariant i15: count >= i;\nloop invariant i16: count <= i + 100;\nloop invariant i17: count >= i + 1;\nloop invariant i18: 0 <= count <= 100;\nloop invariant i19: !(i > 100 || count < 0);\nloop invariant i20: count == (i + 1);\nloop invariant i21: i == (count - 1);\nloop invariant i22: i < 100;\nloop invariant i23: count < 101;\nloop invariant i24: count > 0;\nloop invariant i25: i >= 0 ==> count >= 1;\nloop invariant i26: count >= 1 ==> i >= 0;\nloop invariant i27: i >= 0 ==> count > 0;\nloop invariant i28: count > 0 ==> i >= 0;\nloop invariant i29: i >= 0 ==> i < 100;\nloop invariant i30: i < 100 ==> i >= 0;\nloop invariant i31: count >= 1 ==> count < 101;\nloop invariant i32: count < 101 ==> count >= 1;\nloop invariant i33: i >= 0 ==> count >= 0;\nloop invariant i34: count >= 0 ==> i >= 0;\nloop invariant i35: i >= 0 ==> count == (i + 1);\nloop invariant i36: count == (i + 1) ==> i >= 0;\nloop invariant i37: i >= 0 ==> i == (count - 1);\nloop invariant i38: i == (count - 1) ==> i >= 0;\nloop invariant i39: i < 100 ==> i == (count - 1);\nloop invariant i40: i >= 0 ==> count < 101;\nloop invariant i41: count < 101 ==> i >= 0;\nloop invariant i42: count >= 0 ==> count > 0;\nloop invariant i43: count == (i + 1) ==> count >= 0;\nloop invariant i44: count >= 0 ==> count == (i + 1);\nloop invariant i45: count >= 0 ==> i == (count - 1);\nloop invariant i46: i == (count - 1) ==> count >= 0;\nloop invariant i47: count >= 1 ==> i < 100;\nloop invariant i48: i < 100 ==> count >= 1;\nloop invariant i49: count < 101 ==> count > 0;\nloop invariant i50: count = count' + 1;\nloop invariant i51: i' <= i;\nloop invariant i52: count == (unknown_uint() + i);\nloop invariant i53: count == i + 1;\nloop invariant i54: i <= count - 1;\nloop invariant i55: count <= 100;\nloop invariant i56: count >= 1;\nloop invariant i57: count == (i + (i*(i-1))/2);\nloop invariant i58: count == (1 + i);\nloop invariant i59: count <= 10000;\nloop invariant i60: 1 <= i <= 100;\nloop invariant i61: count = 1 + i;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\nloop invariant i4: count >= (i + 0);\nloop invariant i5: i <= count <= 100 + i;\nloop invariant i6: i < 100 ==> count > 0;\nloop invariant i7: i < 100 ==> count >= 100;\nloop invariant i8: i < 100 ==> count < 100 + i;\nloop invariant i9: i < 100 ==> count >= 100 + i - 1;\nloop invariant i10: 0 <= count <= 100000;\nloop invariant i11: i >= 0;\nloop invariant i12: i <= 100;\nloop invariant i13: count <= 100000;\nloop invariant i14: i <= count;\nloop invariant i15: count >= i;\nloop invariant i16: count <= i + 100;\nloop invariant i17: count >= i + 1;\nloop invariant i18: 0 <= count <= 100;\nloop invariant i19: !(i > 100 || count < 0);\nloop invariant i20: count == (i + 1);\nloop invariant i21: i == (count - 1);\nloop invariant i22: i < 100;\nloop invariant i23: count < 101;\nloop invariant i24: count > 0;\nloop invariant i25: i >= 0 ==> count >= 1;\nloop invariant i26: count >= 1 ==> i >= 0;\nloop invariant i27: i >= 0 ==> count > 0;\nloop invariant i28: count > 0 ==> i >= 0;\nloop invariant i29: i >= 0 ==> i < 100;\nloop invariant i30: i < 100 ==> i >= 0;\nloop invariant i31: count >= 1 ==> count < 101;\nloop invariant i32: count < 101 ==> count >= 1;\nloop invariant i33: i >= 0 ==> count >= 0;\nloop invariant i34: count >= 0 ==> i >= 0;\nloop invariant i35: i >= 0 ==> count == (i + 1);\nloop invariant i36: count == (i + 1) ==> i >= 0;\nloop invariant i37: i >= 0 ==> i == (count - 1);\nloop invariant i38: i == (count - 1) ==> i >= 0;\nloop invariant i39: i < 100 ==> i == (count - 1);\nloop invariant i40: i >= 0 ==> count < 101;\nloop invariant i41: count < 101 ==> i >= 0;\nloop invariant i42: count >= 0 ==> count > 0;\nloop invariant i43: count == (i + 1) ==> count >= 0;\nloop invariant i44: count >= 0 ==> count == (i + 1);\nloop invariant i45: count >= 0 ==> i == (count - 1);\nloop invariant i46: i == (count - 1) ==> count >= 0;\nloop invariant i47: count >= 1 ==> i < 100;\nloop invariant i48: i < 100 ==> count >= 1;\nloop invariant i49: count < 101 ==> count > 0;\n\nloop invariant i51: i' <= i;\nloop invariant i52: count == (unknown_uint() + i);\nloop invariant i53: count == i + 1;\nloop invariant i54: i <= count - 1;\nloop invariant i55: count <= 100;\nloop invariant i56: count >= 1;\nloop invariant i57: count == (i + (i*(i-1))/2);\nloop invariant i58: count == (1 + i);\nloop invariant i59: count <= 10000;\nloop invariant i60: 1 <= i <= 100;\nloop invariant i61: count = 1 + i;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 7,
        "success_count": 6,
        "failure_count": 1,
        "success_rate": 0.8571428571428571
    }
}