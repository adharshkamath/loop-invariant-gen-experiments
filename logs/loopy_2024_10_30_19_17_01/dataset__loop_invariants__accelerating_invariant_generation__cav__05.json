{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant j <= i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant j == i;\nloop invariant i == y;\nloop invariant j == x;\nloop invariant i == j;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant j <= i;\nloop invariant i <= x + y;\nloop invariant y <= x;\nloop invariant j <= x + y - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y );\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= i - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i = (x * (x + 1)) / 2;\nloop invariant j = (y * (y + 1)) / 2;\nloop invariant flag ==> (j = (y * (y + 1)) / 2 + 1);\nloop invariant 1 <= j <= i - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i = (x * (x + 1)) / 2;\nloop invariant j = (y * (y + 1)) / 2;\nloop invariant flag ==> (j = (y * (y + 1)) / 2 + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 0 <= i <= x * unknown1();\nloop invariant 0 <= j <= y * unknown1();\nloop invariant i >= x * (x - 1) / 2;\nloop invariant j >= y * (y - 1) / 2;\nloop invariant j >= i - 1;\nloop invariant (flag ==> j >= i - 1);\nloop invariant (flag ==> j >= i);\nloop invariant (flag ==> j >= i + 1);\nloop invariant (flag ==> j >= i + y);\nloop invariant (flag ==> j >= i + x);\nloop invariant (flag ==> j >= i + x + y);\nloop invariant (flag ==> j >= i + x + y + 1);\nloop invariant (flag ==> j >= i + x + y + 2);\nloop invariant (flag ==> j >= i + x + y + 3);\nloop invariant (flag ==> j >= i + x + y + 4);\nloop invariant (flag ==> j >= i + x + y + 5);\nloop invariant (flag ==> j >= i + x + y + 6);\nloop invariant (flag ==> j >= i + x + y + 7);\nloop invariant (flag ==> j >= i + x + y + 8);\nloop invariant (flag ==> j >= i + x + y + 9);\nloop invariant (flag ==> j >= i + x + y + 10);\nloop invariant (flag ==> j >= i + x + y + 11);\nloop invariant (flag ==> j >= i + x + y + 12);\nloop invariant (flag ==> j >= i + x + y + 13);\nloop invariant (flag ==> j >= i + x + y + 14);\nloop invariant (flag ==> j >= i + x + y + 15);\nloop invariant (flag ==> j >= i + x + y + 16);\nloop invariant (flag ==> j >= i + x + y + 17);\nloop invariant (flag ==> j >= i + x + y + 18);\nloop invariant (flag ==> j >= i + x + y + 19);\nloop invariant (flag ==> j >= i + x + y + 20);\nloop invariant (flag ==> j >= i + x + y + 21);\nloop invariant (flag ==> j >= i + x + y + 22);\nloop invariant (flag ==> j >= i + x + y + 23);\nloop invariant (flag ==> j >= i + x + y + 24);\nloop invariant (flag ==> j >= i + x + y + 25);\nloop invariant (flag ==> j >= i + x + y + 26);\nloop invariant (flag ==> j >= i + x + y + 27);\nloop invariant (flag ==> j >= i + x + y + 28);\nloop invariant (flag ==> j >= i + x + y + 29);\nloop invariant (flag ==> j >= i + x + y + 30);\nloop invariant (flag ==> j >= i + x + y + 31);\nloop invariant (flag ==> j >= i + x + y + 32);\nloop invariant (flag ==> j >= i + x + y + 33);\nloop invariant (flag ==> j >= i + x + y + 34);\nloop invariant (flag ==> j >= i + x + y + 35);\nloop invariant (flag ==> j >= i + x + y + 36);\nloop invariant (flag ==> j >= i + x + y + 37);\nloop invariant (flag ==> j >= i + x + y + 38);\nloop invariant (flag ==> j >= i + x + y + 39);\nloop invariant (flag ==> j >= i + x + y + 40);\nloop invariant (flag ==> j >= i + x + y + 41);\nloop invariant (flag ==> j >= i + x + y + 42);\nloop invariant (flag ==> j >= i + x + y + 43);\nloop invariant (flag ==> j >= i + x + y + 44);\nloop invariant (flag ==> j >= i + x + y + 45);\nloop invariant (flag ==> j >= i + x + y + 46);\nloop invariant (flag ==> j >= i + x + y + 47);\nloop invariant (flag ==> j >= i + x + y + 48);\nloop invariant (flag ==> j >= i + x + y + 49);\nloop invariant (flag ==> j >= i + x + y + 50);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= x;\nloop invariant 0 <= i <= j;\nloop invariant j <= i - 1 ==> flag ==> x = y;\nloop invariant j <= i - 1 ==> !flag ==> x = y - 1;\nloop invariant j <= i - 1 ==> flag ==> y = x;\nloop invariant j <= i - 1 ==> !flag ==> y = x + 1;\nloop invariant j <= i - 1 ==> flag ==> i = j + 1;\nloop invariant j <= i - 1 ==> !flag ==> i = j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; loop invariant x >= 0; loop invariant j >= 0; loop invariant i >= 0; loop invariant y <= x; loop invariant j <= i; loop invariant y <= x; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant i <= y * x; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i - 1;\nloop invariant i >= j;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant flag == 1;\nloop invariant unknown1() == 1;\nloop invariant unknown2() == 0;\nloop invariant unknown3() == 0;\nloop invariant unknown4() == 0;\nloop invariant flag == 1 ==> x == 1;\nloop invariant flag == 1 ==> y == 1;\nloop invariant flag == 1 ==> i == 1;\nloop invariant flag == 1 ==> j == 1;\nloop invariant flag == 1 ==> x == i;\nloop invariant flag == 1 ==> y == j;\nloop invariant flag == 1 ==> i == j;\nloop invariant flag == 1 ==> unknown1() == 1;\nloop invariant flag == 1 ==> unknown2() == 0;\nloop invariant flag == 1 ==> unknown3() == 0;\nloop invariant flag == 1 ==> unknown4() == 0;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 0 ==> y == 0;\nloop invariant flag == 0 ==> i == 0;\nloop invariant flag == 0 ==> j == 0;\nloop invariant flag == 0 ==> x == i;\nloop invariant flag == 0 ==> y == j;\nloop invariant flag == 0 ==> i == j;\nloop invariant flag == 0 ==> unknown1() == 1;\nloop invariant flag == 0 ==> unknown2() == 0;\nloop invariant flag == 0 ==> unknown3() == 0;\nloop invariant flag == 0 ==> unknown4() == 0;\nloop invariant flag == 1 ==> i >= j;\nloop invariant flag == 0 ==> i >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i - 1;\nloop invariant j <= y;\nloop invariant y <= x;\nloop invariant x <= i;\nloop invariant i <= j + 1;\nloop invariant j = y;\nloop invariant y = x;\nloop invariant x = i;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant j <= i - 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(x, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(y, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(i, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(j, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(x, Pre) == 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(y, Pre) == 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(i, Pre) == 2 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(j, Pre) == 2 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(x, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(y, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(i, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(j, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(x, Pre) == 1 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(y, Pre) == 1 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(i, Pre) == 2 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(j, Pre) == 2 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(x, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(y, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(i, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(j, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(x, Pre) == 1 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(y, Pre) == 1 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(i, Pre) == 2 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(j, Pre) == 2 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(x, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(y, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= j + 1;\nloop invariant 1 <= x <= j;\nloop invariant 1 <= y <= i;\nloop invariant j <= i + j;\nloop invariant j <= i + 1;\nloop invariant j <= i;\nloop invariant i <= j;\nloop invariant i <= j + 1;\nloop invariant i <= j + 2;\nloop invariant i <= j + 3;\nloop invariant i <= j + 4;\nloop invariant i <= j + 5;\nloop invariant i <= j + 6;\nloop invariant i <= j + 7;\nloop invariant i <= j + 8;\nloop invariant i <= j + 9;\nloop invariant i <= j + 10;\nloop invariant i <= j + 11;\nloop invariant i <= j + 12;\nloop invariant i <= j + 13;\nloop invariant i <= j + 14;\nloop invariant i <= j + 15;\nloop invariant i <= j + 16;\nloop invariant i <= j + 17;\nloop invariant i <= j + 18;\nloop invariant i <= j + 19;\nloop invariant i <= j + 20;\nloop invariant i <= j + 21;\nloop invariant i <= j + 22;\nloop invariant i <= j + 23;\nloop invariant i <= j + 24;\nloop invariant i <= j + 25;\nloop invariant i <= j + 26;\nloop invariant i <= j + 27;\nloop invariant i <= j + 28;\nloop invariant i <= j + 29;\nloop invariant i <= j + 30;\nloop invariant i <= j + 31;\nloop invariant i <= j + 32;\nloop invariant i <= j + 33;\nloop invariant i <= j + 34;\nloop invariant i <= j + 35;\nloop invariant i <= j + 36;\nloop invariant i <= j + 37;\nloop invariant i <= j + 38;\nloop invariant i <= j + 39;\nloop invariant i <= j + 40;\nloop invariant i <= j + 41;\nloop invariant i <= j + 42;\nloop invariant i <= j + 43;\nloop invariant i <= j + 44;\nloop invariant i <= j + 45;\nloop invariant i <= j + 46;\nloop invariant i <= j + 47;\nloop invariant i <= j + 48;\nloop invariant i <= j + 49;\nloop invariant i <= j + 50;\nloop invariant i <= j + 51;\nloop invariant i <= j + 52;\nloop invariant i <= j + 53;\nloop invariant i <= j + 54;\nloop invariant i <= j + 55;\nloop invariant i <= j + 56;\nloop invariant i <= j + 57;\nloop invariant i <= j + 58;\nloop invariant i <= j + 59;\nloop invariant i <= j + 60;\nloop invariant i <= j + 61;\nloop invariant i <= j + 62;\nloop invariant i <= j + 63;\nloop invariant i <= j + 64;\nloop invariant i <= j + 65;\nloop invariant i <= j + 66;\nloop invariant i <= j + 67;\nloop invariant i <= j + 68;\nloop invariant i <= j + 69;\nloop invariant i <= j + 70;\nloop invariant i <= j + 71;\nloop invariant i <= j + 72;\nloop invariant i <= j + 73;\nloop invariant i <= j + 74;\nloop invariant i <= j + 75;\nloop invariant i <= j + 76;\nloop invariant i <= j + 77;\nloop invariant i <= j + 78;\nloop invariant i <= j + 79;\nloop invariant i <= j + 80;\nloop invariant i <= j + 81;\nloop invariant i <= j + 82;\nloop invariant i <= j + 83;\nloop invariant i <= j + 84;\nloop invariant i <= j + 85;\nloop invariant i <= j + 86;\nloop invariant i <= j + 87;\nloop invariant i <= j + 88;\nloop invariant i <= j + 89;\nloop invariant i <= j + 90;\nloop invariant i <= j + 91;\nloop invariant i <= j + 92;\nloop invariant i <= j + 93;\nloop invariant i <= j + 94;\nloop invariant i <= j + 95;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant j <= i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant j == i;\nloop invariant i == y;\nloop invariant j == x;\nloop invariant i == j;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i == y;\nloop invariant j == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant j <= i;\nloop invariant i <= x + y;\nloop invariant y <= x;\nloop invariant j <= x + y - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= y;\nloop invariant i2: 0 <= x;\n\n\nloop invariant i5: y <= x;\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= i - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i = (x * (x + 1)) / 2;\nloop invariant j = (y * (y + 1)) / 2;\nloop invariant flag ==> (j = (y * (y + 1)) / 2 + 1);\nloop invariant 1 <= j <= i - 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i = (x * (x + 1)) / 2;\nloop invariant j = (y * (y + 1)) / 2;\nloop invariant flag ==> (j = (y * (y + 1)) / 2 + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 0 <= i <= x * unknown1();\nloop invariant 0 <= j <= y * unknown1();\nloop invariant i >= x * (x - 1) / 2;\nloop invariant j >= y * (y - 1) / 2;\nloop invariant j >= i - 1;\nloop invariant (flag ==> j >= i - 1);\nloop invariant (flag ==> j >= i);\nloop invariant (flag ==> j >= i + 1);\nloop invariant (flag ==> j >= i + y);\nloop invariant (flag ==> j >= i + x);\nloop invariant (flag ==> j >= i + x + y);\nloop invariant (flag ==> j >= i + x + y + 1);\nloop invariant (flag ==> j >= i + x + y + 2);\nloop invariant (flag ==> j >= i + x + y + 3);\nloop invariant (flag ==> j >= i + x + y + 4);\nloop invariant (flag ==> j >= i + x + y + 5);\nloop invariant (flag ==> j >= i + x + y + 6);\nloop invariant (flag ==> j >= i + x + y + 7);\nloop invariant (flag ==> j >= i + x + y + 8);\nloop invariant (flag ==> j >= i + x + y + 9);\nloop invariant (flag ==> j >= i + x + y + 10);\nloop invariant (flag ==> j >= i + x + y + 11);\nloop invariant (flag ==> j >= i + x + y + 12);\nloop invariant (flag ==> j >= i + x + y + 13);\nloop invariant (flag ==> j >= i + x + y + 14);\nloop invariant (flag ==> j >= i + x + y + 15);\nloop invariant (flag ==> j >= i + x + y + 16);\nloop invariant (flag ==> j >= i + x + y + 17);\nloop invariant (flag ==> j >= i + x + y + 18);\nloop invariant (flag ==> j >= i + x + y + 19);\nloop invariant (flag ==> j >= i + x + y + 20);\nloop invariant (flag ==> j >= i + x + y + 21);\nloop invariant (flag ==> j >= i + x + y + 22);\nloop invariant (flag ==> j >= i + x + y + 23);\nloop invariant (flag ==> j >= i + x + y + 24);\nloop invariant (flag ==> j >= i + x + y + 25);\nloop invariant (flag ==> j >= i + x + y + 26);\nloop invariant (flag ==> j >= i + x + y + 27);\nloop invariant (flag ==> j >= i + x + y + 28);\nloop invariant (flag ==> j >= i + x + y + 29);\nloop invariant (flag ==> j >= i + x + y + 30);\nloop invariant (flag ==> j >= i + x + y + 31);\nloop invariant (flag ==> j >= i + x + y + 32);\nloop invariant (flag ==> j >= i + x + y + 33);\nloop invariant (flag ==> j >= i + x + y + 34);\nloop invariant (flag ==> j >= i + x + y + 35);\nloop invariant (flag ==> j >= i + x + y + 36);\nloop invariant (flag ==> j >= i + x + y + 37);\nloop invariant (flag ==> j >= i + x + y + 38);\nloop invariant (flag ==> j >= i + x + y + 39);\nloop invariant (flag ==> j >= i + x + y + 40);\nloop invariant (flag ==> j >= i + x + y + 41);\nloop invariant (flag ==> j >= i + x + y + 42);\nloop invariant (flag ==> j >= i + x + y + 43);\nloop invariant (flag ==> j >= i + x + y + 44);\nloop invariant (flag ==> j >= i + x + y + 45);\nloop invariant (flag ==> j >= i + x + y + 46);\nloop invariant (flag ==> j >= i + x + y + 47);\nloop invariant (flag ==> j >= i + x + y + 48);\nloop invariant (flag ==> j >= i + x + y + 49);\nloop invariant (flag ==> j >= i + x + y + 50);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: i >= x * (x - 1) / 2;\nloop invariant i6: j >= y * (y - 1) / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= x;\nloop invariant 0 <= i <= j;\nloop invariant j <= i - 1 ==> flag ==> x = y;\nloop invariant j <= i - 1 ==> !flag ==> x = y - 1;\nloop invariant j <= i - 1 ==> flag ==> y = x;\nloop invariant j <= i - 1 ==> !flag ==> y = x + 1;\nloop invariant j <= i - 1 ==> flag ==> i = j + 1;\nloop invariant j <= i - 1 ==> !flag ==> i = j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: 0 <= y <= x;\nloop invariant i3: 0 <= i <= j;\n\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x >= 0; loop invariant j >= 0; loop invariant i >= 0; loop invariant y <= x; loop invariant j <= i; loop invariant y <= x; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant i <= y * x; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= y; loop invariant x >= 0; loop invariant j >= 0; loop invariant i >= 0; loop invariant y <= x; loop invariant j <= i; loop invariant y <= x; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant i <= y * x; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x;\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i - 1;\nloop invariant i >= j;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\nloop invariant j <= i - 1;\nloop invariant j <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i == j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant flag == 1;\nloop invariant unknown1() == 1;\nloop invariant unknown2() == 0;\nloop invariant unknown3() == 0;\nloop invariant unknown4() == 0;\nloop invariant flag == 1 ==> x == 1;\nloop invariant flag == 1 ==> y == 1;\nloop invariant flag == 1 ==> i == 1;\nloop invariant flag == 1 ==> j == 1;\nloop invariant flag == 1 ==> x == i;\nloop invariant flag == 1 ==> y == j;\nloop invariant flag == 1 ==> i == j;\nloop invariant flag == 1 ==> unknown1() == 1;\nloop invariant flag == 1 ==> unknown2() == 0;\nloop invariant flag == 1 ==> unknown3() == 0;\nloop invariant flag == 1 ==> unknown4() == 0;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 0 ==> y == 0;\nloop invariant flag == 0 ==> i == 0;\nloop invariant flag == 0 ==> j == 0;\nloop invariant flag == 0 ==> x == i;\nloop invariant flag == 0 ==> y == j;\nloop invariant flag == 0 ==> i == j;\nloop invariant flag == 0 ==> unknown1() == 1;\nloop invariant flag == 0 ==> unknown2() == 0;\nloop invariant flag == 0 ==> unknown3() == 0;\nloop invariant flag == 0 ==> unknown4() == 0;\nloop invariant flag == 1 ==> i >= j;\nloop invariant flag == 0 ==> i >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= 2147483647;\nloop invariant i2: 0 <= y <= 2147483647;\nloop invariant i3: 0 <= i <= 2147483647;\nloop invariant i4: 0 <= j <= 2147483647;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: i >= 0;\nloop invariant i8: j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i - 1;\nloop invariant j <= y;\nloop invariant y <= x;\nloop invariant x <= i;\nloop invariant i <= j + 1;\nloop invariant j = y;\nloop invariant y = x;\nloop invariant x = i;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\nloop invariant i = j + 1;\nloop invariant j = i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\nloop invariant i3: y <= x;\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 26,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant j <= i - 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(x, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(y, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(i, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(j, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(x, Pre) == 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(y, Pre) == 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(i, Pre) == 2 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(j, Pre) == 2 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(x, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(y, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(i, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(j, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(x, Pre) == 1 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(y, Pre) == 1 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(i, Pre) == 2 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(j, Pre) == 2 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(x, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(y, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(i, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(j, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(x, Pre) == 1 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(y, Pre) == 1 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(i, Pre) == 2 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(j, Pre) == 2 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant \\at(x, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant \\at(y, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 99,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= j + 1;\nloop invariant 1 <= x <= j;\nloop invariant 1 <= y <= i;\nloop invariant j <= i + j;\nloop invariant j <= i + 1;\nloop invariant j <= i;\nloop invariant i <= j;\nloop invariant i <= j + 1;\nloop invariant i <= j + 2;\nloop invariant i <= j + 3;\nloop invariant i <= j + 4;\nloop invariant i <= j + 5;\nloop invariant i <= j + 6;\nloop invariant i <= j + 7;\nloop invariant i <= j + 8;\nloop invariant i <= j + 9;\nloop invariant i <= j + 10;\nloop invariant i <= j + 11;\nloop invariant i <= j + 12;\nloop invariant i <= j + 13;\nloop invariant i <= j + 14;\nloop invariant i <= j + 15;\nloop invariant i <= j + 16;\nloop invariant i <= j + 17;\nloop invariant i <= j + 18;\nloop invariant i <= j + 19;\nloop invariant i <= j + 20;\nloop invariant i <= j + 21;\nloop invariant i <= j + 22;\nloop invariant i <= j + 23;\nloop invariant i <= j + 24;\nloop invariant i <= j + 25;\nloop invariant i <= j + 26;\nloop invariant i <= j + 27;\nloop invariant i <= j + 28;\nloop invariant i <= j + 29;\nloop invariant i <= j + 30;\nloop invariant i <= j + 31;\nloop invariant i <= j + 32;\nloop invariant i <= j + 33;\nloop invariant i <= j + 34;\nloop invariant i <= j + 35;\nloop invariant i <= j + 36;\nloop invariant i <= j + 37;\nloop invariant i <= j + 38;\nloop invariant i <= j + 39;\nloop invariant i <= j + 40;\nloop invariant i <= j + 41;\nloop invariant i <= j + 42;\nloop invariant i <= j + 43;\nloop invariant i <= j + 44;\nloop invariant i <= j + 45;\nloop invariant i <= j + 46;\nloop invariant i <= j + 47;\nloop invariant i <= j + 48;\nloop invariant i <= j + 49;\nloop invariant i <= j + 50;\nloop invariant i <= j + 51;\nloop invariant i <= j + 52;\nloop invariant i <= j + 53;\nloop invariant i <= j + 54;\nloop invariant i <= j + 55;\nloop invariant i <= j + 56;\nloop invariant i <= j + 57;\nloop invariant i <= j + 58;\nloop invariant i <= j + 59;\nloop invariant i <= j + 60;\nloop invariant i <= j + 61;\nloop invariant i <= j + 62;\nloop invariant i <= j + 63;\nloop invariant i <= j + 64;\nloop invariant i <= j + 65;\nloop invariant i <= j + 66;\nloop invariant i <= j + 67;\nloop invariant i <= j + 68;\nloop invariant i <= j + 69;\nloop invariant i <= j + 70;\nloop invariant i <= j + 71;\nloop invariant i <= j + 72;\nloop invariant i <= j + 73;\nloop invariant i <= j + 74;\nloop invariant i <= j + 75;\nloop invariant i <= j + 76;\nloop invariant i <= j + 77;\nloop invariant i <= j + 78;\nloop invariant i <= j + 79;\nloop invariant i <= j + 80;\nloop invariant i <= j + 81;\nloop invariant i <= j + 82;\nloop invariant i <= j + 83;\nloop invariant i <= j + 84;\nloop invariant i <= j + 85;\nloop invariant i <= j + 86;\nloop invariant i <= j + 87;\nloop invariant i <= j + 88;\nloop invariant i <= j + 89;\nloop invariant i <= j + 90;\nloop invariant i <= j + 91;\nloop invariant i <= j + 92;\nloop invariant i <= j + 93;\nloop invariant i <= j + 94;\nloop invariant i <= j + 95;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 44: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: j <= i;\nloop invariant i3: i == x;\nloop invariant i4: j == y;\nloop invariant i5: x == i;\nloop invariant i6: y == j;\nloop invariant i7: j == i;\nloop invariant i8: i == y;\nloop invariant i9: j == x;\nloop invariant i10: i == j;\nloop invariant i11: 0 <= y;\nloop invariant i12: 0 <= x;\nloop invariant i13: i <= x + y;\nloop invariant i14: y <= x;\nloop invariant i15: j <= x + y - 1;\nloop invariant i16: ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y ); loop invariant ( j <= i + y ); loop invariant ( j <= i + x ); loop invariant ( j <= i + x + y ); loop invariant ( i <= x + y );\nloop invariant i17: 1 <= j <= i - 1;\nloop invariant i18: x >= 0;\nloop invariant i19: y >= 0;\nloop invariant i20: i = (x * (x + 1)) / 2;\nloop invariant i21: j = (y * (y + 1)) / 2;\nloop invariant i22: flag ==> (j = (y * (y + 1)) / 2 + 1);\nloop invariant i23: 0 <= x <= unknown1();\nloop invariant i24: 0 <= y <= unknown1();\nloop invariant i25: 0 <= i <= x * unknown1();\nloop invariant i26: 0 <= j <= y * unknown1();\nloop invariant i27: i >= x * (x - 1) / 2;\nloop invariant i28: j >= y * (y - 1) / 2;\nloop invariant i29: j >= i - 1;\nloop invariant i30: (flag ==> j >= i - 1);\nloop invariant i31: (flag ==> j >= i);\nloop invariant i32: (flag ==> j >= i + 1);\nloop invariant i33: (flag ==> j >= i + y);\nloop invariant i34: (flag ==> j >= i + x);\nloop invariant i35: (flag ==> j >= i + x + y);\nloop invariant i36: (flag ==> j >= i + x + y + 1);\nloop invariant i37: (flag ==> j >= i + x + y + 2);\nloop invariant i38: (flag ==> j >= i + x + y + 3);\nloop invariant i39: (flag ==> j >= i + x + y + 4);\nloop invariant i40: (flag ==> j >= i + x + y + 5);\nloop invariant i41: (flag ==> j >= i + x + y + 6);\nloop invariant i42: (flag ==> j >= i + x + y + 7);\nloop invariant i43: (flag ==> j >= i + x + y + 8);\nloop invariant i44: (flag ==> j >= i + x + y + 9);\nloop invariant i45: (flag ==> j >= i + x + y + 10);\nloop invariant i46: (flag ==> j >= i + x + y + 11);\nloop invariant i47: (flag ==> j >= i + x + y + 12);\nloop invariant i48: (flag ==> j >= i + x + y + 13);\nloop invariant i49: (flag ==> j >= i + x + y + 14);\nloop invariant i50: (flag ==> j >= i + x + y + 15);\nloop invariant i51: (flag ==> j >= i + x + y + 16);\nloop invariant i52: (flag ==> j >= i + x + y + 17);\nloop invariant i53: (flag ==> j >= i + x + y + 18);\nloop invariant i54: (flag ==> j >= i + x + y + 19);\nloop invariant i55: (flag ==> j >= i + x + y + 20);\nloop invariant i56: (flag ==> j >= i + x + y + 21);\nloop invariant i57: (flag ==> j >= i + x + y + 22);\nloop invariant i58: (flag ==> j >= i + x + y + 23);\nloop invariant i59: (flag ==> j >= i + x + y + 24);\nloop invariant i60: (flag ==> j >= i + x + y + 25);\nloop invariant i61: (flag ==> j >= i + x + y + 26);\nloop invariant i62: (flag ==> j >= i + x + y + 27);\nloop invariant i63: (flag ==> j >= i + x + y + 28);\nloop invariant i64: (flag ==> j >= i + x + y + 29);\nloop invariant i65: (flag ==> j >= i + x + y + 30);\nloop invariant i66: (flag ==> j >= i + x + y + 31);\nloop invariant i67: (flag ==> j >= i + x + y + 32);\nloop invariant i68: (flag ==> j >= i + x + y + 33);\nloop invariant i69: (flag ==> j >= i + x + y + 34);\nloop invariant i70: (flag ==> j >= i + x + y + 35);\nloop invariant i71: (flag ==> j >= i + x + y + 36);\nloop invariant i72: (flag ==> j >= i + x + y + 37);\nloop invariant i73: (flag ==> j >= i + x + y + 38);\nloop invariant i74: (flag ==> j >= i + x + y + 39);\nloop invariant i75: (flag ==> j >= i + x + y + 40);\nloop invariant i76: (flag ==> j >= i + x + y + 41);\nloop invariant i77: (flag ==> j >= i + x + y + 42);\nloop invariant i78: (flag ==> j >= i + x + y + 43);\nloop invariant i79: (flag ==> j >= i + x + y + 44);\nloop invariant i80: (flag ==> j >= i + x + y + 45);\nloop invariant i81: (flag ==> j >= i + x + y + 46);\nloop invariant i82: (flag ==> j >= i + x + y + 47);\nloop invariant i83: (flag ==> j >= i + x + y + 48);\nloop invariant i84: (flag ==> j >= i + x + y + 49);\nloop invariant i85: (flag ==> j >= i + x + y + 50);\nloop invariant i86: 0 <= y <= x;\nloop invariant i87: 0 <= i <= j;\nloop invariant i88: j <= i - 1 ==> flag ==> x = y;\nloop invariant i89: j <= i - 1 ==> !flag ==> x = y - 1;\nloop invariant i90: j <= i - 1 ==> flag ==> y = x;\nloop invariant i91: j <= i - 1 ==> !flag ==> y = x + 1;\nloop invariant i92: j <= i - 1 ==> flag ==> i = j + 1;\nloop invariant i93: j <= i - 1 ==> !flag ==> i = j;\nloop invariant i94: 0 <= y; loop invariant x >= 0; loop invariant j >= 0; loop invariant i >= 0; loop invariant y <= x; loop invariant j <= i; loop invariant y <= x; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant i <= y * x; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x;\nloop invariant i95: 0 <= j <= i - 1;\nloop invariant i96: i >= j;\nloop invariant i97: j <= i - 1;\nloop invariant i98: 0 <= x <= 2147483647;\nloop invariant i99: 0 <= y <= 2147483647;\nloop invariant i100: 0 <= i <= 2147483647;\nloop invariant i101: 0 <= j <= 2147483647;\nloop invariant i102: i >= 0;\nloop invariant i103: j >= 0;\nloop invariant i104: flag == 1;\nloop invariant i105: unknown1() == 1;\nloop invariant i106: unknown2() == 0;\nloop invariant i107: unknown3() == 0;\nloop invariant i108: unknown4() == 0;\nloop invariant i109: flag == 1 ==> x == 1;\nloop invariant i110: flag == 1 ==> y == 1;\nloop invariant i111: flag == 1 ==> i == 1;\nloop invariant i112: flag == 1 ==> j == 1;\nloop invariant i113: flag == 1 ==> x == i;\nloop invariant i114: flag == 1 ==> y == j;\nloop invariant i115: flag == 1 ==> i == j;\nloop invariant i116: flag == 1 ==> unknown1() == 1;\nloop invariant i117: flag == 1 ==> unknown2() == 0;\nloop invariant i118: flag == 1 ==> unknown3() == 0;\nloop invariant i119: flag == 1 ==> unknown4() == 0;\nloop invariant i120: flag == 0 ==> x == 0;\nloop invariant i121: flag == 0 ==> y == 0;\nloop invariant i122: flag == 0 ==> i == 0;\nloop invariant i123: flag == 0 ==> j == 0;\nloop invariant i124: flag == 0 ==> x == i;\nloop invariant i125: flag == 0 ==> y == j;\nloop invariant i126: flag == 0 ==> i == j;\nloop invariant i127: flag == 0 ==> unknown1() == 1;\nloop invariant i128: flag == 0 ==> unknown2() == 0;\nloop invariant i129: flag == 0 ==> unknown3() == 0;\nloop invariant i130: flag == 0 ==> unknown4() == 0;\nloop invariant i131: flag == 1 ==> i >= j;\nloop invariant i132: flag == 0 ==> i >= j;\nloop invariant i133: j <= y;\nloop invariant i134: x <= i;\nloop invariant i135: i <= j + 1;\nloop invariant i136: j = y;\nloop invariant i137: y = x;\nloop invariant i138: x = i;\nloop invariant i139: i = j + 1;\nloop invariant i140: j = i - 1;\nloop invariant i141: 0 <= x <= 1;\nloop invariant i142: 0 <= y <= 1;\nloop invariant i143: 0 <= i <= 2;\nloop invariant i144: 0 <= j <= 2;\nloop invariant i145: j <= i - 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i146: \\at(x, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i147: \\at(y, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i148: \\at(i, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i149: \\at(j, Pre) == 0 ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i150: \\at(x, Pre) == 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i151: \\at(y, Pre) == 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i152: \\at(i, Pre) == 2 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i153: \\at(j, Pre) == 2 ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i154: \\at(x, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i155: \\at(y, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i156: \\at(i, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i157: \\at(j, Pre) == 0 && flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i158: \\at(x, Pre) == 1 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i159: \\at(y, Pre) == 1 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i160: \\at(i, Pre) == 2 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i161: \\at(j, Pre) == 2 && flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i162: \\at(x, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i163: \\at(y, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i164: \\at(i, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i165: \\at(j, Pre) == 0 && !flag ==> (x == 0 && y == 0 && i == 0 && j == 0);\nloop invariant i166: \\at(x, Pre) == 1 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i167: \\at(y, Pre) == 1 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i168: \\at(i, Pre) == 2 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i169: \\at(j, Pre) == 2 && !flag ==> (x == 1 && y == 1 && i == 2 && j == 2);\nloop invariant i170: 1 <= i <= j + 1;\nloop invariant i171: 1 <= x <= j;\nloop invariant i172: 1 <= y <= i;\nloop invariant i173: j <= i + j;\nloop invariant i174: j <= i + 1;\nloop invariant i175: i <= j;\nloop invariant i176: i <= j + 2;\nloop invariant i177: i <= j + 3;\nloop invariant i178: i <= j + 4;\nloop invariant i179: i <= j + 5;\nloop invariant i180: i <= j + 6;\nloop invariant i181: i <= j + 7;\nloop invariant i182: i <= j + 8;\nloop invariant i183: i <= j + 9;\nloop invariant i184: i <= j + 10;\nloop invariant i185: i <= j + 11;\nloop invariant i186: i <= j + 12;\nloop invariant i187: i <= j + 13;\nloop invariant i188: i <= j + 14;\nloop invariant i189: i <= j + 15;\nloop invariant i190: i <= j + 16;\nloop invariant i191: i <= j + 17;\nloop invariant i192: i <= j + 18;\nloop invariant i193: i <= j + 19;\nloop invariant i194: i <= j + 20;\nloop invariant i195: i <= j + 21;\nloop invariant i196: i <= j + 22;\nloop invariant i197: i <= j + 23;\nloop invariant i198: i <= j + 24;\nloop invariant i199: i <= j + 25;\nloop invariant i200: i <= j + 26;\nloop invariant i201: i <= j + 27;\nloop invariant i202: i <= j + 28;\nloop invariant i203: i <= j + 29;\nloop invariant i204: i <= j + 30;\nloop invariant i205: i <= j + 31;\nloop invariant i206: i <= j + 32;\nloop invariant i207: i <= j + 33;\nloop invariant i208: i <= j + 34;\nloop invariant i209: i <= j + 35;\nloop invariant i210: i <= j + 36;\nloop invariant i211: i <= j + 37;\nloop invariant i212: i <= j + 38;\nloop invariant i213: i <= j + 39;\nloop invariant i214: i <= j + 40;\nloop invariant i215: i <= j + 41;\nloop invariant i216: i <= j + 42;\nloop invariant i217: i <= j + 43;\nloop invariant i218: i <= j + 44;\nloop invariant i219: i <= j + 45;\nloop invariant i220: i <= j + 46;\nloop invariant i221: i <= j + 47;\nloop invariant i222: i <= j + 48;\nloop invariant i223: i <= j + 49;\nloop invariant i224: i <= j + 50;\nloop invariant i225: i <= j + 51;\nloop invariant i226: i <= j + 52;\nloop invariant i227: i <= j + 53;\nloop invariant i228: i <= j + 54;\nloop invariant i229: i <= j + 55;\nloop invariant i230: i <= j + 56;\nloop invariant i231: i <= j + 57;\nloop invariant i232: i <= j + 58;\nloop invariant i233: i <= j + 59;\nloop invariant i234: i <= j + 60;\nloop invariant i235: i <= j + 61;\nloop invariant i236: i <= j + 62;\nloop invariant i237: i <= j + 63;\nloop invariant i238: i <= j + 64;\nloop invariant i239: i <= j + 65;\nloop invariant i240: i <= j + 66;\nloop invariant i241: i <= j + 67;\nloop invariant i242: i <= j + 68;\nloop invariant i243: i <= j + 69;\nloop invariant i244: i <= j + 70;\nloop invariant i245: i <= j + 71;\nloop invariant i246: i <= j + 72;\nloop invariant i247: i <= j + 73;\nloop invariant i248: i <= j + 74;\nloop invariant i249: i <= j + 75;\nloop invariant i250: i <= j + 76;\nloop invariant i251: i <= j + 77;\nloop invariant i252: i <= j + 78;\nloop invariant i253: i <= j + 79;\nloop invariant i254: i <= j + 80;\nloop invariant i255: i <= j + 81;\nloop invariant i256: i <= j + 82;\nloop invariant i257: i <= j + 83;\nloop invariant i258: i <= j + 84;\nloop invariant i259: i <= j + 85;\nloop invariant i260: i <= j + 86;\nloop invariant i261: i <= j + 87;\nloop invariant i262: i <= j + 88;\nloop invariant i263: i <= j + 89;\nloop invariant i264: i <= j + 90;\nloop invariant i265: i <= j + 91;\nloop invariant i266: i <= j + 92;\nloop invariant i267: i <= j + 93;\nloop invariant i268: i <= j + 94;\nloop invariant i269: i <= j + 95;\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
        "combined_annotation_num_solver_calls": 113,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\n\n\n\n\n\n\n\n\nloop invariant i11: 0 <= y;\nloop invariant i12: 0 <= x;\n\nloop invariant i14: y <= x;\n\n\n\nloop invariant i18: x >= 0;\nloop invariant i19: y >= 0;\n\n\n\n\n\n\n\nloop invariant i27: i >= x * (x - 1) / 2;\nloop invariant i28: j >= y * (y - 1) / 2;\nloop invariant i29: j >= i - 1;\nloop invariant i30: (flag ==> j >= i - 1);\nloop invariant i31: (flag ==> j >= i);\n\nloop invariant i33: (flag ==> j >= i + y);\nloop invariant i34: (flag ==> j >= i + x);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i86: 0 <= y <= x;\nloop invariant i87: 0 <= i <= j;\n\n\n\n\n\n\nloop invariant i94: 0 <= y; loop invariant x >= 0; loop invariant j >= 0; loop invariant i >= 0; loop invariant y <= x; loop invariant j <= i; loop invariant y <= x; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant i <= y * x; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x; loop invariant y <= i * x / y; loop invariant j <= i; loop invariant j <= i; loop invariant i <= y * x;\n\nloop invariant i96: i >= j;\n\nloop invariant i98: 0 <= x <= 2147483647;\nloop invariant i99: 0 <= y <= 2147483647;\nloop invariant i100: 0 <= i <= 2147483647;\nloop invariant i101: 0 <= j <= 2147483647;\nloop invariant i102: i >= 0;\nloop invariant i103: j >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i113: flag == 1 ==> x == i;\nloop invariant i114: flag == 1 ==> y == j;\nloop invariant i115: flag == 1 ==> i == j;\n\n\n\n\n\n\n\n\n\n\nloop invariant i126: flag == 0 ==> i == j;\n\n\n\n\nloop invariant i131: flag == 1 ==> i >= j;\nloop invariant i132: flag == 0 ==> i >= j;\n\nloop invariant i134: x <= i;\nloop invariant i135: i <= j + 1;\n\n\n\n\n\n\n\n\n\nloop invariant i145: j <= i - 1 ==> (x == 1 && y == 1 && i == 2 && j == 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i173: j <= i + j;\nloop invariant i174: j <= i + 1;\nloop invariant i175: i <= j;\nloop invariant i176: i <= j + 2;\nloop invariant i177: i <= j + 3;\nloop invariant i178: i <= j + 4;\nloop invariant i179: i <= j + 5;\nloop invariant i180: i <= j + 6;\nloop invariant i181: i <= j + 7;\nloop invariant i182: i <= j + 8;\nloop invariant i183: i <= j + 9;\nloop invariant i184: i <= j + 10;\nloop invariant i185: i <= j + 11;\nloop invariant i186: i <= j + 12;\nloop invariant i187: i <= j + 13;\nloop invariant i188: i <= j + 14;\nloop invariant i189: i <= j + 15;\nloop invariant i190: i <= j + 16;\nloop invariant i191: i <= j + 17;\nloop invariant i192: i <= j + 18;\nloop invariant i193: i <= j + 19;\nloop invariant i194: i <= j + 20;\nloop invariant i195: i <= j + 21;\nloop invariant i196: i <= j + 22;\nloop invariant i197: i <= j + 23;\nloop invariant i198: i <= j + 24;\nloop invariant i199: i <= j + 25;\nloop invariant i200: i <= j + 26;\nloop invariant i201: i <= j + 27;\nloop invariant i202: i <= j + 28;\nloop invariant i203: i <= j + 29;\nloop invariant i204: i <= j + 30;\nloop invariant i205: i <= j + 31;\nloop invariant i206: i <= j + 32;\nloop invariant i207: i <= j + 33;\nloop invariant i208: i <= j + 34;\nloop invariant i209: i <= j + 35;\nloop invariant i210: i <= j + 36;\nloop invariant i211: i <= j + 37;\nloop invariant i212: i <= j + 38;\nloop invariant i213: i <= j + 39;\nloop invariant i214: i <= j + 40;\nloop invariant i215: i <= j + 41;\nloop invariant i216: i <= j + 42;\nloop invariant i217: i <= j + 43;\nloop invariant i218: i <= j + 44;\nloop invariant i219: i <= j + 45;\nloop invariant i220: i <= j + 46;\nloop invariant i221: i <= j + 47;\nloop invariant i222: i <= j + 48;\nloop invariant i223: i <= j + 49;\nloop invariant i224: i <= j + 50;\nloop invariant i225: i <= j + 51;\nloop invariant i226: i <= j + 52;\nloop invariant i227: i <= j + 53;\nloop invariant i228: i <= j + 54;\nloop invariant i229: i <= j + 55;\nloop invariant i230: i <= j + 56;\nloop invariant i231: i <= j + 57;\nloop invariant i232: i <= j + 58;\nloop invariant i233: i <= j + 59;\nloop invariant i234: i <= j + 60;\nloop invariant i235: i <= j + 61;\nloop invariant i236: i <= j + 62;\nloop invariant i237: i <= j + 63;\nloop invariant i238: i <= j + 64;\nloop invariant i239: i <= j + 65;\nloop invariant i240: i <= j + 66;\nloop invariant i241: i <= j + 67;\nloop invariant i242: i <= j + 68;\nloop invariant i243: i <= j + 69;\nloop invariant i244: i <= j + 70;\nloop invariant i245: i <= j + 71;\nloop invariant i246: i <= j + 72;\nloop invariant i247: i <= j + 73;\nloop invariant i248: i <= j + 74;\nloop invariant i249: i <= j + 75;\nloop invariant i250: i <= j + 76;\nloop invariant i251: i <= j + 77;\nloop invariant i252: i <= j + 78;\nloop invariant i253: i <= j + 79;\nloop invariant i254: i <= j + 80;\nloop invariant i255: i <= j + 81;\nloop invariant i256: i <= j + 82;\nloop invariant i257: i <= j + 83;\nloop invariant i258: i <= j + 84;\nloop invariant i259: i <= j + 85;\nloop invariant i260: i <= j + 86;\nloop invariant i261: i <= j + 87;\nloop invariant i262: i <= j + 88;\nloop invariant i263: i <= j + 89;\nloop invariant i264: i <= j + 90;\nloop invariant i265: i <= j + 91;\nloop invariant i266: i <= j + 92;\nloop invariant i267: i <= j + 93;\nloop invariant i268: i <= j + 94;\nloop invariant i269: i <= j + 95;\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c"
        ],
        "skipped": [],
        "total": 127,
        "success_count": 105,
        "failure_count": 22,
        "success_rate": 0.8267716535433071
    }
}