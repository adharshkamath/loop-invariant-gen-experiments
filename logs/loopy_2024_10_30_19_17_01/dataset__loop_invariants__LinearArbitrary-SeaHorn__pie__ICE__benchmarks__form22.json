{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= input;\nloop invariant 0 <= x1 <= x2;\nloop invariant x2 <= x2p;\nloop invariant x1 <= x1p;\nloop invariant x2 - x3 <= 2;\nloop invariant x2p >= 0 || x2p - x3p <= 2;\nloop invariant 0 <= x3 <= x3p;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= 100000;\nloop invariant 0 <= x2 <= 100000;\nloop invariant 0 <= x3 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x2 - x3 <= 2;\nloop invariant if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) then (x1 = x1p) ==> (x2 = x2p) ==> (x3 = x3p);\nloop invariant if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) then (x1 = x1p) ==> (x2 = x2p) ==> (x3 = x3p) ==> (input = 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x2 <= x3;\nloop invariant x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2);\nloop invariant x1 <= x1p && x2 <= x2p && x3 <= x3p;\nloop invariant 0 <= x1 <= x2 <= x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p <= x2p;\nloop invariant x1p >= 0;\nloop invariant x2p >= 0;\nloop invariant x3p >= 0;\nloop invariant x2p - x3p <= 2;\nloop invariant x1 <= x1p;\nloop invariant x2 <= x2p;\nloop invariant x3 <= x3p;\nloop invariant x1p <= x2p;\nloop invariant x2p >= 0;\nloop invariant x3p >= 0;\nloop invariant x1 <= x2;\nloop invariant (x2 >= 0 && x2 - x3 <= 2) || (x2 >= 0 && x2 - x3 > 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= x2;\nloop invariant x1 <= x2 - x3;\nloop invariant x2 <= 2 + x3;\nloop invariant x1 <= x2p;\nloop invariant x2 <= x2p;\nloop invariant x3 <= x3p;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x2 <= x3;\nloop invariant x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p <= n;\nloop invariant 0 <= x2p <= n;\nloop invariant 0 <= x3p <= n;\nloop invariant x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\nloop invariant 0 <= x1p <= n;\nloop invariant 0 <= x2p <= n;\nloop invariant 0 <= x3p <= n;\nloop invariant x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant 0 <= x1p <= 1;\nloop invariant 0 <= x2p <= 1;\nloop invariant 0 <= x3p <= 1;\nloop invariant x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p <= 100000;\nloop invariant 0 <= x2p <= 100000;\nloop invariant 0 <= x3p <= 100000;\nloop invariant x1p <= x2p;\nloop invariant x2p >= x3p;\nloop invariant x2p - x3p <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x2 <= x3;\nloop invariant x1p <= x2p && x2p >= 0 || x2p - x3p <= 2;\n*/\n```",
            "```\n/*@\nloop invariant x1 <= x2 && (x2 <= 0 || x2 - x3 <= 2);\nloop invariant x1p <= x2p && (x2p <= 0 || x2p - x3p <= 2);\nloop invariant x1 <= x1p && x2 <= x2p && x3 <= x3p;\nloop invariant input <= 0 ==> x1 == x2 && x2 == x3 && x3 == 0;\nloop invariant input > 0 ==> x1 <= x1p && x2 <= x2p && x3 <= x3p;\n*/\n```",
            "```\n/*@\nloop invariant x1 <= x2 && x2 >= 0 && x2 - x3 <= 2 && (x2p >= 0 || x2p - x3p <= 2) && x1p <= x2p && x1 <= x1p && x2 <= x2p && x3 <= x3p && x1 <= x2p && x2 <= x2p && x3 <= x3p && x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2) ==> x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x2;\nloop invariant x1 <= x2;\nloop invariant x2 - x3 <= 2;\nloop invariant x2 >= 0;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1p <= x2p;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2p >= 0;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2p - x3p <= 2;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1 <= x2;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2 - x3 <= 2;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 100000;\nloop invariant 0 <= x2 <= 100000;\nloop invariant 0 <= x3 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x2 - x3 <= 2;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 - x3;\nloop invariant x1 >= x2 - 2;\nloop invariant x2 >= x3 + 2;\nloop invariant x2 >= 2;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + x3;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= input;\nloop invariant 0 <= x1 <= x2;\nloop invariant x2 <= x2p;\nloop invariant x1 <= x1p;\nloop invariant x2 - x3 <= 2;\nloop invariant x2p >= 0 || x2p - x3p <= 2;\nloop invariant 0 <= x3 <= x3p;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= 100000;\nloop invariant 0 <= x2 <= 100000;\nloop invariant 0 <= x3 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x2 - x3 <= 2;\nloop invariant if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) then (x1 = x1p) ==> (x2 = x2p) ==> (x3 = x3p);\nloop invariant if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) then (x1 = x1p) ==> (x2 = x2p) ==> (x3 = x3p) ==> (input = 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\nloop invariant i5: x1 <= x2;\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\nloop invariant x2 - x3 <= 2;\nloop invariant x1 <= x2;\nloop invariant x2 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\nloop invariant i4: x1 <= x2;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x2 <= x3;\nloop invariant x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2);\nloop invariant x1 <= x1p && x2 <= x2p && x3 <= x3p;\nloop invariant 0 <= x1 <= x2 <= x3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p <= x2p;\nloop invariant x1p >= 0;\nloop invariant x2p >= 0;\nloop invariant x3p >= 0;\nloop invariant x2p - x3p <= 2;\nloop invariant x1 <= x1p;\nloop invariant x2 <= x2p;\nloop invariant x3 <= x3p;\nloop invariant x1p <= x2p;\nloop invariant x2p >= 0;\nloop invariant x3p >= 0;\nloop invariant x1 <= x2;\nloop invariant (x2 >= 0 && x2 - x3 <= 2) || (x2 >= 0 && x2 - x3 > 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x1 <= x2;\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= x2;\nloop invariant x1 <= x2 - x3;\nloop invariant x2 <= 2 + x3;\nloop invariant x1 <= x2p;\nloop invariant x2 <= x2p;\nloop invariant x3 <= x3p;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x2 <= x3;\nloop invariant x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\nloop invariant i2: x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p <= n;\nloop invariant 0 <= x2p <= n;\nloop invariant 0 <= x3p <= n;\nloop invariant x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\nloop invariant 0 <= x1p <= n;\nloop invariant 0 <= x2p <= n;\nloop invariant 0 <= x3p <= n;\nloop invariant x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\nloop invariant i4: x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant 0 <= x1p <= 1;\nloop invariant 0 <= x2p <= 1;\nloop invariant 0 <= x3p <= 1;\nloop invariant x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p <= 100000;\nloop invariant 0 <= x2p <= 100000;\nloop invariant 0 <= x3p <= 100000;\nloop invariant x1p <= x2p;\nloop invariant x2p >= x3p;\nloop invariant x2p - x3p <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x2 <= x3;\nloop invariant x1p <= x2p && x2p >= 0 || x2p - x3p <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x1 <= x2 && (x2 <= 0 || x2 - x3 <= 2);\nloop invariant x1p <= x2p && (x2p <= 0 || x2p - x3p <= 2);\nloop invariant x1 <= x1p && x2 <= x2p && x3 <= x3p;\nloop invariant input <= 0 ==> x1 == x2 && x2 == x3 && x3 == 0;\nloop invariant input > 0 ==> x1 <= x1p && x2 <= x2p && x3 <= x3p;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x1 <= x2 && x2 >= 0 && x2 - x3 <= 2 && (x2p >= 0 || x2p - x3p <= 2) && x1p <= x2p && x1 <= x1p && x2 <= x2p && x3 <= x3p && x1 <= x2p && x2 <= x2p && x3 <= x3p && x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2) ==> x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: x1 <= x2 && x2 >= 0 && x2 - x3 <= 2 && (x2p >= 0 || x2p - x3p <= 2) && x1p <= x2p && x1 <= x1p && x2 <= x2p && x3 <= x3p && x1 <= x2p && x2 <= x2p && x3 <= x3p && x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2) ==> x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x2;\nloop invariant x1 <= x2;\nloop invariant x2 - x3 <= 2;\nloop invariant x2 >= 0;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1p <= x2p;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2p >= 0;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2p - x3p <= 2;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1 <= x2;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2 - x3 <= 2;\nloop invariant (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\nloop invariant i2: x1 <= x2;\n\n\nloop invariant i5: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1p <= x2p;\n\n\nloop invariant i8: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1 <= x2;\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100000;\nloop invariant 0 <= x2 <= 100000;\nloop invariant 0 <= x3 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x2 - x3 <= 2;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 - x3;\nloop invariant x1 >= x2 - 2;\nloop invariant x2 >= x3 + 2;\nloop invariant x2 >= 2;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + x3;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\nloop invariant x3 <= 100000;\nloop invariant x2 <= x1 + 2;\nloop invariant x2 <= x1;\nloop invariant x2 <= 100000;\nloop invariant x1 <= x2;\nloop invariant x3 <= x2 - 2;\nloop invariant x3 >= 0;\nloop invariant x2 <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\nloop invariant i4: x1 <= x2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 29: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= input;\nloop invariant i2: 0 <= x1 <= x2;\nloop invariant i3: x2 <= x2p;\nloop invariant i4: x1 <= x1p;\nloop invariant i5: x2 - x3 <= 2;\nloop invariant i6: x2p >= 0 || x2p - x3p <= 2;\nloop invariant i7: 0 <= x3 <= x3p;\nloop invariant i8: 0 <= input <= 1;\nloop invariant i9: 0 <= x1 <= 100000;\nloop invariant i10: 0 <= x2 <= 100000;\nloop invariant i11: 0 <= x3 <= 100000;\nloop invariant i12: x1 <= x2;\nloop invariant i13: if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) then (x1 = x1p) ==> (x2 = x2p) ==> (x3 = x3p);\nloop invariant i14: if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) then (x1 = x1p) ==> (x2 = x2p) ==> (x3 = x3p) ==> (input = 0);\nloop invariant i15: x2 >= 0;\nloop invariant i16: 0 <= x1 <= x2 <= x3;\nloop invariant i17: x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2);\nloop invariant i18: x1 <= x1p && x2 <= x2p && x3 <= x3p;\nloop invariant i19: 0 <= x1p <= x2p;\nloop invariant i20: x1p >= 0;\nloop invariant i21: x2p >= 0;\nloop invariant i22: x3p >= 0;\nloop invariant i23: x2p - x3p <= 2;\nloop invariant i24: x3 <= x3p;\nloop invariant i25: x1p <= x2p;\nloop invariant i26: (x2 >= 0 && x2 - x3 <= 2) || (x2 >= 0 && x2 - x3 > 2);\nloop invariant i27: x1 <= x2 - x3;\nloop invariant i28: x2 <= 2 + x3;\nloop invariant i29: x1 <= x2p;\nloop invariant i30: x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\nloop invariant i31: 0 <= x1p <= n;\nloop invariant i32: 0 <= x2p <= n;\nloop invariant i33: 0 <= x3p <= n;\nloop invariant i34: 0 <= x1 <= 1;\nloop invariant i35: 0 <= x2 <= 1;\nloop invariant i36: 0 <= x3 <= 1;\nloop invariant i37: 0 <= x1p <= 1;\nloop invariant i38: 0 <= x2p <= 1;\nloop invariant i39: 0 <= x3p <= 1;\nloop invariant i40: 0 <= x1p <= 100000;\nloop invariant i41: 0 <= x2p <= 100000;\nloop invariant i42: 0 <= x3p <= 100000;\nloop invariant i43: x2p >= x3p;\nloop invariant i44: x1p <= x2p && x2p >= 0 || x2p - x3p <= 2;\nloop invariant i45: x1 <= x2 && (x2 <= 0 || x2 - x3 <= 2);\nloop invariant i46: x1p <= x2p && (x2p <= 0 || x2p - x3p <= 2);\nloop invariant i47: input <= 0 ==> x1 == x2 && x2 == x3 && x3 == 0;\nloop invariant i48: input > 0 ==> x1 <= x1p && x2 <= x2p && x3 <= x3p;\nloop invariant i49: x1 <= x2 && x2 >= 0 && x2 - x3 <= 2 && (x2p >= 0 || x2p - x3p <= 2) && x1p <= x2p && x1 <= x1p && x2 <= x2p && x3 <= x3p && x1 <= x2p && x2 <= x2p && x3 <= x3p && x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2) ==> x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\nloop invariant i50: 0 <= x2;\nloop invariant i51: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1p <= x2p;\nloop invariant i52: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2p >= 0;\nloop invariant i53: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2p - x3p <= 2;\nloop invariant i54: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1 <= x2;\nloop invariant i55: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2 - x3 <= 2;\nloop invariant i56: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x2 >= 0;\nloop invariant i57: x3 >= 0;\nloop invariant i58: x1 >= x2 - x3;\nloop invariant i59: x1 >= x2 - 2;\nloop invariant i60: x2 >= x3 + 2;\nloop invariant i61: x2 >= 2;\nloop invariant i62: x2 <= 100000;\nloop invariant i63: x3 <= 100000;\nloop invariant i64: x2 <= x1 + x3;\nloop invariant i65: x2 <= x1 + 2;\nloop invariant i66: x2 <= x1;\nloop invariant i67: x3 <= x2 - 2;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: x1 <= x2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i30: x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i49: x1 <= x2 && x2 >= 0 && x2 - x3 <= 2 && (x2p >= 0 || x2p - x3p <= 2) && x1p <= x2p && x1 <= x1p && x2 <= x2p && x3 <= x3p && x1 <= x2p && x2 <= x2p && x3 <= x3p && x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2) ==> x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2);\n\nloop invariant i51: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1p <= x2p;\n\n\nloop invariant i54: (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2)) ==> x1 <= x2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}\n    \n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 81,
        "success_count": 70,
        "failure_count": 11,
        "success_rate": 0.8641975308641975
    }
}