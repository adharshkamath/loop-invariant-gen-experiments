{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  while( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= y;\nloop invariant x <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;loop invariant 0 <= x <= 2;loop invariant x >= y;loop invariant y >= 0;loop invariant x >= 0;loop invariant x <= 2;loop invariant y <= 2;loop invariant x >= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 2;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x == y * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 4;\nloop invariant 0 <= x <= 4;\nloop invariant x <= y;\nloop invariant 4 <= x ==> !unknown();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (y - 2) * 2;\nloop invariant x <= (y - 2) * 2 + 2;\nloop invariant y >= (x - 4) / 2;\nloop invariant y <= (x - 4) / 2 + 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2; loop invariant 0 <= y <= 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant x >= (0 + (y - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant x >= (0 + (y - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\n*/\n```",
            "```\n/*@\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> x < 4 ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y == 0 ==> 4 <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 2;\nloop invariant 4 <= x ==> y >= 0;\nloop invariant y <= 0 ==> x < 4;\nloop invariant x >= 0 ==> x < 4;\nloop invariant x < 4 ==> x <= 2;\nloop invariant y >= 0 ==> y <= 0;\nloop invariant y <= 0 ==> y >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x + 2 * (y - 2) <= 4;\nloop invariant x + 2 * (y - 1) >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x <= 4 ==> y <= 2;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant x + 2 * (y - 2) <= 4 ==> y <= 2;\nloop invariant x + 2 * (y - 1) >= 0 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 4;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= y;\nloop invariant x <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;loop invariant 0 <= x <= 2;loop invariant x >= y;loop invariant y >= 0;loop invariant x >= 0;loop invariant x <= 2;loop invariant y <= 2;loop invariant x >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\nloop invariant i1: 0 <= y <= 2;loop invariant 0 <= x <= 2;loop invariant x >= y;loop invariant y >= 0;loop invariant x >= 0;loop invariant x <= 2;loop invariant y <= 2;loop invariant x >= 4;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 2;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x == y * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: y >= 0;\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 4;\nloop invariant 0 <= x <= 4;\nloop invariant x <= y;\nloop invariant 4 <= x ==> !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (y - 2) * 2;\nloop invariant x <= (y - 2) * 2 + 2;\nloop invariant y >= (x - 4) / 2;\nloop invariant y <= (x - 4) / 2 + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\nloop invariant i5: y >= (x - 4) / 2;\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2; loop invariant 0 <= y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant x >= (0 + (y - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant x >= (0 + (y - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant y <= (2 + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant x >= (y + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant y >= (0 + (x - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\nloop invariant x <= (2 + (y - 1) * 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 24,
                "annotations": "```\n/*@\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> x < 4 ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant y == 0 ==> 4 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 2;\nloop invariant 4 <= x ==> y >= 0;\nloop invariant y <= 0 ==> x < 4;\nloop invariant x >= 0 ==> x < 4;\nloop invariant x < 4 ==> x <= 2;\nloop invariant y >= 0 ==> y <= 0;\nloop invariant y <= 0 ==> y >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\nloop invariant x <= 2 ==> x <= 2;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y <= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 2;\nloop invariant x <= 2 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: 4 <= x ==> y >= 0;\nloop invariant i5: y <= 0 ==> x < 4;\n\n\n\nloop invariant i9: y <= 0 ==> y >= 0;\nloop invariant i10: x >= 0 ==> x >= 0;\n\nloop invariant i12: x <= 2 ==> x >= 0;\nloop invariant i13: x <= 2 ==> x <= 2;\nloop invariant i14: y >= 0 ==> y >= 0;\nloop invariant i15: y <= 0 ==> y <= 0;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x + 2 * (y - 2) <= 4;\nloop invariant x + 2 * (y - 1) >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x <= 4 ==> y <= 2;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant x + 2 * (y - 2) <= 4 ==> y <= 2;\nloop invariant x + 2 * (y - 1) >= 0 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x <= 4;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\nloop invariant 0 <= x <= 2 ==> y >= 0;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant 0 <= x <= 2 ==> y <= 2;\nloop invariant 0 <= y <= 2 ==> x >= 0;\nloop invariant 0 <= x <= 2 ==> x <= 4;\nloop invariant 0 <= y <= 2 ==> y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n\n\n\nloop invariant i10: y >= 0 ==> x >= 0;\n\nloop invariant i12: x + 2 * (y - 1) >= 0 ==> x >= 0;\nloop invariant i13: 0 <= x <= 2 ==> y >= 0;\n\n\n\n\nloop invariant i18: 0 <= y <= 2 ==> x >= 0;\nloop invariant i19: 0 <= x <= 2 ==> x <= 4;\nloop invariant i20: 0 <= y <= 2 ==> y <= 2;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 32: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: x <= y;\nloop invariant i4: x <= 4;\nloop invariant i5: 0 <= y <= 2;loop invariant 0 <= x <= 2;loop invariant x >= y;loop invariant y >= 0;loop invariant x >= 0;loop invariant x <= 2;loop invariant y <= 2;loop invariant x >= 4;\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 2;\nloop invariant i8: y >= 0;\nloop invariant i9: y <= 2;\nloop invariant i10: x == y * 2;\nloop invariant i11: 0 <= y <= 4;\nloop invariant i12: 0 <= x <= 4;\nloop invariant i13: 4 <= x ==> !unknown();\nloop invariant i14: x >= y;\nloop invariant i15: x >= (y - 2) * 2;\nloop invariant i16: x <= (y - 2) * 2 + 2;\nloop invariant i17: y >= (x - 4) / 2;\nloop invariant i18: y <= (x - 4) / 2 + 2;\nloop invariant i19: 0 <= x <= 2; loop invariant 0 <= y <= 2;\nloop invariant i20: x <= (2 + (y - 1) * 2);\nloop invariant i21: y <= (2 + (x - 1) * 2);\nloop invariant i22: x >= (0 + (y - 1) * 2);\nloop invariant i23: y >= (0 + (x - 1) * 2);\nloop invariant i24: x >= (y + (x - 1) * 2);\nloop invariant i25: y >= 0 ==> x >= 4;\nloop invariant i26: y >= 0 ==> y <= 0 ==> 4 <= x ==> x < 4 ==> true;\nloop invariant i27: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true;\nloop invariant i28: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true;\nloop invariant i29: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true;\nloop invariant i30: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true;\nloop invariant i31: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i32: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i33: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i34: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i35: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i36: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i37: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i38: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i39: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i40: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i41: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i42: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i43: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i44: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i45: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i46: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i47: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i48: y >= 0 ==> y <= 0 ==> 4 <= x ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true ==> true;\nloop invariant i49: 1 <= x <= 2;\nloop invariant i50: y == 0 ==> 4 <= x;\nloop invariant i51: 0 <= y <= 100000;\nloop invariant i52: x >= (1 + (y - 1) * y / 2);\nloop invariant i53: 4 <= x ==> y >= 0;\nloop invariant i54: y <= 0 ==> x < 4;\nloop invariant i55: x >= 0 ==> x < 4;\nloop invariant i56: x < 4 ==> x <= 2;\nloop invariant i57: y >= 0 ==> y <= 0;\nloop invariant i58: y <= 0 ==> y >= 0;\nloop invariant i59: x >= 0 ==> x >= 0;\nloop invariant i60: x >= 0 ==> x <= 2;\nloop invariant i61: x <= 2 ==> x >= 0;\nloop invariant i62: x <= 2 ==> x <= 2;\nloop invariant i63: y >= 0 ==> y >= 0;\nloop invariant i64: y <= 0 ==> y <= 0;\nloop invariant i65: x + 2 * (y - 2) <= 4;\nloop invariant i66: x + 2 * (y - 1) >= 0;\nloop invariant i67: x <= 4 ==> y <= 2;\nloop invariant i68: y >= 0 ==> x >= 0;\nloop invariant i69: x + 2 * (y - 2) <= 4 ==> y <= 2;\nloop invariant i70: x + 2 * (y - 1) >= 0 ==> x >= 0;\nloop invariant i71: 0 <= x <= 2 ==> y >= 0;\nloop invariant i72: 0 <= y <= 2 ==> x <= 4;\nloop invariant i73: 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant i74: 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant i75: 0 <= x <= 2 ==> y <= 2;\nloop invariant i76: 0 <= y <= 2 ==> x >= 0;\nloop invariant i77: 0 <= x <= 2 ==> x <= 4;\nloop invariant i78: 0 <= y <= 2 ==> y <= 2;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 2;\n\nloop invariant i4: x <= 4;\nloop invariant i5: 0 <= y <= 2;loop invariant 0 <= x <= 2;loop invariant x >= y;loop invariant y >= 0;loop invariant x >= 0;loop invariant x <= 2;loop invariant y <= 2;loop invariant x >= 4;\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 2;\nloop invariant i8: y >= 0;\nloop invariant i9: y <= 2;\nloop invariant i10: x == y * 2;\nloop invariant i11: 0 <= y <= 4;\nloop invariant i12: 0 <= x <= 4;\n\nloop invariant i14: x >= y;\nloop invariant i15: x >= (y - 2) * 2;\nloop invariant i16: x <= (y - 2) * 2 + 2;\nloop invariant i17: y >= (x - 4) / 2;\nloop invariant i18: y <= (x - 4) / 2 + 2;\nloop invariant i19: 0 <= x <= 2; loop invariant 0 <= y <= 2;\nloop invariant i20: x <= (2 + (y - 1) * 2);\nloop invariant i21: y <= (2 + (x - 1) * 2);\nloop invariant i22: x >= (0 + (y - 1) * 2);\nloop invariant i23: y >= (0 + (x - 1) * 2);\nloop invariant i24: x >= (y + (x - 1) * 2);\nloop invariant i25: y >= 0 ==> x >= 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i49: 1 <= x <= 2;\nloop invariant i50: y == 0 ==> 4 <= x;\nloop invariant i51: 0 <= y <= 100000;\nloop invariant i52: x >= (1 + (y - 1) * y / 2);\nloop invariant i53: 4 <= x ==> y >= 0;\nloop invariant i54: y <= 0 ==> x < 4;\nloop invariant i55: x >= 0 ==> x < 4;\nloop invariant i56: x < 4 ==> x <= 2;\nloop invariant i57: y >= 0 ==> y <= 0;\nloop invariant i58: y <= 0 ==> y >= 0;\nloop invariant i59: x >= 0 ==> x >= 0;\nloop invariant i60: x >= 0 ==> x <= 2;\nloop invariant i61: x <= 2 ==> x >= 0;\nloop invariant i62: x <= 2 ==> x <= 2;\nloop invariant i63: y >= 0 ==> y >= 0;\nloop invariant i64: y <= 0 ==> y <= 0;\nloop invariant i65: x + 2 * (y - 2) <= 4;\nloop invariant i66: x + 2 * (y - 1) >= 0;\nloop invariant i67: x <= 4 ==> y <= 2;\nloop invariant i68: y >= 0 ==> x >= 0;\nloop invariant i69: x + 2 * (y - 2) <= 4 ==> y <= 2;\nloop invariant i70: x + 2 * (y - 1) >= 0 ==> x >= 0;\nloop invariant i71: 0 <= x <= 2 ==> y >= 0;\nloop invariant i72: 0 <= y <= 2 ==> x <= 4;\nloop invariant i73: 0 <= x <= 2 ==> x + 2 * (y - 2) <= 4;\nloop invariant i74: 0 <= y <= 2 ==> x + 2 * (y - 1) >= 0;\nloop invariant i75: 0 <= x <= 2 ==> y <= 2;\nloop invariant i76: 0 <= y <= 2 ==> x >= 0;\nloop invariant i77: 0 <= x <= 2 ==> x <= 4;\nloop invariant i78: 0 <= y <= 2 ==> y <= 2;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 28,
        "success_count": 27,
        "failure_count": 1,
        "success_rate": 0.9642857142857143
    }
}