{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    while ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant j1 == j2;\nloop invariant x1 <= x2;\nloop invariant x1 <= 5 * n + c * n;\nloop invariant x2 <= 5 * n + c * n;\n*/\n```",
            "```\n/*@\nloop invariant i == j1;\nloop invariant i == j2;\nloop invariant i == c;\nloop invariant c == j1;\nloop invariant c == j2;\nloop invariant c == 0;\nloop invariant i == 0;\nloop invariant j1 == j2;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + c;\nloop invariant j1 == j2 + (5 * i);\nloop invariant j2 == j1 + (5 * i);\nloop invariant x1 == x2;\nloop invariant x1 == x2 + j1;\nloop invariant x2 == x2 + j2;\nloop invariant x1 == x2 + j2;\nloop invariant x2 == x1 + j1;\nloop invariant x1 == x2 + j1 + (5 * i);\nloop invariant x2 == x1 + j2 + (5 * i);\nloop invariant x1 == x2 + j1 + (5 * i);\nloop invariant x2 == x1 + j2 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\n*/\n```",
            "```\n/*@\nloop invariant n <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == j1;\nloop invariant x1 == x2;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant n == i ==> i == n;\nloop invariant i == n ==> i == n;\nloop invariant j1 == i * (5 * i + c) / 2 + c;\nloop invariant j2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == i * (5 * i + c) / 2 + c;\nloop invariant x2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant x2 == x1;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant j2 == j1;\nloop invariant n <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == j1;\nloop invariant x1 == x2;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant n == i ==> i == n;\nloop invariant i == n ==> i == n;\nloop invariant j1 == i * (5 * i + c) / 2 + c;\nloop invariant j2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == i * (5 * i + c) / 2 + c;\nloop invariant x2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant x2 == x1;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant n <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == j1;\nloop invariant x1 == x2;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant n == i ==> i == n;\nloop invariant i == n ==> i == n;\nloop invariant j1 == i * (5 * i + c) / 2 + c;\nloop invariant j2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == i * (5 * i + c) / 2 + c;\nloop invariant x2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant x2 == x1;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant n <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == j1;\nloop invariant x1 == x2;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == c + 5 * i;\nloop invariant x1 == x2;\nloop invariant x1 == 5 * i * (i + 1) / 2 + c * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (j1 == 5 * i + c);\nloop invariant (x1 == x2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == 5 * i * i + i * c;\nloop invariant x1 == j1 * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant 0 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * (i + c);\nloop invariant 0 <= j2 <= 5 * (i + c);\nloop invariant x1 == x2 + j1;\nloop invariant x1 == x2 + (5 * i + c);\nloop invariant x2 == x2 + j2;\nloop invariant x2 == x2 + (5 * i + c);\nloop invariant x1 == x2 + 5 * i + c;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant x1 == j1 * i;\nloop invariant x2 == j2 * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant x1 == j1 * i;\nloop invariant x2 == j2 * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\n*/\n```",
            "```\n/*@\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j1 >= c;\nloop invariant j1 <= 5 * n + c;\nloop invariant j2 >= c;\nloop invariant j2 <= 5 * n + c;\nloop invariant x1 >= 0;\nloop invariant x1 <= (5 * (1 + (n - 1) * n / 2) + n * c);\nloop invariant x2 >= 0;\nloop invariant x2 <= (5 * (1 + (n - 1) * n / 2) + n * c);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant 0 <= x1 <= n * j2;\nloop invariant 0 <= x2 <= n * j2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant j1 == j2;\nloop invariant 0 <= x1 <= i * (5 * i + c);\nloop invariant x1 == x2;\nloop invariant j2 == 5 * i + c + 5;\nloop invariant i < n ==> j2 < 5 * i + c + 5 + n;\nloop invariant i < n ==> j2 + 5 >= j2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant j1 == j2;\nloop invariant x1 <= x2;\nloop invariant x1 <= 5 * n + c * n;\nloop invariant x2 <= 5 * n + c * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: x1 <= x2;\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant i == j1;\nloop invariant i == j2;\nloop invariant i == c;\nloop invariant c == j1;\nloop invariant c == j2;\nloop invariant c == 0;\nloop invariant i == 0;\nloop invariant j1 == j2;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + c;\nloop invariant j1 == j2 + (5 * i);\nloop invariant j2 == j1 + (5 * i);\nloop invariant x1 == x2;\nloop invariant x1 == x2 + j1;\nloop invariant x2 == x2 + j2;\nloop invariant x1 == x2 + j2;\nloop invariant x2 == x1 + j1;\nloop invariant x1 == x2 + j1 + (5 * i);\nloop invariant x2 == x1 + j2 + (5 * i);\nloop invariant x1 == x2 + j1 + (5 * i);\nloop invariant x2 == x1 + j2 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\nloop invariant x1 == x2 + j2 + (5 * i);\nloop invariant x2 == x1 + j1 + (5 * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: j2 == 5 * i + c;\n\n\nloop invariant i13: x1 == x2;\n\n\n\n\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant n <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == j1;\nloop invariant x1 == x2;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant n == i ==> i == n;\nloop invariant i == n ==> i == n;\nloop invariant j1 == i * (5 * i + c) / 2 + c;\nloop invariant j2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == i * (5 * i + c) / 2 + c;\nloop invariant x2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant x2 == x1;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant j2 == j1;\nloop invariant n <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == j1;\nloop invariant x1 == x2;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant n == i ==> i == n;\nloop invariant i == n ==> i == n;\nloop invariant j1 == i * (5 * i + c) / 2 + c;\nloop invariant j2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == i * (5 * i + c) / 2 + c;\nloop invariant x2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant x2 == x1;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant n <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == j1;\nloop invariant x1 == x2;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant n == i ==> i == n;\nloop invariant i == n ==> i == n;\nloop invariant j1 == i * (5 * i + c) / 2 + c;\nloop invariant j2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == i * (5 * i + c) / 2 + c;\nloop invariant x2 == i * (5 * i + c) / 2 + c;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant x2 == x1;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == (c + i * (5 * i + c) / 2);\nloop invariant x2 == x1;\nloop invariant x1 == x2;\nloop invariant j1 == j2;\nloop invariant n <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == j1;\nloop invariant x1 == x2;\nloop invariant x1 == (c + i * (5 * i + c) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\nloop invariant i4: x1 == x2;\n\n\nloop invariant i7: x2 == x1;\nloop invariant i8: n == i ==> i == n;\nloop invariant i9: i == n ==> i == n;\n\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == c + 5 * i;\nloop invariant x1 == x2;\nloop invariant x1 == 5 * i * (i + 1) / 2 + c * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: j2 == c + 5 * i;\nloop invariant i4: x1 == x2;\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (j1 == 5 * i + c);\nloop invariant (x1 == x2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\nloop invariant (j2 == j1 + 5);\nloop invariant (x1 == x2 + j2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: (x1 == x2);\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == 5 * i * i + i * c;\nloop invariant x1 == j1 * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant i + j2 == n * 5 + c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: x1 == x2;\n\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: x1 == x2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant 0 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant j2 == 5 * i + c;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\nloop invariant x1 == i * (5 * i + c + c) / 2;\nloop invariant x2 == i * (5 * i + c + c) / 2;\nloop invariant x1 == x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\nloop invariant i4: j2 == 5 * i + c;\nloop invariant i5: x1 == x2;\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * (i + c);\nloop invariant 0 <= j2 <= 5 * (i + c);\nloop invariant x1 == x2 + j1;\nloop invariant x1 == x2 + (5 * i + c);\nloop invariant x2 == x2 + j2;\nloop invariant x2 == x2 + (5 * i + c);\nloop invariant x1 == x2 + 5 * i + c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant j1 == 5 * i + c;\nloop invariant x1 == x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: x1 == x2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant x1 == j1 * i;\nloop invariant x2 == j2 * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant 0 <= j2 <= 5 * i + c;\nloop invariant x1 == j1 * i;\nloop invariant x2 == j2 * i;\nloop invariant j1 == j2;\nloop invariant x1 == x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: x1 == x2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant j1 == j2;\nloop invariant x1 == x2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant j1 >= c;\nloop invariant j1 <= 5 * n + c;\nloop invariant j2 >= c;\nloop invariant j2 <= 5 * n + c;\nloop invariant x1 >= 0;\nloop invariant x1 <= (5 * (1 + (n - 1) * n / 2) + n * c);\nloop invariant x2 >= 0;\nloop invariant x2 <= (5 * (1 + (n - 1) * n / 2) + n * c);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\nloop invariant i2: x1 == x2;\nloop invariant i3: i >= 0;\n\n\n\nloop invariant i7: j2 >= c;\n\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * n + c;\nloop invariant 0 <= j2 <= 5 * n + c;\nloop invariant 0 <= x1 <= n * j2;\nloop invariant 0 <= x2 <= n * j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\n\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j1 <= 5 * i + c;\nloop invariant j1 == j2;\nloop invariant 0 <= x1 <= i * (5 * i + c);\nloop invariant x1 == x2;\nloop invariant j2 == 5 * i + c + 5;\nloop invariant i < n ==> j2 < 5 * i + c + 5 + n;\nloop invariant i < n ==> j2 + 5 >= j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\n\n\nloop invariant i5: x1 == x2;\n\nloop invariant i7: i < n ==> j2 < 5 * i + c + 5 + n;\nloop invariant i8: i < n ==> j2 + 5 >= j2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 90: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\nloop invariant i1: 0 <= j1 <= 5 * n + c;\nloop invariant i2: j1 == j2;\nloop invariant i3: x1 <= x2;\nloop invariant i4: x1 <= 5 * n + c * n;\nloop invariant i5: x2 <= 5 * n + c * n;\nloop invariant i6: i == j1;\nloop invariant i7: i == j2;\nloop invariant i8: i == c;\nloop invariant i9: c == j1;\nloop invariant i10: c == j2;\nloop invariant i11: c == 0;\nloop invariant i12: i == 0;\nloop invariant i13: j1 == 5 * i + c;\nloop invariant i14: j2 == 5 * i + c;\nloop invariant i15: j1 == j2 + (5 * i);\nloop invariant i16: j2 == j1 + (5 * i);\nloop invariant i17: x1 == x2;\nloop invariant i18: x1 == x2 + j1;\nloop invariant i19: x2 == x2 + j2;\nloop invariant i20: x1 == x2 + j2;\nloop invariant i21: x2 == x1 + j1;\nloop invariant i22: x1 == x2 + j1 + (5 * i);\nloop invariant i23: x2 == x1 + j2 + (5 * i);\nloop invariant i24: x1 == x2 + j2 + (5 * i);\nloop invariant i25: x2 == x1 + j1 + (5 * i);\nloop invariant i26: n <= i <= n;\nloop invariant i27: j2 == j1;\nloop invariant i28: x1 == (c + i * (5 * i + c) / 2);\nloop invariant i29: x2 == (c + i * (5 * i + c) / 2);\nloop invariant i30: x2 == x1;\nloop invariant i31: n == i ==> i == n;\nloop invariant i32: i == n ==> i == n;\nloop invariant i33: j1 == i * (5 * i + c) / 2 + c;\nloop invariant i34: j2 == i * (5 * i + c) / 2 + c;\nloop invariant i35: x1 == i * (5 * i + c) / 2 + c;\nloop invariant i36: x2 == i * (5 * i + c) / 2 + c;\nloop invariant i37: 0 <= i <= n;\nloop invariant i38: j2 == c + 5 * i;\nloop invariant i39: x1 == 5 * i * (i + 1) / 2 + c * i;\nloop invariant i40: (j1 == 5 * i + c);\nloop invariant i41: (x1 == x2);\nloop invariant i42: (j2 == j1 + 5);\nloop invariant i43: (x1 == x2 + j2);\nloop invariant i44: 1 <= i <= n;\nloop invariant i45: 0 <= j2 <= 5 * n + c;\nloop invariant i46: i + j2 == n * 5 + c;\nloop invariant i47: x1 == 5 * i * i + i * c;\nloop invariant i48: x1 == j1 * i;\nloop invariant i49: 0 <= c;\nloop invariant i50: x1 == i * (5 * i + c + c) / 2;\nloop invariant i51: x2 == i * (5 * i + c + c) / 2;\nloop invariant i52: 0 <= j1 <= 5 * (i + c);\nloop invariant i53: 0 <= j2 <= 5 * (i + c);\nloop invariant i54: x1 == x2 + (5 * i + c);\nloop invariant i55: x2 == x2 + (5 * i + c);\nloop invariant i56: x1 == x2 + 5 * i + c;\nloop invariant i57: 0 <= j1 <= 5 * i + c;\nloop invariant i58: 0 <= j2 <= 5 * i + c;\nloop invariant i59: x2 == j2 * i;\nloop invariant i60: i >= 0;\nloop invariant i61: i <= n;\nloop invariant i62: j1 >= c;\nloop invariant i63: j1 <= 5 * n + c;\nloop invariant i64: j2 >= c;\nloop invariant i65: j2 <= 5 * n + c;\nloop invariant i66: x1 >= 0;\nloop invariant i67: x1 <= (5 * (1 + (n - 1) * n / 2) + n * c);\nloop invariant i68: x2 >= 0;\nloop invariant i69: x2 <= (5 * (1 + (n - 1) * n / 2) + n * c);\nloop invariant i70: i1;\nloop invariant i71: i2;\nloop invariant i72: i3;\nloop invariant i73: i4;\nloop invariant i74: i5;\nloop invariant i75: i6;\nloop invariant i76: i7;\nloop invariant i77: i8;\nloop invariant i78: i9;\nloop invariant i79: i10;\nloop invariant i80: i11;\nloop invariant i81: i12;\nloop invariant i82: i13;\nloop invariant i83: i14;\nloop invariant i84: i15;\nloop invariant i85: i16;\nloop invariant i86: i17;\nloop invariant i87: i18;\nloop invariant i88: i19;\nloop invariant i89: i20;\nloop invariant i90: i21;\nloop invariant i91: i22;\nloop invariant i92: i23;\nloop invariant i93: i24;\nloop invariant i94: i25;\nloop invariant i95: i26;\nloop invariant i96: i27;\nloop invariant i97: i28;\nloop invariant i98: i29;\nloop invariant i99: i30;\nloop invariant i100: i31;\nloop invariant i101: i32;\nloop invariant i102: i33;\nloop invariant i103: i34;\nloop invariant i104: i35;\nloop invariant i105: i36;\nloop invariant i106: i37;\nloop invariant i107: i38;\nloop invariant i108: i39;\nloop invariant i109: i40;\nloop invariant i110: i41;\nloop invariant i111: i42;\nloop invariant i112: i43;\nloop invariant i113: i44;\nloop invariant i114: i45;\nloop invariant i115: i46;\nloop invariant i116: i47;\nloop invariant i117: i48;\nloop invariant i118: i49;\nloop invariant i119: i50;\nloop invariant i120: i51;\nloop invariant i121: i52;\nloop invariant i122: i53;\nloop invariant i123: i54;\nloop invariant i124: i55;\nloop invariant i125: i56;\nloop invariant i126: i57;\nloop invariant i127: i58;\nloop invariant i128: i59;\nloop invariant i129: i60;\nloop invariant i130: i61;\nloop invariant i131: i62;\nloop invariant i132: i63;\nloop invariant i133: i64;\nloop invariant i134: i65;\nloop invariant i135: i66;\nloop invariant i136: i67;\nloop invariant i137: i68;\nloop invariant i138: i69;\nloop invariant i139: i70;\nloop invariant i140: i71;\nloop invariant i141: i72;\nloop invariant i142: i73;\nloop invariant i143: i74;\nloop invariant i144: i75;\nloop invariant i145: i76;\nloop invariant i146: i77;\nloop invariant i147: i78;\nloop invariant i148: i79;\nloop invariant i149: i80;\nloop invariant i150: i81;\nloop invariant i151: i82;\nloop invariant i152: i83;\nloop invariant i153: i84;\nloop invariant i154: i85;\nloop invariant i155: i86;\nloop invariant i156: i87;\nloop invariant i157: i88;\nloop invariant i158: i89;\nloop invariant i159: i90;\nloop invariant i160: i91;\nloop invariant i161: i92;\nloop invariant i162: i93;\nloop invariant i163: i94;\nloop invariant i164: i95;\nloop invariant i165: i96;\nloop invariant i166: i97;\nloop invariant i167: i98;\nloop invariant i168: i99;\nloop invariant i169: i100;\nloop invariant i170: i101;\nloop invariant i171: i102;\nloop invariant i172: i103;\nloop invariant i173: i104;\nloop invariant i174: i105;\nloop invariant i175: i106;\nloop invariant i176: i107;\nloop invariant i177: i108;\nloop invariant i178: i109;\nloop invariant i179: i110;\nloop invariant i180: i111;\nloop invariant i181: i112;\nloop invariant i182: i113;\nloop invariant i183: i114;\nloop invariant i184: i115;\nloop invariant i185: i116;\nloop invariant i186: i117;\nloop invariant i187: i118;\nloop invariant i188: i119;\nloop invariant i189: i120;\nloop invariant i190: i121;\nloop invariant i191: i122;\nloop invariant i192: i123;\nloop invariant i193: i124;\nloop invariant i194: i125;\nloop invariant i195: i126;\nloop invariant i196: i127;\nloop invariant i197: i128;\nloop invariant i198: i129;\nloop invariant i199: i130;\nloop invariant i200: i131;\nloop invariant i201: i132;\nloop invariant i202: i133;\nloop invariant i203: i134;\nloop invariant i204: i135;\nloop invariant i205: i136;\nloop invariant i206: i137;\nloop invariant i207: i138;\nloop invariant i208: i139;\nloop invariant i209: i140;\nloop invariant i210: i141;\nloop invariant i211: i142;\nloop invariant i212: i143;\nloop invariant i213: i144;\nloop invariant i214: i145;\nloop invariant i215: i146;\nloop invariant i216: i147;\nloop invariant i217: i148;\nloop invariant i218: i149;\nloop invariant i219: i150;\nloop invariant i220: i151;\nloop invariant i221: i152;\nloop invariant i222: i153;\nloop invariant i223: i154;\nloop invariant i224: i155;\nloop invariant i225: i156;\nloop invariant i226: i157;\nloop invariant i227: i158;\nloop invariant i228: 0 <= x1 <= n * j2;\nloop invariant i229: 0 <= x2 <= n * j2;\nloop invariant i230: 0 <= x1 <= i * (5 * i + c);\nloop invariant i231: j2 == 5 * i + c + 5;\nloop invariant i232: i < n ==> j2 < 5 * i + c + 5 + n;\nloop invariant i233: i < n ==> j2 + 5 >= j2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
        "combined_annotation_num_solver_calls": 187,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    /*@\n\n\nloop invariant i3: x1 <= x2;\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: j2 == 5 * i + c;\n\n\nloop invariant i17: x1 == x2;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i30: x2 == x1;\nloop invariant i31: n == i ==> i == n;\nloop invariant i32: i == n ==> i == n;\n\n\n\n\n\nloop invariant i38: j2 == c + 5 * i;\n\n\nloop invariant i41: (x1 == x2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i60: i >= 0;\n\n\n\nloop invariant i64: j2 >= c;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i232: i < n ==> j2 < 5 * i + c + 5 + n;\nloop invariant i233: i < n ==> j2 + 5 >= j2;\n*/\nwhile ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c"
        ],
        "skipped": [],
        "total": 41,
        "success_count": 37,
        "failure_count": 4,
        "success_rate": 0.9024390243902439
    }
}