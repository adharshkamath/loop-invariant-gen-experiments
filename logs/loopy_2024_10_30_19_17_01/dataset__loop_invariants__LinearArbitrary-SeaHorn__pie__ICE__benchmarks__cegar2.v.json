{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= m <= N;\nloop invariant m == x - 1 ==> input;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant m < N ==> input;\nloop invariant m < N ==> v1;\nloop invariant m < N ==> v2;\nloop invariant m < N ==> v3;\nloop invariant N > 0 ==> 0 <= m;\nloop invariant N > 0 ==> m < N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (x == N) ==> (0 <= m < N);\nloop invariant (0 <= m < N) ==> ((0 <= x) && (x <= N));\nloop invariant (0 <= m < N) ==> (0 <= m);\nloop invariant (0 <= m < N) ==> (m < N);\nloop invariant (0 <= m < N) ==> (0 <= x);\nloop invariant (0 <= m < N) ==> (x <= N);\nloop invariant (0 <= m < N) ==> (x == N);\nloop invariant (0 <= m < N) ==> (x == N) ==> (0 <= m < N);\nloop invariant (0 <= m < N) ==> (x == N) ==> (0 <= m);\nloop invariant (0 <= m < N) ==> (x == N) ==> (m < N);\nloop invariant (0 <= m < N) ==> (x == N) ==> (0 <= x);\nloop invariant (0 <= m < N) ==> (x == N) ==> (x <= N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= input;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant (input == 0) ==> (m == x);\nloop invariant (input != 0) ==> (m == 0);\nloop invariant (x == N) ==> (m == x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (N > 0) ==> (0 <= m <= N);\nloop invariant (x < N) ==> (m = x);\nloop invariant (x >= N) ==> (m >= x);\nloop invariant (x >= N) ==> (m <= N);\nloop invariant (x < N) ==> (m < N);\nloop invariant (x >= N) ==> (m < N);\nloop invariant (x < N) ==> (m <= x);\nloop invariant (x >= N) ==> (m <= x);\nloop invariant (x < N) ==> (x <= N);\nloop invariant (x >= N) ==> (x <= N);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x >= N) ==> (x >= 0);\nloop invariant (x < N) ==> (m >= 0);\nloop invariant (x >= N) ==> (m >= 0);\nloop invariant (x < N) ==> (m < N);\nloop invariant (x >= N) ==> (m < N);\nloop invariant (x < N) ==> (m <= x);\nloop invariant (x >= N) ==> (m <= x);\nloop invariant (x < N) ==> (m >= 0);\nloop invariant (x >= N) ==> (m >= 0);\nloop invariant (x < N) ==> (m <= N);\nloop invariant (x >= N) ==> (m <= N);\nloop invariant (x < N) ==> (m >= 0);\nloop invariant (x >= N) ==> (m >= 0);\nloop invariant (x < N) ==> (m <= N);\nloop invariant (x >= N) ==> (m <= N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m < N;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant input ==> (m == x - 1);\nloop invariant !input ==> (m == m);\nloop invariant (N > 0) ==> (0 <= m) && (m < N);\nloop invariant (N <= 0) ==> (m == m);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= N;\nloop invariant (m == x ==> input) ==> (0 <= x <= N);\nloop invariant x <= m ==> (input ==> m == (x - 1));\nloop invariant x <= m ==> (input ==> (x - 1) <= N);\nloop invariant x <= m ==> (input ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant m >= 0 && m < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= N;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= input <= unknown_int();\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\nloop invariant N > 0 ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant input <= 1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant input == 0 ==> m == x;\nloop invariant input == 1 ==> m == x;\nloop invariant input >= 2 ==> m == m;\nloop invariant v1 == 0 ==> m == m;\nloop invariant v2 == 0 ==> m == m;\nloop invariant v3 == 0 ==> m == m;\nloop invariant v1 >= 1 ==> m == m;\nloop invariant v2 >= 1 ==> m == m;\nloop invariant v3 >= 1 ==> m == m;\nloop invariant v1 <= -1 ==> m == m;\nloop invariant v2 <= -1 ==> m == m;\nloop invariant v3 <= -1 ==> m == m;\nloop invariant m == 0 ==> m == m;\nloop invariant m == N ==> m == m;\nloop invariant m == x ==> m == m;\nloop invariant m == 0 ==> N == 0;\nloop invariant N <= 0 ==> N == 0;\nloop invariant m == x ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> N == N;\nloop invariant 0 <= N <= 100000;\nloop invariant 0 <= m <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant x <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant (N > 0) ==> (m < N);\nloop invariant (N > 0) ==> (0 <= m);\nloop invariant (N > 0) ==> (x <= N);\nloop invariant (N > 0) ==> (m >= 0);\nloop invariant (N > 0) ==> (0 <= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (x == N ==> m == N);\nloop invariant 0 <= input;\nloop invariant 1 <= input;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant (x == N ==> input == 0);\nloop invariant (x == N ==> v1 == 0);\nloop invariant (x == N ==> v2 == 0);\nloop invariant (x == N ==> v3 == 0);\nloop invariant (x == N ==> (m == N ==> m <= N));\nloop invariant (x == N ==> (m == N ==> m >= 0));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v1 >= 0)));\nloop invariant (x == N ==> (m == N ==> (v2 == 0 ==> v2 >= 0)));\nloop invariant (x == N ==> (m == N ==> (v3 == 0 ==> v3 >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v1 <= N)));\nloop invariant (x == N ==> (m == N ==> (v2 == 0 ==> v2 <= N)));\nloop invariant (x == N ==> (m == N ==> (v3 == 0 ==> v3 <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v2 <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant (x == N ==> (m == N ==> (v2 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\n*/\n```",
            "```\n/*@\nloop invariant N > 0 ==> 0 <= x <= N;\nloop invariant N > 0 ==> 0 <= m <= N;\nloop invariant N > 0 ==> 0 <= input <= unknown_int();\nloop invariant N > 0 ==> 0 <= v1 <= unknown_int();\nloop invariant N > 0 ==> 0 <= v2 <= unknown_int();\nloop invariant N > 0 ==> 0 <= v3 <= unknown_int();\nloop invariant N <= 0 ==> x == 0;\nloop invariant N <= 0 ==> m == 0;\nloop invariant N <= 0 ==> input == 0;\nloop invariant N <= 0 ==> v1 == 0;\nloop invariant N <= 0 ==> v2 == 0;\nloop invariant N <= 0 ==> v3 == 0;\nloop invariant N > 0 ==> m == x;\nloop invariant N <= 0 ==> m == 0;\nloop invariant N > 0 ==> (m <= N && m >= 0);\nloop invariant N <= 0 ==> m == 0;\nloop invariant N > 0 ==> (x <= N && x >= 0);\nloop invariant N <= 0 ==> x == 0;\nloop invariant N > 0 ==> (x+1) <= N;\nloop invariant N <= 0 ==> x == 0;\nloop invariant N > 0 ==> (x >= 0 && x < N);\nloop invariant N <= 0 ==> x == 0;\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N <= 0 ==> input == 0;\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N <= 0 ==> v1 == 0;\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N <= 0 ==> v2 == 0;\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N <= 0 ==> v3 == 0;\nloop invariant N <= 0 ==> m == 0;\nloop invariant N <= 0 ==> x == 0;\nloop invariant N <= 0 ==> input == 0;\nloop invariant N <= 0 ==> v1 == 0;\nloop invariant N <= 0 ==> v2 == 0;\nloop invariant N <= 0 ==> v3 == 0;\nloop invariant N > 0 ==> (m <= N && m >= 0);\nloop invariant N > 0 ==> (x <= N && x >= 0);\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N > 0 ==> (x+1) <= N;\nloop invariant N > 0 ==> (x >= 0 && x < N);\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N > 0 ==> (m <= N && m >= 0);\nloop invariant N > 0 ==> (x <= N && x >= 0);\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N > 0 ==> (x+1) <= N;\nloop invariant N > 0 ==> (x >= 0 && x < N);\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N > 0 ==> (m <= N && m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant (N <= 0) ==> (m == 0);\nloop invariant (N == 0) ==> (m == 0);\nloop invariant (N > 0) ==> (0 <= m) && (m < N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= x);\nloop invariant (N > 0) ==> (0 <= m) && (m < x);\nloop invariant (N > 0) ==> (0 <= m) && (m < N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= x);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= N;\nloop invariant m == x - 1 ==> input;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant m < N ==> input;\nloop invariant m < N ==> v1;\nloop invariant m < N ==> v2;\nloop invariant m < N ==> v3;\nloop invariant N > 0 ==> 0 <= m;\nloop invariant N > 0 ==> m < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: N > 0 ==> m < N;\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (x == N) ==> (0 <= m < N);\nloop invariant (0 <= m < N) ==> ((0 <= x) && (x <= N));\nloop invariant (0 <= m < N) ==> (0 <= m);\nloop invariant (0 <= m < N) ==> (m < N);\nloop invariant (0 <= m < N) ==> (0 <= x);\nloop invariant (0 <= m < N) ==> (x <= N);\nloop invariant (0 <= m < N) ==> (x == N);\nloop invariant (0 <= m < N) ==> (x == N) ==> (0 <= m < N);\nloop invariant (0 <= m < N) ==> (x == N) ==> (0 <= m);\nloop invariant (0 <= m < N) ==> (x == N) ==> (m < N);\nloop invariant (0 <= m < N) ==> (x == N) ==> (0 <= x);\nloop invariant (0 <= m < N) ==> (x == N) ==> (x <= N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\nloop invariant i4: (0 <= m < N) ==> ((0 <= x) && (x <= N));\nloop invariant i5: (0 <= m < N) ==> (0 <= m);\nloop invariant i6: (0 <= m < N) ==> (m < N);\nloop invariant i7: (0 <= m < N) ==> (0 <= x);\nloop invariant i8: (0 <= m < N) ==> (x <= N);\n\nloop invariant i10: (0 <= m < N) ==> (x == N) ==> (0 <= m < N);\nloop invariant i11: (0 <= m < N) ==> (x == N) ==> (0 <= m);\nloop invariant i12: (0 <= m < N) ==> (x == N) ==> (m < N);\nloop invariant i13: (0 <= m < N) ==> (x == N) ==> (0 <= x);\nloop invariant i14: (0 <= m < N) ==> (x == N) ==> (x <= N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= input;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant (input == 0) ==> (m == x);\nloop invariant (input != 0) ==> (m == 0);\nloop invariant (x == N) ==> (m == x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (N > 0) ==> (0 <= m <= N);\nloop invariant (x < N) ==> (m = x);\nloop invariant (x >= N) ==> (m >= x);\nloop invariant (x >= N) ==> (m <= N);\nloop invariant (x < N) ==> (m < N);\nloop invariant (x >= N) ==> (m < N);\nloop invariant (x < N) ==> (m <= x);\nloop invariant (x >= N) ==> (m <= x);\nloop invariant (x < N) ==> (x <= N);\nloop invariant (x >= N) ==> (x <= N);\nloop invariant (x < N) ==> (x >= 0);\nloop invariant (x >= N) ==> (x >= 0);\nloop invariant (x < N) ==> (m >= 0);\nloop invariant (x >= N) ==> (m >= 0);\nloop invariant (x < N) ==> (m < N);\nloop invariant (x >= N) ==> (m < N);\nloop invariant (x < N) ==> (m <= x);\nloop invariant (x >= N) ==> (m <= x);\nloop invariant (x < N) ==> (m >= 0);\nloop invariant (x >= N) ==> (m >= 0);\nloop invariant (x < N) ==> (m <= N);\nloop invariant (x >= N) ==> (m <= N);\nloop invariant (x < N) ==> (m >= 0);\nloop invariant (x >= N) ==> (m >= 0);\nloop invariant (x < N) ==> (m <= N);\nloop invariant (x >= N) ==> (m <= N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: (N > 0) ==> (0 <= m <= N);\n\n\n\nloop invariant i6: (x < N) ==> (m < N);\n\nloop invariant i8: (x < N) ==> (m <= x);\nloop invariant i9: (x >= N) ==> (m <= x);\nloop invariant i10: (x < N) ==> (x <= N);\n\nloop invariant i12: (x < N) ==> (x >= 0);\nloop invariant i13: (x >= N) ==> (x >= 0);\nloop invariant i14: (x < N) ==> (m >= 0);\nloop invariant i15: (x >= N) ==> (m >= 0);\nloop invariant i16: (x < N) ==> (m <= N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m < N;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant input ==> (m == x - 1);\nloop invariant !input ==> (m == m);\nloop invariant (N > 0) ==> (0 <= m) && (m < N);\nloop invariant (N <= 0) ==> (m == m);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\nloop invariant i8: !input ==> (m == m);\n\nloop invariant i10: (N <= 0) ==> (m == m);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= N;\nloop invariant (m == x ==> input) ==> (0 <= x <= N);\nloop invariant x <= m ==> (input ==> m == (x - 1));\nloop invariant x <= m ==> (input ==> (x - 1) <= N);\nloop invariant x <= m ==> (input ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\nloop invariant i6: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i7: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i8: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i9: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i10: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i11: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i12: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i13: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i14: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i15: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i16: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i17: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant m >= 0 && m < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= N;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= input <= unknown_int();\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\nloop invariant N > 0 ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\nloop invariant i8: N > 0 ==> (0 <= m) ==> (m < N);\nloop invariant i9: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i10: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i11: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i12: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i13: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i14: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i15: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i16: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i17: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i18: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m <= x;\nloop invariant input <= 1;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant x >= 0 ==> (input == 0) ==> (v1 == v1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: m >= 0;\n\nloop invariant i5: m <= x;\n\n\n\n\n\n\n\nloop invariant i13: x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant i14: x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant i15: x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant i16: x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant i17: x >= 0 ==> (input == 0) ==> (v3 == v3);\n\nloop invariant i19: x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant i20: x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant i21: x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant i22: x >= 0 ==> (input == 1) ==> (v3 == v3);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant input == 0 ==> m == x;\nloop invariant input == 1 ==> m == x;\nloop invariant input >= 2 ==> m == m;\nloop invariant v1 == 0 ==> m == m;\nloop invariant v2 == 0 ==> m == m;\nloop invariant v3 == 0 ==> m == m;\nloop invariant v1 >= 1 ==> m == m;\nloop invariant v2 >= 1 ==> m == m;\nloop invariant v3 >= 1 ==> m == m;\nloop invariant v1 <= -1 ==> m == m;\nloop invariant v2 <= -1 ==> m == m;\nloop invariant v3 <= -1 ==> m == m;\nloop invariant m == 0 ==> m == m;\nloop invariant m == N ==> m == m;\nloop invariant m == x ==> m == m;\nloop invariant m == 0 ==> N == 0;\nloop invariant N <= 0 ==> N == 0;\nloop invariant m == x ==> m == x;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> N == N;\nloop invariant 0 <= N <= 100000;\nloop invariant 0 <= m <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant m <= N;\nloop invariant x <= N;\nloop invariant m >= 0;\nloop invariant m <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\nloop invariant m == 0 ==> m == 0;\nloop invariant m == N ==> m == N;\nloop invariant m == x ==> m == x;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\n\n\nloop invariant i5: input >= 2 ==> m == m;\nloop invariant i6: v1 == 0 ==> m == m;\nloop invariant i7: v2 == 0 ==> m == m;\nloop invariant i8: v3 == 0 ==> m == m;\nloop invariant i9: v1 >= 1 ==> m == m;\nloop invariant i10: v2 >= 1 ==> m == m;\nloop invariant i11: v3 >= 1 ==> m == m;\nloop invariant i12: v1 <= -1 ==> m == m;\nloop invariant i13: v2 <= -1 ==> m == m;\nloop invariant i14: v3 <= -1 ==> m == m;\nloop invariant i15: m == 0 ==> m == m;\nloop invariant i16: m == N ==> m == m;\nloop invariant i17: m == x ==> m == m;\n\n\nloop invariant i20: m == x ==> m == x;\nloop invariant i21: m == 0 ==> m == 0;\nloop invariant i22: m == N ==> m == N;\nloop invariant i23: m == x ==> N == N;\n\n\n\nloop invariant i27: m >= 0;\nloop invariant i28: x >= 0;\nloop invariant i29: m <= x;\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant (N > 0) ==> (m < N);\nloop invariant (N > 0) ==> (0 <= m);\nloop invariant (N > 0) ==> (x <= N);\nloop invariant (N > 0) ==> (m >= 0);\nloop invariant (N > 0) ==> (0 <= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: (N > 0) ==> (m < N);\nloop invariant i4: (N > 0) ==> (0 <= m);\nloop invariant i5: (N > 0) ==> (x <= N);\nloop invariant i6: (N > 0) ==> (m >= 0);\nloop invariant i7: (N > 0) ==> (0 <= x);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (x == N ==> m == N);\nloop invariant 0 <= input;\nloop invariant 1 <= input;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant (x == N ==> input == 0);\nloop invariant (x == N ==> v1 == 0);\nloop invariant (x == N ==> v2 == 0);\nloop invariant (x == N ==> v3 == 0);\nloop invariant (x == N ==> (m == N ==> m <= N));\nloop invariant (x == N ==> (m == N ==> m >= 0));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v1 >= 0)));\nloop invariant (x == N ==> (m == N ==> (v2 == 0 ==> v2 >= 0)));\nloop invariant (x == N ==> (m == N ==> (v3 == 0 ==> v3 >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v1 <= N)));\nloop invariant (x == N ==> (m == N ==> (v2 == 0 ==> v2 <= N)));\nloop invariant (x == N ==> (m == N ==> (v3 == 0 ==> v3 <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v2 <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant (x == N ==> (m == N ==> (v2 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: (x == N ==> (m == N ==> m <= N));\n\nloop invariant i15: (x == N ==> (m == N ==> (v1 == 0 ==> v1 >= 0)));\nloop invariant i16: (x == N ==> (m == N ==> (v2 == 0 ==> v2 >= 0)));\nloop invariant i17: (x == N ==> (m == N ==> (v3 == 0 ==> v3 >= 0)));\n\n\n\n\n\n\n\nloop invariant i25: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant N > 0 ==> 0 <= x <= N;\nloop invariant N > 0 ==> 0 <= m <= N;\nloop invariant N > 0 ==> 0 <= input <= unknown_int();\nloop invariant N > 0 ==> 0 <= v1 <= unknown_int();\nloop invariant N > 0 ==> 0 <= v2 <= unknown_int();\nloop invariant N > 0 ==> 0 <= v3 <= unknown_int();\nloop invariant N <= 0 ==> x == 0;\nloop invariant N <= 0 ==> m == 0;\nloop invariant N <= 0 ==> input == 0;\nloop invariant N <= 0 ==> v1 == 0;\nloop invariant N <= 0 ==> v2 == 0;\nloop invariant N <= 0 ==> v3 == 0;\nloop invariant N > 0 ==> m == x;\nloop invariant N <= 0 ==> m == 0;\nloop invariant N > 0 ==> (m <= N && m >= 0);\nloop invariant N <= 0 ==> m == 0;\nloop invariant N > 0 ==> (x <= N && x >= 0);\nloop invariant N <= 0 ==> x == 0;\nloop invariant N > 0 ==> (x+1) <= N;\nloop invariant N <= 0 ==> x == 0;\nloop invariant N > 0 ==> (x >= 0 && x < N);\nloop invariant N <= 0 ==> x == 0;\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N <= 0 ==> input == 0;\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N <= 0 ==> v1 == 0;\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N <= 0 ==> v2 == 0;\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N <= 0 ==> v3 == 0;\nloop invariant N <= 0 ==> m == 0;\nloop invariant N <= 0 ==> x == 0;\nloop invariant N <= 0 ==> input == 0;\nloop invariant N <= 0 ==> v1 == 0;\nloop invariant N <= 0 ==> v2 == 0;\nloop invariant N <= 0 ==> v3 == 0;\nloop invariant N > 0 ==> (m <= N && m >= 0);\nloop invariant N > 0 ==> (x <= N && x >= 0);\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N > 0 ==> (x+1) <= N;\nloop invariant N > 0 ==> (x >= 0 && x < N);\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N > 0 ==> (m <= N && m >= 0);\nloop invariant N > 0 ==> (x <= N && x >= 0);\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N > 0 ==> (x+1) <= N;\nloop invariant N > 0 ==> (x >= 0 && x < N);\nloop invariant N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant N > 0 ==> (m <= N && m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\nloop invariant i1: N > 0 ==> 0 <= x <= N;\nloop invariant i2: N > 0 ==> 0 <= m <= N;\n\n\n\n\nloop invariant i7: N <= 0 ==> x == 0;\nloop invariant i8: N <= 0 ==> m == 0;\n\n\n\n\n\nloop invariant i14: N > 0 ==> (m <= N && m >= 0);\nloop invariant i15: N > 0 ==> (x <= N && x >= 0);\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant (N <= 0) ==> (m == 0);\nloop invariant (N == 0) ==> (m == 0);\nloop invariant (N > 0) ==> (0 <= m) && (m < N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= x);\nloop invariant (N > 0) ==> (0 <= m) && (m < x);\nloop invariant (N > 0) ==> (0 <= m) && (m < N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= x);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant (N > 0) ==> (0 <= m) && (m <= N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: (N <= 0) ==> (m == 0);\nloop invariant i4: (N == 0) ==> (m == 0);\nloop invariant i5: (N > 0) ==> (0 <= m) && (m < N);\nloop invariant i6: (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant i7: (N > 0) ==> (0 <= m) && (m <= x);\n\nloop invariant i9: (N > 0) ==> (0 <= m) && (m <= N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant N > 0 ==> (0 <= m) && (m < N);\nloop invariant m <= x;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: N > 0 ==> (0 <= m) && (m < N);\nloop invariant i5: m <= x;\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 47: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\nloop invariant i1: 0 <= m <= N;\nloop invariant i2: m == x - 1 ==> input;\nloop invariant i3: 0 <= x <= N;\nloop invariant i4: 0 <= input <= 1;\nloop invariant i5: 0 <= v1;\nloop invariant i6: 0 <= v2;\nloop invariant i7: 0 <= v3;\nloop invariant i8: m < N ==> input;\nloop invariant i9: m < N ==> v1;\nloop invariant i10: m < N ==> v2;\nloop invariant i11: m < N ==> v3;\nloop invariant i12: N > 0 ==> 0 <= m;\nloop invariant i13: N > 0 ==> m < N;\nloop invariant i14: (x == N) ==> (0 <= m < N);\nloop invariant i15: (0 <= m < N) ==> ((0 <= x) && (x <= N));\nloop invariant i16: (0 <= m < N) ==> (0 <= m);\nloop invariant i17: (0 <= m < N) ==> (m < N);\nloop invariant i18: (0 <= m < N) ==> (0 <= x);\nloop invariant i19: (0 <= m < N) ==> (x <= N);\nloop invariant i20: (0 <= m < N) ==> (x == N);\nloop invariant i21: (0 <= m < N) ==> (x == N) ==> (0 <= m < N);\nloop invariant i22: (0 <= m < N) ==> (x == N) ==> (0 <= m);\nloop invariant i23: (0 <= m < N) ==> (x == N) ==> (m < N);\nloop invariant i24: (0 <= m < N) ==> (x == N) ==> (0 <= x);\nloop invariant i25: (0 <= m < N) ==> (x == N) ==> (x <= N);\nloop invariant i26: 0 <= input;\nloop invariant i27: (input == 0) ==> (m == x);\nloop invariant i28: (input != 0) ==> (m == 0);\nloop invariant i29: (x == N) ==> (m == x);\nloop invariant i30: (N > 0) ==> (0 <= m <= N);\nloop invariant i31: (x < N) ==> (m = x);\nloop invariant i32: (x >= N) ==> (m >= x);\nloop invariant i33: (x >= N) ==> (m <= N);\nloop invariant i34: (x < N) ==> (m < N);\nloop invariant i35: (x >= N) ==> (m < N);\nloop invariant i36: (x < N) ==> (m <= x);\nloop invariant i37: (x >= N) ==> (m <= x);\nloop invariant i38: (x < N) ==> (x <= N);\nloop invariant i39: (x >= N) ==> (x <= N);\nloop invariant i40: (x < N) ==> (x >= 0);\nloop invariant i41: (x >= N) ==> (x >= 0);\nloop invariant i42: (x < N) ==> (m >= 0);\nloop invariant i43: (x >= N) ==> (m >= 0);\nloop invariant i44: (x < N) ==> (m <= N);\nloop invariant i45: 0 <= m < N;\nloop invariant i46: input ==> (m == x - 1);\nloop invariant i47: !input ==> (m == m);\nloop invariant i48: (N > 0) ==> (0 <= m) && (m < N);\nloop invariant i49: (N <= 0) ==> (m == m);\nloop invariant i50: (m == x ==> input) ==> (0 <= x <= N);\nloop invariant i51: x <= m ==> (input ==> m == (x - 1));\nloop invariant i52: x <= m ==> (input ==> (x - 1) <= N);\nloop invariant i53: x <= m ==> (input ==> (x - 1) < N);\nloop invariant i54: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i55: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i56: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i57: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i58: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i59: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i60: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i61: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i62: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i63: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i64: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i65: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i66: m >= 0 && m < x;\nloop invariant i67: 0 <= N;\nloop invariant i68: 0 <= input <= unknown_int();\nloop invariant i69: 0 <= v1 <= unknown_int();\nloop invariant i70: 0 <= v2 <= unknown_int();\nloop invariant i71: 0 <= v3 <= unknown_int();\nloop invariant i72: N > 0 ==> (0 <= m) ==> (m < N);\nloop invariant i73: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i74: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i75: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i76: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i77: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i78: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i79: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i80: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i81: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i82: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i83: x >= 0;\nloop invariant i84: x <= N;\nloop invariant i85: m >= 0;\nloop invariant i86: m <= N;\nloop invariant i87: m <= x;\nloop invariant i88: input <= 1;\nloop invariant i89: v1 >= 0;\nloop invariant i90: v2 >= 0;\nloop invariant i91: v3 >= 0;\nloop invariant i92: v1 <= N;\nloop invariant i93: v2 <= N;\nloop invariant i94: v3 <= N;\nloop invariant i95: x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant i96: x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant i97: x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant i98: x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant i99: x >= 0 ==> (input == 0) ==> (v3 == v3);\nloop invariant i100: x >= 0 ==> (input == 1) ==> (m == x);\nloop invariant i101: x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant i102: x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant i103: x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant i104: x >= 0 ==> (input == 1) ==> (v3 == v3);\nloop invariant i105: 1 <= x <= N;\nloop invariant i106: 0 <= m <= x;\nloop invariant i107: input == 0 ==> m == x;\nloop invariant i108: input == 1 ==> m == x;\nloop invariant i109: input >= 2 ==> m == m;\nloop invariant i110: v1 == 0 ==> m == m;\nloop invariant i111: v2 == 0 ==> m == m;\nloop invariant i112: v3 == 0 ==> m == m;\nloop invariant i113: v1 >= 1 ==> m == m;\nloop invariant i114: v2 >= 1 ==> m == m;\nloop invariant i115: v3 >= 1 ==> m == m;\nloop invariant i116: v1 <= -1 ==> m == m;\nloop invariant i117: v2 <= -1 ==> m == m;\nloop invariant i118: v3 <= -1 ==> m == m;\nloop invariant i119: m == 0 ==> m == m;\nloop invariant i120: m == N ==> m == m;\nloop invariant i121: m == x ==> m == m;\nloop invariant i122: m == 0 ==> N == 0;\nloop invariant i123: N <= 0 ==> N == 0;\nloop invariant i124: m == x ==> m == x;\nloop invariant i125: m == 0 ==> m == 0;\nloop invariant i126: m == N ==> m == N;\nloop invariant i127: m == x ==> N == N;\nloop invariant i128: 0 <= N <= 100000;\nloop invariant i129: 0 <= m <= 100000;\nloop invariant i130: 0 <= x <= 100000;\nloop invariant i131: (N > 0) ==> (m < N);\nloop invariant i132: (N > 0) ==> (0 <= m);\nloop invariant i133: (N > 0) ==> (x <= N);\nloop invariant i134: (N > 0) ==> (m >= 0);\nloop invariant i135: (N > 0) ==> (0 <= x);\nloop invariant i136: (x == N ==> m == N);\nloop invariant i137: 1 <= input;\nloop invariant i138: (x == N ==> input == 0);\nloop invariant i139: (x == N ==> v1 == 0);\nloop invariant i140: (x == N ==> v2 == 0);\nloop invariant i141: (x == N ==> v3 == 0);\nloop invariant i142: (x == N ==> (m == N ==> m <= N));\nloop invariant i143: (x == N ==> (m == N ==> m >= 0));\nloop invariant i144: (x == N ==> (m == N ==> (v1 == 0 ==> v1 >= 0)));\nloop invariant i145: (x == N ==> (m == N ==> (v2 == 0 ==> v2 >= 0)));\nloop invariant i146: (x == N ==> (m == N ==> (v3 == 0 ==> v3 >= 0)));\nloop invariant i147: (x == N ==> (m == N ==> (v1 == 0 ==> v1 <= N)));\nloop invariant i148: (x == N ==> (m == N ==> (v2 == 0 ==> v2 <= N)));\nloop invariant i149: (x == N ==> (m == N ==> (v3 == 0 ==> v3 <= N)));\nloop invariant i150: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v2 <= N)));\nloop invariant i151: (x == N ==> (m == N ==> (v1 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant i152: (x == N ==> (m == N ==> (v2 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant i153: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant i154: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant i155: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant i156: N > 0 ==> 0 <= x <= N;\nloop invariant i157: N > 0 ==> 0 <= m <= N;\nloop invariant i158: N > 0 ==> 0 <= input <= unknown_int();\nloop invariant i159: N > 0 ==> 0 <= v1 <= unknown_int();\nloop invariant i160: N > 0 ==> 0 <= v2 <= unknown_int();\nloop invariant i161: N > 0 ==> 0 <= v3 <= unknown_int();\nloop invariant i162: N <= 0 ==> x == 0;\nloop invariant i163: N <= 0 ==> m == 0;\nloop invariant i164: N <= 0 ==> input == 0;\nloop invariant i165: N <= 0 ==> v1 == 0;\nloop invariant i166: N <= 0 ==> v2 == 0;\nloop invariant i167: N <= 0 ==> v3 == 0;\nloop invariant i168: N > 0 ==> m == x;\nloop invariant i169: N > 0 ==> (m <= N && m >= 0);\nloop invariant i170: N > 0 ==> (x <= N && x >= 0);\nloop invariant i171: N > 0 ==> (x+1) <= N;\nloop invariant i172: N > 0 ==> (x >= 0 && x < N);\nloop invariant i173: N > 0 ==> (input <= unknown_int() && input >= 0);\nloop invariant i174: N > 0 ==> (v1 <= unknown_int() && v1 >= 0);\nloop invariant i175: N > 0 ==> (v2 <= unknown_int() && v2 >= 0);\nloop invariant i176: N > 0 ==> (v3 <= unknown_int() && v3 >= 0);\nloop invariant i177: (N <= 0) ==> (m == 0);\nloop invariant i178: (N == 0) ==> (m == 0);\nloop invariant i179: (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant i180: (N > 0) ==> (0 <= m) && (m <= x);\nloop invariant i181: (N > 0) ==> (0 <= m) && (m < x);\nloop invariant i182: (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant i183: N > 0 ==> (0 <= m) && (m < N);\nloop invariant i184: v1 <= 1;\nloop invariant i185: v2 <= 1;\nloop invariant i186: v3 <= 1;\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "combined_annotation_num_solver_calls": 24,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: N > 0 ==> 0 <= m;\nloop invariant i13: N > 0 ==> m < N;\n\nloop invariant i15: (0 <= m < N) ==> ((0 <= x) && (x <= N));\nloop invariant i16: (0 <= m < N) ==> (0 <= m);\nloop invariant i17: (0 <= m < N) ==> (m < N);\nloop invariant i18: (0 <= m < N) ==> (0 <= x);\nloop invariant i19: (0 <= m < N) ==> (x <= N);\n\nloop invariant i21: (0 <= m < N) ==> (x == N) ==> (0 <= m < N);\nloop invariant i22: (0 <= m < N) ==> (x == N) ==> (0 <= m);\nloop invariant i23: (0 <= m < N) ==> (x == N) ==> (m < N);\nloop invariant i24: (0 <= m < N) ==> (x == N) ==> (0 <= x);\nloop invariant i25: (0 <= m < N) ==> (x == N) ==> (x <= N);\n\n\n\n\nloop invariant i30: (N > 0) ==> (0 <= m <= N);\n\n\n\nloop invariant i34: (x < N) ==> (m < N);\n\nloop invariant i36: (x < N) ==> (m <= x);\nloop invariant i37: (x >= N) ==> (m <= x);\nloop invariant i38: (x < N) ==> (x <= N);\n\nloop invariant i40: (x < N) ==> (x >= 0);\nloop invariant i41: (x >= N) ==> (x >= 0);\nloop invariant i42: (x < N) ==> (m >= 0);\nloop invariant i43: (x >= N) ==> (m >= 0);\nloop invariant i44: (x < N) ==> (m <= N);\n\n\nloop invariant i47: !input ==> (m == m);\nloop invariant i48: (N > 0) ==> (0 <= m) && (m < N);\nloop invariant i49: (N <= 0) ==> (m == m);\n\n\n\n\nloop invariant i54: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i55: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i56: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i57: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i58: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i59: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i60: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i61: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i62: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i63: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i64: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\nloop invariant i65: x <= m ==> (input ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N ==> (x - 1) < N);\n\n\n\n\n\n\nloop invariant i72: N > 0 ==> (0 <= m) ==> (m < N);\nloop invariant i73: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i74: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i75: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i76: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i77: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i78: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i79: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i80: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i81: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i82: N > 0 ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N) ==> (0 <= m) ==> (m < N);\nloop invariant i83: x >= 0;\n\nloop invariant i85: m >= 0;\n\nloop invariant i87: m <= x;\n\n\n\n\n\n\n\nloop invariant i95: x >= 0 ==> (input == 0) ==> (m == m);\nloop invariant i96: x >= 0 ==> (input == 0) ==> (input == 0);\nloop invariant i97: x >= 0 ==> (input == 0) ==> (v1 == v1);\nloop invariant i98: x >= 0 ==> (input == 0) ==> (v2 == v2);\nloop invariant i99: x >= 0 ==> (input == 0) ==> (v3 == v3);\n\nloop invariant i101: x >= 0 ==> (input == 1) ==> (input == 1);\nloop invariant i102: x >= 0 ==> (input == 1) ==> (v1 == v1);\nloop invariant i103: x >= 0 ==> (input == 1) ==> (v2 == v2);\nloop invariant i104: x >= 0 ==> (input == 1) ==> (v3 == v3);\n\nloop invariant i106: 0 <= m <= x;\n\n\nloop invariant i109: input >= 2 ==> m == m;\nloop invariant i110: v1 == 0 ==> m == m;\nloop invariant i111: v2 == 0 ==> m == m;\nloop invariant i112: v3 == 0 ==> m == m;\nloop invariant i113: v1 >= 1 ==> m == m;\nloop invariant i114: v2 >= 1 ==> m == m;\nloop invariant i115: v3 >= 1 ==> m == m;\nloop invariant i116: v1 <= -1 ==> m == m;\nloop invariant i117: v2 <= -1 ==> m == m;\nloop invariant i118: v3 <= -1 ==> m == m;\nloop invariant i119: m == 0 ==> m == m;\nloop invariant i120: m == N ==> m == m;\nloop invariant i121: m == x ==> m == m;\n\n\nloop invariant i124: m == x ==> m == x;\nloop invariant i125: m == 0 ==> m == 0;\nloop invariant i126: m == N ==> m == N;\nloop invariant i127: m == x ==> N == N;\n\n\n\nloop invariant i131: (N > 0) ==> (m < N);\nloop invariant i132: (N > 0) ==> (0 <= m);\nloop invariant i133: (N > 0) ==> (x <= N);\nloop invariant i134: (N > 0) ==> (m >= 0);\nloop invariant i135: (N > 0) ==> (0 <= x);\n\n\n\n\n\n\nloop invariant i142: (x == N ==> (m == N ==> m <= N));\nloop invariant i143: (x == N ==> (m == N ==> m >= 0));\nloop invariant i144: (x == N ==> (m == N ==> (v1 == 0 ==> v1 >= 0)));\nloop invariant i145: (x == N ==> (m == N ==> (v2 == 0 ==> v2 >= 0)));\nloop invariant i146: (x == N ==> (m == N ==> (v3 == 0 ==> v3 >= 0)));\nloop invariant i147: (x == N ==> (m == N ==> (v1 == 0 ==> v1 <= N)));\nloop invariant i148: (x == N ==> (m == N ==> (v2 == 0 ==> v2 <= N)));\nloop invariant i149: (x == N ==> (m == N ==> (v3 == 0 ==> v3 <= N)));\nloop invariant i150: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v2 <= N)));\nloop invariant i151: (x == N ==> (m == N ==> (v1 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant i152: (x == N ==> (m == N ==> (v2 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant i153: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> v3 <= N)));\nloop invariant i154: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m <= N)));\nloop invariant i155: (x == N ==> (m == N ==> (v1 == 0 ==> v2 == 0 ==> v3 == 0 ==> m >= 0)));\nloop invariant i156: N > 0 ==> 0 <= x <= N;\nloop invariant i157: N > 0 ==> 0 <= m <= N;\n\n\n\n\nloop invariant i162: N <= 0 ==> x == 0;\nloop invariant i163: N <= 0 ==> m == 0;\n\n\n\n\n\nloop invariant i169: N > 0 ==> (m <= N && m >= 0);\nloop invariant i170: N > 0 ==> (x <= N && x >= 0);\n\n\n\n\n\n\nloop invariant i177: (N <= 0) ==> (m == 0);\nloop invariant i178: (N == 0) ==> (m == 0);\nloop invariant i179: (N > 0) ==> (0 <= x) && (x <= N);\nloop invariant i180: (N > 0) ==> (0 <= m) && (m <= x);\n\nloop invariant i182: (N > 0) ==> (0 <= m) && (m <= N);\nloop invariant i183: N > 0 ==> (0 <= m) && (m < N);\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 72,
        "success_count": 62,
        "failure_count": 10,
        "success_rate": 0.8611111111111112
    }
}