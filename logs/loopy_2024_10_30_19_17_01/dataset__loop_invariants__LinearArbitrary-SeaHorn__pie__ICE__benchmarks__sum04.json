{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant sn == ((i - 1) * a);\nloop invariant a == 1;\nloop invariant SIZE == 8;\nloop invariant i == (SIZE + 1); loop invariant sn == (SIZE * a);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant i==SIZE || sn==SIZE*a || sn==0;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (a * (i - 1));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn = i * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant a = 1;\nloop invariant i >= 1;\nloop invariant i <= 9;\nloop invariant i + 1 <= 9;\nloop invariant i + 1 >= 1;\nloop invariant sn + a = (i + 1) * a;\nloop invariant sn + a <= (i + 1) * a;\nloop invariant sn + a >= (i + 1) * a;\nloop invariant sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn >= 0;\nloop invariant sn <= 8 * a;\nloop invariant sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn >= a * (i-1);\nloop invariant sn <= a * i;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == a * SIZE;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE \\* a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn == SIZE \\* a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a + a - a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a - a + a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE; loop invariant SIZE * a == sn + SIZE * a - i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant (i == SIZE ==> sn == SIZE * a);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn + a * (SIZE + 1 - i) - a * i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn == i * a;\nloop invariant sn == i * a || sn == 0;\nloop invariant sn == i * a ==> sn <= SIZE * a;\nloop invariant sn == i * a ==> sn >= 0;\nloop invariant sn == i * a ==> sn <= SIZE * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a;\nloop invariant sn == i * a ==> sn == i * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant a == 1;\nloop invariant sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant sn == ((i - 1) * a);\nloop invariant a == 1;\nloop invariant SIZE == 8;\nloop invariant i == (SIZE + 1); loop invariant sn == (SIZE * a);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= SIZE * a;\nloop invariant i4: sn == ((i - 1) * a);\nloop invariant i5: a == 1;\nloop invariant i6: SIZE == 8;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant i==SIZE || sn==SIZE*a || sn==0;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\nloop invariant sn==0 ==> i==1;\nloop invariant sn==SIZE*a ==> i==SIZE;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (a * (i - 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn == (a * (i - 1));\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn = i * a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant a = 1;\nloop invariant i >= 1;\nloop invariant i <= 9;\nloop invariant i + 1 <= 9;\nloop invariant i + 1 >= 1;\nloop invariant sn + a = (i + 1) * a;\nloop invariant sn + a <= (i + 1) * a;\nloop invariant sn + a >= (i + 1) * a;\nloop invariant sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\n\nloop invariant i3: sn >= 0;\n\n\nloop invariant i6: i >= 1;\nloop invariant i7: i <= 9;\n\nloop invariant i9: i + 1 >= 1;\n\nloop invariant i11: sn + a <= (i + 1) * a;\n\n\nloop invariant i14: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i15: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i16: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i17: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i18: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i19: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i20: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i21: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i22: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i23: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn >= 0;\nloop invariant sn <= 8 * a;\nloop invariant sn == i * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn >= a * (i-1);\nloop invariant sn <= a * i;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == a * SIZE;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= a * (i-1);\nloop invariant i3: sn <= a * i;\nloop invariant i4: sn >= 0;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE \\* a;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn == SIZE \\* a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a + a - a;\nloop invariant sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a - a + a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE; loop invariant SIZE * a == sn + SIZE * a - i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 0 <= i <= SIZE; loop invariant SIZE * a == sn + SIZE * a - i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant (i == SIZE ==> sn == SIZE * a);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn + a * (SIZE + 1 - i) - a * i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn == i * a;\nloop invariant sn == i * a || sn == 0;\nloop invariant sn == i * a ==> sn <= SIZE * a;\nloop invariant sn == i * a ==> sn >= 0;\nloop invariant sn == i * a ==> sn <= SIZE * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a;\nloop invariant sn == i * a ==> sn == i * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\n\n\n\nloop invariant i6: sn == i * a ==> sn >= 0;\n\nloop invariant i8: sn == i * a ==> sn == i * a;\n\nloop invariant i10: sn == i * a ==> sn == i * a && sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant a == 1;\nloop invariant sn == i * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: a == 1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= SIZE * a;\nloop invariant i4: sn == ((i - 1) * a);\nloop invariant i5: a == 1;\nloop invariant i6: SIZE == 8;\nloop invariant i7: i == (SIZE + 1); loop invariant sn == (SIZE * a);\nloop invariant i8: sn == a * i;\nloop invariant i9: 0 <= sn <= SIZE * a;\nloop invariant i10: i==SIZE || sn==SIZE*a || sn==0;\nloop invariant i11: sn==SIZE*a ==> i==SIZE;\nloop invariant i12: sn==0 ==> i==1;\nloop invariant i13: sn == (a * (i - 1));\nloop invariant i14: 1 <= i <= 9;\nloop invariant i15: sn = i * a;\nloop invariant i16: a = 1;\nloop invariant i17: i >= 1;\nloop invariant i18: i <= 9;\nloop invariant i19: i + 1 <= 9;\nloop invariant i20: i + 1 >= 1;\nloop invariant i21: sn + a = (i + 1) * a;\nloop invariant i22: sn + a <= (i + 1) * a;\nloop invariant i23: sn + a >= (i + 1) * a;\nloop invariant i24: sn + a == (i + 1) * a;\nloop invariant i25: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i26: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i27: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i28: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i29: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i30: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i31: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i32: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i33: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i34: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i35: sn <= SIZE*a;\nloop invariant i36: 1 <= i <= 8;\nloop invariant i37: sn <= 8 * a;\nloop invariant i38: sn == i * a;\nloop invariant i39: 0 <= i <= 8;\nloop invariant i40: sn >= a * (i-1);\nloop invariant i41: sn <= a * i;\nloop invariant i42: sn <= a * SIZE;\nloop invariant i43: sn == a * SIZE;\nloop invariant i44: 0 <= sn <= SIZE \\* a;\nloop invariant i45: 1 <= i <= SIZE;\nloop invariant i46: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE;\nloop invariant i47: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn == SIZE \\* a;\nloop invariant i48: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a;\nloop invariant i49: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a;\nloop invariant i50: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a;\nloop invariant i51: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a;\nloop invariant i52: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a;\nloop invariant i53: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a;\nloop invariant i54: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a + a - a;\nloop invariant i55: sn + a == SIZE \\* a || sn == 0 ==> i == SIZE + 1 ==> sn + a == SIZE \\* a ==> sn == SIZE \\* a - a ==> sn == SIZE \\* a - a + a ==> sn == SIZE \\* a - a + a - a ==> sn == SIZE \\* a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a ==> sn == SIZE \\* a - a + a - a + a - a + a - a ==> sn == SIZE \\* a - a + a - a + a - a + a - a + a;\nloop invariant i56: 0 <= i <= SIZE; loop invariant SIZE * a == sn + SIZE * a - i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a;\nloop invariant i57: (i == SIZE ==> sn == SIZE * a);\nloop invariant i58: 1 <= i <= SIZE + 1;\nloop invariant i59: sn + a * (SIZE + 1 - i) - a * i == 0;\nloop invariant i60: sn == i * a || sn == 0;\nloop invariant i61: sn == i * a ==> sn <= SIZE * a;\nloop invariant i62: sn == i * a ==> sn >= 0;\nloop invariant i63: sn == i * a ==> sn <= SIZE * a && sn >= 0;\nloop invariant i64: sn == i * a ==> sn == i * a;\nloop invariant i65: sn == i * a ==> sn == i * a && sn <= SIZE * a;\nloop invariant i66: sn == i * a ==> sn == i * a && sn >= 0;\nloop invariant i67: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant i68: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant i69: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\nloop invariant i70: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a;\nloop invariant i71: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a;\nloop invariant i72: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant i73: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant i74: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\nloop invariant i75: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a;\nloop invariant i76: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a;\nloop invariant i77: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant i78: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant i79: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= SIZE * a;\nloop invariant i4: sn == ((i - 1) * a);\nloop invariant i5: a == 1;\nloop invariant i6: SIZE == 8;\n\n\nloop invariant i9: 0 <= sn <= SIZE * a;\nloop invariant i10: i==SIZE || sn==SIZE*a || sn==0;\nloop invariant i11: sn==SIZE*a ==> i==SIZE;\nloop invariant i12: sn==0 ==> i==1;\nloop invariant i13: sn == (a * (i - 1));\nloop invariant i14: 1 <= i <= 9;\n\n\nloop invariant i17: i >= 1;\nloop invariant i18: i <= 9;\nloop invariant i19: i + 1 <= 9;\nloop invariant i20: i + 1 >= 1;\n\nloop invariant i22: sn + a <= (i + 1) * a;\n\n\nloop invariant i25: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i26: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i27: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i28: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i29: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i30: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i31: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i32: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i33: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i34: sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a ==> sn + a == (i + 1) * a;\nloop invariant i35: sn <= SIZE*a;\nloop invariant i36: 1 <= i <= 8;\nloop invariant i37: sn <= 8 * a;\n\nloop invariant i39: 0 <= i <= 8;\nloop invariant i40: sn >= a * (i-1);\nloop invariant i41: sn <= a * i;\nloop invariant i42: sn <= a * SIZE;\n\n\nloop invariant i45: 1 <= i <= SIZE;\n\n\n\n\n\n\n\n\n\n\nloop invariant i56: 0 <= i <= SIZE; loop invariant SIZE * a == sn + SIZE * a - i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a; loop invariant SIZE * a == sn + i * a;\nloop invariant i57: (i == SIZE ==> sn == SIZE * a);\nloop invariant i58: 1 <= i <= SIZE + 1;\nloop invariant i59: sn + a * (SIZE + 1 - i) - a * i == 0;\nloop invariant i60: sn == i * a || sn == 0;\nloop invariant i61: sn == i * a ==> sn <= SIZE * a;\nloop invariant i62: sn == i * a ==> sn >= 0;\nloop invariant i63: sn == i * a ==> sn <= SIZE * a && sn >= 0;\nloop invariant i64: sn == i * a ==> sn == i * a;\nloop invariant i65: sn == i * a ==> sn == i * a && sn <= SIZE * a;\nloop invariant i66: sn == i * a ==> sn == i * a && sn >= 0;\nloop invariant i67: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant i68: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant i69: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\nloop invariant i70: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a;\nloop invariant i71: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a;\nloop invariant i72: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant i73: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant i74: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\nloop invariant i75: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a;\nloop invariant i76: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a;\nloop invariant i77: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0;\nloop invariant i78: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1;\nloop invariant i79: sn == i * a ==> sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1 && sn == i * a && sn <= SIZE * a && sn >= 0 && i <= SIZE + 1 && i >= 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 93,
        "success_count": 79,
        "failure_count": 14,
        "success_rate": 0.8494623655913979
    }
}