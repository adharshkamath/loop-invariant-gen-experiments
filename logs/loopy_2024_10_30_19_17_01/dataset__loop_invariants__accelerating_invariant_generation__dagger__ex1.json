{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= xa <= 2*ya;\nloop invariant 0 <= ya <= xa;\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya);\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya;\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya ==> xa + 2*ya >= ya;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= xa + 2*ya;\nloop invariant xa + 2*ya >= 0 ==> 0 <= x - 2*y <= xa + 2*ya;\nloop invariant xa + 2*ya >= 0 ==> 0 <= 2*x + y <= xa + 2*ya;\nloop invariant xa + 2*ya >= 0 ==> x - 2*y >= 0 ==> y >= 0;\nloop invariant xa + 2*ya >= 0 ==> 2*x + y >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\n*/\n```",
            "```\n/*@\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> xa >= 2*ya;\nloop invariant xa + 2*ya >= 0 ==> ya >= xa/2;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 2*xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 3*ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa + 2*ya <= 1;\nloop invariant xa >= -1;\nloop invariant ya >= 0;\nloop invariant x >= xa + 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya == xa + 2*ya;\nloop invariant xa >= -1 ==> xa + 2*ya >= 0;\nloop invariant ya >= 0 ==> xa + 2*ya >= 0;\nloop invariant x == xa + 2*ya ==> xa + 2*ya >= 0;\nloop invariant y == -2*xa + ya ==> xa + 2*ya >= 0;\nloop invariant xa >= -1 ==> y >= -2*xa + ya;\nloop invariant ya >= 0 ==> y >= -2*xa + ya;\nloop invariant x == xa + 2*ya ==> y >= -2*xa + ya;\nloop invariant y == -2*xa + ya ==> y >= -2*xa + ya;\nloop invariant xa >= -1 ==> xa + 2*ya <= 1;\nloop invariant ya >= 0 ==> xa + 2*ya <= 1;\nloop invariant x == xa + 2*ya ==> xa + 2*ya <= 1;\nloop invariant y == -2*xa + ya ==> xa + 2*ya <= 1;\nloop invariant xa >= -1 ==> 0 <= xa + 2*ya;\nloop invariant ya >= 0 ==> 0 <= xa + 2*ya;\nloop invariant x == xa + 2*ya ==> 0 <= xa + 2*ya;\nloop invariant y == -2*xa + ya ==> 0 <= xa + 2*ya;\nloop invariant xa >= -1 ==> xa + 2*ya <= 1;\nloop invariant ya >= 0 ==> xa + 2*ya <= 1;\nloop invariant x == xa + 2*ya ==> xa + 2*ya <= 1;\nloop invariant y == -2*xa + ya ==> xa + 2*ya <= 1;\nloop invariant xa >= -1 ==> xa + 2*ya >= 0;\nloop invariant ya >= 0 ==> xa + 2*ya >= 0;\nloop invariant x == xa + 2*ya ==> xa + 2*ya >= 0;\nloop invariant y == -2*xa + ya ==> xa + 2*ya >= 0;\nloop invariant xa >= -1 ==> y >= -2*xa + ya;\nloop invariant ya >= 0 ==> y >= -2*xa + ya;\nloop invariant x == xa + 2*ya ==> y >= -2*xa + ya;\nloop invariant y == -2*xa + ya ==> y >= -2*xa + ya;\n*/\n```",
            "```\n/*@\nloop invariant 2 * ya + xa >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant ya - 2 * xa >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= 2*ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya == x + 2*y;\n*/\n```",
            "```\n/*@\nloop invariant xa + 2*ya >= 0;\nloop invariant xa >= -2*ya;\nloop invariant xa + 2*ya <= 2*xa + ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa + 2*ya <= 2147483647;\nloop invariant 0 <= xa <= 2147483647;\nloop invariant 0 <= ya <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> y >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 2*ya;\n*/\n```",
            "```\n/*@\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 0;\n*/\n```",
            "```\n/*@\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya <= 2*(xa + ya);\nloop invariant xa + 2*ya <= 2*(xa + ya + 1);\nloop invariant xa + 2*ya <= 2*(xa + ya + 2);\nloop invariant xa + 2*ya <= 2*(xa + ya + 3);\nloop invariant xa + 2*ya <= 2*(xa + ya + 4);\nloop invariant xa + 2*ya <= 2*(xa + ya + 5);\nloop invariant xa + 2*ya <= 2*(xa + ya + 6);\nloop invariant xa + 2*ya <= 2*(xa + ya + 7);\nloop invariant xa + 2*ya <= 2*(xa + ya + 8);\nloop invariant xa + 2*ya <= 2*(xa + ya + 9);\nloop invariant xa + 2*ya <= 2*(xa + ya + 10);\nloop invariant xa + 2*ya <= 2*(xa + ya + 11);\nloop invariant xa + 2*ya <= 2*(xa + ya + 12);\nloop invariant xa + 2*ya <= 2*(xa + ya + 13);\nloop invariant xa + 2*ya <= 2*(xa + ya + 14);\nloop invariant xa + 2*ya <= 2*(xa + ya + 15);\nloop invariant xa + 2*ya <= 2*(xa + ya + 16);\nloop invariant xa + 2*ya <= 2*(xa + ya + 17);\nloop invariant xa + 2*ya <= 2*(xa + ya + 18);\nloop invariant xa + 2*ya <= 2*(xa + ya + 19);\nloop invariant xa + 2*ya <= 2*(xa + ya + 20);\nloop invariant xa + 2*ya <= 2*(xa + ya + 21);\nloop invariant xa + 2*ya <= 2*(xa + ya + 22);\nloop invariant xa + 2*ya <= 2*(xa + ya + 23);\nloop invariant xa + 2*ya <= 2*(xa + ya + 24);\nloop invariant xa + 2*ya <= 2*(xa + ya + 25);\nloop invariant xa + 2*ya <= 2*(xa + ya + 26);\nloop invariant xa + 2*ya <= 2*(xa + ya + 27);\nloop invariant xa + 2*ya <= 2*(xa + ya + 28);\nloop invariant xa + 2*ya <= 2*(xa + ya + 29);\nloop invariant xa + 2*ya <= 2*(xa + ya + 30);\nloop invariant xa + 2*ya <= 2*(xa + ya + 31);\nloop invariant xa + 2*ya <= 2*(xa + ya + 32);\nloop invariant xa + 2*ya <= 2*(xa + ya + 33);\nloop invariant xa + 2*ya <= 2*(xa + ya + 34);\nloop invariant xa + 2*ya <= 2*(xa + ya + 35);\nloop invariant xa + 2*ya <= 2*(xa + ya + 36);\nloop invariant xa + 2*ya <= 2*(xa + ya + 37);\nloop invariant xa + 2*ya <= 2*(xa + ya + 38);\nloop invariant xa + 2*ya <= 2*(xa + ya + 39);\nloop invariant xa + 2*ya <= 2*(xa + ya + 40);\nloop invariant xa + 2*ya <= 2*(xa + ya + 41);\nloop invariant xa + 2*ya <= 2*(xa + ya + 42);\nloop invariant xa + 2*ya <= 2*(xa + ya + 43);\nloop invariant xa + 2*ya <= 2*(xa + ya + 44);\nloop invariant xa + 2*ya <= 2*(xa + ya + 45);\nloop invariant xa + 2*ya <= 2*(xa + ya + 46);\nloop invariant xa + 2*ya <= 2*(xa + ya + 47);\nloop invariant xa + 2*ya <= 2*(xa + ya + 48);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa;\nloop invariant 0 <= ya;\nloop invariant xa + ya >= 0;\nloop invariant xa + 2*ya <= xa + 2*ya + 1;\nloop invariant xa + 2*ya >= xa + 2*ya - 1;\nloop invariant xa + 2*ya + 1 >= xa + 2*ya;\nloop invariant xa + 2*ya - 1 <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= x;\nloop invariant 0 <= ya <= y;\nloop invariant 0 <= x + 2*ya;\nloop invariant 0 <= -2*xa + ya;\nloop invariant xa + 2*ya <= x - 2*y;\nloop invariant 2*x + y <= ya;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= 4;\nloop invariant 0 <= ya <= 2;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa >= -y;\nloop invariant ya >= -x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= xa + 2*ya;\nloop invariant 0 <= y <= -2*xa + ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant ya >= -xa;\nloop invariant xa >= -2*ya;\nloop invariant x >= xa + 2*ya - ya;\nloop invariant x <= xa + 2*ya + xa;\nloop invariant x >= xa;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= 2*ya;\nloop invariant 0 <= ya <= xa;\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya);\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya;\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya ==> xa + 2*ya >= ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\nloop invariant i3: xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya);\n\nloop invariant i5: xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya ==> xa + 2*ya >= ya;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= xa + 2*ya;\nloop invariant xa + 2*ya >= 0 ==> 0 <= x - 2*y <= xa + 2*ya;\nloop invariant xa + 2*ya >= 0 ==> 0 <= 2*x + y <= xa + 2*ya;\nloop invariant xa + 2*ya >= 0 ==> x - 2*y >= 0 ==> y >= 0;\nloop invariant xa + 2*ya >= 0 ==> 2*x + y >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> xa >= 2*ya;\nloop invariant xa + 2*ya >= 0 ==> ya >= xa/2;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 2*xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 3*ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= xa + 2*ya <= 1;\nloop invariant xa >= -1;\nloop invariant ya >= 0;\nloop invariant x >= xa + 2*ya;\nloop invariant y >= -2*xa + ya;\nloop invariant x == xa + 2*ya;\nloop invariant y == -2*xa + ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya == xa + 2*ya;\nloop invariant xa >= -1 ==> xa + 2*ya >= 0;\nloop invariant ya >= 0 ==> xa + 2*ya >= 0;\nloop invariant x == xa + 2*ya ==> xa + 2*ya >= 0;\nloop invariant y == -2*xa + ya ==> xa + 2*ya >= 0;\nloop invariant xa >= -1 ==> y >= -2*xa + ya;\nloop invariant ya >= 0 ==> y >= -2*xa + ya;\nloop invariant x == xa + 2*ya ==> y >= -2*xa + ya;\nloop invariant y == -2*xa + ya ==> y >= -2*xa + ya;\nloop invariant xa >= -1 ==> xa + 2*ya <= 1;\nloop invariant ya >= 0 ==> xa + 2*ya <= 1;\nloop invariant x == xa + 2*ya ==> xa + 2*ya <= 1;\nloop invariant y == -2*xa + ya ==> xa + 2*ya <= 1;\nloop invariant xa >= -1 ==> 0 <= xa + 2*ya;\nloop invariant ya >= 0 ==> 0 <= xa + 2*ya;\nloop invariant x == xa + 2*ya ==> 0 <= xa + 2*ya;\nloop invariant y == -2*xa + ya ==> 0 <= xa + 2*ya;\nloop invariant xa >= -1 ==> xa + 2*ya <= 1;\nloop invariant ya >= 0 ==> xa + 2*ya <= 1;\nloop invariant x == xa + 2*ya ==> xa + 2*ya <= 1;\nloop invariant y == -2*xa + ya ==> xa + 2*ya <= 1;\nloop invariant xa >= -1 ==> xa + 2*ya >= 0;\nloop invariant ya >= 0 ==> xa + 2*ya >= 0;\nloop invariant x == xa + 2*ya ==> xa + 2*ya >= 0;\nloop invariant y == -2*xa + ya ==> xa + 2*ya >= 0;\nloop invariant xa >= -1 ==> y >= -2*xa + ya;\nloop invariant ya >= 0 ==> y >= -2*xa + ya;\nloop invariant x == xa + 2*ya ==> y >= -2*xa + ya;\nloop invariant y == -2*xa + ya ==> y >= -2*xa + ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\n\n\nloop invariant i8: xa + 2*ya >= 0;\nloop invariant i9: xa + 2*ya == xa + 2*ya;\nloop invariant i10: xa >= -1 ==> xa + 2*ya >= 0;\nloop invariant i11: ya >= 0 ==> xa + 2*ya >= 0;\nloop invariant i12: x == xa + 2*ya ==> xa + 2*ya >= 0;\nloop invariant i13: y == -2*xa + ya ==> xa + 2*ya >= 0;\n\n\n\nloop invariant i17: y == -2*xa + ya ==> y >= -2*xa + ya;\n\n\nloop invariant i20: x == xa + 2*ya ==> xa + 2*ya <= 1;\n\nloop invariant i22: xa >= -1 ==> 0 <= xa + 2*ya;\nloop invariant i23: ya >= 0 ==> 0 <= xa + 2*ya;\nloop invariant i24: x == xa + 2*ya ==> 0 <= xa + 2*ya;\nloop invariant i25: y == -2*xa + ya ==> 0 <= xa + 2*ya;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 2 * ya + xa >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant ya - 2 * xa >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: 2 * ya + xa >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant ya - 2 * xa >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= 2*ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya == x + 2*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\nloop invariant i2: xa + 2*ya >= 0;\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant xa + 2*ya >= 0;\nloop invariant xa >= -2*ya;\nloop invariant xa + 2*ya <= 2*xa + ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\nloop invariant xa + 2*ya >= -2*xa + ya;\nloop invariant xa + 2*ya <= xa + 2*ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: xa + 2*ya >= 0;\nloop invariant i2: xa >= -2*ya;\n\n\nloop invariant i5: xa + 2*ya <= xa + 2*ya;\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= xa + 2*ya <= 2147483647;\nloop invariant 0 <= xa <= 2147483647;\nloop invariant 0 <= ya <= 2147483647;\nloop invariant xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 0;\nloop invariant xa + 2*ya >= 0 ==> y >= 0;\nloop invariant xa + 2*ya >= 0 ==> x >= 2*ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: xa + 2*ya >= 0 ==> xa + 2*ya >= 0;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 50,
                "annotations": "```\n/*@\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa + 2*ya <= 2*(xa + ya);\nloop invariant xa + 2*ya <= 2*(xa + ya + 1);\nloop invariant xa + 2*ya <= 2*(xa + ya + 2);\nloop invariant xa + 2*ya <= 2*(xa + ya + 3);\nloop invariant xa + 2*ya <= 2*(xa + ya + 4);\nloop invariant xa + 2*ya <= 2*(xa + ya + 5);\nloop invariant xa + 2*ya <= 2*(xa + ya + 6);\nloop invariant xa + 2*ya <= 2*(xa + ya + 7);\nloop invariant xa + 2*ya <= 2*(xa + ya + 8);\nloop invariant xa + 2*ya <= 2*(xa + ya + 9);\nloop invariant xa + 2*ya <= 2*(xa + ya + 10);\nloop invariant xa + 2*ya <= 2*(xa + ya + 11);\nloop invariant xa + 2*ya <= 2*(xa + ya + 12);\nloop invariant xa + 2*ya <= 2*(xa + ya + 13);\nloop invariant xa + 2*ya <= 2*(xa + ya + 14);\nloop invariant xa + 2*ya <= 2*(xa + ya + 15);\nloop invariant xa + 2*ya <= 2*(xa + ya + 16);\nloop invariant xa + 2*ya <= 2*(xa + ya + 17);\nloop invariant xa + 2*ya <= 2*(xa + ya + 18);\nloop invariant xa + 2*ya <= 2*(xa + ya + 19);\nloop invariant xa + 2*ya <= 2*(xa + ya + 20);\nloop invariant xa + 2*ya <= 2*(xa + ya + 21);\nloop invariant xa + 2*ya <= 2*(xa + ya + 22);\nloop invariant xa + 2*ya <= 2*(xa + ya + 23);\nloop invariant xa + 2*ya <= 2*(xa + ya + 24);\nloop invariant xa + 2*ya <= 2*(xa + ya + 25);\nloop invariant xa + 2*ya <= 2*(xa + ya + 26);\nloop invariant xa + 2*ya <= 2*(xa + ya + 27);\nloop invariant xa + 2*ya <= 2*(xa + ya + 28);\nloop invariant xa + 2*ya <= 2*(xa + ya + 29);\nloop invariant xa + 2*ya <= 2*(xa + ya + 30);\nloop invariant xa + 2*ya <= 2*(xa + ya + 31);\nloop invariant xa + 2*ya <= 2*(xa + ya + 32);\nloop invariant xa + 2*ya <= 2*(xa + ya + 33);\nloop invariant xa + 2*ya <= 2*(xa + ya + 34);\nloop invariant xa + 2*ya <= 2*(xa + ya + 35);\nloop invariant xa + 2*ya <= 2*(xa + ya + 36);\nloop invariant xa + 2*ya <= 2*(xa + ya + 37);\nloop invariant xa + 2*ya <= 2*(xa + ya + 38);\nloop invariant xa + 2*ya <= 2*(xa + ya + 39);\nloop invariant xa + 2*ya <= 2*(xa + ya + 40);\nloop invariant xa + 2*ya <= 2*(xa + ya + 41);\nloop invariant xa + 2*ya <= 2*(xa + ya + 42);\nloop invariant xa + 2*ya <= 2*(xa + ya + 43);\nloop invariant xa + 2*ya <= 2*(xa + ya + 44);\nloop invariant xa + 2*ya <= 2*(xa + ya + 45);\nloop invariant xa + 2*ya <= 2*(xa + ya + 46);\nloop invariant xa + 2*ya <= 2*(xa + ya + 47);\nloop invariant xa + 2*ya <= 2*(xa + ya + 48);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\nloop invariant i3: xa + 2*ya >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= xa;\nloop invariant 0 <= ya;\nloop invariant xa + ya >= 0;\nloop invariant xa + 2*ya <= xa + 2*ya + 1;\nloop invariant xa + 2*ya >= xa + 2*ya - 1;\nloop invariant xa + 2*ya + 1 >= xa + 2*ya;\nloop invariant xa + 2*ya - 1 <= xa + 2*ya;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\nloop invariant xa + 2*ya <= xa + 2;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa - 1;\nloop invariant xa + 2*ya <= xa + 1;\nloop invariant xa + 2*ya - 1 >= xa;\nloop invariant xa + 2*ya + 1 <= xa + 2;\nloop invariant xa + 2*ya >= xa + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\nloop invariant i4: xa + 2*ya <= xa + 2*ya + 1;\nloop invariant i5: xa + 2*ya >= xa + 2*ya - 1;\nloop invariant i6: xa + 2*ya + 1 >= xa + 2*ya;\nloop invariant i7: xa + 2*ya - 1 <= xa + 2*ya;\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= x;\nloop invariant 0 <= ya <= y;\nloop invariant 0 <= x + 2*ya;\nloop invariant 0 <= -2*xa + ya;\nloop invariant xa + 2*ya <= x - 2*y;\nloop invariant 2*x + y <= ya;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\nloop invariant xa + 2*ya <= x + 2*ya;\nloop invariant 2*x + y <= ya + 2*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= 4;\nloop invariant 0 <= ya <= 2;\nloop invariant xa + 2*ya >= 0;\nloop invariant xa >= -y;\nloop invariant ya >= -x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\nloop invariant i3: xa + 2*ya >= 0;\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= xa + 2*ya;\nloop invariant 0 <= y <= -2*xa + ya;\nloop invariant xa + 2*ya >= 0;\nloop invariant ya >= -xa;\nloop invariant xa >= -2*ya;\nloop invariant x >= xa + 2*ya - ya;\nloop invariant x <= xa + 2*ya + xa;\nloop invariant x >= xa;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\nloop invariant i3: xa + 2*ya >= 0;\n\nloop invariant i5: xa >= -2*ya;\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= xa <= 2*ya is partially proven to be inductive.\nloop invariant 0 <= ya <= xa is partially proven to be inductive.\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) is partially proven to be inductive.\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya is partially proven to be inductive.\nloop invariant xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya ==> xa + 2*ya >= ya is partially proven to be inductive.\nloop invariant 0 <= y <= xa + 2*ya is preserved but not established.\nloop invariant xa + 2*ya >= 0 ==> 0 <= x - 2*y <= xa + 2*ya is preserved but not established.\nloop invariant xa + 2*ya >= 0 ==> 0 <= 2*x + y <= xa + 2*ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> x - 2*y >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> 2*x + y >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> xa >= 0 is partially proven to be inductive.\nloop invariant xa >= 0 is partially proven to be inductive.\nloop invariant ya >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> xa >= 2*ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> ya >= xa/2 is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + xa + ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 2*xa + ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 3*ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya is partially proven to be inductive.\nloop invariant 0 <= xa + 2*ya <= 1 is partially proven to be inductive.\nloop invariant xa >= -1 is partially proven to be inductive.\nloop invariant x >= xa + 2*ya is partially proven to be inductive.\nloop invariant y >= -2*xa + ya is partially proven to be inductive.\nloop invariant x == xa + 2*ya is partially proven to be inductive.\nloop invariant y == -2*xa + ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya == xa + 2*ya is partially proven to be inductive.\nloop invariant xa >= -1 ==> xa + 2*ya >= 0 is partially proven to be inductive.\nloop invariant ya >= 0 ==> xa + 2*ya >= 0 is partially proven to be inductive.\nloop invariant x == xa + 2*ya ==> xa + 2*ya >= 0 is partially proven to be inductive.\nloop invariant y == -2*xa + ya ==> xa + 2*ya >= 0 is partially proven to be inductive.\nloop invariant xa >= -1 ==> y >= -2*xa + ya is partially proven to be inductive.\nloop invariant ya >= 0 ==> y >= -2*xa + ya is partially proven to be inductive.\nloop invariant x == xa + 2*ya ==> y >= -2*xa + ya is partially proven to be inductive.\nloop invariant y == -2*xa + ya ==> y >= -2*xa + ya is partially proven to be inductive.\nloop invariant xa >= -1 ==> xa + 2*ya <= 1 is partially proven to be inductive.\nloop invariant ya >= 0 ==> xa + 2*ya <= 1 is partially proven to be inductive.\nloop invariant x == xa + 2*ya ==> xa + 2*ya <= 1 is partially proven to be inductive.\nloop invariant y == -2*xa + ya ==> xa + 2*ya <= 1 is partially proven to be inductive.\nloop invariant xa >= -1 ==> 0 <= xa + 2*ya is partially proven to be inductive.\nloop invariant ya >= 0 ==> 0 <= xa + 2*ya is partially proven to be inductive.\nloop invariant x == xa + 2*ya ==> 0 <= xa + 2*ya is partially proven to be inductive.\nloop invariant y == -2*xa + ya ==> 0 <= xa + 2*ya is partially proven to be inductive.\nloop invariant 2 * ya + xa >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant ya - 2 * xa >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant xa + 2*ya == x + 2*y is partially proven to be inductive.\nloop invariant xa >= -2*ya is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*xa + ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= -2*xa + ya is partially proven to be inductive.\nloop invariant xa + 2*ya <= xa + 2*ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= xa + ya is partially proven to be inductive.\nloop invariant 0 <= xa + 2*ya <= 2147483647 is partially proven to be inductive.\nloop invariant 0 <= xa <= 2147483647 is partially proven to be inductive.\nloop invariant 0 <= ya <= 2147483647 is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> ya >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> x >= 2*ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= 0 ==> xa + 2*ya >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 1) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 2) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 3) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 4) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 5) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 6) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 7) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 8) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 9) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 10) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 11) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 12) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 13) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 14) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 15) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 16) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 17) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 18) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 19) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 20) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 21) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 22) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 23) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 24) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 25) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 26) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 27) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 28) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 29) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 30) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 31) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 32) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 33) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 34) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 35) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 36) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 37) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 38) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 39) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 40) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 41) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 42) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 43) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 44) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 45) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 46) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 47) is partially proven to be inductive.\nloop invariant xa + 2*ya <= 2*(xa + ya + 48) is partially proven to be inductive.\nloop invariant 0 <= xa is partially proven to be inductive.\nloop invariant 0 <= ya is partially proven to be inductive.\nloop invariant xa + ya >= 0 is partially proven to be inductive.\nloop invariant xa + 2*ya <= xa + 2*ya + 1 is partially proven to be inductive.\nloop invariant xa + 2*ya >= xa + 2*ya - 1 is partially proven to be inductive.\nloop invariant xa + 2*ya + 1 >= xa + 2*ya is partially proven to be inductive.\nloop invariant xa + 2*ya - 1 <= xa + 2*ya is partially proven to be inductive.\nloop invariant xa + 2*ya >= xa - 1 is partially proven to be inductive.\nloop invariant xa + 2*ya <= xa + 1 is partially proven to be inductive.\nloop invariant xa + 2*ya - 1 >= xa is partially proven to be inductive.\nloop invariant xa + 2*ya + 1 <= xa + 2 is partially proven to be inductive.\nloop invariant xa + 2*ya >= xa + 1 is partially proven to be inductive.\nloop invariant xa + 2*ya <= xa + 2 is partially proven to be inductive.\nloop invariant 0 <= xa <= x is partially proven to be inductive.\nloop invariant 0 <= ya <= y is partially proven to be inductive.\nloop invariant 0 <= x + 2*ya is partially proven to be inductive.\nloop invariant 0 <= -2*xa + ya is partially proven to be inductive.\nloop invariant xa + 2*ya <= x - 2*y is partially proven to be inductive.\nloop invariant 2*x + y <= ya is partially proven to be inductive.\nloop invariant xa + 2*ya <= x + 2*ya is partially proven to be inductive.\nloop invariant 2*x + y <= ya + 2*x is partially proven to be inductive.\nloop invariant 0 <= xa <= 4 is partially proven to be inductive.\nloop invariant 0 <= ya <= 2 is partially proven to be inductive.\nloop invariant xa >= -y is partially proven to be inductive.\nloop invariant ya >= -x is partially proven to be inductive.\nloop invariant 0 <= x <= xa + 2*ya is partially proven to be inductive.\nloop invariant 0 <= y <= -2*xa + ya is partially proven to be inductive.\nloop invariant ya >= -xa is partially proven to be inductive.\nloop invariant x >= xa + 2*ya - ya is partially proven to be inductive.\nloop invariant x <= xa + 2*ya + xa is partially proven to be inductive.\nloop invariant x >= xa is partially proven to be inductive.\nAssertion xa + 2 * ya >= 0: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: 0 <= xa <= 2*ya;\nloop invariant i2: 0 <= ya <= xa;\nloop invariant i3: xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya);\nloop invariant i4: xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya;\nloop invariant i5: xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya ==> xa + 2*ya >= ya;\nloop invariant i6: 0 <= y <= xa + 2*ya;\nloop invariant i7: xa + 2*ya >= 0 ==> 0 <= x - 2*y <= xa + 2*ya;\nloop invariant i8: xa + 2*ya >= 0 ==> 0 <= 2*x + y <= xa + 2*ya;\nloop invariant i9: xa + 2*ya >= 0 ==> x - 2*y >= 0 ==> y >= 0;\nloop invariant i10: xa + 2*ya >= 0 ==> 2*x + y >= 0 ==> x >= 0;\nloop invariant i11: xa + 2*ya >= 0 ==> xa >= 0;\nloop invariant i12: xa >= 0;\nloop invariant i13: ya >= 0;\nloop invariant i14: xa + 2*ya >= 0 ==> xa >= 2*ya;\nloop invariant i15: xa + 2*ya >= 0 ==> ya >= xa/2;\nloop invariant i16: xa + 2*ya >= 0 ==> xa + 2*ya >= xa + xa + ya;\nloop invariant i17: xa + 2*ya >= 0 ==> xa + 2*ya >= 2*xa + ya;\nloop invariant i18: xa + 2*ya >= 0 ==> xa + 2*ya >= 3*ya;\nloop invariant i19: xa + 2*ya >= 0 ==> xa + 2*ya >= xa + ya;\nloop invariant i20: 0 <= xa + 2*ya <= 1;\nloop invariant i21: xa >= -1;\nloop invariant i22: x >= xa + 2*ya;\nloop invariant i23: y >= -2*xa + ya;\nloop invariant i24: x == xa + 2*ya;\nloop invariant i25: y == -2*xa + ya;\nloop invariant i26: xa + 2*ya >= 0;\nloop invariant i27: xa + 2*ya == xa + 2*ya;\nloop invariant i28: xa >= -1 ==> xa + 2*ya >= 0;\nloop invariant i29: ya >= 0 ==> xa + 2*ya >= 0;\nloop invariant i30: x == xa + 2*ya ==> xa + 2*ya >= 0;\nloop invariant i31: y == -2*xa + ya ==> xa + 2*ya >= 0;\nloop invariant i32: xa >= -1 ==> y >= -2*xa + ya;\nloop invariant i33: ya >= 0 ==> y >= -2*xa + ya;\nloop invariant i34: x == xa + 2*ya ==> y >= -2*xa + ya;\nloop invariant i35: y == -2*xa + ya ==> y >= -2*xa + ya;\nloop invariant i36: xa >= -1 ==> xa + 2*ya <= 1;\nloop invariant i37: ya >= 0 ==> xa + 2*ya <= 1;\nloop invariant i38: x == xa + 2*ya ==> xa + 2*ya <= 1;\nloop invariant i39: y == -2*xa + ya ==> xa + 2*ya <= 1;\nloop invariant i40: xa >= -1 ==> 0 <= xa + 2*ya;\nloop invariant i41: ya >= 0 ==> 0 <= xa + 2*ya;\nloop invariant i42: x == xa + 2*ya ==> 0 <= xa + 2*ya;\nloop invariant i43: y == -2*xa + ya ==> 0 <= xa + 2*ya;\nloop invariant i44: 2 * ya + xa >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant ya - 2 * xa >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0;\nloop invariant i45: 0 <= y <= 100000;\nloop invariant i46: x >= (1 + (y - 1) * y / 2);\nloop invariant i47: xa + 2*ya == x + 2*y;\nloop invariant i48: xa >= -2*ya;\nloop invariant i49: xa + 2*ya <= 2*xa + ya;\nloop invariant i50: xa + 2*ya >= -2*xa + ya;\nloop invariant i51: xa + 2*ya <= xa + 2*ya;\nloop invariant i52: xa + 2*ya >= xa + ya;\nloop invariant i53: 0 <= xa + 2*ya <= 2147483647;\nloop invariant i54: 0 <= xa <= 2147483647;\nloop invariant i55: 0 <= ya <= 2147483647;\nloop invariant i56: xa + 2*ya >= 0 ==> ya >= 0;\nloop invariant i57: xa + 2*ya >= 0 ==> x >= 0;\nloop invariant i58: xa + 2*ya >= 0 ==> y >= 0;\nloop invariant i59: xa + 2*ya >= 0 ==> x >= 2*ya;\nloop invariant i60: xa + 2*ya >= 0 ==> xa + 2*ya >= 0;\nloop invariant i61: xa + 2*ya <= 2*(xa + ya);\nloop invariant i62: xa + 2*ya <= 2*(xa + ya + 1);\nloop invariant i63: xa + 2*ya <= 2*(xa + ya + 2);\nloop invariant i64: xa + 2*ya <= 2*(xa + ya + 3);\nloop invariant i65: xa + 2*ya <= 2*(xa + ya + 4);\nloop invariant i66: xa + 2*ya <= 2*(xa + ya + 5);\nloop invariant i67: xa + 2*ya <= 2*(xa + ya + 6);\nloop invariant i68: xa + 2*ya <= 2*(xa + ya + 7);\nloop invariant i69: xa + 2*ya <= 2*(xa + ya + 8);\nloop invariant i70: xa + 2*ya <= 2*(xa + ya + 9);\nloop invariant i71: xa + 2*ya <= 2*(xa + ya + 10);\nloop invariant i72: xa + 2*ya <= 2*(xa + ya + 11);\nloop invariant i73: xa + 2*ya <= 2*(xa + ya + 12);\nloop invariant i74: xa + 2*ya <= 2*(xa + ya + 13);\nloop invariant i75: xa + 2*ya <= 2*(xa + ya + 14);\nloop invariant i76: xa + 2*ya <= 2*(xa + ya + 15);\nloop invariant i77: xa + 2*ya <= 2*(xa + ya + 16);\nloop invariant i78: xa + 2*ya <= 2*(xa + ya + 17);\nloop invariant i79: xa + 2*ya <= 2*(xa + ya + 18);\nloop invariant i80: xa + 2*ya <= 2*(xa + ya + 19);\nloop invariant i81: xa + 2*ya <= 2*(xa + ya + 20);\nloop invariant i82: xa + 2*ya <= 2*(xa + ya + 21);\nloop invariant i83: xa + 2*ya <= 2*(xa + ya + 22);\nloop invariant i84: xa + 2*ya <= 2*(xa + ya + 23);\nloop invariant i85: xa + 2*ya <= 2*(xa + ya + 24);\nloop invariant i86: xa + 2*ya <= 2*(xa + ya + 25);\nloop invariant i87: xa + 2*ya <= 2*(xa + ya + 26);\nloop invariant i88: xa + 2*ya <= 2*(xa + ya + 27);\nloop invariant i89: xa + 2*ya <= 2*(xa + ya + 28);\nloop invariant i90: xa + 2*ya <= 2*(xa + ya + 29);\nloop invariant i91: xa + 2*ya <= 2*(xa + ya + 30);\nloop invariant i92: xa + 2*ya <= 2*(xa + ya + 31);\nloop invariant i93: xa + 2*ya <= 2*(xa + ya + 32);\nloop invariant i94: xa + 2*ya <= 2*(xa + ya + 33);\nloop invariant i95: xa + 2*ya <= 2*(xa + ya + 34);\nloop invariant i96: xa + 2*ya <= 2*(xa + ya + 35);\nloop invariant i97: xa + 2*ya <= 2*(xa + ya + 36);\nloop invariant i98: xa + 2*ya <= 2*(xa + ya + 37);\nloop invariant i99: xa + 2*ya <= 2*(xa + ya + 38);\nloop invariant i100: xa + 2*ya <= 2*(xa + ya + 39);\nloop invariant i101: xa + 2*ya <= 2*(xa + ya + 40);\nloop invariant i102: xa + 2*ya <= 2*(xa + ya + 41);\nloop invariant i103: xa + 2*ya <= 2*(xa + ya + 42);\nloop invariant i104: xa + 2*ya <= 2*(xa + ya + 43);\nloop invariant i105: xa + 2*ya <= 2*(xa + ya + 44);\nloop invariant i106: xa + 2*ya <= 2*(xa + ya + 45);\nloop invariant i107: xa + 2*ya <= 2*(xa + ya + 46);\nloop invariant i108: xa + 2*ya <= 2*(xa + ya + 47);\nloop invariant i109: xa + 2*ya <= 2*(xa + ya + 48);\nloop invariant i110: 0 <= xa;\nloop invariant i111: 0 <= ya;\nloop invariant i112: xa + ya >= 0;\nloop invariant i113: xa + 2*ya <= xa + 2*ya + 1;\nloop invariant i114: xa + 2*ya >= xa + 2*ya - 1;\nloop invariant i115: xa + 2*ya + 1 >= xa + 2*ya;\nloop invariant i116: xa + 2*ya - 1 <= xa + 2*ya;\nloop invariant i117: xa + 2*ya >= xa - 1;\nloop invariant i118: xa + 2*ya <= xa + 1;\nloop invariant i119: xa + 2*ya - 1 >= xa;\nloop invariant i120: xa + 2*ya + 1 <= xa + 2;\nloop invariant i121: xa + 2*ya >= xa + 1;\nloop invariant i122: xa + 2*ya <= xa + 2;\nloop invariant i123: 0 <= xa <= x;\nloop invariant i124: 0 <= ya <= y;\nloop invariant i125: 0 <= x + 2*ya;\nloop invariant i126: 0 <= -2*xa + ya;\nloop invariant i127: xa + 2*ya <= x - 2*y;\nloop invariant i128: 2*x + y <= ya;\nloop invariant i129: xa + 2*ya <= x + 2*ya;\nloop invariant i130: 2*x + y <= ya + 2*x;\nloop invariant i131: 0 <= xa <= 4;\nloop invariant i132: 0 <= ya <= 2;\nloop invariant i133: xa >= -y;\nloop invariant i134: ya >= -x;\nloop invariant i135: 0 <= x <= xa + 2*ya;\nloop invariant i136: 0 <= y <= -2*xa + ya;\nloop invariant i137: ya >= -xa;\nloop invariant i138: x >= xa + 2*ya - ya;\nloop invariant i139: x <= xa + 2*ya + xa;\nloop invariant i140: x >= xa;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
        "combined_annotation_num_solver_calls": 62,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\n\n\nloop invariant i3: xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya);\n\nloop invariant i5: xa + 2*ya - 2*xa + ya >= 0 ==> (xa + 2*ya) >= (2*xa - ya) ==> xa >= ya ==> xa + 2*ya >= ya;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: xa + 2*ya >= 0;\nloop invariant i27: xa + 2*ya == xa + 2*ya;\nloop invariant i28: xa >= -1 ==> xa + 2*ya >= 0;\nloop invariant i29: ya >= 0 ==> xa + 2*ya >= 0;\nloop invariant i30: x == xa + 2*ya ==> xa + 2*ya >= 0;\nloop invariant i31: y == -2*xa + ya ==> xa + 2*ya >= 0;\n\n\n\nloop invariant i35: y == -2*xa + ya ==> y >= -2*xa + ya;\n\n\nloop invariant i38: x == xa + 2*ya ==> xa + 2*ya <= 1;\n\nloop invariant i40: xa >= -1 ==> 0 <= xa + 2*ya;\nloop invariant i41: ya >= 0 ==> 0 <= xa + 2*ya;\nloop invariant i42: x == xa + 2*ya ==> 0 <= xa + 2*ya;\nloop invariant i43: y == -2*xa + ya ==> 0 <= xa + 2*ya;\nloop invariant i44: 2 * ya + xa >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant ya - 2 * xa >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant 2 * xa + ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0; loop invariant xa + 2 * ya >= 0 ==> xa + 2 * ya >= 0;\n\n\n\nloop invariant i48: xa >= -2*ya;\n\n\nloop invariant i51: xa + 2*ya <= xa + 2*ya;\n\n\n\n\n\n\n\n\nloop invariant i60: xa + 2*ya >= 0 ==> xa + 2*ya >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i113: xa + 2*ya <= xa + 2*ya + 1;\nloop invariant i114: xa + 2*ya >= xa + 2*ya - 1;\nloop invariant i115: xa + 2*ya + 1 >= xa + 2*ya;\nloop invariant i116: xa + 2*ya - 1 <= xa + 2*ya;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\n\nreturn 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c"
        ],
        "skipped": [],
        "total": 151,
        "success_count": 125,
        "failure_count": 26,
        "success_rate": 0.8278145695364238
    }
}