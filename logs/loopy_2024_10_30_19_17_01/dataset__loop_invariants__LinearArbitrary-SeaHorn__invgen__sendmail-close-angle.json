{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf && buf < bufferlen;\nloop invariant 0 <= in && in < inlen;\nloop invariant buf <= buflim;\nloop invariant in <= buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant (buf == buflim) ==> (in < inlen);\nloop invariant (buf == buflim) ==> (buf < buflim);\nloop invariant (buf == buflim) ==> (in < buflim);\nloop invariant (buf == buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (in < inlen);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (in < buflim);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim implies buf < bufferlen - 2;\nloop invariant buf < buflim implies buf < buflim + 1;\nloop invariant in < inlen implies in < bufferlen;\nloop invariant in < inlen implies in < inlen + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant in >= 0;\nloop invariant in <= inlen;\nloop invariant buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 2;\nloop invariant in < inlen;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant buflim < bufferlen;\nloop invariant buflim < inlen;\nloop invariant buflim < in;\nloop invariant buf < in;\nloop invariant buf <= buflim + 2;\nloop invariant buf <= in;\nloop invariant buf <= inlen;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1);\nloop invariant buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1 && in < inlen - 1);\nloop invariant buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1 && in < inlen - 1 && buf < buflim);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buflim <= bufferlen - 2;\n*/\n```",
            "```\n/*@\nloop invariant ( ( 0 <= buf ) ==> ( buf < bufferlen ) );\nloop invariant ( ( 0 <= buf ) ==> ( buf <= buflim ) );\nloop invariant ( buf <= buflim );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buflim < bufferlen;\nloop invariant buflim <= inlen;\nloop invariant buflim >= -1;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim >= 0;\nloop invariant buf < bufferlen;\nloop invariant in <= inlen;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buflim <= bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant buf < bufferlen ==> buflim <= buf - 1;\nloop invariant buf < bufferlen ==> buflim <= buf - 2;\nloop invariant buf < bufferlen ==> buf <= buflim + 1;\nloop invariant buf < bufferlen ==> buf <= buflim + 2;\nloop invariant buf < bufferlen ==> buf <= bufferlen - 1;\nloop invariant buf < bufferlen ==> buf <= bufferlen - 2;\nloop invariant buf < bufferlen ==> in <= inlen - 1;\nloop invariant buf < bufferlen ==> in <= inlen - 2;\nloop invariant buf < bufferlen ==> in >= 0;\nloop invariant buf < bufferlen ==> in >= 1;\nloop invariant buf < bufferlen ==> 0 <= in;\nloop invariant buf < bufferlen ==> 0 <= buflim;\nloop invariant buf < bufferlen ==> 0 <= buflim - 1;\nloop invariant buf < bufferlen ==> 0 <= buflim - 2;\nloop invariant buf < bufferlen ==> 0 <= buf;\nloop invariant buf < bufferlen ==> 0 <= buf - 1;\nloop invariant buf < bufferlen ==> 0 <= buf - 2;\nloop invariant buf < bufferlen ==> 0 <= inlen;\nloop invariant buf < bufferlen ==> 0 <= inlen - 1;\nloop invariant buf < bufferlen ==> 0 <= inlen - 2;\nloop invariant buf < bufferlen ==> 0 <= inlen - 3;\nloop invariant buf < bufferlen ==> 0 <= bufferlen;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 1;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 2;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 3;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 4;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 5;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 6;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 7;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 8;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 9;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 10;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 11;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 12;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 13;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 14;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 15;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 16;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 17;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 18;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 19;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 20;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 21;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 22;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 23;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 24;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 25;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 26;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 27;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 28;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 29;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 30;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 31;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 32;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 33;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 34;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 35;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 36;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 37;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 38;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 39;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 40;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\nloop invariant buf >= buflim ==> in >= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf >= buflim ==> buf >= buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf < buflim ==> in < inlen;\n\nloop invariant i5: buf >= buflim ==> buf >= buflim;\nloop invariant i6: buf < buflim ==> buf < buflim;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf && buf < bufferlen;\nloop invariant 0 <= in && in < inlen;\nloop invariant buf <= buflim;\nloop invariant in <= buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in && in < inlen;\nloop invariant i3: buf <= buflim;\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant (buf == buflim) ==> (in < inlen);\nloop invariant (buf == buflim) ==> (buf < buflim);\nloop invariant (buf == buflim) ==> (in < buflim);\nloop invariant (buf == buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (in < inlen);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (in < buflim);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\nloop invariant (buf != buflim) ==> (buf < bufferlen);\nloop invariant (buf != buflim) ==> (buf < in);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf < bufferlen;\nloop invariant i4: in < inlen;\nloop invariant i5: buflim < bufferlen;\nloop invariant i6: buf <= buflim;\nloop invariant i7: (buf == buflim) ==> (in < inlen);\n\n\n\nloop invariant i11: (buf != buflim) ==> (in < inlen);\nloop invariant i12: (buf != buflim) ==> (buf < bufferlen);\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant in <= buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf;\n\nloop invariant i3: 0 <= in;\nloop invariant i4: in < inlen;\nloop invariant i5: 0 <= buflim;\nloop invariant i6: buflim < inlen;\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim implies buf < bufferlen - 2;\nloop invariant buf < buflim implies buf < buflim + 1;\nloop invariant in < inlen implies in < bufferlen;\nloop invariant in < inlen implies in < inlen + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\n\n\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant in >= 0;\nloop invariant in <= inlen;\nloop invariant buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf;\nloop invariant i2: buf <= bufferlen;\nloop invariant i3: in >= 0;\nloop invariant i4: in <= inlen;\nloop invariant i5: buf <= buflim;\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 2;\nloop invariant in < inlen;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant buflim < bufferlen;\nloop invariant buflim < inlen;\nloop invariant buflim < in;\nloop invariant buf < in;\nloop invariant buf <= buflim + 2;\nloop invariant buf <= in;\nloop invariant buf <= inlen;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\nloop invariant buf <= inlen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: buf <= buflim + 2;\nloop invariant i5: in < inlen;\nloop invariant i6: in <= inlen;\nloop invariant i7: buf < bufferlen;\nloop invariant i8: buflim < bufferlen;\nloop invariant i9: buflim < inlen;\n\n\nloop invariant i12: buf <= in;\nloop invariant i13: buf <= inlen;\nloop invariant i14: buf <= inlen - 1;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1);\nloop invariant buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1 && in < inlen - 1);\nloop invariant buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1 && in < inlen - 1 && buf < buflim);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen - 1;\nloop invariant i3: buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1);\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buflim <= bufferlen - 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: 0 <= buflim <= bufferlen - 2;\nloop invariant i4: buf <= buflim;\nloop invariant i5: in <= inlen;\nloop invariant i6: buflim <= bufferlen - 2;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( ( 0 <= buf ) ==> ( buf < bufferlen ) );\nloop invariant ( ( 0 <= buf ) ==> ( buf <= buflim ) );\nloop invariant ( buf <= buflim );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant ( ( 0 <= buf ) ==> (buf<=buflim) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: ( ( 0 <= buf ) ==> ( buf <= buflim ) );\nloop invariant i3: ( buf <= buflim );\nloop invariant i4: ( ( 0 <= buf ) ==> (buf<=buflim) );\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buflim < bufferlen;\nloop invariant buflim <= inlen;\nloop invariant buflim >= -1;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim >= 0;\nloop invariant buf < bufferlen;\nloop invariant in <= inlen;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in <= inlen;\nloop invariant buflim >= 0;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim <= inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: in <= inlen;\nloop invariant i5: buflim < bufferlen;\nloop invariant i6: buflim <= inlen;\nloop invariant i7: buflim >= -1;\nloop invariant i8: buf >= 0;\nloop invariant i9: in >= 0;\nloop invariant i10: buflim >= 0;\nloop invariant i11: buf < bufferlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buflim <= bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\n\nloop invariant i4: in < inlen;\nloop invariant i5: 0 <= buflim <= bufferlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant buf < bufferlen ==> buflim <= buf - 1;\nloop invariant buf < bufferlen ==> buflim <= buf - 2;\nloop invariant buf < bufferlen ==> buf <= buflim + 1;\nloop invariant buf < bufferlen ==> buf <= buflim + 2;\nloop invariant buf < bufferlen ==> buf <= bufferlen - 1;\nloop invariant buf < bufferlen ==> buf <= bufferlen - 2;\nloop invariant buf < bufferlen ==> in <= inlen - 1;\nloop invariant buf < bufferlen ==> in <= inlen - 2;\nloop invariant buf < bufferlen ==> in >= 0;\nloop invariant buf < bufferlen ==> in >= 1;\nloop invariant buf < bufferlen ==> 0 <= in;\nloop invariant buf < bufferlen ==> 0 <= buflim;\nloop invariant buf < bufferlen ==> 0 <= buflim - 1;\nloop invariant buf < bufferlen ==> 0 <= buflim - 2;\nloop invariant buf < bufferlen ==> 0 <= buf;\nloop invariant buf < bufferlen ==> 0 <= buf - 1;\nloop invariant buf < bufferlen ==> 0 <= buf - 2;\nloop invariant buf < bufferlen ==> 0 <= inlen;\nloop invariant buf < bufferlen ==> 0 <= inlen - 1;\nloop invariant buf < bufferlen ==> 0 <= inlen - 2;\nloop invariant buf < bufferlen ==> 0 <= inlen - 3;\nloop invariant buf < bufferlen ==> 0 <= bufferlen;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 1;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 2;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 3;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 4;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 5;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 6;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 7;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 8;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 9;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 10;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 11;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 12;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 13;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 14;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 15;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 16;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 17;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 18;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 19;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 20;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 21;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 22;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 23;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 24;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 25;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 26;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 27;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 28;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 29;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 30;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 31;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 32;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 33;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 34;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 35;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 36;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 37;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 38;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 39;\nloop invariant buf < bufferlen ==> 0 <= bufferlen - 40;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n\n\n\nloop invariant i5: buf < bufferlen ==> buf <= bufferlen - 1;\n\nloop invariant i7: buf < bufferlen ==> in <= inlen - 1;\n\nloop invariant i9: buf < bufferlen ==> in >= 0;\n\nloop invariant i11: buf < bufferlen ==> 0 <= in;\nloop invariant i12: buf < bufferlen ==> 0 <= buflim;\n\n\nloop invariant i15: buf < bufferlen ==> 0 <= buf;\n\n\nloop invariant i18: buf < bufferlen ==> 0 <= inlen;\nloop invariant i19: buf < bufferlen ==> 0 <= inlen - 1;\nloop invariant i20: buf < bufferlen ==> 0 <= inlen - 2;\nloop invariant i21: buf < bufferlen ==> 0 <= inlen - 3;\nloop invariant i22: buf < bufferlen ==> 0 <= bufferlen;\nloop invariant i23: buf < bufferlen ==> 0 <= bufferlen - 1;\nloop invariant i24: buf < bufferlen ==> 0 <= bufferlen - 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 56: unexpected token 'implies'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf < bufferlen;\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf < buflim ==> in < inlen;\nloop invariant i4: buf >= buflim ==> in >= inlen;\nloop invariant i5: buf >= buflim ==> buf >= buflim;\nloop invariant i6: buf < buflim ==> buf < buflim;\nloop invariant i7: 0 <= buf && buf < bufferlen;\nloop invariant i8: 0 <= in && in < inlen;\nloop invariant i9: buf <= buflim;\nloop invariant i10: in <= buflim;\nloop invariant i11: 0 <= buf <= buflim;\nloop invariant i12: 0 <= in <= inlen;\nloop invariant i13: buf < bufferlen;\nloop invariant i14: in < inlen;\nloop invariant i15: buflim < bufferlen;\nloop invariant i16: (buf == buflim) ==> (in < inlen);\nloop invariant i17: (buf == buflim) ==> (buf < buflim);\nloop invariant i18: (buf == buflim) ==> (in < buflim);\nloop invariant i19: (buf == buflim) ==> (buf < in);\nloop invariant i20: (buf != buflim) ==> (in < inlen);\nloop invariant i21: (buf != buflim) ==> (buf < bufferlen);\nloop invariant i22: (buf != buflim) ==> (in < buflim);\nloop invariant i23: (buf != buflim) ==> (buf < in);\nloop invariant i24: 0 <= buf;\nloop invariant i25: 0 <= in;\nloop invariant i26: 0 <= buflim;\nloop invariant i27: buflim < inlen;\nloop invariant i28: buf < buflim implies buf < bufferlen - 2;\nloop invariant i29: buf < buflim implies buf < buflim + 1;\nloop invariant i30: in < inlen implies in < bufferlen;\nloop invariant i31: in < inlen implies in < inlen + 1;\nloop invariant i32: buf <= bufferlen;\nloop invariant i33: in >= 0;\nloop invariant i34: in <= inlen;\nloop invariant i35: 0 <= buf <= bufferlen;\nloop invariant i36: buf <= buflim + 2;\nloop invariant i37: buflim < in;\nloop invariant i38: buf < in;\nloop invariant i39: buf <= in;\nloop invariant i40: buf <= inlen;\nloop invariant i41: buf <= inlen - 1;\nloop invariant i42: 0 <= in <= inlen - 1;\nloop invariant i43: buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1);\nloop invariant i44: buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1 && in < inlen - 1);\nloop invariant i45: buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1 && in < inlen - 1 && buf < buflim);\nloop invariant i46: 0 <= buflim <= bufferlen - 2;\nloop invariant i47: buflim <= bufferlen - 2;\nloop invariant i48: ( ( 0 <= buf ) ==> ( buf < bufferlen ) );\nloop invariant i49: ( ( 0 <= buf ) ==> ( buf <= buflim ) );\nloop invariant i50: ( buf <= buflim );\nloop invariant i51: ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant i52: buflim <= inlen;\nloop invariant i53: buflim >= -1;\nloop invariant i54: buf >= 0;\nloop invariant i55: buflim >= 0;\nloop invariant i56: 0 <= buflim <= bufferlen;\nloop invariant i57: buf < bufferlen ==> buflim <= buf - 1;\nloop invariant i58: buf < bufferlen ==> buflim <= buf - 2;\nloop invariant i59: buf < bufferlen ==> buf <= buflim + 1;\nloop invariant i60: buf < bufferlen ==> buf <= buflim + 2;\nloop invariant i61: buf < bufferlen ==> buf <= bufferlen - 1;\nloop invariant i62: buf < bufferlen ==> buf <= bufferlen - 2;\nloop invariant i63: buf < bufferlen ==> in <= inlen - 1;\nloop invariant i64: buf < bufferlen ==> in <= inlen - 2;\nloop invariant i65: buf < bufferlen ==> in >= 0;\nloop invariant i66: buf < bufferlen ==> in >= 1;\nloop invariant i67: buf < bufferlen ==> 0 <= in;\nloop invariant i68: buf < bufferlen ==> 0 <= buflim;\nloop invariant i69: buf < bufferlen ==> 0 <= buflim - 1;\nloop invariant i70: buf < bufferlen ==> 0 <= buflim - 2;\nloop invariant i71: buf < bufferlen ==> 0 <= buf;\nloop invariant i72: buf < bufferlen ==> 0 <= buf - 1;\nloop invariant i73: buf < bufferlen ==> 0 <= buf - 2;\nloop invariant i74: buf < bufferlen ==> 0 <= inlen;\nloop invariant i75: buf < bufferlen ==> 0 <= inlen - 1;\nloop invariant i76: buf < bufferlen ==> 0 <= inlen - 2;\nloop invariant i77: buf < bufferlen ==> 0 <= inlen - 3;\nloop invariant i78: buf < bufferlen ==> 0 <= bufferlen;\nloop invariant i79: buf < bufferlen ==> 0 <= bufferlen - 1;\nloop invariant i80: buf < bufferlen ==> 0 <= bufferlen - 2;\nloop invariant i81: buf < bufferlen ==> 0 <= bufferlen - 3;\nloop invariant i82: buf < bufferlen ==> 0 <= bufferlen - 4;\nloop invariant i83: buf < bufferlen ==> 0 <= bufferlen - 5;\nloop invariant i84: buf < bufferlen ==> 0 <= bufferlen - 6;\nloop invariant i85: buf < bufferlen ==> 0 <= bufferlen - 7;\nloop invariant i86: buf < bufferlen ==> 0 <= bufferlen - 8;\nloop invariant i87: buf < bufferlen ==> 0 <= bufferlen - 9;\nloop invariant i88: buf < bufferlen ==> 0 <= bufferlen - 10;\nloop invariant i89: buf < bufferlen ==> 0 <= bufferlen - 11;\nloop invariant i90: buf < bufferlen ==> 0 <= bufferlen - 12;\nloop invariant i91: buf < bufferlen ==> 0 <= bufferlen - 13;\nloop invariant i92: buf < bufferlen ==> 0 <= bufferlen - 14;\nloop invariant i93: buf < bufferlen ==> 0 <= bufferlen - 15;\nloop invariant i94: buf < bufferlen ==> 0 <= bufferlen - 16;\nloop invariant i95: buf < bufferlen ==> 0 <= bufferlen - 17;\nloop invariant i96: buf < bufferlen ==> 0 <= bufferlen - 18;\nloop invariant i97: buf < bufferlen ==> 0 <= bufferlen - 19;\nloop invariant i98: buf < bufferlen ==> 0 <= bufferlen - 20;\nloop invariant i99: buf < bufferlen ==> 0 <= bufferlen - 21;\nloop invariant i100: buf < bufferlen ==> 0 <= bufferlen - 22;\nloop invariant i101: buf < bufferlen ==> 0 <= bufferlen - 23;\nloop invariant i102: buf < bufferlen ==> 0 <= bufferlen - 24;\nloop invariant i103: buf < bufferlen ==> 0 <= bufferlen - 25;\nloop invariant i104: buf < bufferlen ==> 0 <= bufferlen - 26;\nloop invariant i105: buf < bufferlen ==> 0 <= bufferlen - 27;\nloop invariant i106: buf < bufferlen ==> 0 <= bufferlen - 28;\nloop invariant i107: buf < bufferlen ==> 0 <= bufferlen - 29;\nloop invariant i108: buf < bufferlen ==> 0 <= bufferlen - 30;\nloop invariant i109: buf < bufferlen ==> 0 <= bufferlen - 31;\nloop invariant i110: buf < bufferlen ==> 0 <= bufferlen - 32;\nloop invariant i111: buf < bufferlen ==> 0 <= bufferlen - 33;\nloop invariant i112: buf < bufferlen ==> 0 <= bufferlen - 34;\nloop invariant i113: buf < bufferlen ==> 0 <= bufferlen - 35;\nloop invariant i114: buf < bufferlen ==> 0 <= bufferlen - 36;\nloop invariant i115: buf < bufferlen ==> 0 <= bufferlen - 37;\nloop invariant i116: buf < bufferlen ==> 0 <= bufferlen - 38;\nloop invariant i117: buf < bufferlen ==> 0 <= bufferlen - 39;\nloop invariant i118: buf < bufferlen ==> 0 <= bufferlen - 40;\nloop invariant i119: i1;\nloop invariant i120: i2;\nloop invariant i121: i3;\nloop invariant i122: i4;\nloop invariant i123: i5;\nloop invariant i124: i6;\nloop invariant i125: i7;\nloop invariant i126: i8;\nloop invariant i127: i9;\nloop invariant i128: i10;\nloop invariant i129: i11;\nloop invariant i130: i12;\nloop invariant i131: i13;\nloop invariant i132: i14;\nloop invariant i133: i15;\nloop invariant i134: i16;\nloop invariant i135: i17;\nloop invariant i136: i18;\nloop invariant i137: i19;\nloop invariant i138: i20;\nloop invariant i139: i21;\nloop invariant i140: i22;\nloop invariant i141: i23;\nloop invariant i142: i24;\nloop invariant i143: i25;\nloop invariant i144: i26;\nloop invariant i145: i27;\nloop invariant i146: i28;\nloop invariant i147: i29;\nloop invariant i148: i30;\nloop invariant i149: i31;\nloop invariant i150: i32;\nloop invariant i151: i33;\nloop invariant i152: i34;\nloop invariant i153: i35;\nloop invariant i154: i36;\nloop invariant i155: i37;\nloop invariant i156: i38;\nloop invariant i157: i39;\nloop invariant i158: i40;\nloop invariant i159: i41;\nloop invariant i160: i42;\nloop invariant i161: i43;\nloop invariant i162: i44;\nloop invariant i163: i45;\nloop invariant i164: i46;\nloop invariant i165: i47;\nloop invariant i166: i48;\nloop invariant i167: i49;\nloop invariant i168: i50;\nloop invariant i169: i51;\nloop invariant i170: i52;\nloop invariant i171: i53;\nloop invariant i172: i54;\nloop invariant i173: i55;\nloop invariant i174: i56;\nloop invariant i175: i57;\nloop invariant i176: i58;\nloop invariant i177: i59;\nloop invariant i178: i60;\nloop invariant i179: i61;\nloop invariant i180: i62;\nloop invariant i181: i63;\nloop invariant i182: i64;\nloop invariant i183: i65;\nloop invariant i184: i66;\nloop invariant i185: i67;\nloop invariant i186: i68;\nloop invariant i187: i69;\nloop invariant i188: i70;\nloop invariant i189: i71;\nloop invariant i190: i72;\nloop invariant i191: i73;\nloop invariant i192: i74;\nloop invariant i193: i75;\nloop invariant i194: i76;\nloop invariant i195: i77;\nloop invariant i196: i78;\nloop invariant i197: i79;\nloop invariant i198: i80;\nloop invariant i199: i81;\nloop invariant i200: i82;\nloop invariant i201: i83;\nloop invariant i202: i84;\nloop invariant i203: i85;\nloop invariant i204: i86;\nloop invariant i205: i87;\nloop invariant i206: i88;\nloop invariant i207: i89;\nloop invariant i208: i90;\nloop invariant i209: i91;\nloop invariant i210: i92;\nloop invariant i211: i93;\nloop invariant i212: i94;\nloop invariant i213: i95;\nloop invariant i214: i96;\nloop invariant i215: i97;\nloop invariant i216: i98;\nloop invariant i217: i99;\nloop invariant i218: i100;\nloop invariant i219: i101;\nloop invariant i220: i102;\nloop invariant i221: i103;\nloop invariant i222: i104;\nloop invariant i223: i105;\nloop invariant i224: i106;\nloop invariant i225: i107;\nloop invariant i226: i108;\nloop invariant i227: i109;\nloop invariant i228: i110;\nloop invariant i229: i111;\nloop invariant i230: i112;\nloop invariant i231: i113;\nloop invariant i232: i114;\nloop invariant i233: i115;\nloop invariant i234: i116;\nloop invariant i235: i117;\nloop invariant i236: i118;\nloop invariant i237: i119;\nloop invariant i238: i120;\nloop invariant i239: i121;\nloop invariant i240: i122;\nloop invariant i241: i123;\nloop invariant i242: i124;\nloop invariant i243: i125;\nloop invariant i244: i126;\nloop invariant i245: i127;\nloop invariant i246: i128;\nloop invariant i247: i129;\nloop invariant i248: i130;\nloop invariant i249: i131;\nloop invariant i250: i132;\nloop invariant i251: i133;\nloop invariant i252: i134;\nloop invariant i253: i135;\nloop invariant i254: i136;\nloop invariant i255: i137;\nloop invariant i256: i138;\nloop invariant i257: i139;\nloop invariant i258: i140;\nloop invariant i259: i141;\nloop invariant i260: i142;\nloop invariant i261: i143;\nloop invariant i262: i144;\nloop invariant i263: i145;\nloop invariant i264: i146;\nloop invariant i265: i147;\nloop invariant i266: i148;\nloop invariant i267: i149;\nloop invariant i268: i150;\nloop invariant i269: i151;\nloop invariant i270: i152;\nloop invariant i271: i153;\nloop invariant i272: i154;\nloop invariant i273: i155;\nloop invariant i274: i156;\nloop invariant i275: i157;\nloop invariant i276: i158;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 175,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf < bufferlen;\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf < buflim ==> in < inlen;\n\nloop invariant i5: buf >= buflim ==> buf >= buflim;\nloop invariant i6: buf < buflim ==> buf < buflim;\nloop invariant i7: 0 <= buf && buf < bufferlen;\nloop invariant i8: 0 <= in && in < inlen;\nloop invariant i9: buf <= buflim;\n\nloop invariant i11: 0 <= buf <= buflim;\nloop invariant i12: 0 <= in <= inlen;\nloop invariant i13: buf < bufferlen;\nloop invariant i14: in < inlen;\nloop invariant i15: buflim < bufferlen;\nloop invariant i16: (buf == buflim) ==> (in < inlen);\n\n\n\nloop invariant i20: (buf != buflim) ==> (in < inlen);\nloop invariant i21: (buf != buflim) ==> (buf < bufferlen);\n\n\nloop invariant i24: 0 <= buf;\nloop invariant i25: 0 <= in;\nloop invariant i26: 0 <= buflim;\nloop invariant i27: buflim < inlen;\n\n\n\n\nloop invariant i32: buf <= bufferlen;\nloop invariant i33: in >= 0;\nloop invariant i34: in <= inlen;\nloop invariant i35: 0 <= buf <= bufferlen;\nloop invariant i36: buf <= buflim + 2;\n\n\nloop invariant i39: buf <= in;\nloop invariant i40: buf <= inlen;\nloop invariant i41: buf <= inlen - 1;\nloop invariant i42: 0 <= in <= inlen - 1;\nloop invariant i43: buf == buflim || (0 <= buf < buf + 1 && 0 <= in < in + 1);\n\n\nloop invariant i46: 0 <= buflim <= bufferlen - 2;\nloop invariant i47: buflim <= bufferlen - 2;\nloop invariant i48: ( ( 0 <= buf ) ==> ( buf < bufferlen ) );\nloop invariant i49: ( ( 0 <= buf ) ==> ( buf <= buflim ) );\nloop invariant i50: ( buf <= buflim );\nloop invariant i51: ( ( 0 <= buf ) ==> (buf<=buflim) );\nloop invariant i52: buflim <= inlen;\nloop invariant i53: buflim >= -1;\nloop invariant i54: buf >= 0;\nloop invariant i55: buflim >= 0;\nloop invariant i56: 0 <= buflim <= bufferlen;\n\n\nloop invariant i59: buf < bufferlen ==> buf <= buflim + 1;\nloop invariant i60: buf < bufferlen ==> buf <= buflim + 2;\nloop invariant i61: buf < bufferlen ==> buf <= bufferlen - 1;\nloop invariant i62: buf < bufferlen ==> buf <= bufferlen - 2;\nloop invariant i63: buf < bufferlen ==> in <= inlen - 1;\n\nloop invariant i65: buf < bufferlen ==> in >= 0;\n\nloop invariant i67: buf < bufferlen ==> 0 <= in;\nloop invariant i68: buf < bufferlen ==> 0 <= buflim;\n\n\nloop invariant i71: buf < bufferlen ==> 0 <= buf;\n\n\nloop invariant i74: buf < bufferlen ==> 0 <= inlen;\nloop invariant i75: buf < bufferlen ==> 0 <= inlen - 1;\nloop invariant i76: buf < bufferlen ==> 0 <= inlen - 2;\nloop invariant i77: buf < bufferlen ==> 0 <= inlen - 3;\nloop invariant i78: buf < bufferlen ==> 0 <= bufferlen;\nloop invariant i79: buf < bufferlen ==> 0 <= bufferlen - 1;\nloop invariant i80: buf < bufferlen ==> 0 <= bufferlen - 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 33,
        "success_count": 30,
        "failure_count": 3,
        "success_rate": 0.9090909090909091
    }
}