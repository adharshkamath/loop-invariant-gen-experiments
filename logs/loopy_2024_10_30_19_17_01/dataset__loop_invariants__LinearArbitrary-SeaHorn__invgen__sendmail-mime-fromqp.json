{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant 0 <= nchar;\nloop invariant 0 <= out;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= nchar <= outfilelen ==> 0 <= out < outfilelen;\nloop invariant 0 <= out ==> 0 <= nchar;\nloop invariant 0 <= nchar ==> 0 <= out;\nloop invariant 0 <= out ==> nchar < outfilelen;\nloop invariant nchar < outfilelen ==> 0 <= out;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= outfilelen <= 2147483647;\nloop invariant out <= outfilelen;\nloop invariant out >= 0;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out == nchar ==> 0 <= out < outfilelen;\nloop invariant out < nchar ==> 0 <= out <= outfilelen - 1;\nloop invariant nchar < out ==> 0 <= nchar <= outfilelen - 1;\nloop invariant nchar == out ==> 0 <= nchar < outfilelen;\nloop invariant outfilelen > 0 ==> 0 < outfilelen;\nloop invariant outfilelen <= 0 ==> outfilelen == 0;\nloop invariant outfilelen == 0 ==> out == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= out == nchar <= outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= nchar == out <= outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= out < outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= nchar < outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant out + 1 <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant out + nchar <= outfilelen;\nloop invariant 0 <= out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= nchar + 1;\nloop invariant outfilelen > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= outfilelen;\nloop invariant outfilelen >= 0;\nloop invariant outfilelen <= 2147483647;\nloop invariant out >= 0;\nloop invariant out <= 2147483647;\nloop invariant nchar >= 0;\nloop invariant nchar <= 2147483647;\nloop invariant nchar <= outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out < outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= outfilelen <= 1147483647;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= nchar;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant outfilelen > 0;\nloop invariant outfilelen >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= out <= outfilelen ==> nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen ==> out < outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= outfilelen;\nloop invariant 0 <= nchar;\nloop invariant 0 <= out;\nloop invariant 0 <= outfilelen;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant 0 <= nchar;\nloop invariant 0 <= out;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out < outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: nchar < outfilelen;\nloop invariant i3: 0 <= nchar;\nloop invariant i4: 0 <= out;\n\nloop invariant i6: nchar >= 0;\nloop invariant i7: out >= 0;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= nchar <= outfilelen ==> 0 <= out < outfilelen;\nloop invariant 0 <= out ==> 0 <= nchar;\nloop invariant 0 <= nchar ==> 0 <= out;\nloop invariant 0 <= out ==> nchar < outfilelen;\nloop invariant nchar < outfilelen ==> 0 <= out;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: 0 <= out < outfilelen ==> nchar < outfilelen;\n\nloop invariant i5: 0 <= out ==> 0 <= nchar;\nloop invariant i6: 0 <= nchar ==> 0 <= out;\nloop invariant i7: 0 <= out ==> nchar < outfilelen;\nloop invariant i8: nchar < outfilelen ==> 0 <= out;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= outfilelen <= 2147483647;\nloop invariant out <= outfilelen;\nloop invariant out >= 0;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: nchar >= 0;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: 0 <= outfilelen <= 2147483647;\nloop invariant i5: out <= outfilelen;\nloop invariant i6: out >= 0;\nloop invariant i7: 0 <= nchar;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out == nchar ==> 0 <= out < outfilelen;\nloop invariant out < nchar ==> 0 <= out <= outfilelen - 1;\nloop invariant nchar < out ==> 0 <= nchar <= outfilelen - 1;\nloop invariant nchar == out ==> 0 <= nchar < outfilelen;\nloop invariant outfilelen > 0 ==> 0 < outfilelen;\nloop invariant outfilelen <= 0 ==> outfilelen == 0;\nloop invariant outfilelen == 0 ==> out == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= out == nchar <= outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= nchar == out <= outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= out < outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= nchar < outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> 0 <= nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: out == nchar ==> 0 <= out < outfilelen;\nloop invariant i4: out < nchar ==> 0 <= out <= outfilelen - 1;\nloop invariant i5: nchar < out ==> 0 <= nchar <= outfilelen - 1;\nloop invariant i6: nchar == out ==> 0 <= nchar < outfilelen;\nloop invariant i7: outfilelen > 0 ==> 0 < outfilelen;\nloop invariant i8: outfilelen <= 0 ==> outfilelen == 0;\nloop invariant i9: outfilelen == 0 ==> out == outfilelen;\nloop invariant i10: outfilelen == 0 ==> nchar == outfilelen;\nloop invariant i11: outfilelen == 0 ==> 0 <= out == nchar <= outfilelen;\nloop invariant i12: outfilelen == 0 ==> 0 <= nchar == out <= outfilelen;\nloop invariant i13: outfilelen == 0 ==> 0 <= out < outfilelen;\nloop invariant i14: outfilelen == 0 ==> 0 <= nchar < outfilelen;\nloop invariant i15: outfilelen == 0 ==> out == nchar == outfilelen;\nloop invariant i16: outfilelen == 0 ==> nchar == out == outfilelen;\nloop invariant i17: outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant i18: outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant i19: outfilelen == 0 ==> 0 <= out == nchar == outfilelen == outfilelen;\nloop invariant i20: outfilelen == 0 ==> 0 <= nchar == out == outfilelen == outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant out + 1 <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant out + nchar <= outfilelen;\nloop invariant 0 <= out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant out + nchar <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\n\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: 0 <= nchar <= outfilelen;\nloop invariant i5: out >= 0;\nloop invariant i6: nchar >= 0;\n\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: nchar >= 0;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= nchar + 1;\nloop invariant outfilelen > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out;\nloop invariant i2: 0 <= nchar;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: out <= outfilelen;\nloop invariant i5: out <= nchar + 1;\nloop invariant i6: outfilelen > 0;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= outfilelen;\nloop invariant outfilelen >= 0;\nloop invariant outfilelen <= 2147483647;\nloop invariant out >= 0;\nloop invariant out <= 2147483647;\nloop invariant nchar >= 0;\nloop invariant nchar <= 2147483647;\nloop invariant nchar <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: 0 <= outfilelen;\nloop invariant i4: outfilelen >= 0;\nloop invariant i5: outfilelen <= 2147483647;\nloop invariant i6: out >= 0;\nloop invariant i7: out <= 2147483647;\nloop invariant i8: nchar >= 0;\nloop invariant i9: nchar <= 2147483647;\nloop invariant i10: nchar <= outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out < outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= outfilelen <= 1147483647;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\nloop invariant i2: 0 <= out <= outfilelen;\n\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= nchar;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant outfilelen > 0;\nloop invariant outfilelen >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: 0 <= out <= nchar;\nloop invariant i4: nchar >= 0;\nloop invariant i5: out >= 0;\nloop invariant i6: outfilelen > 0;\nloop invariant i7: outfilelen >= 1;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= out <= outfilelen ==> nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen ==> out < outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: 0 <= out <= outfilelen ==> nchar <= outfilelen;\nloop invariant i4: 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant i5: 0 <= out < outfilelen ==> nchar < outfilelen ==> out < outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= outfilelen;\nloop invariant 0 <= nchar;\nloop invariant 0 <= out;\nloop invariant 0 <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: 0 <= outfilelen;\nloop invariant i4: 0 <= nchar;\nloop invariant i5: 0 <= out;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= out <= outfilelen is partially proven to be inductive.\nloop invariant nchar < outfilelen is partially proven to be inductive.\nloop invariant 0 <= nchar is partially proven to be inductive.\nloop invariant 0 <= out is partially proven to be inductive.\nloop invariant out < outfilelen is partially proven to be inductive.\nloop invariant nchar >= 0 is partially proven to be inductive.\nloop invariant out >= 0 is partially proven to be inductive.\nloop invariant 0 <= nchar <= outfilelen is partially proven to be inductive.\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen is partially proven to be inductive.\nloop invariant 0 <= nchar <= outfilelen ==> 0 <= out < outfilelen is partially proven to be inductive.\nloop invariant 0 <= out ==> 0 <= nchar is partially proven to be inductive.\nloop invariant 0 <= nchar ==> 0 <= out is partially proven to be inductive.\nloop invariant 0 <= out ==> nchar < outfilelen is partially proven to be inductive.\nloop invariant nchar < outfilelen ==> 0 <= out is partially proven to be inductive.\nloop invariant nchar <= outfilelen is partially proven to be inductive.\nloop invariant 0 <= outfilelen <= 2147483647 is partially proven to be inductive.\nloop invariant out <= outfilelen is partially proven to be inductive.\nloop invariant out == nchar ==> 0 <= out < outfilelen is partially proven to be inductive.\nloop invariant out < nchar ==> 0 <= out <= outfilelen - 1 is partially proven to be inductive.\nloop invariant nchar < out ==> 0 <= nchar <= outfilelen - 1 is partially proven to be inductive.\nloop invariant nchar == out ==> 0 <= nchar < outfilelen is partially proven to be inductive.\nloop invariant outfilelen > 0 ==> 0 < outfilelen is partially proven to be inductive.\nloop invariant outfilelen <= 0 ==> outfilelen == 0 is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> out == outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> nchar == outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> 0 <= out == nchar <= outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> 0 <= nchar == out <= outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> 0 <= out < outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> 0 <= nchar < outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> out == nchar == outfilelen == outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> nchar == out == outfilelen == outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> 0 <= out == nchar == outfilelen == outfilelen is partially proven to be inductive.\nloop invariant outfilelen == 0 ==> 0 <= nchar == out == outfilelen == outfilelen is partially proven to be inductive.\nloop invariant out + 1 <= outfilelen is partially proven to be inductive.\nloop invariant out + nchar <= outfilelen is partially proven to be inductive.\nloop invariant 0 <= out + nchar <= outfilelen is partially proven to be inductive.\nloop invariant out <= nchar + 1 is partially proven to be inductive.\nloop invariant outfilelen > 0 is partially proven to be inductive.\nloop invariant 0 <= outfilelen is partially proven to be inductive.\nloop invariant outfilelen >= 0 is partially proven to be inductive.\nloop invariant outfilelen <= 2147483647 is partially proven to be inductive.\nloop invariant out <= 2147483647 is partially proven to be inductive.\nloop invariant nchar <= 2147483647 is partially proven to be inductive.\nloop invariant 0 <= out < outfilelen is partially proven to be inductive.\nloop invariant 1 <= nchar <= outfilelen is preserved but not established.\nloop invariant 0 <= outfilelen <= 1147483647 is partially proven to be inductive.\nloop invariant 0 <= out <= nchar is partially proven to be inductive.\nloop invariant outfilelen >= 1 is partially proven to be inductive.\nloop invariant 0 <= out <= outfilelen ==> nchar <= outfilelen is partially proven to be inductive.\nloop invariant 0 <= out < outfilelen ==> nchar < outfilelen ==> out < outfilelen is partially proven to be inductive.\nAssertion 0 <= out: Partially proven\nAssertion out < outfilelen: Partially proven\nAssertion 0 <= out: Partially proven\nAssertion out < outfilelen: Partially proven\nAssertion 0 <= out: Partially proven\nAssertion out < outfilelen: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: nchar < outfilelen;\nloop invariant i3: 0 <= nchar;\nloop invariant i4: 0 <= out;\nloop invariant i5: out < outfilelen;\nloop invariant i6: nchar >= 0;\nloop invariant i7: out >= 0;\nloop invariant i8: 0 <= nchar <= outfilelen;\nloop invariant i9: 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant i10: 0 <= nchar <= outfilelen ==> 0 <= out < outfilelen;\nloop invariant i11: 0 <= out ==> 0 <= nchar;\nloop invariant i12: 0 <= nchar ==> 0 <= out;\nloop invariant i13: 0 <= out ==> nchar < outfilelen;\nloop invariant i14: nchar < outfilelen ==> 0 <= out;\nloop invariant i15: nchar <= outfilelen;\nloop invariant i16: 0 <= outfilelen <= 2147483647;\nloop invariant i17: out <= outfilelen;\nloop invariant i18: out == nchar ==> 0 <= out < outfilelen;\nloop invariant i19: out < nchar ==> 0 <= out <= outfilelen - 1;\nloop invariant i20: nchar < out ==> 0 <= nchar <= outfilelen - 1;\nloop invariant i21: nchar == out ==> 0 <= nchar < outfilelen;\nloop invariant i22: outfilelen > 0 ==> 0 < outfilelen;\nloop invariant i23: outfilelen <= 0 ==> outfilelen == 0;\nloop invariant i24: outfilelen == 0 ==> out == outfilelen;\nloop invariant i25: outfilelen == 0 ==> nchar == outfilelen;\nloop invariant i26: outfilelen == 0 ==> 0 <= out == nchar <= outfilelen;\nloop invariant i27: outfilelen == 0 ==> 0 <= nchar == out <= outfilelen;\nloop invariant i28: outfilelen == 0 ==> 0 <= out < outfilelen;\nloop invariant i29: outfilelen == 0 ==> 0 <= nchar < outfilelen;\nloop invariant i30: outfilelen == 0 ==> out == nchar == outfilelen;\nloop invariant i31: outfilelen == 0 ==> nchar == out == outfilelen;\nloop invariant i32: outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant i33: outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant i34: outfilelen == 0 ==> 0 <= out == nchar == outfilelen == outfilelen;\nloop invariant i35: outfilelen == 0 ==> 0 <= nchar == out == outfilelen == outfilelen;\nloop invariant i36: out + 1 <= outfilelen;\nloop invariant i37: out + nchar <= outfilelen;\nloop invariant i38: 0 <= out + nchar <= outfilelen;\nloop invariant i39: out <= nchar + 1;\nloop invariant i40: outfilelen > 0;\nloop invariant i41: 0 <= outfilelen;\nloop invariant i42: outfilelen >= 0;\nloop invariant i43: outfilelen <= 2147483647;\nloop invariant i44: out <= 2147483647;\nloop invariant i45: nchar <= 2147483647;\nloop invariant i46: 0 <= out < outfilelen;\nloop invariant i47: 1 <= nchar <= outfilelen;\nloop invariant i48: 0 <= outfilelen <= 1147483647;\nloop invariant i49: 0 <= out <= nchar;\nloop invariant i50: outfilelen >= 1;\nloop invariant i51: 0 <= out <= outfilelen ==> nchar <= outfilelen;\nloop invariant i52: 0 <= out < outfilelen ==> nchar < outfilelen ==> out < outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: nchar < outfilelen;\nloop invariant i3: 0 <= nchar;\nloop invariant i4: 0 <= out;\nloop invariant i5: out < outfilelen;\nloop invariant i6: nchar >= 0;\nloop invariant i7: out >= 0;\nloop invariant i8: 0 <= nchar <= outfilelen;\nloop invariant i9: 0 <= out < outfilelen ==> nchar < outfilelen;\nloop invariant i10: 0 <= nchar <= outfilelen ==> 0 <= out < outfilelen;\nloop invariant i11: 0 <= out ==> 0 <= nchar;\nloop invariant i12: 0 <= nchar ==> 0 <= out;\nloop invariant i13: 0 <= out ==> nchar < outfilelen;\nloop invariant i14: nchar < outfilelen ==> 0 <= out;\nloop invariant i15: nchar <= outfilelen;\nloop invariant i16: 0 <= outfilelen <= 2147483647;\nloop invariant i17: out <= outfilelen;\nloop invariant i18: out == nchar ==> 0 <= out < outfilelen;\nloop invariant i19: out < nchar ==> 0 <= out <= outfilelen - 1;\nloop invariant i20: nchar < out ==> 0 <= nchar <= outfilelen - 1;\nloop invariant i21: nchar == out ==> 0 <= nchar < outfilelen;\nloop invariant i22: outfilelen > 0 ==> 0 < outfilelen;\nloop invariant i23: outfilelen <= 0 ==> outfilelen == 0;\nloop invariant i24: outfilelen == 0 ==> out == outfilelen;\nloop invariant i25: outfilelen == 0 ==> nchar == outfilelen;\nloop invariant i26: outfilelen == 0 ==> 0 <= out == nchar <= outfilelen;\nloop invariant i27: outfilelen == 0 ==> 0 <= nchar == out <= outfilelen;\nloop invariant i28: outfilelen == 0 ==> 0 <= out < outfilelen;\nloop invariant i29: outfilelen == 0 ==> 0 <= nchar < outfilelen;\nloop invariant i30: outfilelen == 0 ==> out == nchar == outfilelen;\nloop invariant i31: outfilelen == 0 ==> nchar == out == outfilelen;\nloop invariant i32: outfilelen == 0 ==> out == nchar == outfilelen == outfilelen;\nloop invariant i33: outfilelen == 0 ==> nchar == out == outfilelen == outfilelen;\nloop invariant i34: outfilelen == 0 ==> 0 <= out == nchar == outfilelen == outfilelen;\nloop invariant i35: outfilelen == 0 ==> 0 <= nchar == out == outfilelen == outfilelen;\nloop invariant i36: out + 1 <= outfilelen;\n\n\nloop invariant i39: out <= nchar + 1;\nloop invariant i40: outfilelen > 0;\nloop invariant i41: 0 <= outfilelen;\nloop invariant i42: outfilelen >= 0;\nloop invariant i43: outfilelen <= 2147483647;\nloop invariant i44: out <= 2147483647;\nloop invariant i45: nchar <= 2147483647;\nloop invariant i46: 0 <= out < outfilelen;\n\n\nloop invariant i49: 0 <= out <= nchar;\nloop invariant i50: outfilelen >= 1;\nloop invariant i51: 0 <= out <= outfilelen ==> nchar <= outfilelen;\nloop invariant i52: 0 <= out < outfilelen ==> nchar < outfilelen ==> out < outfilelen;\n*/\nwhile(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 34,
        "success_count": 31,
        "failure_count": 3,
        "success_rate": 0.9117647058823529
    }
}