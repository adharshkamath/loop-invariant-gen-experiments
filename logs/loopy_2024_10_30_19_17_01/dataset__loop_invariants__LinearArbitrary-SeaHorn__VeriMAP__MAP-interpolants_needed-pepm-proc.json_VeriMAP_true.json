{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant y == 2*x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; loop invariant x >= 0; loop invariant x <= 4; loop invariant y >= 2*x; loop invariant y <= 2*x+3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre + 1 ==> y == y_pre + 2; loop invariant x == x_pre + 1 ==> y == y_pre + 2; loop invariant x == x_pre + 2 ==> y == y_pre + 6; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x == 0 ==> y == 0);\nloop invariant (x == 1 ==> y == 2);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 6);\nloop invariant (x == 4 ==> y == 8);\nloop invariant (x == 5 ==> y == 10);\nloop invariant (x == 6 ==> y == 12);\nloop invariant (x == 7 ==> y == 14);\nloop invariant (x == 8 ==> y == 16);\nloop invariant (x == 9 ==> y == 18);\nloop invariant (x == 10 ==> y == 20);\nloop invariant (x == 11 ==> y == 22);\nloop invariant (x == 12 ==> y == 24);\nloop invariant (x == 13 ==> y == 26);\nloop invariant (x == 14 ==> y == 28);\nloop invariant (x == 15 ==> y == 30);\nloop invariant (x == 16 ==> y == 32);\nloop invariant (x == 17 ==> y == 34);\nloop invariant (x == 18 ==> y == 36);\nloop invariant (x == 19 ==> y == 38);\nloop invariant (x == 20 ==> y == 40);\nloop invariant (x == 21 ==> y == 42);\nloop invariant (x == 22 ==> y == 44);\nloop invariant (x == 23 ==> y == 46);\nloop invariant (x == 24 ==> y == 48);\nloop invariant (x == 25 ==> y == 50);\nloop invariant (x == 26 ==> y == 52);\nloop invariant (x == 27 ==> y == 54);\nloop invariant (x == 28 ==> y == 56);\nloop invariant (x == 29 ==> y == 58);\nloop invariant (x == 30 ==> y == 60);\nloop invariant (x == 31 ==> y == 62);\nloop invariant (x == 32 ==> y == 64);\nloop invariant (x == 33 ==> y == 66);\nloop invariant (x == 34 ==> y == 68);\nloop invariant (x == 35 ==> y == 70);\nloop invariant (x == 36 ==> y == 72);\nloop invariant (x == 37 ==> y == 74);\nloop invariant (x == 38 ==> y == 76);\nloop invariant (x == 39 ==> y == 78);\nloop invariant (x == 40 ==> y == 80);\nloop invariant (x == 41 ==> y == 82);\nloop invariant (x == 42 ==> y == 84);\nloop invariant (x == 43 ==> y == 86);\nloop invariant (x == 44 ==> y == 88);\nloop invariant (x == 45 ==> y == 90);\nloop invariant (x == 46 ==> y == 92);\nloop invariant (x == 47 ==> y == 94);\nloop invariant (x == 48 ==> y == 96);\nloop invariant (x == 49 ==> y == 98);\nloop invariant (x == 50 ==> y == 100);\nloop invariant (x == 51 ==> y == 102);\nloop invariant (x == 52 ==> y == 104);\nloop invariant (x == 53 ==> y == 106);\nloop invariant (x == 54 ==> y == 108);\nloop invariant (x == 55 ==> y == 110);\nloop invariant (x == 56 ==> y == 112);\nloop invariant (x == 57 ==> y == 114);\nloop invariant (x == 58 ==> y == 116);\nloop invariant (x == 59 ==> y == 118);\nloop invariant (x == 60 ==> y == 120);\nloop invariant (x == 61 ==> y == 122);\nloop invariant (x == 62 ==> y == 124);\nloop invariant (x == 63 ==> y == 126);\nloop invariant (x == 64 ==> y == 128);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 3;\nloop invariant y >= 0;\nloop invariant y <= 3*x;\nloop invariant (x <= 4 ==> y >= 4);\nloop invariant (x >= 7 ==> y <= 21);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 0 <= x <= 3 * 4;\nloop invariant 0 <= y <= 3 * 4 + 3 * 3 * 4 / 2;\nloop invariant x * 3 < y ==> x >= 4;\nloop invariant x * 3 < y ==> (x + 1) * 3 < (y + 3);\nloop invariant x * 3 < y ==> x * 3 < (y + 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x + y <= 2*unknown_int();\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == \\at(x, Pre) + \\at(y, Post);\nloop invariant y == \\at(y, Pre) + \\at(x, Post);\nloop invariant x <= unknown_int() * 3;\nloop invariant y <= unknown_int() * 5;\nloop invariant x >= unknown_int() * 2;\nloop invariant x >= unknown_int() * 1;\nloop invariant y >= unknown_int() * 2;\nloop invariant y >= unknown_int() * 3;\nloop invariant y >= unknown_int() * 4;\nloop invariant y >= unknown_int() * 5;\nloop invariant y >= unknown_int() * 6;\nloop invariant y >= unknown_int() * 7;\nloop invariant y >= unknown_int() * 8;\nloop invariant y >= unknown_int() * 9;\nloop invariant y >= unknown_int() * 10;\nloop invariant y >= unknown_int() * 11;\nloop invariant y >= unknown_int() * 12;\nloop invariant y >= unknown_int() * 13;\nloop invariant y >= unknown_int() * 14;\nloop invariant y >= unknown_int() * 15;\nloop invariant y >= unknown_int() * 16;\nloop invariant y >= unknown_int() * 17;\nloop invariant y >= unknown_int() * 18;\nloop invariant y >= unknown_int() * 19;\nloop invariant y >= unknown_int() * 20;\nloop invariant y >= unknown_int() * 21;\nloop invariant y >= unknown_int() * 22;\nloop invariant y >= unknown_int() * 23;\nloop invariant y >= unknown_int() * 24;\nloop invariant y >= unknown_int() * 25;\nloop invariant y >= unknown_int() * 26;\nloop invariant y >= unknown_int() * 27;\nloop invariant y >= unknown_int() * 28;\nloop invariant y >= unknown_int() * 29;\nloop invariant y >= unknown_int() * 30;\nloop invariant y >= unknown_int() * 31;\nloop invariant y >= unknown_int() * 32;\nloop invariant y >= unknown_int() * 33;\nloop invariant y >= unknown_int() * 34;\nloop invariant y >= unknown_int() * 35;\nloop invariant y >= unknown_int() * 36;\nloop invariant y >= unknown_int() * 37;\nloop invariant y >= unknown_int() * 38;\nloop invariant y >= unknown_int() * 39;\nloop invariant y >= unknown_int() * 40;\nloop invariant y >= unknown_int() * 41;\nloop invariant y >= unknown_int() * 42;\nloop invariant y >= unknown_int() * 43;\nloop invariant y >= unknown_int() * 44;\nloop invariant y >= unknown_int() * 45;\nloop invariant y >= unknown_int() * 46;\nloop invariant y >= unknown_int() * 47;\nloop invariant y >= unknown_int() * 48;\nloop invariant y >= unknown_int() * 49;\nloop invariant y >= unknown_int() * 50;\nloop invariant y >= unknown_int() * 51;\nloop invariant y >= unknown_int() * 52;\nloop invariant y >= unknown_int() * 53;\nloop invariant y >= unknown_int() * 54;\nloop invariant y >= unknown_int() * 55;\nloop invariant y >= unknown_int() * 56;\nloop invariant y >= unknown_int() * 57;\nloop invariant y >= unknown_int() * 58;\nloop invariant y >= unknown_int() * 59;\nloop invariant y >= unknown_int() * 60;\nloop invariant y >= unknown_int() * 61;\nloop invariant y >= unknown_int() * 62;\nloop invariant y >= unknown_int() * 63;\nloop invariant y >= unknown_int() * 64;\nloop invariant y >= unknown_int() * 65;\nloop invariant y >= unknown_int() * 66;\nloop invariant y >= unknown_int() * 67;\nloop invariant y >= unknown_int() * 68;\nloop invariant y >= unknown_int() * 69;\nloop invariant y >= unknown_int() * 70;\nloop invariant y >= unknown_int() * 71;\nloop invariant y >= unknown_int() * 72;\nloop invariant y >= unknown_int() * 73;\nloop invariant y >= unknown_int() * 74;\nloop invariant y >= unknown_int() * 75;\nloop invariant y >= unknown_int() * 76;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 ==> 3*x < y;\nloop invariant x >= 4 ==> y >= 15;\nloop invariant x < 4 ==> y >= 6;\nloop invariant x >= 4 ==> y >= 15;\nloop invariant x >= 4 ==> y >= 15;\nloop invariant x >= 4 ==> y >= 15;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 3*x;\nloop invariant x <= y;\nloop invariant y >= 0;\nloop invariant x >= 4 ==> y >= 3*x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 14;\nloop invariant (x < 3 ==> (y == 4*x + 6));\nloop invariant (x >= 3 ==> (y == 4*x + 9));\nloop invariant (x < 3 ==> (y <= 6 + 2*x));\nloop invariant (x >= 3 ==> (y >= 9 + 3*x));\nloop invariant (x >= 4 ==> (y <= 14 + 5*x));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 ==> x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= 4;\nloop invariant y < 3*x;\nloop invariant x >= 3;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 6;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 9;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 12;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 15;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 18;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 21;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 24;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 27;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 30;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 33;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 36;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 39;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 42;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 45;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 48;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 51;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 54;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 57;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 60;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 63;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 66;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 69;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 72;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 75;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 78;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 81;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 84;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 87;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 90;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 93;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 96;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 99;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 102;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 105;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 108;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 111;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 114;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 117;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 120;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 123;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 126;\nloop invariant y >= x;\nloop invariant y < x + 3;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant y == 2*x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x >= 0; loop invariant x <= 4; loop invariant y >= 2*x; loop invariant y <= 2*x+3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre + 1 ==> y == y_pre + 2; loop invariant x == x_pre + 1 ==> y == y_pre + 2; loop invariant x == x_pre + 2 ==> y == y_pre + 6; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\nloop invariant y <= x+1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= y+2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x <= y;\nloop invariant i6: x <= y+2;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x == 0 ==> y == 0);\nloop invariant (x == 1 ==> y == 2);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 6);\nloop invariant (x == 4 ==> y == 8);\nloop invariant (x == 5 ==> y == 10);\nloop invariant (x == 6 ==> y == 12);\nloop invariant (x == 7 ==> y == 14);\nloop invariant (x == 8 ==> y == 16);\nloop invariant (x == 9 ==> y == 18);\nloop invariant (x == 10 ==> y == 20);\nloop invariant (x == 11 ==> y == 22);\nloop invariant (x == 12 ==> y == 24);\nloop invariant (x == 13 ==> y == 26);\nloop invariant (x == 14 ==> y == 28);\nloop invariant (x == 15 ==> y == 30);\nloop invariant (x == 16 ==> y == 32);\nloop invariant (x == 17 ==> y == 34);\nloop invariant (x == 18 ==> y == 36);\nloop invariant (x == 19 ==> y == 38);\nloop invariant (x == 20 ==> y == 40);\nloop invariant (x == 21 ==> y == 42);\nloop invariant (x == 22 ==> y == 44);\nloop invariant (x == 23 ==> y == 46);\nloop invariant (x == 24 ==> y == 48);\nloop invariant (x == 25 ==> y == 50);\nloop invariant (x == 26 ==> y == 52);\nloop invariant (x == 27 ==> y == 54);\nloop invariant (x == 28 ==> y == 56);\nloop invariant (x == 29 ==> y == 58);\nloop invariant (x == 30 ==> y == 60);\nloop invariant (x == 31 ==> y == 62);\nloop invariant (x == 32 ==> y == 64);\nloop invariant (x == 33 ==> y == 66);\nloop invariant (x == 34 ==> y == 68);\nloop invariant (x == 35 ==> y == 70);\nloop invariant (x == 36 ==> y == 72);\nloop invariant (x == 37 ==> y == 74);\nloop invariant (x == 38 ==> y == 76);\nloop invariant (x == 39 ==> y == 78);\nloop invariant (x == 40 ==> y == 80);\nloop invariant (x == 41 ==> y == 82);\nloop invariant (x == 42 ==> y == 84);\nloop invariant (x == 43 ==> y == 86);\nloop invariant (x == 44 ==> y == 88);\nloop invariant (x == 45 ==> y == 90);\nloop invariant (x == 46 ==> y == 92);\nloop invariant (x == 47 ==> y == 94);\nloop invariant (x == 48 ==> y == 96);\nloop invariant (x == 49 ==> y == 98);\nloop invariant (x == 50 ==> y == 100);\nloop invariant (x == 51 ==> y == 102);\nloop invariant (x == 52 ==> y == 104);\nloop invariant (x == 53 ==> y == 106);\nloop invariant (x == 54 ==> y == 108);\nloop invariant (x == 55 ==> y == 110);\nloop invariant (x == 56 ==> y == 112);\nloop invariant (x == 57 ==> y == 114);\nloop invariant (x == 58 ==> y == 116);\nloop invariant (x == 59 ==> y == 118);\nloop invariant (x == 60 ==> y == 120);\nloop invariant (x == 61 ==> y == 122);\nloop invariant (x == 62 ==> y == 124);\nloop invariant (x == 63 ==> y == 126);\nloop invariant (x == 64 ==> y == 128);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 3;\nloop invariant y >= 0;\nloop invariant y <= 3*x;\nloop invariant (x <= 4 ==> y >= 4);\nloop invariant (x >= 7 ==> y <= 21);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\nloop invariant i2: y >= 0;\nloop invariant i3: y <= 3*x;\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 0 <= x <= 3 * 4;\nloop invariant 0 <= y <= 3 * 4 + 3 * 3 * 4 / 2;\nloop invariant x * 3 < y ==> x >= 4;\nloop invariant x * 3 < y ==> (x + 1) * 3 < (y + 3);\nloop invariant x * 3 < y ==> x * 3 < (y + 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x * 3 < y ==> x >= 4;\nloop invariant i6: x * 3 < y ==> (x + 1) * 3 < (y + 3);\nloop invariant i7: x * 3 < y ==> x * 3 < (y + 3);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 83,
                "annotations": "```\n/*@\nloop invariant 0 <= x + y <= 2*unknown_int();\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == \\at(x, Pre) + \\at(y, Post);\nloop invariant y == \\at(y, Pre) + \\at(x, Post);\nloop invariant x <= unknown_int() * 3;\nloop invariant y <= unknown_int() * 5;\nloop invariant x >= unknown_int() * 2;\nloop invariant x >= unknown_int() * 1;\nloop invariant y >= unknown_int() * 2;\nloop invariant y >= unknown_int() * 3;\nloop invariant y >= unknown_int() * 4;\nloop invariant y >= unknown_int() * 5;\nloop invariant y >= unknown_int() * 6;\nloop invariant y >= unknown_int() * 7;\nloop invariant y >= unknown_int() * 8;\nloop invariant y >= unknown_int() * 9;\nloop invariant y >= unknown_int() * 10;\nloop invariant y >= unknown_int() * 11;\nloop invariant y >= unknown_int() * 12;\nloop invariant y >= unknown_int() * 13;\nloop invariant y >= unknown_int() * 14;\nloop invariant y >= unknown_int() * 15;\nloop invariant y >= unknown_int() * 16;\nloop invariant y >= unknown_int() * 17;\nloop invariant y >= unknown_int() * 18;\nloop invariant y >= unknown_int() * 19;\nloop invariant y >= unknown_int() * 20;\nloop invariant y >= unknown_int() * 21;\nloop invariant y >= unknown_int() * 22;\nloop invariant y >= unknown_int() * 23;\nloop invariant y >= unknown_int() * 24;\nloop invariant y >= unknown_int() * 25;\nloop invariant y >= unknown_int() * 26;\nloop invariant y >= unknown_int() * 27;\nloop invariant y >= unknown_int() * 28;\nloop invariant y >= unknown_int() * 29;\nloop invariant y >= unknown_int() * 30;\nloop invariant y >= unknown_int() * 31;\nloop invariant y >= unknown_int() * 32;\nloop invariant y >= unknown_int() * 33;\nloop invariant y >= unknown_int() * 34;\nloop invariant y >= unknown_int() * 35;\nloop invariant y >= unknown_int() * 36;\nloop invariant y >= unknown_int() * 37;\nloop invariant y >= unknown_int() * 38;\nloop invariant y >= unknown_int() * 39;\nloop invariant y >= unknown_int() * 40;\nloop invariant y >= unknown_int() * 41;\nloop invariant y >= unknown_int() * 42;\nloop invariant y >= unknown_int() * 43;\nloop invariant y >= unknown_int() * 44;\nloop invariant y >= unknown_int() * 45;\nloop invariant y >= unknown_int() * 46;\nloop invariant y >= unknown_int() * 47;\nloop invariant y >= unknown_int() * 48;\nloop invariant y >= unknown_int() * 49;\nloop invariant y >= unknown_int() * 50;\nloop invariant y >= unknown_int() * 51;\nloop invariant y >= unknown_int() * 52;\nloop invariant y >= unknown_int() * 53;\nloop invariant y >= unknown_int() * 54;\nloop invariant y >= unknown_int() * 55;\nloop invariant y >= unknown_int() * 56;\nloop invariant y >= unknown_int() * 57;\nloop invariant y >= unknown_int() * 58;\nloop invariant y >= unknown_int() * 59;\nloop invariant y >= unknown_int() * 60;\nloop invariant y >= unknown_int() * 61;\nloop invariant y >= unknown_int() * 62;\nloop invariant y >= unknown_int() * 63;\nloop invariant y >= unknown_int() * 64;\nloop invariant y >= unknown_int() * 65;\nloop invariant y >= unknown_int() * 66;\nloop invariant y >= unknown_int() * 67;\nloop invariant y >= unknown_int() * 68;\nloop invariant y >= unknown_int() * 69;\nloop invariant y >= unknown_int() * 70;\nloop invariant y >= unknown_int() * 71;\nloop invariant y >= unknown_int() * 72;\nloop invariant y >= unknown_int() * 73;\nloop invariant y >= unknown_int() * 74;\nloop invariant y >= unknown_int() * 75;\nloop invariant y >= unknown_int() * 76;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 ==> 3*x < y;\nloop invariant x >= 4 ==> y >= 15;\nloop invariant x < 4 ==> y >= 6;\nloop invariant x >= 4 ==> y >= 15;\nloop invariant x >= 4 ==> y >= 15;\nloop invariant x >= 4 ==> y >= 15;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 3*x;\nloop invariant x <= y;\nloop invariant y >= 0;\nloop invariant x >= 4 ==> y >= 3*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 0 <= x <= 3*x;\nloop invariant i2: x <= y;\nloop invariant i3: y >= 0;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 14;\nloop invariant (x < 3 ==> (y == 4*x + 6));\nloop invariant (x >= 3 ==> (y == 4*x + 9));\nloop invariant (x < 3 ==> (y <= 6 + 2*x));\nloop invariant (x >= 3 ==> (y >= 9 + 3*x));\nloop invariant (x >= 4 ==> (y <= 14 + 5*x));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n\n\nloop invariant i5: (x < 3 ==> (y <= 6 + 2*x));\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 ==> x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 0 <= x <= 4 ==> x <= y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 47,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= 4;\nloop invariant y < 3*x;\nloop invariant x >= 3;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 6;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 9;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 12;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 15;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 18;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 21;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 24;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 27;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 30;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 33;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 36;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 39;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 42;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 45;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 48;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 51;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 54;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 57;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 60;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 63;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 66;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 69;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 72;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 75;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 78;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 81;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 84;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 87;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 90;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 93;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 96;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 99;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 102;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 105;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 108;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 111;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 114;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 117;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 120;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 123;\nloop invariant y >= x;\nloop invariant y < x + 3;\nloop invariant x >= 126;\nloop invariant y >= x;\nloop invariant y < x + 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n\n\nloop invariant i5: y >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 104: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 1 <= x <= 10;\nloop invariant i2: 0 <= y <= 10;\nloop invariant i3: y == 2*x;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: x <= 10;\nloop invariant i7: y <= 10;\nloop invariant i8: 0 <= y; loop invariant x >= 0; loop invariant x <= 4; loop invariant y >= 2*x; loop invariant y <= 2*x+3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre ==> y == y_pre + 3; loop invariant x == x_pre + 1 ==> y == y_pre + 2; loop invariant x == x_pre + 1 ==> y == y_pre + 2; loop invariant x == x_pre + 2 ==> y == y_pre + 6; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2; loop invariant x == x_pre + 3; loop invariant x == x_pre + 4; loop invariant x == x_pre; loop invariant y == y_pre + 1; loop invariant x == x_pre + 1; loop invariant x == x_pre + 2;\nloop invariant i9: 0 <= x <= 100000;\nloop invariant i10: 0 <= y <= 100000;\nloop invariant i11: x <= y;\nloop invariant i12: x <= y+2;\nloop invariant i13: y <= x+1;\nloop invariant i14: 0 <= x <= 4;\nloop invariant i15: 0 <= y <= 4;\nloop invariant i16: (x == 0 ==> y == 0);\nloop invariant i17: (x == 1 ==> y == 2);\nloop invariant i18: (x == 2 ==> y == 4);\nloop invariant i19: (x == 3 ==> y == 6);\nloop invariant i20: (x == 4 ==> y == 8);\nloop invariant i21: (x == 5 ==> y == 10);\nloop invariant i22: (x == 6 ==> y == 12);\nloop invariant i23: (x == 7 ==> y == 14);\nloop invariant i24: (x == 8 ==> y == 16);\nloop invariant i25: (x == 9 ==> y == 18);\nloop invariant i26: (x == 10 ==> y == 20);\nloop invariant i27: (x == 11 ==> y == 22);\nloop invariant i28: (x == 12 ==> y == 24);\nloop invariant i29: (x == 13 ==> y == 26);\nloop invariant i30: (x == 14 ==> y == 28);\nloop invariant i31: (x == 15 ==> y == 30);\nloop invariant i32: (x == 16 ==> y == 32);\nloop invariant i33: (x == 17 ==> y == 34);\nloop invariant i34: (x == 18 ==> y == 36);\nloop invariant i35: (x == 19 ==> y == 38);\nloop invariant i36: (x == 20 ==> y == 40);\nloop invariant i37: (x == 21 ==> y == 42);\nloop invariant i38: (x == 22 ==> y == 44);\nloop invariant i39: (x == 23 ==> y == 46);\nloop invariant i40: (x == 24 ==> y == 48);\nloop invariant i41: (x == 25 ==> y == 50);\nloop invariant i42: (x == 26 ==> y == 52);\nloop invariant i43: (x == 27 ==> y == 54);\nloop invariant i44: (x == 28 ==> y == 56);\nloop invariant i45: (x == 29 ==> y == 58);\nloop invariant i46: (x == 30 ==> y == 60);\nloop invariant i47: (x == 31 ==> y == 62);\nloop invariant i48: (x == 32 ==> y == 64);\nloop invariant i49: (x == 33 ==> y == 66);\nloop invariant i50: (x == 34 ==> y == 68);\nloop invariant i51: (x == 35 ==> y == 70);\nloop invariant i52: (x == 36 ==> y == 72);\nloop invariant i53: (x == 37 ==> y == 74);\nloop invariant i54: (x == 38 ==> y == 76);\nloop invariant i55: (x == 39 ==> y == 78);\nloop invariant i56: (x == 40 ==> y == 80);\nloop invariant i57: (x == 41 ==> y == 82);\nloop invariant i58: (x == 42 ==> y == 84);\nloop invariant i59: (x == 43 ==> y == 86);\nloop invariant i60: (x == 44 ==> y == 88);\nloop invariant i61: (x == 45 ==> y == 90);\nloop invariant i62: (x == 46 ==> y == 92);\nloop invariant i63: (x == 47 ==> y == 94);\nloop invariant i64: (x == 48 ==> y == 96);\nloop invariant i65: (x == 49 ==> y == 98);\nloop invariant i66: (x == 50 ==> y == 100);\nloop invariant i67: (x == 51 ==> y == 102);\nloop invariant i68: (x == 52 ==> y == 104);\nloop invariant i69: (x == 53 ==> y == 106);\nloop invariant i70: (x == 54 ==> y == 108);\nloop invariant i71: (x == 55 ==> y == 110);\nloop invariant i72: (x == 56 ==> y == 112);\nloop invariant i73: (x == 57 ==> y == 114);\nloop invariant i74: (x == 58 ==> y == 116);\nloop invariant i75: (x == 59 ==> y == 118);\nloop invariant i76: (x == 60 ==> y == 120);\nloop invariant i77: (x == 61 ==> y == 122);\nloop invariant i78: (x == 62 ==> y == 124);\nloop invariant i79: (x == 63 ==> y == 126);\nloop invariant i80: (x == 64 ==> y == 128);\nloop invariant i81: 1 <= x <= 3;\nloop invariant i82: y <= 3*x;\nloop invariant i83: (x <= 4 ==> y >= 4);\nloop invariant i84: (x >= 7 ==> y <= 21);\nloop invariant i85: 0 <= x <= 3 * 4;\nloop invariant i86: 0 <= y <= 3 * 4 + 3 * 3 * 4 / 2;\nloop invariant i87: x * 3 < y ==> x >= 4;\nloop invariant i88: x * 3 < y ==> (x + 1) * 3 < (y + 3);\nloop invariant i89: x * 3 < y ==> x * 3 < (y + 3);\nloop invariant i90: 0 <= x + y <= 2*unknown_int();\nloop invariant i91: x == \\at(x, Pre) + \\at(y, Post);\nloop invariant i92: y == \\at(y, Pre) + \\at(x, Post);\nloop invariant i93: x <= unknown_int() * 3;\nloop invariant i94: y <= unknown_int() * 5;\nloop invariant i95: x >= unknown_int() * 2;\nloop invariant i96: x >= unknown_int() * 1;\nloop invariant i97: y >= unknown_int() * 2;\nloop invariant i98: y >= unknown_int() * 3;\nloop invariant i99: y >= unknown_int() * 4;\nloop invariant i100: y >= unknown_int() * 5;\nloop invariant i101: y >= unknown_int() * 6;\nloop invariant i102: y >= unknown_int() * 7;\nloop invariant i103: y >= unknown_int() * 8;\nloop invariant i104: y >= unknown_int() * 9;\nloop invariant i105: y >= unknown_int() * 10;\nloop invariant i106: y >= unknown_int() * 11;\nloop invariant i107: y >= unknown_int() * 12;\nloop invariant i108: y >= unknown_int() * 13;\nloop invariant i109: y >= unknown_int() * 14;\nloop invariant i110: y >= unknown_int() * 15;\nloop invariant i111: y >= unknown_int() * 16;\nloop invariant i112: y >= unknown_int() * 17;\nloop invariant i113: y >= unknown_int() * 18;\nloop invariant i114: y >= unknown_int() * 19;\nloop invariant i115: y >= unknown_int() * 20;\nloop invariant i116: y >= unknown_int() * 21;\nloop invariant i117: y >= unknown_int() * 22;\nloop invariant i118: y >= unknown_int() * 23;\nloop invariant i119: y >= unknown_int() * 24;\nloop invariant i120: y >= unknown_int() * 25;\nloop invariant i121: y >= unknown_int() * 26;\nloop invariant i122: y >= unknown_int() * 27;\nloop invariant i123: y >= unknown_int() * 28;\nloop invariant i124: y >= unknown_int() * 29;\nloop invariant i125: y >= unknown_int() * 30;\nloop invariant i126: y >= unknown_int() * 31;\nloop invariant i127: y >= unknown_int() * 32;\nloop invariant i128: y >= unknown_int() * 33;\nloop invariant i129: y >= unknown_int() * 34;\nloop invariant i130: y >= unknown_int() * 35;\nloop invariant i131: y >= unknown_int() * 36;\nloop invariant i132: y >= unknown_int() * 37;\nloop invariant i133: y >= unknown_int() * 38;\nloop invariant i134: y >= unknown_int() * 39;\nloop invariant i135: y >= unknown_int() * 40;\nloop invariant i136: y >= unknown_int() * 41;\nloop invariant i137: y >= unknown_int() * 42;\nloop invariant i138: y >= unknown_int() * 43;\nloop invariant i139: y >= unknown_int() * 44;\nloop invariant i140: y >= unknown_int() * 45;\nloop invariant i141: y >= unknown_int() * 46;\nloop invariant i142: y >= unknown_int() * 47;\nloop invariant i143: y >= unknown_int() * 48;\nloop invariant i144: y >= unknown_int() * 49;\nloop invariant i145: y >= unknown_int() * 50;\nloop invariant i146: y >= unknown_int() * 51;\nloop invariant i147: y >= unknown_int() * 52;\nloop invariant i148: y >= unknown_int() * 53;\nloop invariant i149: y >= unknown_int() * 54;\nloop invariant i150: y >= unknown_int() * 55;\nloop invariant i151: y >= unknown_int() * 56;\nloop invariant i152: y >= unknown_int() * 57;\nloop invariant i153: y >= unknown_int() * 58;\nloop invariant i154: y >= unknown_int() * 59;\nloop invariant i155: y >= unknown_int() * 60;\nloop invariant i156: y >= unknown_int() * 61;\nloop invariant i157: y >= unknown_int() * 62;\nloop invariant i158: y >= unknown_int() * 63;\nloop invariant i159: y >= unknown_int() * 64;\nloop invariant i160: y >= unknown_int() * 65;\nloop invariant i161: y >= unknown_int() * 66;\nloop invariant i162: y >= unknown_int() * 67;\nloop invariant i163: y >= unknown_int() * 68;\nloop invariant i164: y >= unknown_int() * 69;\nloop invariant i165: y >= unknown_int() * 70;\nloop invariant i166: y >= unknown_int() * 71;\nloop invariant i167: y >= unknown_int() * 72;\nloop invariant i168: y >= unknown_int() * 73;\nloop invariant i169: y >= unknown_int() * 74;\nloop invariant i170: y >= unknown_int() * 75;\nloop invariant i171: y >= unknown_int() * 76;\nloop invariant i172: 0 <= x <= 4 ==> 3*x < y;\nloop invariant i173: x >= 4 ==> y >= 15;\nloop invariant i174: x < 4 ==> y >= 6;\nloop invariant i175: 0 <= x <= 3*x;\nloop invariant i176: x >= 4 ==> y >= 3*x;\nloop invariant i177: 1 <= x <= 4;\nloop invariant i178: 0 <= y <= 14;\nloop invariant i179: (x < 3 ==> (y == 4*x + 6));\nloop invariant i180: (x >= 3 ==> (y == 4*x + 9));\nloop invariant i181: (x < 3 ==> (y <= 6 + 2*x));\nloop invariant i182: (x >= 3 ==> (y >= 9 + 3*x));\nloop invariant i183: (x >= 4 ==> (y <= 14 + 5*x));\nloop invariant i184: 0 <= x <= 4 ==> x <= y;\nloop invariant i185: 0 <= y <= x;\nloop invariant i186: x >= 4;\nloop invariant i187: y < 3*x;\nloop invariant i188: x >= 3;\nloop invariant i189: y >= x;\nloop invariant i190: y < x + 3;\nloop invariant i191: x >= 6;\nloop invariant i192: x >= 9;\nloop invariant i193: x >= 12;\nloop invariant i194: x >= 15;\nloop invariant i195: x >= 18;\nloop invariant i196: x >= 21;\nloop invariant i197: x >= 24;\nloop invariant i198: x >= 27;\nloop invariant i199: x >= 30;\nloop invariant i200: x >= 33;\nloop invariant i201: x >= 36;\nloop invariant i202: x >= 39;\nloop invariant i203: x >= 42;\nloop invariant i204: x >= 45;\nloop invariant i205: x >= 48;\nloop invariant i206: x >= 51;\nloop invariant i207: x >= 54;\nloop invariant i208: x >= 57;\nloop invariant i209: x >= 60;\nloop invariant i210: x >= 63;\nloop invariant i211: x >= 66;\nloop invariant i212: x >= 69;\nloop invariant i213: x >= 72;\nloop invariant i214: x >= 75;\nloop invariant i215: x >= 78;\nloop invariant i216: x >= 81;\nloop invariant i217: x >= 84;\nloop invariant i218: x >= 87;\nloop invariant i219: x >= 90;\nloop invariant i220: x >= 93;\nloop invariant i221: x >= 96;\nloop invariant i222: x >= 99;\nloop invariant i223: x >= 102;\nloop invariant i224: x >= 105;\nloop invariant i225: x >= 108;\nloop invariant i226: x >= 111;\nloop invariant i227: x >= 114;\nloop invariant i228: x >= 117;\nloop invariant i229: x >= 120;\nloop invariant i230: x >= 123;\nloop invariant i231: x >= 126;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 150,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\n\n\n\n\nloop invariant i11: x <= y;\nloop invariant i12: x <= y+2;\n\n\n\nloop invariant i16: (x == 0 ==> y == 0);\nloop invariant i17: (x == 1 ==> y == 2);\nloop invariant i18: (x == 2 ==> y == 4);\nloop invariant i19: (x == 3 ==> y == 6);\nloop invariant i20: (x == 4 ==> y == 8);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i82: y <= 3*x;\n\n\n\n\nloop invariant i87: x * 3 < y ==> x >= 4;\nloop invariant i88: x * 3 < y ==> (x + 1) * 3 < (y + 3);\nloop invariant i89: x * 3 < y ==> x * 3 < (y + 3);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i175: 0 <= x <= 3*x;\n\n\n\n\n\nloop invariant i181: (x < 3 ==> (y <= 6 + 2*x));\n\nloop invariant i183: (x >= 4 ==> (y <= 14 + 5*x));\nloop invariant i184: 0 <= x <= 4 ==> x <= y;\n\n\n\n\nloop invariant i189: y >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 4,
        "success_count": 4,
        "failure_count": 0,
        "success_rate": 1.0
    }
}