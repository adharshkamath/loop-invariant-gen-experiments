{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  while( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 150;\nloop invariant x < 100 ==> y <= 100;\nloop invariant x >= 100 ==> y > 100;\nloop invariant x < 50 ==> x == y - 50;\nloop invariant x >= 50 ==> x == y - 49;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\nloop invariant y = 50 + (x - 0) * 1;\nloop invariant x = 0 + (y - 50) * 1;\nloop invariant y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1;\nloop invariant x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1;\nloop invariant y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1;\nloop invariant x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x < 100 ==> x >= 50;\nloop invariant x < 100 ==> y = x + 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 50 <= y <= 150;\nloop invariant x == y || x == y + 1;\nloop invariant (x == y && y >= 50) ==> (y == x+1);\nloop invariant (x == y+1 && y < 50) ==> (y == x-1);\nloop invariant (x < y && y >= 50) ==> (y == x+2);\nloop invariant (x > y && y < 50) ==> (y == x-2);\nloop invariant (x == y && y == 100) ==> (x == 100);\nloop invariant (x == y+1 && y == 100) ==> (x == 100);\nloop invariant (x == y && y == 99) ==> (x == 100);\nloop invariant (x == y+1 && y == 99) ==> (x == 100);\nloop invariant (x == y && y == 101) ==> (x == 100);\nloop invariant (x == y+1 && y == 101) ==> (x == 100);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;loop invariant 50 <= y <= 100;loop invariant x >= y - 50;loop invariant x >= 0;loop invariant x <= 100;loop invariant y >= 50;loop invariant y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x <= 50 ==> y == 50;\nloop invariant x > 50 ==> y == 51;\nloop invariant x < 100;\nloop invariant x <= 99;\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant y <= 51;\nloop invariant x <= 100 ==> y >= 100;\nloop invariant x >= 100 ==> y <= 100;\nloop invariant x >= 100 ==> y == 100;\nloop invariant y == 50 ==> x == 0;\nloop invariant y == 51 ==> x == 99;\nloop invariant y > 100 ==> x == 100;\nloop invariant y < 100 ==> x < 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 49 <= y <= 50;\nloop invariant x <= y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant (x < 50 ==> x == y - 1);\nloop invariant (x >= 50 ==> x == y);\n*/\n```",
            "```\n/*@\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x <= 100;\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant y <= 100;\nloop invariant y >= 100;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x < 100;\nloop invariant y <= 100;\nloop invariant (x < 50 ==> x < 50);\nloop invariant (x >= 50 ==> x < 100);\nloop invariant (x < 50 ==> y = 50);\nloop invariant (x >= 50 ==> y > 50);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x && x <= 100;\nloop invariant 50 <= y;\nloop invariant y <= 101;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\nloop invariant (y == 50 + x / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x + y >= 50;\nloop invariant x + y <= 150;\nloop invariant x + y == 100 ==> y == 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 150;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (x - 1) * x / 2;\nloop invariant x + y == 100;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 150;\nloop invariant x < 100 ==> y <= 100;\nloop invariant x >= 100 ==> y > 100;\nloop invariant x < 50 ==> x == y - 50;\nloop invariant x >= 50 ==> x == y - 49;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 100;\nloop invariant i3: y >= 50;\n\n\n\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\nloop invariant y = 50 + (x - 0) * 1;\nloop invariant x = 0 + (y - 50) * 1;\nloop invariant y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1;\nloop invariant x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1;\nloop invariant y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1;\nloop invariant x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y >= 50;\n\n\n\n\n\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x < 100 ==> x >= 50;\nloop invariant x < 100 ==> y = x + 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 50 <= y <= 150;\nloop invariant x == y || x == y + 1;\nloop invariant (x == y && y >= 50) ==> (y == x+1);\nloop invariant (x == y+1 && y < 50) ==> (y == x-1);\nloop invariant (x < y && y >= 50) ==> (y == x+2);\nloop invariant (x > y && y < 50) ==> (y == x-2);\nloop invariant (x == y && y == 100) ==> (x == 100);\nloop invariant (x == y+1 && y == 100) ==> (x == 100);\nloop invariant (x == y && y == 99) ==> (x == 100);\nloop invariant (x == y+1 && y == 99) ==> (x == 100);\nloop invariant (x == y && y == 101) ==> (x == 100);\nloop invariant (x == y+1 && y == 101) ==> (x == 100);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\n\n\n\n\nloop invariant i5: (x == y+1 && y < 50) ==> (y == x-1);\n\n\nloop invariant i8: (x == y && y == 100) ==> (x == 100);\nloop invariant i9: (x == y+1 && y == 100) ==> (x == 100);\n\nloop invariant i11: (x == y+1 && y == 99) ==> (x == 100);\nloop invariant i12: (x == y && y == 101) ==> (x == 100);\nloop invariant i13: (x == y+1 && y == 101) ==> (x == 100);\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;loop invariant 50 <= y <= 100;loop invariant x >= y - 50;loop invariant x >= 0;loop invariant x <= 100;loop invariant y >= 50;loop invariant y <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;loop invariant 50 <= y <= 100;loop invariant x >= y - 50;loop invariant x >= 0;loop invariant x <= 100;loop invariant y >= 50;loop invariant y <= 100;\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x <= 50 ==> y == 50;\nloop invariant x > 50 ==> y == 51;\nloop invariant x < 100;\nloop invariant x <= 99;\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant y <= 51;\nloop invariant x <= 100 ==> y >= 100;\nloop invariant x >= 100 ==> y <= 100;\nloop invariant x >= 100 ==> y == 100;\nloop invariant y == 50 ==> x == 0;\nloop invariant y == 51 ==> x == 99;\nloop invariant y > 100 ==> x == 100;\nloop invariant y < 100 ==> x < 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\nloop invariant y >= 100 ==> x == 100;\nloop invariant y < 100 ==> x <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x <= 50 ==> y == 50;\n\n\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 50;\n\n\n\n\n\n\n\n\n\nloop invariant i17: y < 100 ==> x <= 100;\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 49 <= y <= 50;\nloop invariant x <= y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\n\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant (x < 50 ==> x == y - 1);\nloop invariant (x >= 50 ==> x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x <= 100;\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant y <= 100;\nloop invariant y >= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x <= y;\n\nloop invariant i3: x <= 100;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 50;\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x < 100;\nloop invariant y <= 100;\nloop invariant (x < 50 ==> x < 50);\nloop invariant (x >= 50 ==> x < 100);\nloop invariant (x < 50 ==> y = 50);\nloop invariant (x >= 50 ==> y > 50);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\n\n\nloop invariant i5: (x < 50 ==> x < 50);\n\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x && x <= 100;\nloop invariant 50 <= y;\nloop invariant y <= 101;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x && x <= 100;\nloop invariant i2: 50 <= y;\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\nloop invariant (y == 50 + x / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y >= 50;\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x + y >= 50;\nloop invariant x + y <= 150;\nloop invariant x + y == 100 ==> y == 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x + y >= 50;\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 150;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (x - 1) * x / 2;\nloop invariant x + y == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 50 <= y <= 100;\nloop invariant i3: x >= y;\nloop invariant i4: x >= 0;\nloop invariant i5: x <= 100;\nloop invariant i6: y >= 50;\nloop invariant i7: y <= 150;\nloop invariant i8: x < 100 ==> y <= 100;\nloop invariant i9: x >= 100 ==> y > 100;\nloop invariant i10: x < 50 ==> x == y - 50;\nloop invariant i11: x >= 50 ==> x == y - 49;\nloop invariant i12: y <= 100;\nloop invariant i13: y = 50 + (x - 0) * 1;\nloop invariant i14: x = 0 + (y - 50) * 1;\nloop invariant i15: y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1;\nloop invariant i16: x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1;\nloop invariant i17: y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1 ==> y = 50 + (x - 0) * 1;\nloop invariant i18: x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1 ==> x = 0 + (y - 50) * 1;\nloop invariant i19: x < 100 ==> x >= 50;\nloop invariant i20: x < 100 ==> y = x + 50;\nloop invariant i21: 0 <= x < 100;\nloop invariant i22: 50 <= y <= 150;\nloop invariant i23: x == y || x == y + 1;\nloop invariant i24: (x == y && y >= 50) ==> (y == x+1);\nloop invariant i25: (x == y+1 && y < 50) ==> (y == x-1);\nloop invariant i26: (x < y && y >= 50) ==> (y == x+2);\nloop invariant i27: (x > y && y < 50) ==> (y == x-2);\nloop invariant i28: (x == y && y == 100) ==> (x == 100);\nloop invariant i29: (x == y+1 && y == 100) ==> (x == 100);\nloop invariant i30: (x == y && y == 99) ==> (x == 100);\nloop invariant i31: (x == y+1 && y == 99) ==> (x == 100);\nloop invariant i32: (x == y && y == 101) ==> (x == 100);\nloop invariant i33: (x == y+1 && y == 101) ==> (x == 100);\nloop invariant i34: 0 <= x <= 100;loop invariant 50 <= y <= 100;loop invariant x >= y - 50;loop invariant x >= 0;loop invariant x <= 100;loop invariant y >= 50;loop invariant y <= 100;\nloop invariant i35: x <= 50 ==> y == 50;\nloop invariant i36: x > 50 ==> y == 51;\nloop invariant i37: x < 100;\nloop invariant i38: x <= 99;\nloop invariant i39: y <= 51;\nloop invariant i40: x <= 100 ==> y >= 100;\nloop invariant i41: x >= 100 ==> y <= 100;\nloop invariant i42: x >= 100 ==> y == 100;\nloop invariant i43: y == 50 ==> x == 0;\nloop invariant i44: y == 51 ==> x == 99;\nloop invariant i45: y > 100 ==> x == 100;\nloop invariant i46: y < 100 ==> x < 100;\nloop invariant i47: y >= 100 ==> x == 100;\nloop invariant i48: y < 100 ==> x <= 100;\nloop invariant i49: 1 <= x <= 100;\nloop invariant i50: 49 <= y <= 50;\nloop invariant i51: x <= y + 1;\nloop invariant i52: (x < 50 ==> x == y - 1);\nloop invariant i53: (x >= 50 ==> x == y);\nloop invariant i54: x <= y;\nloop invariant i55: y >= 100;\nloop invariant i56: (x < 50 ==> x < 50);\nloop invariant i57: (x >= 50 ==> x < 100);\nloop invariant i58: (x < 50 ==> y = 50);\nloop invariant i59: (x >= 50 ==> y > 50);\nloop invariant i60: 0 <= x && x <= 100;\nloop invariant i61: 50 <= y;\nloop invariant i62: y <= 101;\nloop invariant i63: (y == 50 + x / 2);\nloop invariant i64: x + y >= 50;\nloop invariant i65: x + y <= 150;\nloop invariant i66: x + y == 100 ==> y == 50;\nloop invariant i67: x >= (1 + (y - 1) * y / 2);\nloop invariant i68: y >= (x - 1) * x / 2;\nloop invariant i69: x + y == 100;\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
        "combined_annotation_num_solver_calls": 37,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 50 <= y <= 100;\n\nloop invariant i4: x >= 0;\nloop invariant i5: x <= 100;\nloop invariant i6: y >= 50;\nloop invariant i7: y <= 150;\nloop invariant i8: x < 100 ==> y <= 100;\n\n\n\nloop invariant i12: y <= 100;\n\n\n\n\n\n\n\n\n\nloop invariant i22: 50 <= y <= 150;\n\n\nloop invariant i25: (x == y+1 && y < 50) ==> (y == x-1);\n\nloop invariant i27: (x > y && y < 50) ==> (y == x-2);\nloop invariant i28: (x == y && y == 100) ==> (x == 100);\nloop invariant i29: (x == y+1 && y == 100) ==> (x == 100);\n\nloop invariant i31: (x == y+1 && y == 99) ==> (x == 100);\nloop invariant i32: (x == y && y == 101) ==> (x == 100);\nloop invariant i33: (x == y+1 && y == 101) ==> (x == 100);\nloop invariant i34: 0 <= x <= 100;loop invariant 50 <= y <= 100;loop invariant x >= y - 50;loop invariant x >= 0;loop invariant x <= 100;loop invariant y >= 50;loop invariant y <= 100;\nloop invariant i35: x <= 50 ==> y == 50;\n\n\n\n\n\nloop invariant i41: x >= 100 ==> y <= 100;\nloop invariant i42: x >= 100 ==> y == 100;\n\n\nloop invariant i45: y > 100 ==> x == 100;\nloop invariant i46: y < 100 ==> x < 100;\nloop invariant i47: y >= 100 ==> x == 100;\nloop invariant i48: y < 100 ==> x <= 100;\n\n\nloop invariant i51: x <= y + 1;\n\nloop invariant i53: (x >= 50 ==> x == y);\nloop invariant i54: x <= y;\n\nloop invariant i56: (x < 50 ==> x < 50);\n\n\n\nloop invariant i60: 0 <= x && x <= 100;\nloop invariant i61: 50 <= y;\nloop invariant i62: y <= 101;\n\nloop invariant i64: x + y >= 50;\n\nloop invariant i66: x + y == 100 ==> y == 50;\n\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 2,
        "success_count": 2,
        "failure_count": 0,
        "success_rate": 1.0
    }
}