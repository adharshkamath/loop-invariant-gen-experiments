{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  while (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= i;\nloop invariant i <= y <= 10;\nloop invariant x <= y;\nloop invariant z==1;\nloop invariant y>=0;\nloop invariant x>=0;\nloop invariant x<=y;\nloop invariant y<10;\n*/\n```",
            "```\n/*@\nloop invariant x is 0 after loop termination;\nloop invariant i is 10 after loop termination;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i == 10 ==> x >= y;\nloop invariant i == 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant x <= 100000;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant z >= 1;\nloop invariant z <= 1;\nloop invariant NONDET >= 0;\nloop invariant NONDET <= 1;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y <= 100000 ==> x <= y + (10 - y) * (y + 1) / 2;\nloop invariant i < 10 ==> x >= y + i;\nloop invariant i >= 10 ==> x >= y + (10 - y) * (y + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 1;\nloop invariant !(NONDET > 0) ==> x == x;\nloop invariant NONDET <= 0 ==> x == x + 1;\nloop invariant NONDET <= 0 ==> i == i + 1;\nloop invariant !(NONDET > 0) ==> i == i;\nloop invariant !(NONDET > 0) ==> x == x;\nloop invariant !(NONDET > 0) ==> y == y;\nloop invariant !(NONDET > 0) ==> z == z;\nloop invariant NONDET <= 0 ==> x == x + 1;\nloop invariant NONDET <= 0 ==> y == y;\nloop invariant NONDET <= 0 ==> z == z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant z >= 1;\nloop invariant y >= 0;\nloop invariant (if NONDET > 0 then x == x else x == x + 1);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1));\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1));\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= i <= 10;\nloop invariant i == 10 ==> x == 10;\nloop invariant i < 10 ==> x < 10;\nloop invariant x >= i;\n*/\n```",
            "```\n/*@\nloop invariant 5 <= i <= 10;\nloop invariant x <= y + i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant y >= 0;\nloop invariant z >= 1;\nloop invariant NONDET >= 0;\nloop invariant NONDET <= 1;\nloop invariant x <= (9 - i) + x;\nloop invariant x >= (0 + i);\nloop invariant y >= (0 + i);\nloop invariant y <= (9 - i) + y;\nloop invariant x <= (9 - i) + y;\nloop invariant x >= (0 + i) + z;\nloop invariant x >= (9 - i) + z;\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant i < 10 ==> x == z;\nloop invariant i < 10 ==> y == (i + 1);\nloop invariant y == 0 ==> x == z;\nloop invariant y == 0 ==> i == 0;\nloop invariant y == 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant i <= 10;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x;\nloop invariant x <= (i * 10);\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant i <= y;\nloop invariant i >= y;\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant x >= z - 1;\nloop invariant z >= 1;\nloop invariant true ==> x == z - 1;\nloop invariant false ==> x == z;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\n\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= i;\nloop invariant i <= y <= 10;\nloop invariant x <= y;\nloop invariant z==1;\nloop invariant y>=0;\nloop invariant x>=0;\nloop invariant x<=y;\nloop invariant y<10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 0 <= x <= i;\n\n\nloop invariant i5: z==1;\nloop invariant i6: y>=0;\nloop invariant i7: x>=0;\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x is 0 after loop termination;\nloop invariant i is 10 after loop termination;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i == 10 ==> x >= y;\nloop invariant i == 0 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: i == 0 ==> x == 0;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant x <= 100000;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant z >= 1;\nloop invariant z <= 1;\nloop invariant NONDET >= 0;\nloop invariant NONDET <= 1;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y <= 100000 ==> x <= y + (10 - y) * (y + 1) / 2;\nloop invariant i < 10 ==> x >= y + i;\nloop invariant i >= 10 ==> x >= y + (10 - y) * (y + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: y >= 0;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: i >= 0;\nloop invariant i6: i <= 10;\nloop invariant i7: z >= 1;\nloop invariant i8: z <= 1;\n\n\n\n\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 1;\nloop invariant !(NONDET > 0) ==> x == x;\nloop invariant NONDET <= 0 ==> x == x + 1;\nloop invariant NONDET <= 0 ==> i == i + 1;\nloop invariant !(NONDET > 0) ==> i == i;\nloop invariant !(NONDET > 0) ==> x == x;\nloop invariant !(NONDET > 0) ==> y == y;\nloop invariant !(NONDET > 0) ==> z == z;\nloop invariant NONDET <= 0 ==> x == x + 1;\nloop invariant NONDET <= 0 ==> y == y;\nloop invariant NONDET <= 0 ==> z == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: z >= 1;\nloop invariant i5: !(NONDET > 0) ==> x == x;\n\n\nloop invariant i8: !(NONDET > 0) ==> i == i;\nloop invariant i9: !(NONDET > 0) ==> y == y;\nloop invariant i10: !(NONDET > 0) ==> z == z;\nloop invariant i11: NONDET <= 0 ==> y == y;\nloop invariant i12: NONDET <= 0 ==> z == z;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant z >= 1;\nloop invariant y >= 0;\nloop invariant (if NONDET > 0 then x == x else x == x + 1);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1));\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1));\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2);\nloop invariant (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: z >= 1;\nloop invariant i4: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= i <= 10;\nloop invariant i == 10 ==> x == 10;\nloop invariant i < 10 ==> x < 10;\nloop invariant x >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\nloop invariant i2: 0 <= i <= 10;\n\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 5 <= i <= 10;\nloop invariant x <= y + i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant y >= 0;\nloop invariant z >= 1;\nloop invariant NONDET >= 0;\nloop invariant NONDET <= 1;\nloop invariant x <= (9 - i) + x;\nloop invariant x >= (0 + i);\nloop invariant y >= (0 + i);\nloop invariant y <= (9 - i) + y;\nloop invariant x <= (9 - i) + y;\nloop invariant x >= (0 + i) + z;\nloop invariant x >= (9 - i) + z;\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\nloop invariant x >= (0 + i) + (0 + i);\nloop invariant x <= (9 - i) + (0 + i);\nloop invariant x >= (0 + i) + (9 - i);\nloop invariant x <= (9 - i) + (9 - i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: y >= 0;\nloop invariant i4: z >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant i < 10 ==> x == z;\nloop invariant i < 10 ==> y == (i + 1);\nloop invariant y == 0 ==> x == z;\nloop invariant y == 0 ==> i == 0;\nloop invariant y == 0 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: 0 <= y;\nloop invariant i4: y >= 0;\n\n\n\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= 10;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: i <= 10;\nloop invariant i2: x >= 0;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x;\nloop invariant x <= (i * 10);\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant i <= y;\nloop invariant i >= y;\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\nloop invariant x >= (y * 10);\nloop invariant x <= (y * 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 0 <= x;\nloop invariant i3: x <= (i * 10);\nloop invariant i4: y >= 0;\n\n\n\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant x >= z - 1;\nloop invariant z >= 1;\nloop invariant true ==> x == z - 1;\nloop invariant false ==> x == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\nloop invariant i2: x >= z - 1;\nloop invariant i3: z >= 1;\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: 0 <= y <= 100000;\nloop invariant i4: x >= (1 + (y - 1) * y / 2);\nloop invariant i5: 0 <= i <= 10;\nloop invariant i6: 0 <= x <= i;\nloop invariant i7: i <= y <= 10;\nloop invariant i8: x <= y;\nloop invariant i9: z==1;\nloop invariant i10: y>=0;\nloop invariant i11: x>=0;\nloop invariant i12: x<=y;\nloop invariant i13: y<10;\nloop invariant i14: x is 0 after loop termination;\nloop invariant i15: i is 10 after loop termination;\nloop invariant i16: i == 10 ==> x >= y;\nloop invariant i17: i == 0 ==> x == 0;\nloop invariant i18: y >= 0;\nloop invariant i19: y <= 100000;\nloop invariant i20: x >= 0;\nloop invariant i21: x <= 100000;\nloop invariant i22: i >= 0;\nloop invariant i23: i <= 10;\nloop invariant i24: z >= 1;\nloop invariant i25: z <= 1;\nloop invariant i26: NONDET >= 0;\nloop invariant i27: NONDET <= 1;\nloop invariant i28: y >= 0 ==> x >= y;\nloop invariant i29: y <= 100000 ==> x <= y + (10 - y) * (y + 1) / 2;\nloop invariant i30: i < 10 ==> x >= y + i;\nloop invariant i31: i >= 10 ==> x >= y + (10 - y) * (y + 1) / 2;\nloop invariant i32: !(NONDET > 0) ==> x == x;\nloop invariant i33: NONDET <= 0 ==> x == x + 1;\nloop invariant i34: NONDET <= 0 ==> i == i + 1;\nloop invariant i35: !(NONDET > 0) ==> i == i;\nloop invariant i36: !(NONDET > 0) ==> y == y;\nloop invariant i37: !(NONDET > 0) ==> z == z;\nloop invariant i38: NONDET <= 0 ==> y == y;\nloop invariant i39: NONDET <= 0 ==> z == z;\nloop invariant i40: (if NONDET > 0 then x == x else x == x + 1);\nloop invariant i41: (if NONDET > 0 then x >= 0 else x >= 1);\nloop invariant i42: (if NONDET > 0 then x >= 0 else x >= 1 + i);\nloop invariant i43: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2);\nloop invariant i44: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x);\nloop invariant i45: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y);\nloop invariant i46: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1));\nloop invariant i47: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i);\nloop invariant i48: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2);\nloop invariant i49: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x);\nloop invariant i50: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y);\nloop invariant i51: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1));\nloop invariant i52: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i);\nloop invariant i53: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2);\nloop invariant i54: (if NONDET > 0 then x >= 0 else x >= 1 + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x + y + (NONDET > 0 ? 0 : 1) + i + (i * (i - 1)) / 2 + x);\nloop invariant i55: 0 <= x <= 10;\nloop invariant i56: i == 10 ==> x == 10;\nloop invariant i57: i < 10 ==> x < 10;\nloop invariant i58: x >= i;\nloop invariant i59: 5 <= i <= 10;\nloop invariant i60: x <= y + i - 1;\nloop invariant i61: x <= (9 - i) + x;\nloop invariant i62: x >= (0 + i);\nloop invariant i63: y >= (0 + i);\nloop invariant i64: y <= (9 - i) + y;\nloop invariant i65: x <= (9 - i) + y;\nloop invariant i66: x >= (0 + i) + z;\nloop invariant i67: x >= (9 - i) + z;\nloop invariant i68: x >= (0 + i) + (9 - i);\nloop invariant i69: x <= (9 - i) + (9 - i);\nloop invariant i70: x >= (0 + i) + (0 + i);\nloop invariant i71: x <= (9 - i) + (0 + i);\nloop invariant i72: 0 <= y;\nloop invariant i73: i < 10 ==> x == z;\nloop invariant i74: i < 10 ==> y == (i + 1);\nloop invariant i75: y == 0 ==> x == z;\nloop invariant i76: y == 0 ==> i == 0;\nloop invariant i77: y == 0 ==> x == 0;\nloop invariant i78: 0 <= x;\nloop invariant i79: x <= (i * 10);\nloop invariant i80: y <= 10;\nloop invariant i81: i <= y;\nloop invariant i82: i >= y;\nloop invariant i83: x <= (y * 10);\nloop invariant i84: x >= (y * 10);\nloop invariant i85: 0 <= i <= 9;\nloop invariant i86: x >= z - 1;\nloop invariant i87: true ==> x == z - 1;\nloop invariant i88: false ==> x == z;\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 37,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\n\n\n\nloop invariant i5: 0 <= i <= 10;\nloop invariant i6: 0 <= x <= i;\n\n\nloop invariant i9: z==1;\nloop invariant i10: y>=0;\nloop invariant i11: x>=0;\n\n\n\n\n\nloop invariant i17: i == 0 ==> x == 0;\nloop invariant i18: y >= 0;\n\nloop invariant i20: x >= 0;\nloop invariant i21: x <= 100000;\nloop invariant i22: i >= 0;\nloop invariant i23: i <= 10;\nloop invariant i24: z >= 1;\nloop invariant i25: z <= 1;\n\n\n\n\n\n\nloop invariant i32: !(NONDET > 0) ==> x == x;\n\n\nloop invariant i35: !(NONDET > 0) ==> i == i;\nloop invariant i36: !(NONDET > 0) ==> y == y;\nloop invariant i37: !(NONDET > 0) ==> z == z;\nloop invariant i38: NONDET <= 0 ==> y == y;\nloop invariant i39: NONDET <= 0 ==> z == z;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i55: 0 <= x <= 10;\n\nloop invariant i57: i < 10 ==> x < 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: 0 <= y;\n\n\n\n\n\nloop invariant i78: 0 <= x;\nloop invariant i79: x <= (i * 10);\n\n\n\n\n\n\nloop invariant i86: x >= z - 1;\n\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 22,
        "success_count": 21,
        "failure_count": 1,
        "success_rate": 0.9545454545454546
    }
}