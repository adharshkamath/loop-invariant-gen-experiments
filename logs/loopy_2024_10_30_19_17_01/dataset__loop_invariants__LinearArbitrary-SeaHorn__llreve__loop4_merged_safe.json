{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  while (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= i1;\nloop invariant 0 <= j2 <= i2 * 2;\nloop invariant j1 == j2 ==> (i1 < n + n && i2 == n) || (i2 < n && i1 == n + n);\n*/\n```",
            "```\n/*@\nloop invariant ( ( n >= 0 ==> ( 0 <= i1 <= n + n ) && ( 0 <= i2 <= n ) && ( j1 >= j2 && ( j1 == j2 ) ) && ( j1 == j2 ) && ( j1 == 0 ) && ( j2 == 0 ) && ( i1 == 0 ) && ( i2 == 0 ) ) || ( n < 0 ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2*n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + 1;\nloop invariant 0 <= j2 <= 2*n;\nloop invariant j1 >= j2;\nloop invariant j1 <= 2*j2;\nloop invariant j1 >= i1;\nloop invariant j1 <= i1 + 2*n;\nloop invariant i1 >= j1 - 2*n;\nloop invariant i1 <= j1;\nloop invariant j2 >= i2;\nloop invariant j2 <= i2 + n;\nloop invariant i2 >= j2 - n;\nloop invariant i2 <= j2;\nloop invariant j1 == j2 ==> i1 == i2;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant i1 <= i2 ==> j1 <= j2;\nloop invariant i1 >= i2 ==> j1 >= j2;\nloop invariant i1 == i2 ==> j1 < j2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant j1 >= j2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j1 <= j2;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j2 <= n * 2;\nloop invariant {i1,i2,j1,j2} <= n;\nloop invariant {i1,i2} <= n + n;\nloop invariant {j1,j2} <= n * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + n;\nloop invariant 0 <= j2 <= 2n;\nloop invariant j1 == j2 ==> i1 == i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant n <= i2 <= n;\nloop invariant 0 <= j1 <= 2 * n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant i1 <= j1;\nloop invariant i2 <= j2;\nloop invariant j1 <= j2;\nloop invariant i1 <= i2;\nloop invariant i1 <= j2;\nloop invariant i1 <= j1 + i2 - n;\nloop invariant i1 <= j1 + i2;\nloop invariant i1 <= j1 + i2 + n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant i1 <= i2;\nloop invariant j1 <= j2;\nloop invariant j1 == 2 * i2;\n*/\n```",
            "```\n/*@\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i1 == j1;\nloop invariant i2 == j2 + 1;\nloop invariant i1 >= i2;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j2 <= 2 * n;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant j2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j1 <= 2 * n;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == n + n;\nloop invariant i2 == n;\nloop invariant j1 == 2 * n;\nloop invariant j2 == n;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant i1 == n + n;\nloop invariant i2 == n;\nloop invariant j1 == 2 * n;\nloop invariant j2 == n;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2*n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= 2*n;\nloop invariant 0 <= j2 <= 2*n;\nloop invariant 0 <= i1 <= 2*n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= 2*n;\nloop invariant 0 <= j2 <= 2*n;\n*/\n```",
            "```\n/*@\nloop invariant j1 >= 0;\nloop invariant i1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i2 >= 0;\nloop invariant j1 >= j2;\nloop invariant n >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant i1 >= i2;\nloop invariant i1 >= j2;\nloop invariant i1 >= j1;\nloop invariant i1 >= j1 + i2;\nloop invariant i1 >= i2 + j2;\nloop invariant i1 >= i2 + j1;\nloop invariant i1 >= j2 + j1;\nloop invariant i1 >= j2 + i2;\nloop invariant i1 >= j1 + j2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= 2*n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= 3*n;\nloop invariant 0 <= j2 <= 2*n;\nloop invariant i1 - n <= j1 <= i1 + n;\nloop invariant i2 <= j2 <= 2*i2;\nloop invariant i1 + i2 <= n + n;\nloop invariant j1 - j2 <= n + n;\nloop invariant j2 - j1 <= n + n;\nloop invariant j1 == j2 ==> i1 == i2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n + n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= i1;\nloop invariant 0 <= j2 <= i2 * 2;\nloop invariant j1 == j2 ==> (i1 < n + n && i2 == n) || (i2 < n && i1 == n + n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\nloop invariant i3: 0 <= j1 <= i1;\nloop invariant i4: 0 <= j2 <= i2 * 2;\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( ( n >= 0 ==> ( 0 <= i1 <= n + n ) && ( 0 <= i2 <= n ) && ( j1 >= j2 && ( j1 == j2 ) ) && ( j1 == j2 ) && ( j1 == 0 ) && ( j2 == 0 ) && ( i1 == 0 ) && ( i2 == 0 ) ) || ( n < 0 ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2*n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + 1;\nloop invariant 0 <= j2 <= 2*n;\nloop invariant j1 >= j2;\nloop invariant j1 <= 2*j2;\nloop invariant j1 >= i1;\nloop invariant j1 <= i1 + 2*n;\nloop invariant i1 >= j1 - 2*n;\nloop invariant i1 <= j1;\nloop invariant j2 >= i2;\nloop invariant j2 <= i2 + n;\nloop invariant i2 >= j2 - n;\nloop invariant i2 <= j2;\nloop invariant j1 == j2 ==> i1 == i2;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\nloop invariant j1 == j2 ==> j2 == i2 + n;\nloop invariant j1 == j2 ==> i1 == i2 + n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: j1 >= i1;\n\n\nloop invariant i10: i1 <= j1;\nloop invariant i11: j2 >= i2;\n\n\nloop invariant i14: i2 <= j2;\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant i1 <= i2 ==> j1 <= j2;\nloop invariant i1 >= i2 ==> j1 >= j2;\nloop invariant i1 == i2 ==> j1 < j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i1 <= 2 * n;\nloop invariant 0 <= i2 <= n;\nloop invariant j1 >= j2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= j1 <= j2;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j2 <= n * 2;\nloop invariant {i1,i2,j1,j2} <= n;\nloop invariant {i1,i2} <= n + n;\nloop invariant {j1,j2} <= n * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= n + n;\nloop invariant 0 <= j2 <= 2n;\nloop invariant j1 == j2 ==> i1 == i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2 * n;\nloop invariant n <= i2 <= n;\nloop invariant 0 <= j1 <= 2 * n;\nloop invariant 0 <= j2 <= 2 * n;\nloop invariant i1 <= j1;\nloop invariant i2 <= j2;\nloop invariant j1 <= j2;\nloop invariant i1 <= i2;\nloop invariant i1 <= j2;\nloop invariant i1 <= j1 + i2 - n;\nloop invariant i1 <= j1 + i2;\nloop invariant i1 <= j1 + i2 + n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\nloop invariant i1 <= j1 + i2 + 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: i1 <= j1;\nloop invariant i6: i2 <= j2;\n\n\n\n\nloop invariant i11: i1 <= j1 + i2;\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i1 <= i2;\nloop invariant j1 <= j2;\nloop invariant j1 == 2 * i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j1 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\nloop invariant i3: i1 >= 0;\nloop invariant i4: i2 >= 0;\nloop invariant i5: j1 >= 0;\nloop invariant i6: j2 >= 0;\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i1 == j1;\nloop invariant i2 == j2 + 1;\nloop invariant i1 >= i2;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant j2 <= 2 * n;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant j2 >= 0;\nloop invariant j1 >= 0;\nloop invariant j1 <= 2 * n;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == n + n;\nloop invariant i2 == n;\nloop invariant j1 == 2 * n;\nloop invariant j2 == n;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant i1 == n + n;\nloop invariant i2 == n;\nloop invariant j1 == 2 * n;\nloop invariant j2 == n;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant j2 == j1 - 1;\nloop invariant j2 == j1 - 1;\nloop invariant j1 == j2 + 1;\nloop invariant i1 == i2 + 1;\nloop invariant i2 == i1 - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\nloop invariant i1: i1 == j1;\n\nloop invariant i3: i1 >= i2;\n\n\n\nloop invariant i7: i1 >= 0;\nloop invariant i8: i2 >= 0;\nloop invariant i9: j2 >= 0;\nloop invariant i10: j1 >= 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2*n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= 2*n;\nloop invariant 0 <= j2 <= 2*n;\nloop invariant 0 <= i1 <= 2*n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= 2*n;\nloop invariant 0 <= j2 <= 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant j1 >= 0;\nloop invariant i1 >= 0;\nloop invariant j2 >= 0;\nloop invariant i2 >= 0;\nloop invariant j1 >= j2;\nloop invariant n >= 0;\nloop invariant i1 <= n + n;\nloop invariant i2 <= n;\nloop invariant i1 >= i2;\nloop invariant i1 >= j2;\nloop invariant i1 >= j1;\nloop invariant i1 >= j1 + i2;\nloop invariant i1 >= i2 + j2;\nloop invariant i1 >= i2 + j1;\nloop invariant i1 >= j2 + j1;\nloop invariant i1 >= j2 + i2;\nloop invariant i1 >= j1 + j2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\nloop invariant i1 >= j1 + i2 + j2;\nloop invariant i1 >= i2 + j1 + j2;\nloop invariant i1 >= j1 + j2 + i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\nloop invariant i1: j1 >= 0;\nloop invariant i2: i1 >= 0;\nloop invariant i3: j2 >= 0;\nloop invariant i4: i2 >= 0;\n\n\n\n\nloop invariant i9: i1 >= i2;\n\nloop invariant i11: i1 >= j1;\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= 2*n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= j1 <= 3*n;\nloop invariant 0 <= j2 <= 2*n;\nloop invariant i1 - n <= j1 <= i1 + n;\nloop invariant i2 <= j2 <= 2*i2;\nloop invariant i1 + i2 <= n + n;\nloop invariant j1 - j2 <= n + n;\nloop invariant j2 - j1 <= n + n;\nloop invariant j1 == j2 ==> i1 == i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\n\n\n\nloop invariant i6: i2 <= j2 <= 2*i2;\n\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 51: unexpected token 'n'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\nloop invariant i1: 0 <= i1 <= n + n;\nloop invariant i2: 0 <= i2 <= n;\nloop invariant i3: 0 <= j1 <= i1;\nloop invariant i4: 0 <= j2 <= i2 * 2;\nloop invariant i5: j1 == j2 ==> (i1 < n + n && i2 == n) || (i2 < n && i1 == n + n);\nloop invariant i6: ( ( n >= 0 ==> ( 0 <= i1 <= n + n ) && ( 0 <= i2 <= n ) && ( j1 >= j2 && ( j1 == j2 ) ) && ( j1 == j2 ) && ( j1 == 0 ) && ( j2 == 0 ) && ( i1 == 0 ) && ( i2 == 0 ) ) || ( n < 0 ) );\nloop invariant i7: 0 <= i1 <= 2*n;\nloop invariant i8: 0 <= j1 <= n + 1;\nloop invariant i9: 0 <= j2 <= 2*n;\nloop invariant i10: j1 >= j2;\nloop invariant i11: j1 <= 2*j2;\nloop invariant i12: j1 >= i1;\nloop invariant i13: j1 <= i1 + 2*n;\nloop invariant i14: i1 >= j1 - 2*n;\nloop invariant i15: i1 <= j1;\nloop invariant i16: j2 >= i2;\nloop invariant i17: j2 <= i2 + n;\nloop invariant i18: i2 >= j2 - n;\nloop invariant i19: i2 <= j2;\nloop invariant i20: j1 == j2 ==> i1 == i2;\nloop invariant i21: j1 == j2 ==> j2 == i2 + n;\nloop invariant i22: j1 == j2 ==> i1 == i2 + n;\nloop invariant i23: 0 <= i1 <= 2 * n;\nloop invariant i24: 0 <= j1 <= n + n;\nloop invariant i25: 0 <= j2 <= 2 * n;\nloop invariant i26: i1 <= i2 ==> j1 <= j2;\nloop invariant i27: i1 >= i2 ==> j1 >= j2;\nloop invariant i28: i1 == i2 ==> j1 < j2;\nloop invariant i29: 1 <= i1 <= 2 * n;\nloop invariant i30: 0 <= j1 <= j2;\nloop invariant i31: i1 <= n + n;\nloop invariant i32: i2 <= n;\nloop invariant i33: j2 <= n * 2;\nloop invariant i34: {i1,i2,j1,j2} <= n;\nloop invariant i35: {i1,i2} <= n + n;\nloop invariant i36: {j1,j2} <= n * 2;\nloop invariant i37: 0 <= i1 <= 2n;\nloop invariant i38: 0 <= j2 <= 2n;\nloop invariant i39: n <= i2 <= n;\nloop invariant i40: 0 <= j1 <= 2 * n;\nloop invariant i41: j1 <= j2;\nloop invariant i42: i1 <= i2;\nloop invariant i43: i1 <= j2;\nloop invariant i44: i1 <= j1 + i2 - n;\nloop invariant i45: i1 <= j1 + i2;\nloop invariant i46: i1 <= j1 + i2 + n;\nloop invariant i47: i1 <= j1 + i2 + 2 * n;\nloop invariant i48: j1 == 2 * i2;\nloop invariant i49: i1 >= 0;\nloop invariant i50: i2 >= 0;\nloop invariant i51: j1 >= 0;\nloop invariant i52: j2 >= 0;\nloop invariant i53: i1 == j1;\nloop invariant i54: i2 == j2 + 1;\nloop invariant i55: i1 >= i2;\nloop invariant i56: j2 <= 2 * n;\nloop invariant i57: j1 <= 2 * n;\nloop invariant i58: j2 == j1 - 1;\nloop invariant i59: j1 == j2 + 1;\nloop invariant i60: i1 == n + n;\nloop invariant i61: i2 == n;\nloop invariant i62: j1 == 2 * n;\nloop invariant i63: j2 == n;\nloop invariant i64: i1 == i2 + 1;\nloop invariant i65: i2 == i1 - 1;\nloop invariant i66: 0 <= j1 <= 2*n;\nloop invariant i67: n >= 0;\nloop invariant i68: i1 >= j2;\nloop invariant i69: i1 >= j1;\nloop invariant i70: i1 >= j1 + i2;\nloop invariant i71: i1 >= i2 + j2;\nloop invariant i72: i1 >= i2 + j1;\nloop invariant i73: i1 >= j2 + j1;\nloop invariant i74: i1 >= j2 + i2;\nloop invariant i75: i1 >= j1 + j2;\nloop invariant i76: i1 >= j1 + i2 + j2;\nloop invariant i77: i1 >= i2 + j1 + j2;\nloop invariant i78: i1 >= j1 + j2 + i2;\nloop invariant i79: 0 <= j1 <= 3*n;\nloop invariant i80: i1 - n <= j1 <= i1 + n;\nloop invariant i81: i2 <= j2 <= 2*i2;\nloop invariant i82: i1 + i2 <= n + n;\nloop invariant i83: j1 - j2 <= n + n;\nloop invariant i84: j2 - j1 <= n + n;\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
        "combined_annotation_num_solver_calls": 33,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  /*@\n\n\nloop invariant i3: 0 <= j1 <= i1;\nloop invariant i4: 0 <= j2 <= i2 * 2;\n\n\n\n\n\n\nloop invariant i11: j1 <= 2*j2;\nloop invariant i12: j1 >= i1;\n\n\nloop invariant i15: i1 <= j1;\nloop invariant i16: j2 >= i2;\n\n\nloop invariant i19: i2 <= j2;\n\n\n\n\n\n\nloop invariant i26: i1 <= i2 ==> j1 <= j2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i45: i1 <= j1 + i2;\n\n\n\nloop invariant i49: i1 >= 0;\nloop invariant i50: i2 >= 0;\nloop invariant i51: j1 >= 0;\nloop invariant i52: j2 >= 0;\nloop invariant i53: i1 == j1;\n\nloop invariant i55: i1 >= i2;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i69: i1 >= j1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i81: i2 <= j2 <= 2*i2;\n\n\n\n*/\nwhile (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c"
        ],
        "skipped": [],
        "total": 42,
        "success_count": 38,
        "failure_count": 4,
        "success_rate": 0.9047619047619048
    }
}