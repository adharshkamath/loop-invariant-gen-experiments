{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k >= -LARGE_INT;\nloop invariant n >= 0;\nloop invariant n <= k;\nloop invariant i % 2 == 0 ==> n >= i / 2;\nloop invariant i % 2 == 1 ==> n <= (i - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n < k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i / 2;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2*k - k);\nloop invariant (k < 0 ==> i % 2 == 1);\nloop invariant (k >= 0 ==> i % 2 == 0);\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i / 2;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2*k - k);\nloop invariant (k < 0 ==> i % 2 == 1);\nloop invariant (k >= 0 ==> i % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;loop invariant 0 <= n <= k;loop invariant (i % 2 == 0 ==> n = n + 1);loop invariant i % 2 == 0 ==> i <= 2*k;loop invariant i % 2 == 0 ==> n <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant -1 <= n <= k;\nloop invariant (i % 2 == 0 && i < 2*k) ==> n == k;\nloop invariant (i % 2 != 0 && i < 2*k) ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 1 ==> n == 0;\nloop invariant i == 2 ==> n == 1;\nloop invariant i == 3 ==> n == 1;\nloop invariant i == 4 ==> n == 2;\nloop invariant i == 5 ==> n == 2;\nloop invariant i == 6 ==> n == 3;\nloop invariant i == 7 ==> n == 3;\nloop invariant i == 8 ==> n == 4;\nloop invariant i == 9 ==> n == 4;\nloop invariant i == 10 ==> n == 5;\nloop invariant i == 11 ==> n == 5;\nloop invariant i == 12 ==> n == 6;\nloop invariant i == 13 ==> n == 6;\nloop invariant i == 14 ==> n == 7;\nloop invariant i == 15 ==> n == 7;\nloop invariant i == 16 ==> n == 8;\nloop invariant i == 17 ==> n == 8;\nloop invariant i == 18 ==> n == 9;\nloop invariant i == 19 ==> n == 9;\nloop invariant i == 20 ==> n == 10;\nloop invariant i == 21 ==> n == 10;\nloop invariant i == 22 ==> n == 11;\nloop invariant i == 23 ==> n == 11;\nloop invariant i == 24 ==> n == 12;\nloop invariant i == 25 ==> n == 12;\nloop invariant i == 26 ==> n == 13;\nloop invariant i == 27 ==> n == 13;\nloop invariant i == 28 ==> n == 14;\nloop invariant i == 29 ==> n == 14;\nloop invariant i == 30 ==> n == 15;\nloop invariant i == 31 ==> n == 15;\nloop invariant i == 32 ==> n == 16;\nloop invariant i == 33 ==> n == 16;\nloop invariant i == 34 ==> n == 17;\nloop invariant i == 35 ==> n == 17;\nloop invariant i == 36 ==> n == 18;\nloop invariant i == 37 ==> n == 18;\nloop invariant i == 38 ==> n == 19;\nloop invariant i == 39 ==> n == 19;\nloop invariant i == 40 ==> n == 20;\nloop invariant i == 41 ==> n == 20;\nloop invariant i == 42 ==> n == 21;\nloop invariant i == 43 ==> n == 21;\nloop invariant i == 44 ==> n == 22;\nloop invariant i == 45 ==> n == 22;\nloop invariant i == 46 ==> n == 23;\nloop invariant i == 47 ==> n == 23;\nloop invariant i == 48 ==> n == 24;\nloop invariant i == 49 ==> n == 24;\nloop invariant i == 50 ==> n == 25;\nloop invariant i == 51 ==> n == 25;\nloop invariant i == 52 ==> n == 26;\nloop invariant i == 53 ==> n == 26;\nloop invariant i == 54 ==> n == 27;\nloop invariant i == 55 ==> n == 27;\nloop invariant i == 56 ==> n == 28;\nloop invariant i == 57 ==> n == 28;\nloop invariant i == 58 ==> n == 29;\nloop invariant i == 59 ==> n == 29;\nloop invariant i == 60 ==> n == 30;\nloop invariant i == 61 ==> n == 30;\nloop invariant i == 62 ==> n == 31;\nloop invariant i == 63 ==> n == 31;\nloop invariant i == 64 ==> n == 32;\nloop invariant i == 65 ==> n == 32;\nloop invariant i == 66 ==> n == 33;\nloop invariant i == 67 ==> n == 33;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant (i % 2 == 0 ==> n == floor(i/2));\nloop invariant (i % 2 != 0 ==> n == floor(i/2));\nloop invariant (i == 2*k ==> n == k);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= 0 <= i <= 2*k;\nloop invariant 0 <= 0 <= n <= k;\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant i % 2 == 0 ==> n == i / 2;\nloop invariant i % 2 != 0 ==> n <= i / 2;\nloop invariant i % 2 == 0 ==> n >= i / 2;\nloop invariant i % 2 != 0 ==> n < i / 2;\nloop invariant i % 2 == 0 ==> n <= k;\nloop invariant i % 2 != 0 ==> n <= k;\nloop invariant i % 2 == 0 ==> n >= k;\nloop invariant i % 2 != 0 ==> n < k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2k;\nloop invariant i >= 0;\nloop invariant i <= 2k;\nloop invariant i % 2 == 0 ==> n == 2 * i / 2;\nloop invariant i % 2 != 0 ==> n == (2 * (i - 1) / 2) + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant n == (i / 2);\nloop invariant k <= LARGE_INT && k >= -LARGE_INT;\nloop invariant k <= n <= 2 * k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k == 0 ==> n == 0;\nloop invariant k != 0 ==> n != 0;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant i % 2 == 0 ==> n <= k;\nloop invariant i % 2 != 0 ==> n <= k - 1;\nloop invariant i % 2 == 0 ==> n >= k;\nloop invariant i % 2 != 0 ==> n >= k - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant n >= k / 2;\n*/\n```",
            "```\n/*@\nloop invariant i <= 2*k;\nloop invariant n >= 0;\nloop invariant n <= k;\nloop invariant i % 2 == 0 ==> n == i / 2;\nloop invariant i % 2 != 0 ==> n == (i + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == (k + (k - 1) * k / 2);\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 0;\nloop invariant k == unknown_int();\nloop invariant k <= LARGE_INT;\nloop invariant k >= -LARGE_INT;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 1 ==> n == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k >= -LARGE_INT;\nloop invariant n >= 0;\nloop invariant n <= k;\nloop invariant i % 2 == 0 ==> n >= i / 2;\nloop invariant i % 2 == 1 ==> n <= (i - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: k >= -LARGE_INT;\nloop invariant i4: n >= 0;\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n < k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i / 2;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2*k - k);\nloop invariant (k < 0 ==> i % 2 == 1);\nloop invariant (k >= 0 ==> i % 2 == 0);\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i / 2;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2*k - k);\nloop invariant (k < 0 ==> i % 2 == 1);\nloop invariant (k >= 0 ==> i % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;loop invariant 0 <= n <= k;loop invariant (i % 2 == 0 ==> n = n + 1);loop invariant i % 2 == 0 ==> i <= 2*k;loop invariant i % 2 == 0 ==> n <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant -1 <= n <= k;\nloop invariant (i % 2 == 0 && i < 2*k) ==> n == k;\nloop invariant (i % 2 != 0 && i < 2*k) ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 1 ==> n == 0;\nloop invariant i == 2 ==> n == 1;\nloop invariant i == 3 ==> n == 1;\nloop invariant i == 4 ==> n == 2;\nloop invariant i == 5 ==> n == 2;\nloop invariant i == 6 ==> n == 3;\nloop invariant i == 7 ==> n == 3;\nloop invariant i == 8 ==> n == 4;\nloop invariant i == 9 ==> n == 4;\nloop invariant i == 10 ==> n == 5;\nloop invariant i == 11 ==> n == 5;\nloop invariant i == 12 ==> n == 6;\nloop invariant i == 13 ==> n == 6;\nloop invariant i == 14 ==> n == 7;\nloop invariant i == 15 ==> n == 7;\nloop invariant i == 16 ==> n == 8;\nloop invariant i == 17 ==> n == 8;\nloop invariant i == 18 ==> n == 9;\nloop invariant i == 19 ==> n == 9;\nloop invariant i == 20 ==> n == 10;\nloop invariant i == 21 ==> n == 10;\nloop invariant i == 22 ==> n == 11;\nloop invariant i == 23 ==> n == 11;\nloop invariant i == 24 ==> n == 12;\nloop invariant i == 25 ==> n == 12;\nloop invariant i == 26 ==> n == 13;\nloop invariant i == 27 ==> n == 13;\nloop invariant i == 28 ==> n == 14;\nloop invariant i == 29 ==> n == 14;\nloop invariant i == 30 ==> n == 15;\nloop invariant i == 31 ==> n == 15;\nloop invariant i == 32 ==> n == 16;\nloop invariant i == 33 ==> n == 16;\nloop invariant i == 34 ==> n == 17;\nloop invariant i == 35 ==> n == 17;\nloop invariant i == 36 ==> n == 18;\nloop invariant i == 37 ==> n == 18;\nloop invariant i == 38 ==> n == 19;\nloop invariant i == 39 ==> n == 19;\nloop invariant i == 40 ==> n == 20;\nloop invariant i == 41 ==> n == 20;\nloop invariant i == 42 ==> n == 21;\nloop invariant i == 43 ==> n == 21;\nloop invariant i == 44 ==> n == 22;\nloop invariant i == 45 ==> n == 22;\nloop invariant i == 46 ==> n == 23;\nloop invariant i == 47 ==> n == 23;\nloop invariant i == 48 ==> n == 24;\nloop invariant i == 49 ==> n == 24;\nloop invariant i == 50 ==> n == 25;\nloop invariant i == 51 ==> n == 25;\nloop invariant i == 52 ==> n == 26;\nloop invariant i == 53 ==> n == 26;\nloop invariant i == 54 ==> n == 27;\nloop invariant i == 55 ==> n == 27;\nloop invariant i == 56 ==> n == 28;\nloop invariant i == 57 ==> n == 28;\nloop invariant i == 58 ==> n == 29;\nloop invariant i == 59 ==> n == 29;\nloop invariant i == 60 ==> n == 30;\nloop invariant i == 61 ==> n == 30;\nloop invariant i == 62 ==> n == 31;\nloop invariant i == 63 ==> n == 31;\nloop invariant i == 64 ==> n == 32;\nloop invariant i == 65 ==> n == 32;\nloop invariant i == 66 ==> n == 33;\nloop invariant i == 67 ==> n == 33;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant (i % 2 == 0 ==> n == floor(i/2));\nloop invariant (i % 2 != 0 ==> n == floor(i/2));\nloop invariant (i == 2*k ==> n == k);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: n >= 0;\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= 0 <= i <= 2*k;\nloop invariant 0 <= 0 <= n <= k;\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant i % 2 == 0 ==> n == i / 2;\nloop invariant i % 2 != 0 ==> n <= i / 2;\nloop invariant i % 2 == 0 ==> n >= i / 2;\nloop invariant i % 2 != 0 ==> n < i / 2;\nloop invariant i % 2 == 0 ==> n <= k;\nloop invariant i % 2 != 0 ==> n <= k;\nloop invariant i % 2 == 0 ==> n >= k;\nloop invariant i % 2 != 0 ==> n < k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2k;\nloop invariant i >= 0;\nloop invariant i <= 2k;\nloop invariant i % 2 == 0 ==> n == 2 * i / 2;\nloop invariant i % 2 != 0 ==> n == (2 * (i - 1) / 2) + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: i >= 0;\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant n == (i / 2);\nloop invariant k <= LARGE_INT && k >= -LARGE_INT;\nloop invariant k <= n <= 2 * k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k == 0 ==> n == 0;\nloop invariant k != 0 ==> n != 0;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\nloop invariant k < 0 ==> i == n;\nloop invariant k >= 0 ==> i == 2 * n;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 != 0;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2 * k;\nloop invariant k < 0 ==> i <= n;\nloop invariant k >= 0 ==> i >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: k <= LARGE_INT && k >= -LARGE_INT;\n\n\n\n\n\nloop invariant i9: k == 0 ==> n == 0;\n\n\n\n\nloop invariant i14: k >= 0 ==> i >= n;\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant i % 2 == 0 ==> n <= k;\nloop invariant i % 2 != 0 ==> n <= k - 1;\nloop invariant i % 2 == 0 ==> n >= k;\nloop invariant i % 2 != 0 ==> n >= k - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant n >= k / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i <= 2*k;\nloop invariant n >= 0;\nloop invariant n <= k;\nloop invariant i % 2 == 0 ==> n == i / 2;\nloop invariant i % 2 != 0 ==> n == (i + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: n >= 0;\n\nloop invariant i4: i % 2 == 0 ==> n == i / 2;\nloop invariant i5: i % 2 != 0 ==> n == (i + 1) / 2;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant n == (k + (k - 1) * k / 2);\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 0;\nloop invariant k == unknown_int();\nloop invariant k <= LARGE_INT;\nloop invariant k >= -LARGE_INT;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 1 ==> n == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: k <= LARGE_INT;\nloop invariant i8: k >= -LARGE_INT;\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 32: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= 2 * k;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: k >= -LARGE_INT;\nloop invariant i4: n >= 0;\nloop invariant i5: n <= k;\nloop invariant i6: i % 2 == 0 ==> n >= i / 2;\nloop invariant i7: i % 2 == 1 ==> n <= (i - 1) / 2;\nloop invariant i8: i % 2 == 0 ==> n == k;\nloop invariant i9: i % 2 != 0 ==> n < k;\nloop invariant i10: 0 <= i <= 2*k;\nloop invariant i11: n == i / 2;\nloop invariant i12: (k < 0 ==> n == k);\nloop invariant i13: (k >= 0 ==> n == 2*k - k);\nloop invariant i14: (k < 0 ==> i % 2 == 1);\nloop invariant i15: (k >= 0 ==> i % 2 == 0);\nloop invariant i16: 0 <= i <= 2*k;loop invariant 0 <= n <= k;loop invariant (i % 2 == 0 ==> n = n + 1);loop invariant i % 2 == 0 ==> i <= 2*k;loop invariant i % 2 == 0 ==> n <= k;\nloop invariant i17: -1 <= n <= k;\nloop invariant i18: (i % 2 == 0 && i < 2*k) ==> n == k;\nloop invariant i19: (i % 2 != 0 && i < 2*k) ==> n == k;\nloop invariant i20: i == 2*k ==> n == k;\nloop invariant i21: i == 0 ==> n == 0;\nloop invariant i22: i == 1 ==> n == 0;\nloop invariant i23: i == 2 ==> n == 1;\nloop invariant i24: i == 3 ==> n == 1;\nloop invariant i25: i == 4 ==> n == 2;\nloop invariant i26: i == 5 ==> n == 2;\nloop invariant i27: i == 6 ==> n == 3;\nloop invariant i28: i == 7 ==> n == 3;\nloop invariant i29: i == 8 ==> n == 4;\nloop invariant i30: i == 9 ==> n == 4;\nloop invariant i31: i == 10 ==> n == 5;\nloop invariant i32: i == 11 ==> n == 5;\nloop invariant i33: i == 12 ==> n == 6;\nloop invariant i34: i == 13 ==> n == 6;\nloop invariant i35: i == 14 ==> n == 7;\nloop invariant i36: i == 15 ==> n == 7;\nloop invariant i37: i == 16 ==> n == 8;\nloop invariant i38: i == 17 ==> n == 8;\nloop invariant i39: i == 18 ==> n == 9;\nloop invariant i40: i == 19 ==> n == 9;\nloop invariant i41: i == 20 ==> n == 10;\nloop invariant i42: i == 21 ==> n == 10;\nloop invariant i43: i == 22 ==> n == 11;\nloop invariant i44: i == 23 ==> n == 11;\nloop invariant i45: i == 24 ==> n == 12;\nloop invariant i46: i == 25 ==> n == 12;\nloop invariant i47: i == 26 ==> n == 13;\nloop invariant i48: i == 27 ==> n == 13;\nloop invariant i49: i == 28 ==> n == 14;\nloop invariant i50: i == 29 ==> n == 14;\nloop invariant i51: i == 30 ==> n == 15;\nloop invariant i52: i == 31 ==> n == 15;\nloop invariant i53: i == 32 ==> n == 16;\nloop invariant i54: i == 33 ==> n == 16;\nloop invariant i55: i == 34 ==> n == 17;\nloop invariant i56: i == 35 ==> n == 17;\nloop invariant i57: i == 36 ==> n == 18;\nloop invariant i58: i == 37 ==> n == 18;\nloop invariant i59: i == 38 ==> n == 19;\nloop invariant i60: i == 39 ==> n == 19;\nloop invariant i61: i == 40 ==> n == 20;\nloop invariant i62: i == 41 ==> n == 20;\nloop invariant i63: i == 42 ==> n == 21;\nloop invariant i64: i == 43 ==> n == 21;\nloop invariant i65: i == 44 ==> n == 22;\nloop invariant i66: i == 45 ==> n == 22;\nloop invariant i67: i == 46 ==> n == 23;\nloop invariant i68: i == 47 ==> n == 23;\nloop invariant i69: i == 48 ==> n == 24;\nloop invariant i70: i == 49 ==> n == 24;\nloop invariant i71: i == 50 ==> n == 25;\nloop invariant i72: i == 51 ==> n == 25;\nloop invariant i73: i == 52 ==> n == 26;\nloop invariant i74: i == 53 ==> n == 26;\nloop invariant i75: i == 54 ==> n == 27;\nloop invariant i76: i == 55 ==> n == 27;\nloop invariant i77: i == 56 ==> n == 28;\nloop invariant i78: i == 57 ==> n == 28;\nloop invariant i79: i == 58 ==> n == 29;\nloop invariant i80: i == 59 ==> n == 29;\nloop invariant i81: i == 60 ==> n == 30;\nloop invariant i82: i == 61 ==> n == 30;\nloop invariant i83: i == 62 ==> n == 31;\nloop invariant i84: i == 63 ==> n == 31;\nloop invariant i85: i == 64 ==> n == 32;\nloop invariant i86: i == 65 ==> n == 32;\nloop invariant i87: i == 66 ==> n == 33;\nloop invariant i88: i == 67 ==> n == 33;\nloop invariant i89: i1;\nloop invariant i90: i2;\nloop invariant i91: i >= 0;\nloop invariant i92: (i % 2 == 0 ==> n == floor(i/2));\nloop invariant i93: (i % 2 != 0 ==> n == floor(i/2));\nloop invariant i94: (i == 2*k ==> n == k);\nloop invariant i95: 0 <= 0 <= i <= 2*k;\nloop invariant i96: 0 <= 0 <= n <= k;\nloop invariant i97: 0 <= n <= k;\nloop invariant i98: i % 2 == 0 ==> n == i / 2;\nloop invariant i99: i % 2 != 0 ==> n <= i / 2;\nloop invariant i100: i % 2 != 0 ==> n < i / 2;\nloop invariant i101: i % 2 == 0 ==> n <= k;\nloop invariant i102: i % 2 != 0 ==> n <= k;\nloop invariant i103: i % 2 == 0 ==> n >= k;\nloop invariant i104: 0 <= n <= 2k;\nloop invariant i105: i <= 2k;\nloop invariant i106: i % 2 == 0 ==> n == 2 * i / 2;\nloop invariant i107: i % 2 != 0 ==> n == (2 * (i - 1) / 2) + 1;\nloop invariant i108: n == (i / 2);\nloop invariant i109: k <= LARGE_INT && k >= -LARGE_INT;\nloop invariant i110: k <= n <= 2 * k;\nloop invariant i111: k < 0 ==> n == k;\nloop invariant i112: k >= 0 ==> n == 2 * k;\nloop invariant i113: k < 0 ==> i % 2 == 0;\nloop invariant i114: k >= 0 ==> i % 2 != 0;\nloop invariant i115: k == 0 ==> n == 0;\nloop invariant i116: k != 0 ==> n != 0;\nloop invariant i117: i % 2 != 0 ==> n == 2 * k;\nloop invariant i118: k < 0 ==> i <= n;\nloop invariant i119: k >= 0 ==> i >= n;\nloop invariant i120: k < 0 ==> i == n;\nloop invariant i121: k >= 0 ==> i == 2 * n;\nloop invariant i122: 0 <= n <= 2*k;\nloop invariant i123: i % 2 != 0 ==> n == k - 1;\nloop invariant i124: i % 2 != 0 ==> n <= k - 1;\nloop invariant i125: i % 2 != 0 ==> n >= k - 1;\nloop invariant i126: n >= k / 2;\nloop invariant i127: i <= 2*k;\nloop invariant i128: i % 2 != 0 ==> n == (i + 1) / 2;\nloop invariant i129: n == (k + (k - 1) * k / 2);\nloop invariant i130: k >= 0 ==> n == 0;\nloop invariant i131: k == unknown_int();\nloop invariant i132: k <= LARGE_INT;\nloop invariant i133: i % 2 == 1 ==> n == 0;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 31,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: k >= -LARGE_INT;\nloop invariant i4: n >= 0;\n\nloop invariant i6: i % 2 == 0 ==> n >= i / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: i == 2*k ==> n == k;\nloop invariant i21: i == 0 ==> n == 0;\n\nloop invariant i23: i == 2 ==> n == 1;\n\nloop invariant i25: i == 4 ==> n == 2;\n\nloop invariant i27: i == 6 ==> n == 3;\n\nloop invariant i29: i == 8 ==> n == 4;\n\nloop invariant i31: i == 10 ==> n == 5;\n\nloop invariant i33: i == 12 ==> n == 6;\n\nloop invariant i35: i == 14 ==> n == 7;\n\nloop invariant i37: i == 16 ==> n == 8;\n\nloop invariant i39: i == 18 ==> n == 9;\n\nloop invariant i41: i == 20 ==> n == 10;\n\nloop invariant i43: i == 22 ==> n == 11;\n\nloop invariant i45: i == 24 ==> n == 12;\n\nloop invariant i47: i == 26 ==> n == 13;\n\nloop invariant i49: i == 28 ==> n == 14;\n\nloop invariant i51: i == 30 ==> n == 15;\n\nloop invariant i53: i == 32 ==> n == 16;\n\nloop invariant i55: i == 34 ==> n == 17;\n\nloop invariant i57: i == 36 ==> n == 18;\n\nloop invariant i59: i == 38 ==> n == 19;\n\nloop invariant i61: i == 40 ==> n == 20;\n\nloop invariant i63: i == 42 ==> n == 21;\n\nloop invariant i65: i == 44 ==> n == 22;\n\nloop invariant i67: i == 46 ==> n == 23;\n\nloop invariant i69: i == 48 ==> n == 24;\n\nloop invariant i71: i == 50 ==> n == 25;\n\nloop invariant i73: i == 52 ==> n == 26;\n\nloop invariant i75: i == 54 ==> n == 27;\n\nloop invariant i77: i == 56 ==> n == 28;\n\nloop invariant i79: i == 58 ==> n == 29;\n\nloop invariant i81: i == 60 ==> n == 30;\n\nloop invariant i83: i == 62 ==> n == 31;\n\nloop invariant i85: i == 64 ==> n == 32;\n\nloop invariant i87: i == 66 ==> n == 33;\n\n\n\nloop invariant i91: i >= 0;\n\n\nloop invariant i94: (i == 2*k ==> n == k);\n\n\n\nloop invariant i98: i % 2 == 0 ==> n == i / 2;\n\n\n\nloop invariant i102: i % 2 != 0 ==> n <= k;\n\n\n\n\n\n\nloop invariant i109: k <= LARGE_INT && k >= -LARGE_INT;\n\n\n\nloop invariant i113: k < 0 ==> i % 2 == 0;\n\nloop invariant i115: k == 0 ==> n == 0;\n\n\nloop invariant i118: k < 0 ==> i <= n;\nloop invariant i119: k >= 0 ==> i >= n;\nloop invariant i120: k < 0 ==> i == n;\n\n\n\n\n\n\n\nloop invariant i128: i % 2 != 0 ==> n == (i + 1) / 2;\n\n\n\nloop invariant i132: k <= LARGE_INT;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 59,
        "success_count": 49,
        "failure_count": 10,
        "success_rate": 0.8305084745762712
    }
}