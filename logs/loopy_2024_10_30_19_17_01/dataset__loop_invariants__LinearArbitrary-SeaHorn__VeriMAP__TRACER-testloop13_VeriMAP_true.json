{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant old >= unknown_uint();\nloop invariant new >= old;\nloop invariant old <= new;\nloop invariant new <= old + unknown();\nloop invariant new <= old + unknown();\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant new >= old;\nloop invariant (old + 1) == new;\nloop invariant lock == 1;\nloop invariant (lock == 0) ==> !(new != old);\nloop invariant (lock == 0) ==> old == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> old == new;\nloop invariant (lock == 1) ==> new >= old;\nloop invariant (lock == 1) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> old == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant lock ==> 0 <= old <= 2147483647;\nloop invariant lock ==> 0 <= new <= 2147483647;\nloop invariant lock ==> old <= new;\nloop invariant !lock ==> old <= new;\nloop invariant !lock ==> lock == 1;\nloop invariant lock ==> old == new;\nloop invariant !lock ==> old == new - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old;\nloop invariant 0 <= new;\nloop invariant new >= old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> old >= new;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= new;\nloop invariant 0 <= lock <= 1;\nloop invariant lock ==> old = new;\nloop invariant !lock ==> old+1 = new;\nloop invariant lock ==> lock == 1;\nloop invariant !lock ==> lock == 0;\nloop invariant old <= new;\nloop invariant old+1 <= new;\nloop invariant new <= old+1;\nloop invariant new == old+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant lock ==> old == new;\nloop invariant !lock ==> old != new;\nloop invariant old <= new;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old + 2;\n*/\n```",
            "```\n/*@\nloop invariant 100000 >= old >= 0;\nloop invariant 0 <= new <= 100000;\nloop invariant new >= old;\nloop invariant old >= 0;\nloop invariant new == old ==> lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant lock == 1 ==> old == new;\nloop invariant old == new ==> lock == 0;\nloop invariant old == new ==> lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 0 ==> new >= old ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant (new > old && old >= 0);\nloop invariant (lock ==> (new != old));\nloop invariant (!(lock && new == old));\nloop invariant (!(lock && old == new));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 2147483647;loop invariant 0 <= new <= 2147483647;loop invariant lock == 0 || lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= new <= 2147483647;\nloop invariant 0 <= old <= 2147483647;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> old >= new;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 0 ==> old <= new;\nloop invariant lock == 0 ==> old != new;\nloop invariant lock == 0 ==> new == old - 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 0 ==> new == old + 2;\nloop invariant lock == 0 ==> new != old - 1;\nloop invariant lock == 0 ==> new == old + 0;\nloop invariant lock == 0 ==> new != old + 3;\nloop invariant lock == 0 ==> new >= old - 1;\nloop invariant lock == 0 ==> new == old - 2;\nloop invariant lock == 0 ==> new != old + 4;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> new != old + 5;\nloop invariant lock == 0 ==> new >= old - 2;\nloop invariant lock == 0 ==> new == old - 3;\nloop invariant lock == 0 ==> new != old + 6;\nloop invariant lock == 0 ==> new <= old + 2;\nloop invariant lock == 0 ==> new != old + 7;\nloop invariant lock == 0 ==> new >= old - 3;\nloop invariant lock == 0 ==> new == old - 4;\nloop invariant lock == 0 ==> new != old + 8;\nloop invariant lock == 0 ==> new <= old + 3;\nloop invariant lock == 0 ==> new != old + 9;\nloop invariant lock == 0 ==> new >= old - 4;\nloop invariant lock == 0 ==> new == old - 5;\nloop invariant lock == 0 ==> new != old + 10;\nloop invariant lock == 0 ==> new <= old + 4;\nloop invariant lock == 0 ==> new != old + 11;\nloop invariant lock == 0 ==> new >= old - 5;\nloop invariant lock == 0 ==> new == old - 6;\nloop invariant lock == 0 ==> new != old + 12;\nloop invariant lock == 0 ==> new <= old + 5;\nloop invariant lock == 0 ==> new != old + 13;\nloop invariant lock == 0 ==> new >= old - 6;\nloop invariant lock == 0 ==> new == old - 7;\nloop invariant lock == 0 ==> new != old + 14;\nloop invariant lock == 0 ==> new <= old + 6;\nloop invariant lock == 0 ==> new != old + 15;\nloop invariant lock == 0 ==> new >= old - 7;\nloop invariant lock == 0 ==> new == old - 8;\nloop invariant lock == 0 ==> new != old + 16;\nloop invariant lock == 0 ==> new <= old + 7;\nloop invariant lock == 0 ==> new != old + 17;\nloop invariant lock == 0 ==> new >= old - 8;\nloop invariant lock == 0 ==> new == old - 9;\nloop invariant lock == 0 ==> new != old + 18;\nloop invariant lock == 0 ==> new <= old + 8;\nloop invariant lock == 0 ==> new != old + 19;\nloop invariant lock == 0 ==> new >= old - 9;\nloop invariant lock == 0 ==> new == old - 10;\nloop invariant lock == 0 ==> new != old + 20;\nloop invariant lock == 0 ==> new <= old + 9;\nloop invariant lock == 0 ==> new != old + 21;\nloop invariant lock == 0 ==> new >= old - 10;\nloop invariant lock == 0 ==> new == old - 11;\nloop invariant lock == 0 ==> new != old + 22;\nloop invariant lock == 0 ==> new <= old + 10;\nloop invariant lock == 0 ==> new != old + 23;\nloop invariant lock == 0 ==> new >= old - 11;\nloop invariant lock == 0 ==> new == old - 12;\nloop invariant lock == 0 ==> new != old + 24;\nloop invariant lock == 0 ==> new <= old + 11;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= new <= 2^31 - 1;\nloop invariant 1 <= old <= 2^31 - 1;\nloop invariant new > old;\nloop invariant lock == 0 ==> old == 2^31 - 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant old == 2^31 - 1 ==> new == 2^31 - 1;\nloop invariant lock == 1 ==> new % 2 == 1;\nloop invariant old == 2^31 - 1 ==> lock == 0;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> new >= 3;\nloop invariant lock == 0 ==> old >= 1;\nloop invariant lock == 1 ==> old <= 2^31 - 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= new;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= new;\nloop invariant old == new ==> !unknown();\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant old >= unknown_uint();\nloop invariant new >= old;\nloop invariant old <= new;\nloop invariant new <= old + unknown();\nloop invariant new <= old + unknown();\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant new == old + 1 ==> new == old;\nloop invariant new == old ==> new == old + 1;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 1 ==> old == new;\n\n\n\nloop invariant i5: new >= old;\nloop invariant i6: old <= new;\n\n\n\n\n\nloop invariant i12: new == old + 1 ==> lock == 0;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant new >= old;\nloop invariant (old + 1) == new;\nloop invariant lock == 1;\nloop invariant (lock == 0) ==> !(new != old);\nloop invariant (lock == 0) ==> old == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> old == new;\nloop invariant (lock == 1) ==> new >= old;\nloop invariant (lock == 1) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> old == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: new >= old;\n\n\n\n\nloop invariant i7: (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i8: (lock == 1) ==> old == new;\nloop invariant i9: (lock == 1) ==> new >= old;\n\nloop invariant i11: (lock == 1) ==> (lock == 0) ==> old == new;\nloop invariant i12: (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i13: (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i14: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i15: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant i16: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant i17: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant i18: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i19: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i20: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i21: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant i22: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant i23: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant i24: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i25: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i26: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant lock ==> 0 <= old <= 2147483647;\nloop invariant lock ==> 0 <= new <= 2147483647;\nloop invariant lock ==> old <= new;\nloop invariant !lock ==> old <= new;\nloop invariant !lock ==> lock == 1;\nloop invariant lock ==> old == new;\nloop invariant !lock ==> old == new - 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= lock <= 1;\n\n\nloop invariant i4: lock ==> old <= new;\nloop invariant i5: !lock ==> old <= new;\n\nloop invariant i7: lock ==> old == new;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= old;\nloop invariant 0 <= new;\nloop invariant new >= old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> old >= new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: new >= old;\nloop invariant i4: lock == 1 ==> new == old;\nloop invariant i5: lock == 0 ==> new != old;\nloop invariant i6: lock == 1 ==> old >= new;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= new;\nloop invariant 0 <= lock <= 1;\nloop invariant lock ==> old = new;\nloop invariant !lock ==> old+1 = new;\nloop invariant lock ==> lock == 1;\nloop invariant !lock ==> lock == 0;\nloop invariant old <= new;\nloop invariant old+1 <= new;\nloop invariant new <= old+1;\nloop invariant new == old+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: 0 <= lock <= 1;\n\n\nloop invariant i5: lock ==> lock == 1;\nloop invariant i6: !lock ==> lock == 0;\nloop invariant i7: old <= new;\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant lock ==> old == new;\nloop invariant !lock ==> old != new;\nloop invariant old <= new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= lock <= 1;\nloop invariant i2: lock ==> old == new;\nloop invariant i3: !lock ==> old != new;\nloop invariant i4: old <= new;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= old;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: old <= new;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 100000 >= old >= 0;\nloop invariant 0 <= new <= 100000;\nloop invariant new >= old;\nloop invariant old >= 0;\nloop invariant new == old ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: new >= old;\n\nloop invariant i5: new == old ==> lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant lock == 1 ==> old == new;\nloop invariant old == new ==> lock == 0;\nloop invariant old == new ==> lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 0 ==> new >= old ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 1 ==> old == new;\n\nloop invariant i5: old == new ==> lock == 0 ==> new == old;\nloop invariant i6: lock == 0 ==> new >= old;\n\nloop invariant i8: lock == 0 ==> new >= old ==> new == old ==> old == new;\nloop invariant i9: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old;\nloop invariant i10: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i11: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i12: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i13: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i14: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i15: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i16: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i17: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i18: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i19: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i20: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i21: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i22: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i23: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant (new > old && old >= 0);\nloop invariant (lock ==> (new != old));\nloop invariant (!(lock && new == old));\nloop invariant (!(lock && old == new));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 2147483647;loop invariant 0 <= new <= 2147483647;loop invariant lock == 0 || lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= new <= 2147483647;\nloop invariant 0 <= old <= 2147483647;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> old >= new;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 0 ==> old <= new;\nloop invariant lock == 0 ==> old != new;\nloop invariant lock == 0 ==> new == old - 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 0 ==> new == old + 2;\nloop invariant lock == 0 ==> new != old - 1;\nloop invariant lock == 0 ==> new == old + 0;\nloop invariant lock == 0 ==> new != old + 3;\nloop invariant lock == 0 ==> new >= old - 1;\nloop invariant lock == 0 ==> new == old - 2;\nloop invariant lock == 0 ==> new != old + 4;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> new != old + 5;\nloop invariant lock == 0 ==> new >= old - 2;\nloop invariant lock == 0 ==> new == old - 3;\nloop invariant lock == 0 ==> new != old + 6;\nloop invariant lock == 0 ==> new <= old + 2;\nloop invariant lock == 0 ==> new != old + 7;\nloop invariant lock == 0 ==> new >= old - 3;\nloop invariant lock == 0 ==> new == old - 4;\nloop invariant lock == 0 ==> new != old + 8;\nloop invariant lock == 0 ==> new <= old + 3;\nloop invariant lock == 0 ==> new != old + 9;\nloop invariant lock == 0 ==> new >= old - 4;\nloop invariant lock == 0 ==> new == old - 5;\nloop invariant lock == 0 ==> new != old + 10;\nloop invariant lock == 0 ==> new <= old + 4;\nloop invariant lock == 0 ==> new != old + 11;\nloop invariant lock == 0 ==> new >= old - 5;\nloop invariant lock == 0 ==> new == old - 6;\nloop invariant lock == 0 ==> new != old + 12;\nloop invariant lock == 0 ==> new <= old + 5;\nloop invariant lock == 0 ==> new != old + 13;\nloop invariant lock == 0 ==> new >= old - 6;\nloop invariant lock == 0 ==> new == old - 7;\nloop invariant lock == 0 ==> new != old + 14;\nloop invariant lock == 0 ==> new <= old + 6;\nloop invariant lock == 0 ==> new != old + 15;\nloop invariant lock == 0 ==> new >= old - 7;\nloop invariant lock == 0 ==> new == old - 8;\nloop invariant lock == 0 ==> new != old + 16;\nloop invariant lock == 0 ==> new <= old + 7;\nloop invariant lock == 0 ==> new != old + 17;\nloop invariant lock == 0 ==> new >= old - 8;\nloop invariant lock == 0 ==> new == old - 9;\nloop invariant lock == 0 ==> new != old + 18;\nloop invariant lock == 0 ==> new <= old + 8;\nloop invariant lock == 0 ==> new != old + 19;\nloop invariant lock == 0 ==> new >= old - 9;\nloop invariant lock == 0 ==> new == old - 10;\nloop invariant lock == 0 ==> new != old + 20;\nloop invariant lock == 0 ==> new <= old + 9;\nloop invariant lock == 0 ==> new != old + 21;\nloop invariant lock == 0 ==> new >= old - 10;\nloop invariant lock == 0 ==> new == old - 11;\nloop invariant lock == 0 ==> new != old + 22;\nloop invariant lock == 0 ==> new <= old + 10;\nloop invariant lock == 0 ==> new != old + 23;\nloop invariant lock == 0 ==> new >= old - 11;\nloop invariant lock == 0 ==> new == old - 12;\nloop invariant lock == 0 ==> new != old + 24;\nloop invariant lock == 0 ==> new <= old + 11;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 0 ==> new >= old;\nloop invariant i4: lock == 1 ==> new == old;\n\nloop invariant i6: lock == 1 ==> old == new;\n\nloop invariant i8: lock == 0 ==> new != old;\nloop invariant i9: lock == 0 ==> old <= new;\nloop invariant i10: lock == 0 ==> old != new;\n\n\n\nloop invariant i14: lock == 0 ==> new != old - 1;\n\nloop invariant i16: lock == 0 ==> new != old + 3;\nloop invariant i17: lock == 0 ==> new >= old - 1;\n\nloop invariant i19: lock == 0 ==> new != old + 4;\n\nloop invariant i21: lock == 0 ==> new != old + 5;\nloop invariant i22: lock == 0 ==> new >= old - 2;\n\nloop invariant i24: lock == 0 ==> new != old + 6;\nloop invariant i25: lock == 0 ==> new <= old + 2;\nloop invariant i26: lock == 0 ==> new != old + 7;\nloop invariant i27: lock == 0 ==> new >= old - 3;\n\nloop invariant i29: lock == 0 ==> new != old + 8;\nloop invariant i30: lock == 0 ==> new <= old + 3;\nloop invariant i31: lock == 0 ==> new != old + 9;\nloop invariant i32: lock == 0 ==> new >= old - 4;\n\nloop invariant i34: lock == 0 ==> new != old + 10;\nloop invariant i35: lock == 0 ==> new <= old + 4;\nloop invariant i36: lock == 0 ==> new != old + 11;\nloop invariant i37: lock == 0 ==> new >= old - 5;\n\nloop invariant i39: lock == 0 ==> new != old + 12;\nloop invariant i40: lock == 0 ==> new <= old + 5;\nloop invariant i41: lock == 0 ==> new != old + 13;\nloop invariant i42: lock == 0 ==> new >= old - 6;\n\nloop invariant i44: lock == 0 ==> new != old + 14;\nloop invariant i45: lock == 0 ==> new <= old + 6;\nloop invariant i46: lock == 0 ==> new != old + 15;\nloop invariant i47: lock == 0 ==> new >= old - 7;\n\nloop invariant i49: lock == 0 ==> new != old + 16;\nloop invariant i50: lock == 0 ==> new <= old + 7;\nloop invariant i51: lock == 0 ==> new != old + 17;\nloop invariant i52: lock == 0 ==> new >= old - 8;\n\nloop invariant i54: lock == 0 ==> new != old + 18;\nloop invariant i55: lock == 0 ==> new <= old + 8;\nloop invariant i56: lock == 0 ==> new != old + 19;\nloop invariant i57: lock == 0 ==> new >= old - 9;\n\nloop invariant i59: lock == 0 ==> new != old + 20;\nloop invariant i60: lock == 0 ==> new <= old + 9;\nloop invariant i61: lock == 0 ==> new != old + 21;\nloop invariant i62: lock == 0 ==> new >= old - 10;\n\nloop invariant i64: lock == 0 ==> new != old + 22;\nloop invariant i65: lock == 0 ==> new <= old + 10;\nloop invariant i66: lock == 0 ==> new != old + 23;\nloop invariant i67: lock == 0 ==> new >= old - 11;\n\nloop invariant i69: lock == 0 ==> new != old + 24;\nloop invariant i70: lock == 0 ==> new <= old + 11;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 1 <= new <= 2^31 - 1;\nloop invariant 1 <= old <= 2^31 - 1;\nloop invariant new > old;\nloop invariant lock == 0 ==> old == 2^31 - 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant old == 2^31 - 1 ==> new == 2^31 - 1;\nloop invariant lock == 1 ==> new % 2 == 1;\nloop invariant old == 2^31 - 1 ==> lock == 0;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> new >= 3;\nloop invariant lock == 0 ==> old >= 1;\nloop invariant lock == 1 ==> old <= 2^31 - 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\nloop invariant lock == 1 ==> old >= 2;\nloop invariant lock == 0 ==> new <= 2^31 - 1;\nloop invariant lock == 1 ==> new <= 2^31 - 1;\nloop invariant lock == 0 ==> old <= 2^31 - 1;\nloop invariant lock == 1 ==> old <= 2^31 - 1;\nloop invariant lock == 0 ==> new >= 2;\nloop invariant lock == 1 ==> new >= 2;\nloop invariant lock == 0 ==> old >= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= new;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: lock == 1 ==> new == old;\nloop invariant i3: lock == 0 ==> new != old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= new;\nloop invariant old == new ==> !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 1 ==> old == new;\nloop invariant i2: lock == 0 ==> new == old + 1;\nloop invariant i3: lock == 1 ==> new == old + 1;\nloop invariant i4: old >= unknown_uint();\nloop invariant i5: new >= old;\nloop invariant i6: old <= new;\nloop invariant i7: new <= old + unknown();\nloop invariant i8: lock == 1 ==> lock == 0;\nloop invariant i9: lock == 0 ==> lock == 1;\nloop invariant i10: new == old + 1 ==> new == old;\nloop invariant i11: new == old ==> new == old + 1;\nloop invariant i12: new == old + 1 ==> lock == 0;\nloop invariant i13: lock == 0 ==> old == new;\nloop invariant i14: lock == 0 ==> new == old;\nloop invariant i15: 0 <= old <= 4294967295;\nloop invariant i16: (old + 1) == new;\nloop invariant i17: lock == 1;\nloop invariant i18: (lock == 0) ==> !(new != old);\nloop invariant i19: (lock == 0) ==> old == new;\nloop invariant i20: (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i21: (lock == 1) ==> old == new;\nloop invariant i22: (lock == 1) ==> new >= old;\nloop invariant i23: (lock == 1) ==> (old + 1) == new;\nloop invariant i24: (lock == 1) ==> (lock == 0) ==> old == new;\nloop invariant i25: (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i26: (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i27: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i28: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant i29: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant i30: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant i31: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i32: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i33: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i34: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant i35: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant i36: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant i37: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i38: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i39: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i40: 0 <= lock <= 1;\nloop invariant i41: lock ==> 0 <= old <= 2147483647;\nloop invariant i42: lock ==> 0 <= new <= 2147483647;\nloop invariant i43: lock ==> old <= new;\nloop invariant i44: !lock ==> old <= new;\nloop invariant i45: !lock ==> lock == 1;\nloop invariant i46: lock ==> old == new;\nloop invariant i47: !lock ==> old == new - 2;\nloop invariant i48: 0 <= old;\nloop invariant i49: 0 <= new;\nloop invariant i50: lock == 1 ==> new == old;\nloop invariant i51: lock == 0 ==> new != old;\nloop invariant i52: lock == 1 ==> old >= new;\nloop invariant i53: 1 <= old <= new;\nloop invariant i54: lock ==> old = new;\nloop invariant i55: !lock ==> old+1 = new;\nloop invariant i56: lock ==> lock == 1;\nloop invariant i57: !lock ==> lock == 0;\nloop invariant i58: old+1 <= new;\nloop invariant i59: new <= old+1;\nloop invariant i60: new == old+1;\nloop invariant i61: !lock ==> old != new;\nloop invariant i62: 1 <= old;\nloop invariant i63: lock == 0 ==> new == old + 2;\nloop invariant i64: 100000 >= old >= 0;\nloop invariant i65: 0 <= new <= 100000;\nloop invariant i66: old >= 0;\nloop invariant i67: new == old ==> lock == 1;\nloop invariant i68: 1 <= old <= 4294967295;\nloop invariant i69: 0 <= new <= 4294967295;\nloop invariant i70: old == new ==> lock == 0;\nloop invariant i71: old == new ==> lock == 0 ==> new == old;\nloop invariant i72: lock == 0 ==> new >= old;\nloop invariant i73: lock == 0 ==> new >= old ==> new == old;\nloop invariant i74: lock == 0 ==> new >= old ==> new == old ==> old == new;\nloop invariant i75: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old;\nloop invariant i76: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i77: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i78: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i79: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i80: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i81: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i82: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i83: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i84: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i85: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i86: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i87: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i88: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i89: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i90: (new > old && old >= 0);\nloop invariant i91: (lock ==> (new != old));\nloop invariant i92: (!(lock && new == old));\nloop invariant i93: (!(lock && old == new));\nloop invariant i94: 0 <= old <= 2147483647;loop invariant 0 <= new <= 2147483647;loop invariant lock == 0 || lock == 1;\nloop invariant i95: 0 <= new <= 2147483647;\nloop invariant i96: 0 <= old <= 2147483647;\nloop invariant i97: lock == 0 ==> old >= new;\nloop invariant i98: lock == 0 ==> old <= new;\nloop invariant i99: lock == 0 ==> old != new;\nloop invariant i100: lock == 0 ==> new == old - 1;\nloop invariant i101: lock == 0 ==> new != old - 1;\nloop invariant i102: lock == 0 ==> new == old + 0;\nloop invariant i103: lock == 0 ==> new != old + 3;\nloop invariant i104: lock == 0 ==> new >= old - 1;\nloop invariant i105: lock == 0 ==> new == old - 2;\nloop invariant i106: lock == 0 ==> new != old + 4;\nloop invariant i107: lock == 0 ==> new <= old + 1;\nloop invariant i108: lock == 0 ==> new != old + 5;\nloop invariant i109: lock == 0 ==> new >= old - 2;\nloop invariant i110: lock == 0 ==> new == old - 3;\nloop invariant i111: lock == 0 ==> new != old + 6;\nloop invariant i112: lock == 0 ==> new <= old + 2;\nloop invariant i113: lock == 0 ==> new != old + 7;\nloop invariant i114: lock == 0 ==> new >= old - 3;\nloop invariant i115: lock == 0 ==> new == old - 4;\nloop invariant i116: lock == 0 ==> new != old + 8;\nloop invariant i117: lock == 0 ==> new <= old + 3;\nloop invariant i118: lock == 0 ==> new != old + 9;\nloop invariant i119: lock == 0 ==> new >= old - 4;\nloop invariant i120: lock == 0 ==> new == old - 5;\nloop invariant i121: lock == 0 ==> new != old + 10;\nloop invariant i122: lock == 0 ==> new <= old + 4;\nloop invariant i123: lock == 0 ==> new != old + 11;\nloop invariant i124: lock == 0 ==> new >= old - 5;\nloop invariant i125: lock == 0 ==> new == old - 6;\nloop invariant i126: lock == 0 ==> new != old + 12;\nloop invariant i127: lock == 0 ==> new <= old + 5;\nloop invariant i128: lock == 0 ==> new != old + 13;\nloop invariant i129: lock == 0 ==> new >= old - 6;\nloop invariant i130: lock == 0 ==> new == old - 7;\nloop invariant i131: lock == 0 ==> new != old + 14;\nloop invariant i132: lock == 0 ==> new <= old + 6;\nloop invariant i133: lock == 0 ==> new != old + 15;\nloop invariant i134: lock == 0 ==> new >= old - 7;\nloop invariant i135: lock == 0 ==> new == old - 8;\nloop invariant i136: lock == 0 ==> new != old + 16;\nloop invariant i137: lock == 0 ==> new <= old + 7;\nloop invariant i138: lock == 0 ==> new != old + 17;\nloop invariant i139: lock == 0 ==> new >= old - 8;\nloop invariant i140: lock == 0 ==> new == old - 9;\nloop invariant i141: lock == 0 ==> new != old + 18;\nloop invariant i142: lock == 0 ==> new <= old + 8;\nloop invariant i143: lock == 0 ==> new != old + 19;\nloop invariant i144: lock == 0 ==> new >= old - 9;\nloop invariant i145: lock == 0 ==> new == old - 10;\nloop invariant i146: lock == 0 ==> new != old + 20;\nloop invariant i147: lock == 0 ==> new <= old + 9;\nloop invariant i148: lock == 0 ==> new != old + 21;\nloop invariant i149: lock == 0 ==> new >= old - 10;\nloop invariant i150: lock == 0 ==> new == old - 11;\nloop invariant i151: lock == 0 ==> new != old + 22;\nloop invariant i152: lock == 0 ==> new <= old + 10;\nloop invariant i153: lock == 0 ==> new != old + 23;\nloop invariant i154: lock == 0 ==> new >= old - 11;\nloop invariant i155: lock == 0 ==> new == old - 12;\nloop invariant i156: lock == 0 ==> new != old + 24;\nloop invariant i157: lock == 0 ==> new <= old + 11;\nloop invariant i158: 1 <= new <= 2^31 - 1;\nloop invariant i159: 1 <= old <= 2^31 - 1;\nloop invariant i160: new > old;\nloop invariant i161: lock == 0 ==> old == 2^31 - 1;\nloop invariant i162: lock == 1 ==> old == new - 1;\nloop invariant i163: old == 2^31 - 1 ==> new == 2^31 - 1;\nloop invariant i164: lock == 1 ==> new % 2 == 1;\nloop invariant i165: old == 2^31 - 1 ==> lock == 0;\nloop invariant i166: lock == 1 ==> new <= 2^31 - 1;\nloop invariant i167: lock == 0 ==> old <= 2^31 - 1;\nloop invariant i168: lock == 1 ==> new >= 3;\nloop invariant i169: lock == 0 ==> old >= 1;\nloop invariant i170: lock == 1 ==> old <= 2^31 - 2;\nloop invariant i171: lock == 0 ==> new <= 2^31 - 1;\nloop invariant i172: lock == 1 ==> old >= 2;\nloop invariant i173: lock == 0 ==> new >= 2;\nloop invariant i174: lock == 1 ==> new >= 2;\nloop invariant i175: lock == 0 ==> old >= 2;\nloop invariant i176: lock == 1 ==> old <= 2^31 - 1;\nloop invariant i177: old == new ==> !unknown();\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 55,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 1 ==> old == new;\n\n\n\nloop invariant i5: new >= old;\nloop invariant i6: old <= new;\n\n\n\n\n\nloop invariant i12: new == old + 1 ==> lock == 0;\n\n\n\n\n\n\n\nloop invariant i20: (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i21: (lock == 1) ==> old == new;\nloop invariant i22: (lock == 1) ==> new >= old;\n\nloop invariant i24: (lock == 1) ==> (lock == 0) ==> old == new;\nloop invariant i25: (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i26: (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i27: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i28: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant i29: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant i30: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant i31: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i32: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i33: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i34: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> old == new;\nloop invariant i35: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> new >= old;\nloop invariant i36: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (old + 1) == new;\nloop invariant i37: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (old + 1) == new;\nloop invariant i38: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> new >= old;\nloop invariant i39: (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> (lock == 1) ==> (lock == 0) ==> !(new != old);\nloop invariant i40: 0 <= lock <= 1;\n\n\nloop invariant i43: lock ==> old <= new;\nloop invariant i44: !lock ==> old <= new;\n\nloop invariant i46: lock ==> old == new;\n\n\n\nloop invariant i50: lock == 1 ==> new == old;\nloop invariant i51: lock == 0 ==> new != old;\nloop invariant i52: lock == 1 ==> old >= new;\n\n\n\nloop invariant i56: lock ==> lock == 1;\nloop invariant i57: !lock ==> lock == 0;\n\n\n\nloop invariant i61: !lock ==> old != new;\n\n\n\n\n\nloop invariant i67: new == old ==> lock == 1;\n\n\n\nloop invariant i71: old == new ==> lock == 0 ==> new == old;\nloop invariant i72: lock == 0 ==> new >= old;\n\nloop invariant i74: lock == 0 ==> new >= old ==> new == old ==> old == new;\nloop invariant i75: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old;\nloop invariant i76: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i77: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i78: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i79: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i80: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i81: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i82: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i83: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i84: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i85: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\nloop invariant i86: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new;\nloop invariant i87: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old;\nloop invariant i88: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0;\nloop invariant i89: lock == 0 ==> new >= old ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old ==> old == new ==> new == old ==> lock == 0 ==> new == old;\n\n\n\n\n\n\n\n\nloop invariant i98: lock == 0 ==> old <= new;\nloop invariant i99: lock == 0 ==> old != new;\n\nloop invariant i101: lock == 0 ==> new != old - 1;\n\nloop invariant i103: lock == 0 ==> new != old + 3;\nloop invariant i104: lock == 0 ==> new >= old - 1;\n\nloop invariant i106: lock == 0 ==> new != old + 4;\n\nloop invariant i108: lock == 0 ==> new != old + 5;\nloop invariant i109: lock == 0 ==> new >= old - 2;\n\nloop invariant i111: lock == 0 ==> new != old + 6;\nloop invariant i112: lock == 0 ==> new <= old + 2;\nloop invariant i113: lock == 0 ==> new != old + 7;\nloop invariant i114: lock == 0 ==> new >= old - 3;\n\nloop invariant i116: lock == 0 ==> new != old + 8;\nloop invariant i117: lock == 0 ==> new <= old + 3;\nloop invariant i118: lock == 0 ==> new != old + 9;\nloop invariant i119: lock == 0 ==> new >= old - 4;\n\nloop invariant i121: lock == 0 ==> new != old + 10;\nloop invariant i122: lock == 0 ==> new <= old + 4;\nloop invariant i123: lock == 0 ==> new != old + 11;\nloop invariant i124: lock == 0 ==> new >= old - 5;\n\nloop invariant i126: lock == 0 ==> new != old + 12;\nloop invariant i127: lock == 0 ==> new <= old + 5;\nloop invariant i128: lock == 0 ==> new != old + 13;\nloop invariant i129: lock == 0 ==> new >= old - 6;\n\nloop invariant i131: lock == 0 ==> new != old + 14;\nloop invariant i132: lock == 0 ==> new <= old + 6;\nloop invariant i133: lock == 0 ==> new != old + 15;\nloop invariant i134: lock == 0 ==> new >= old - 7;\n\nloop invariant i136: lock == 0 ==> new != old + 16;\nloop invariant i137: lock == 0 ==> new <= old + 7;\nloop invariant i138: lock == 0 ==> new != old + 17;\nloop invariant i139: lock == 0 ==> new >= old - 8;\n\nloop invariant i141: lock == 0 ==> new != old + 18;\nloop invariant i142: lock == 0 ==> new <= old + 8;\nloop invariant i143: lock == 0 ==> new != old + 19;\nloop invariant i144: lock == 0 ==> new >= old - 9;\n\nloop invariant i146: lock == 0 ==> new != old + 20;\nloop invariant i147: lock == 0 ==> new <= old + 9;\nloop invariant i148: lock == 0 ==> new != old + 21;\nloop invariant i149: lock == 0 ==> new >= old - 10;\n\nloop invariant i151: lock == 0 ==> new != old + 22;\nloop invariant i152: lock == 0 ==> new <= old + 10;\nloop invariant i153: lock == 0 ==> new != old + 23;\nloop invariant i154: lock == 0 ==> new >= old - 11;\n\nloop invariant i156: lock == 0 ==> new != old + 24;\nloop invariant i157: lock == 0 ==> new <= old + 11;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 14,
        "success_count": 13,
        "failure_count": 1,
        "success_rate": 0.9285714285714286
    }
}