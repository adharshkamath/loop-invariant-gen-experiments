{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \twhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= a <= 3 * n;\nloop invariant 0 <= b <= 3 * n;\nloop invariant a + b == 3 * i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant (i < n) ==> (a % 3 == 0);\nloop invariant (i < n) ==> (b % 3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a == i + (n - i) * i / 2;\nloop invariant b == i + (n - i) * (n - i - 1) / 2;\nloop invariant a + b == 3 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant (i == n) ==> (b == a);\nloop invariant !(i == n) ==> (i < n);\nloop invariant !(i == n) ==> (a < 2*n);\nloop invariant !(i == n) ==> (b < 2*n);\nloop invariant !(i == n) ==> (a + b < 3*n);\nloop invariant !(i == n) ==> (a + b == 3*i);\nloop invariant !(i == n) ==> (a >= 0);\nloop invariant !(i == n) ==> (b >= 0);\nloop invariant !(i == n) ==> (a <= 2*n);\nloop invariant !(i == n) ==> (b <= 2*n);\nloop invariant !(i == n) ==> (a + b <= 3*n);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 3*n;\nloop invariant b >= 0;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*n ==> a == 0 && b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 2*n;\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant if(i < n) then unknown2 ==> a == a + 1 && b == b + 2 else a == a + 2 && b == b + 1;\nloop invariant a + b == 3*i;\nloop invariant if(i == n) then unknown2 ==> a + b == 3*n else a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant a == 0;\nloop invariant b == 0;\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b <= 3*n;\nloop invariant a+b == 3*n ==> i == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 2*n;\nloop invariant a == 2*i + (n - i);\nloop invariant b == i + (n - i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a % 3 == i % 3;\nloop invariant b % 3 == (i % 3)*2;\nloop invariant a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant a + b == i;\nloop invariant a + 2 * b == 3 * i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n;\nloop invariant b <= n;\nloop invariant (i < n) ==> (a <= n - 1);\nloop invariant (i < n) ==> (b <= n - 1);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a == n;\nloop invariant b == n;\nloop invariant a == 2 * n;\nloop invariant b == n;\nloop invariant a == n;\nloop invariant b == 2 * n;\nloop invariant a == 3 * n;\nloop invariant b == 0;\nloop invariant a == n - 1;\nloop invariant b == n - 1;\nloop invariant a == n - 2;\nloop invariant b == n - 2;\nloop invariant a == n - 3;\nloop invariant b == n - 3;\nloop invariant a == n - 4;\nloop invariant b == n - 4;\nloop invariant a == n - 5;\nloop invariant b == n - 5;\nloop invariant a == n - 6;\nloop invariant b == n - 6;\nloop invariant a == n - 7;\nloop invariant b == n - 7;\nloop invariant a == n - 8;\nloop invariant b == n - 8;\nloop invariant a == n - 9;\nloop invariant b == n - 9;\nloop invariant a == n - 10;\nloop invariant b == n - 10;\nloop invariant a == n - 11;\nloop invariant b == n - 11;\nloop invariant a == n - 12;\nloop invariant b == n - 12;\nloop invariant a == n - 13;\nloop invariant b == n - 13;\nloop invariant a == n - 14;\nloop invariant b == n - 14;\nloop invariant a == n - 15;\nloop invariant b == n - 15;\nloop invariant a == n - 16;\nloop invariant b == n - 16;\nloop invariant a == n - 17;\nloop invariant b == n - 17;\nloop invariant a == n - 18;\nloop invariant b == n - 18;\nloop invariant a == n - 19;\nloop invariant b == n - 19;\nloop invariant a == n - 20;\nloop invariant b == n - 20;\nloop invariant a == n - 21;\nloop invariant b == n - 21;\nloop invariant a == n - 22;\nloop invariant b == n - 22;\nloop invariant a == n - 23;\nloop invariant b == n - 23;\nloop invariant a == n - 24;\nloop invariant b == n - 24;\nloop invariant a == n - 25;\nloop invariant b == n - 25;\nloop invariant a == n - 26;\nloop invariant b == n - 26;\nloop invariant a == n - 27;\nloop invariant b == n - 27;\nloop invariant a == n - 28;\nloop invariant b == n - 28;\nloop invariant a == n - 29;\nloop invariant b == n - 29;\nloop invariant a == n - 30;\nloop invariant b == n - 30;\nloop invariant a == n - 31;\nloop invariant b == n - 31;\nloop invariant a == n - 32;\nloop invariant b == n - 32;\nloop invariant a == n - 33;\nloop invariant b == n - 33;\nloop invariant a == n - 34;\nloop invariant b == n - 34;\nloop invariant a == n - 35;\nloop invariant b == n - 35;\nloop invariant a == n - 36;\nloop invariant b == n - 36;\nloop invariant a == n - 37;\nloop invariant b == n - 37;\nloop invariant a == n - 38;\nloop invariant b == n - 38;\nloop invariant a == n - 39;\nloop invariant b == n - 39;\nloop invariant a == n - 40;\nloop invariant b == n - 40;\nloop invariant a == n - 41;\nloop invariant b == n - 41;\nloop invariant a == n - 42;\nloop invariant b == n - 42;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b;\nloop invariant 0 <= a;\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*n;\nloop invariant (i < n) ==> (a == 0 || a == 2);\nloop invariant (i < n) ==> (b == 0 || b == 1);\nloop invariant (i == n) ==> (a == 3*n);\nloop invariant (i == n) ==> (b == 3*n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant n >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 3 * n;\nloop invariant 0 <= b <= 3 * n;\nloop invariant a + b == 3 * i;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant (i < n) ==> (a % 3 == 0);\nloop invariant (i < n) ==> (b % 3 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= a <= 3 * n;\nloop invariant i2: 0 <= b <= 3 * n;\nloop invariant i3: a + b == 3 * i;\nloop invariant i4: i >= 0;\nloop invariant i5: i <= n;\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a == i + (n - i) * i / 2;\nloop invariant b == i + (n - i) * (n - i - 1) / 2;\nloop invariant a + b == 3 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant (i == n) ==> (b == a);\nloop invariant !(i == n) ==> (i < n);\nloop invariant !(i == n) ==> (a < 2*n);\nloop invariant !(i == n) ==> (b < 2*n);\nloop invariant !(i == n) ==> (a + b < 3*n);\nloop invariant !(i == n) ==> (a + b == 3*i);\nloop invariant !(i == n) ==> (a >= 0);\nloop invariant !(i == n) ==> (b >= 0);\nloop invariant !(i == n) ==> (a <= 2*n);\nloop invariant !(i == n) ==> (b <= 2*n);\nloop invariant !(i == n) ==> (a + b <= 3*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a + b <= 3*n;\nloop invariant i6: a >= 0;\nloop invariant i7: b >= 0;\n\n\n\nloop invariant i11: !(i == n) ==> (i < n);\n\n\nloop invariant i14: !(i == n) ==> (a + b < 3*n);\nloop invariant i15: !(i == n) ==> (a + b == 3*i);\nloop invariant i16: !(i == n) ==> (a >= 0);\nloop invariant i17: !(i == n) ==> (b >= 0);\n\n\nloop invariant i20: !(i == n) ==> (a + b <= 3*n);\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 3*n;\nloop invariant b >= 0;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*n ==> a == 0 && b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: a >= 0;\nloop invariant i4: a <= 3*n;\nloop invariant i5: b >= 0;\nloop invariant i6: b <= 3*n;\nloop invariant i7: a + b == 3*i;\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 2*n;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: a <= 3*n;\n\nloop invariant i7: a + b == 3*i;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant if(i < n) then unknown2 ==> a == a + 1 && b == b + 2 else a == a + 2 && b == b + 1;\nloop invariant a + b == 3*i;\nloop invariant if(i == n) then unknown2 ==> a + b == 3*n else a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\n\nloop invariant i2: 0 <= i <= n;\n\n\n\nloop invariant i6: a + b == 3*i;\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant a == 0;\nloop invariant b == 0;\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b <= 3*n;\nloop invariant a+b == 3*n ==> i == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\n\n\n\nloop invariant i4: n >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: i <= n;\nloop invariant i7: a >= 0;\nloop invariant i8: b >= 0;\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 2*n;\nloop invariant a == 2*i + (n - i);\nloop invariant b == i + (n - i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: a >= 0;\nloop invariant i6: b >= 0;\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a % 3 == i % 3;\nloop invariant b % 3 == (i % 3)*2;\nloop invariant a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\n\n\nloop invariant i8: a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\n\nloop invariant i10: 0 <= i <= n ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant i11: 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 48,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant a + b == i;\nloop invariant a + 2 * b == 3 * i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n;\nloop invariant b <= n;\nloop invariant (i < n) ==> (a <= n - 1);\nloop invariant (i < n) ==> (b <= n - 1);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a == n;\nloop invariant b == n;\nloop invariant a == 2 * n;\nloop invariant b == n;\nloop invariant a == n;\nloop invariant b == 2 * n;\nloop invariant a == 3 * n;\nloop invariant b == 0;\nloop invariant a == n - 1;\nloop invariant b == n - 1;\nloop invariant a == n - 2;\nloop invariant b == n - 2;\nloop invariant a == n - 3;\nloop invariant b == n - 3;\nloop invariant a == n - 4;\nloop invariant b == n - 4;\nloop invariant a == n - 5;\nloop invariant b == n - 5;\nloop invariant a == n - 6;\nloop invariant b == n - 6;\nloop invariant a == n - 7;\nloop invariant b == n - 7;\nloop invariant a == n - 8;\nloop invariant b == n - 8;\nloop invariant a == n - 9;\nloop invariant b == n - 9;\nloop invariant a == n - 10;\nloop invariant b == n - 10;\nloop invariant a == n - 11;\nloop invariant b == n - 11;\nloop invariant a == n - 12;\nloop invariant b == n - 12;\nloop invariant a == n - 13;\nloop invariant b == n - 13;\nloop invariant a == n - 14;\nloop invariant b == n - 14;\nloop invariant a == n - 15;\nloop invariant b == n - 15;\nloop invariant a == n - 16;\nloop invariant b == n - 16;\nloop invariant a == n - 17;\nloop invariant b == n - 17;\nloop invariant a == n - 18;\nloop invariant b == n - 18;\nloop invariant a == n - 19;\nloop invariant b == n - 19;\nloop invariant a == n - 20;\nloop invariant b == n - 20;\nloop invariant a == n - 21;\nloop invariant b == n - 21;\nloop invariant a == n - 22;\nloop invariant b == n - 22;\nloop invariant a == n - 23;\nloop invariant b == n - 23;\nloop invariant a == n - 24;\nloop invariant b == n - 24;\nloop invariant a == n - 25;\nloop invariant b == n - 25;\nloop invariant a == n - 26;\nloop invariant b == n - 26;\nloop invariant a == n - 27;\nloop invariant b == n - 27;\nloop invariant a == n - 28;\nloop invariant b == n - 28;\nloop invariant a == n - 29;\nloop invariant b == n - 29;\nloop invariant a == n - 30;\nloop invariant b == n - 30;\nloop invariant a == n - 31;\nloop invariant b == n - 31;\nloop invariant a == n - 32;\nloop invariant b == n - 32;\nloop invariant a == n - 33;\nloop invariant b == n - 33;\nloop invariant a == n - 34;\nloop invariant b == n - 34;\nloop invariant a == n - 35;\nloop invariant b == n - 35;\nloop invariant a == n - 36;\nloop invariant b == n - 36;\nloop invariant a == n - 37;\nloop invariant b == n - 37;\nloop invariant a == n - 38;\nloop invariant b == n - 38;\nloop invariant a == n - 39;\nloop invariant b == n - 39;\nloop invariant a == n - 40;\nloop invariant b == n - 40;\nloop invariant a == n - 41;\nloop invariant b == n - 41;\nloop invariant a == n - 42;\nloop invariant b == n - 42;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: a >= 0;\nloop invariant i6: b >= 0;\n\n\n\n\nloop invariant i11: i <= n;\nloop invariant i12: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= b;\nloop invariant 0 <= a;\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a + b == 3*n;\nloop invariant (i < n) ==> (a == 0 || a == 2);\nloop invariant (i < n) ==> (b == 0 || b == 1);\nloop invariant (i == n) ==> (a == 3*n);\nloop invariant (i == n) ==> (b == 3*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= b;\nloop invariant i2: 0 <= a;\nloop invariant i3: n >= 0;\nloop invariant i4: i >= 0;\nloop invariant i5: i <= n;\nloop invariant i6: a >= 0;\nloop invariant i7: b >= 0;\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant n >= 0;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a + b <= 3*n;\nloop invariant i6: a >= 0;\nloop invariant i7: b >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: i <= n;\nloop invariant i10: n >= 0;\nloop invariant i11: a <= 3*n;\nloop invariant i12: b <= 3*n;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 51: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= a <= 3 * n;\nloop invariant i2: 0 <= b <= 3 * n;\nloop invariant i3: a + b == 3 * i;\nloop invariant i4: i >= 0;\nloop invariant i5: i <= n;\nloop invariant i6: (i < n) ==> (a % 3 == 0);\nloop invariant i7: (i < n) ==> (b % 3 == 0);\nloop invariant i8: 0 <= i <= n;\nloop invariant i9: a == i + (n - i) * i / 2;\nloop invariant i10: b == i + (n - i) * (n - i - 1) / 2;\nloop invariant i11: a + b == 3 * n;\nloop invariant i12: 0 <= a <= 2*n;\nloop invariant i13: 0 <= b <= 2*n;\nloop invariant i14: a + b == 3*i;\nloop invariant i15: a + b <= 3*n;\nloop invariant i16: a >= 0;\nloop invariant i17: b >= 0;\nloop invariant i18: a <= 2*n;\nloop invariant i19: b <= 2*n;\nloop invariant i20: (i == n) ==> (b == a);\nloop invariant i21: !(i == n) ==> (i < n);\nloop invariant i22: !(i == n) ==> (a < 2*n);\nloop invariant i23: !(i == n) ==> (b < 2*n);\nloop invariant i24: !(i == n) ==> (a + b < 3*n);\nloop invariant i25: !(i == n) ==> (a + b == 3*i);\nloop invariant i26: !(i == n) ==> (a >= 0);\nloop invariant i27: !(i == n) ==> (b >= 0);\nloop invariant i28: !(i == n) ==> (a <= 2*n);\nloop invariant i29: !(i == n) ==> (b <= 2*n);\nloop invariant i30: !(i == n) ==> (a + b <= 3*n);\nloop invariant i31: a <= 3*n;\nloop invariant i32: b <= 3*n;\nloop invariant i33: a + b == 3*n ==> a == 0 && b == 3*n;\nloop invariant i34: 0 <= n <= 1;\nloop invariant i35: if(i < n) then unknown2 ==> a == a + 1 && b == b + 2 else a == a + 2 && b == b + 1;\nloop invariant i36: if(i == n) then unknown2 ==> a + b == 3*n else a + b == 3*i;\nloop invariant i37: i == 0;\nloop invariant i38: a == 0;\nloop invariant i39: b == 0;\nloop invariant i40: n >= 0;\nloop invariant i41: a+b <= 3*n;\nloop invariant i42: a+b == 3*n ==> i == n;\nloop invariant i43: a + b >= 2*n;\nloop invariant i44: a == 2*i + (n - i);\nloop invariant i45: b == i + (n - i);\nloop invariant i46: 0 <= a <= 3*n;\nloop invariant i47: 0 <= b <= 3*n;\nloop invariant i48: a % 3 == i % 3;\nloop invariant i49: b % 3 == (i % 3)*2;\nloop invariant i50: a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant i51: a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant i52: 0 <= i <= n ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant i53: 0 <= i <= n ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant i54: 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant i55: 0 <= a <= n;\nloop invariant i56: a + b == i;\nloop invariant i57: a + 2 * b == 3 * i;\nloop invariant i58: a <= n;\nloop invariant i59: b <= n;\nloop invariant i60: (i < n) ==> (a <= n - 1);\nloop invariant i61: (i < n) ==> (b <= n - 1);\nloop invariant i62: a == n;\nloop invariant i63: b == n;\nloop invariant i64: a == 2 * n;\nloop invariant i65: b == 2 * n;\nloop invariant i66: a == 3 * n;\nloop invariant i67: a == n - 1;\nloop invariant i68: b == n - 1;\nloop invariant i69: a == n - 2;\nloop invariant i70: b == n - 2;\nloop invariant i71: a == n - 3;\nloop invariant i72: b == n - 3;\nloop invariant i73: a == n - 4;\nloop invariant i74: b == n - 4;\nloop invariant i75: a == n - 5;\nloop invariant i76: b == n - 5;\nloop invariant i77: a == n - 6;\nloop invariant i78: b == n - 6;\nloop invariant i79: a == n - 7;\nloop invariant i80: b == n - 7;\nloop invariant i81: a == n - 8;\nloop invariant i82: b == n - 8;\nloop invariant i83: a == n - 9;\nloop invariant i84: b == n - 9;\nloop invariant i85: a == n - 10;\nloop invariant i86: b == n - 10;\nloop invariant i87: a == n - 11;\nloop invariant i88: b == n - 11;\nloop invariant i89: a == n - 12;\nloop invariant i90: b == n - 12;\nloop invariant i91: a == n - 13;\nloop invariant i92: b == n - 13;\nloop invariant i93: a == n - 14;\nloop invariant i94: b == n - 14;\nloop invariant i95: a == n - 15;\nloop invariant i96: b == n - 15;\nloop invariant i97: a == n - 16;\nloop invariant i98: b == n - 16;\nloop invariant i99: a == n - 17;\nloop invariant i100: b == n - 17;\nloop invariant i101: a == n - 18;\nloop invariant i102: b == n - 18;\nloop invariant i103: a == n - 19;\nloop invariant i104: b == n - 19;\nloop invariant i105: a == n - 20;\nloop invariant i106: b == n - 20;\nloop invariant i107: a == n - 21;\nloop invariant i108: b == n - 21;\nloop invariant i109: a == n - 22;\nloop invariant i110: b == n - 22;\nloop invariant i111: a == n - 23;\nloop invariant i112: b == n - 23;\nloop invariant i113: a == n - 24;\nloop invariant i114: b == n - 24;\nloop invariant i115: a == n - 25;\nloop invariant i116: b == n - 25;\nloop invariant i117: a == n - 26;\nloop invariant i118: b == n - 26;\nloop invariant i119: a == n - 27;\nloop invariant i120: b == n - 27;\nloop invariant i121: a == n - 28;\nloop invariant i122: b == n - 28;\nloop invariant i123: a == n - 29;\nloop invariant i124: b == n - 29;\nloop invariant i125: a == n - 30;\nloop invariant i126: b == n - 30;\nloop invariant i127: a == n - 31;\nloop invariant i128: b == n - 31;\nloop invariant i129: a == n - 32;\nloop invariant i130: b == n - 32;\nloop invariant i131: a == n - 33;\nloop invariant i132: b == n - 33;\nloop invariant i133: a == n - 34;\nloop invariant i134: b == n - 34;\nloop invariant i135: a == n - 35;\nloop invariant i136: b == n - 35;\nloop invariant i137: a == n - 36;\nloop invariant i138: b == n - 36;\nloop invariant i139: a == n - 37;\nloop invariant i140: b == n - 37;\nloop invariant i141: a == n - 38;\nloop invariant i142: b == n - 38;\nloop invariant i143: a == n - 39;\nloop invariant i144: b == n - 39;\nloop invariant i145: a == n - 40;\nloop invariant i146: b == n - 40;\nloop invariant i147: a == n - 41;\nloop invariant i148: b == n - 41;\nloop invariant i149: a == n - 42;\nloop invariant i150: b == n - 42;\nloop invariant i151: 0 <= b;\nloop invariant i152: 0 <= a;\nloop invariant i153: a + b == 3*n;\nloop invariant i154: (i < n) ==> (a == 0 || a == 2);\nloop invariant i155: (i < n) ==> (b == 0 || b == 1);\nloop invariant i156: (i == n) ==> (a == 3*n);\nloop invariant i157: (i == n) ==> (b == 3*n);\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 64,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= a <= 3 * n;\nloop invariant i2: 0 <= b <= 3 * n;\nloop invariant i3: a + b == 3 * i;\nloop invariant i4: i >= 0;\nloop invariant i5: i <= n;\n\n\nloop invariant i8: 0 <= i <= n;\n\n\n\n\n\nloop invariant i14: a + b == 3*i;\nloop invariant i15: a + b <= 3*n;\nloop invariant i16: a >= 0;\nloop invariant i17: b >= 0;\n\n\n\nloop invariant i21: !(i == n) ==> (i < n);\n\n\nloop invariant i24: !(i == n) ==> (a + b < 3*n);\nloop invariant i25: !(i == n) ==> (a + b == 3*i);\nloop invariant i26: !(i == n) ==> (a >= 0);\nloop invariant i27: !(i == n) ==> (b >= 0);\n\n\nloop invariant i30: !(i == n) ==> (a + b <= 3*n);\nloop invariant i31: a <= 3*n;\nloop invariant i32: b <= 3*n;\n\n\n\n\n\n\n\nloop invariant i40: n >= 0;\nloop invariant i41: a+b <= 3*n;\nloop invariant i42: a+b == 3*n ==> i == n;\n\n\n\nloop invariant i46: 0 <= a <= 3*n;\nloop invariant i47: 0 <= b <= 3*n;\n\n\n\nloop invariant i51: a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> a >= 0 && b >= 0 && i >= 0 && i <= n && a <= 3*n && b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\n\nloop invariant i53: 0 <= i <= n ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\nloop invariant i54: 0 <= i <= n ==> 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2 ==> 0 <= i <= n && 0 <= a <= 3*n && 0 <= b <= 3*n && a + b == 3*i && a % 3 == i % 3 && b % 3 == (i % 3)*2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i151: 0 <= b;\nloop invariant i152: 0 <= a;\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 104,
        "success_count": 88,
        "failure_count": 16,
        "success_rate": 0.8461538461538461
    }
}