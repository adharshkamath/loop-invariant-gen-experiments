{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\twhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 1 <= y;\nloop invariant x >= y + 1;\nloop invariant lock == 1;\nloop invariant 1 <= y; is true before the loop execution because y is initialized to 0, and y is incremented by 1 in each iteration. The loop invariant x >= y + 1; is true in every iteration of the loop because x is always equal to or larger than y in each iteration. The loop invariant lock == 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x >= y;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant ( lock == 1 ==> x <= y <= x + 1 );\nloop invariant ( lock == 0 ==> x <= y );\nloop invariant (input == 0 ==> (lock == 0 || y == x + 1) );\nloop invariant (input == 1 ==> (lock == 1 || y == x));\nloop invariant (input == 1 ==> (lock == 0 || y == x + 1));\nloop invariant (input == 0 ==> (lock == 0 || y == x + 1) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant lock == 1;\nloop invariant v1 == v2 == v3;\nloop invariant input == 0;\nloop invariant x <= 2 * y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lock <= 2;\nloop invariant 1 <= v1 <= 2;\nloop invariant 1 <= v2 <= 2;\nloop invariant 1 <= v3 <= 2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x == y ==> lock == 1;\nloop invariant lock == 1 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant y == 100000 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant y < 100000 ==> (lock == 1 ==> (x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant 1 <= lock <= 2;\nloop invariant 1 <= v1 <= 2;\nloop invariant 1 <= v2 <= 2;\nloop invariant 1 <= v3 <= 2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant y == 100000 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant y < 100000 ==> (lock == 1 ==> (x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\n*/\n```",
            "```\n/*@\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= y + 1;\nloop invariant x >= (y + 1);\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 1 ==> x == y + 1;\nloop invariant lock == 0 ==> x != y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant x != y;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant x != y;\nloop invariant lock == 0;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant x != y;\nloop invariant lock == 0;\nloop invariant y < 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant x != y;\nloop invariant lock == 0;\nloop invariant y < 100000;\nloop invariant unknown_int() == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant y <= (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 32767; loop invariant (lock == 1); loop invariant y >= 0; loop invariant y <= 32767; loop invariant x >= 0; loop invariant x <= 32767; loop invariant y - x >= 0; loop invariant y - x <= 32767; loop invariant v1 >= 0; loop invariant v1 <= 32767; loop invariant v2 >= 0; loop invariant v2 <= 32767; loop invariant v3 >= 0; loop invariant v3 <= 32767; loop invariant lock ==> x = y; loop invariant !lock ==> y < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= x <= (y + 1);\nloop invariant 0 <= y <= (x + 1);\nloop invariant (lock == 0) ==> (x == y);\nloop invariant (input == 0) ==> (y >= (x + 1));\nloop invariant (input == 1) ==> (y == (x + 1));\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (y >= (x + 1));\nloop invariant (lock == 1) ==> (y == (x + 1));\n*/\n```",
            "```\n/*@\nloop invariant y = y + 1;\nloop invariant lock = 1;\nloop invariant x = y;\nloop invariant input = unknown_int();\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant lock = 0;\nloop invariant y = y + 1;\nloop invariant lock = 1;\nloop invariant x = y;\nloop invariant input = unknown_int();\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant x != y;\nloop invariant lock = 1;\nloop invariant x = y;\nloop invariant input = unknown_int();\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 1 <= y;\nloop invariant x >= y + 1;\nloop invariant lock == 1;\nloop invariant 1 <= y; is true before the loop execution because y is initialized to 0, and y is incremented by 1 in each iteration. The loop invariant x >= y + 1; is true in every iteration of the loop because x is always equal to or larger than y in each iteration. The loop invariant lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x >= y;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( lock == 1 ==> x <= y <= x + 1 );\nloop invariant ( lock == 0 ==> x <= y );\nloop invariant (input == 0 ==> (lock == 0 || y == x + 1) );\nloop invariant (input == 1 ==> (lock == 1 || y == x));\nloop invariant (input == 1 ==> (lock == 0 || y == x + 1));\nloop invariant (input == 0 ==> (lock == 0 || y == x + 1) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\nloop invariant i1: ( lock == 1 ==> x <= y <= x + 1 );\nloop invariant i2: ( lock == 0 ==> x <= y );\n\n\nloop invariant i5: (input == 1 ==> (lock == 0 || y == x + 1));\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant lock == 1;\nloop invariant v1 == v2 == v3;\nloop invariant input == 0;\nloop invariant x <= 2 * y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\nloop invariant input == 1 ==> lock == 0;\nloop invariant input == 0 ==> lock == 1;\nloop invariant input == 1 ==> y == x + 1;\nloop invariant input == 0 ==> y == x;\nloop invariant input == 1 ==> x == y + 1;\nloop invariant input == 0 ==> x == y;\nloop invariant input == 1 ==> v1 == v2 == v3;\nloop invariant input == 0 ==> v1 == v2 == v3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n\n\nloop invariant i9: input == 1 ==> y == x + 1;\nloop invariant i10: input == 0 ==> y == x;\n\nloop invariant i12: input == 0 ==> x == y;\n\n\nloop invariant i15: input == 1 ==> lock == 0;\nloop invariant i16: input == 0 ==> lock == 1;\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= lock <= 2;\nloop invariant 1 <= v1 <= 2;\nloop invariant 1 <= v2 <= 2;\nloop invariant 1 <= v3 <= 2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x == y ==> lock == 1;\nloop invariant lock == 1 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant y == 100000 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant y < 100000 ==> (lock == 1 ==> (x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant 1 <= lock <= 2;\nloop invariant 1 <= v1 <= 2;\nloop invariant 1 <= v2 <= 2;\nloop invariant 1 <= v3 <= 2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant y == 100000 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant y < 100000 ==> (lock == 1 ==> (x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\nloop invariant i7: x == y ==> lock == 1;\n\nloop invariant i9: y == 100000 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\nloop invariant i1: y >= x;\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= y + 1;\nloop invariant x >= (y + 1);\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 1 ==> x == y + 1;\nloop invariant lock == 0 ==> x != y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\nloop invariant i3: lock == 1 ==> x == y;\nloop invariant i4: lock == 0 ==> x != y;\n\nloop invariant i6: lock == 0 ==> x != y + 1;\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant x != y;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant x != y;\nloop invariant lock == 0;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant x != y;\nloop invariant lock == 0;\nloop invariant y < 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant lock == 1;\nloop invariant x != y;\nloop invariant lock == 0;\nloop invariant y < 100000;\nloop invariant unknown_int() == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant y <= (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\nloop invariant y = (y + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\nloop invariant i2: y <= (y + 1);\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 32767; loop invariant (lock == 1); loop invariant y >= 0; loop invariant y <= 32767; loop invariant x >= 0; loop invariant x <= 32767; loop invariant y - x >= 0; loop invariant y - x <= 32767; loop invariant v1 >= 0; loop invariant v1 <= 32767; loop invariant v2 >= 0; loop invariant v2 <= 32767; loop invariant v3 >= 0; loop invariant v3 <= 32767; loop invariant lock ==> x = y; loop invariant !lock ==> y < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= x <= (y + 1);\nloop invariant 0 <= y <= (x + 1);\nloop invariant (lock == 0) ==> (x == y);\nloop invariant (input == 0) ==> (y >= (x + 1));\nloop invariant (input == 1) ==> (y == (x + 1));\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (y >= (x + 1));\nloop invariant (lock == 1) ==> (y == (x + 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\nloop invariant i1: 0 <= lock <= 1;\n\n\n\n\nloop invariant i6: (input == 1) ==> (y == (x + 1));\nloop invariant i7: (lock == 1) ==> (x == y);\nloop invariant i8: (lock == 0) ==> (y >= (x + 1));\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant y = y + 1;\nloop invariant lock = 1;\nloop invariant x = y;\nloop invariant input = unknown_int();\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant lock = 0;\nloop invariant y = y + 1;\nloop invariant lock = 1;\nloop invariant x = y;\nloop invariant input = unknown_int();\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant x != y;\nloop invariant lock = 1;\nloop invariant x = y;\nloop invariant input = unknown_int();\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 38: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 1 <= y;\nloop invariant i4: x >= y + 1;\nloop invariant i5: lock == 1;\nloop invariant i6: 1 <= y; is true before the loop execution because y is initialized to 0, and y is incremented by 1 in each iteration. The loop invariant x >= y + 1; is true in every iteration of the loop because x is always equal to or larger than y in each iteration. The loop invariant lock == 1;\nloop invariant i7: 1 <= y <= 100000;\nloop invariant i8: y == x;\nloop invariant i9: x == y;\nloop invariant i10: x >= y;\nloop invariant i11: x >= 0;\nloop invariant i12: ( lock == 1 ==> x <= y <= x + 1 );\nloop invariant i13: ( lock == 0 ==> x <= y );\nloop invariant i14: (input == 0 ==> (lock == 0 || y == x + 1) );\nloop invariant i15: (input == 1 ==> (lock == 1 || y == x));\nloop invariant i16: (input == 1 ==> (lock == 0 || y == x + 1));\nloop invariant i17: 0 <= y <= x;\nloop invariant i18: v1 == v2 == v3;\nloop invariant i19: input == 0;\nloop invariant i20: x <= 2 * y;\nloop invariant i21: y >= 0;\nloop invariant i22: y <= x;\nloop invariant i23: input == 1 ==> y == x + 1;\nloop invariant i24: input == 0 ==> y == x;\nloop invariant i25: input == 1 ==> x == y + 1;\nloop invariant i26: input == 0 ==> x == y;\nloop invariant i27: input == 1 ==> v1 == v2 == v3;\nloop invariant i28: input == 0 ==> v1 == v2 == v3;\nloop invariant i29: input == 1 ==> lock == 0;\nloop invariant i30: input == 0 ==> lock == 1;\nloop invariant i31: 1 <= lock <= 2;\nloop invariant i32: 1 <= v1 <= 2;\nloop invariant i33: 1 <= v2 <= 2;\nloop invariant i34: 1 <= v3 <= 2;\nloop invariant i35: x == y ==> lock == 1;\nloop invariant i36: lock == 1 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant i37: y == 100000 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant i38: y < 100000 ==> (lock == 1 ==> (x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\nloop invariant i39: y >= x;\nloop invariant i40: 0 <= y <= y + 1;\nloop invariant i41: x >= (y + 1);\nloop invariant i42: lock == 1 ==> x == y;\nloop invariant i43: lock == 0 ==> x != y;\nloop invariant i44: lock == 1 ==> x == y + 1;\nloop invariant i45: lock == 0 ==> x != y + 1;\nloop invariant i46: x != y;\nloop invariant i47: lock == 0;\nloop invariant i48: y < 100000;\nloop invariant i49: unknown_int() == 1;\nloop invariant i50: 1 <= x <= y;\nloop invariant i51: y <= (y + 1);\nloop invariant i52: y = (y + 1);\nloop invariant i53: 0 <= x <= y <= 32767; loop invariant (lock == 1); loop invariant y >= 0; loop invariant y <= 32767; loop invariant x >= 0; loop invariant x <= 32767; loop invariant y - x >= 0; loop invariant y - x <= 32767; loop invariant v1 >= 0; loop invariant v1 <= 32767; loop invariant v2 >= 0; loop invariant v2 <= 32767; loop invariant v3 >= 0; loop invariant v3 <= 32767; loop invariant lock ==> x = y; loop invariant !lock ==> y < x;\nloop invariant i54: 0 <= lock <= 1;\nloop invariant i55: 0 <= x <= (y + 1);\nloop invariant i56: 0 <= y <= (x + 1);\nloop invariant i57: (lock == 0) ==> (x == y);\nloop invariant i58: (input == 0) ==> (y >= (x + 1));\nloop invariant i59: (input == 1) ==> (y == (x + 1));\nloop invariant i60: (lock == 1) ==> (x == y);\nloop invariant i61: (lock == 0) ==> (y >= (x + 1));\nloop invariant i62: (lock == 1) ==> (y == (x + 1));\nloop invariant i63: y = y + 1;\nloop invariant i64: lock = 1;\nloop invariant i65: x = y;\nloop invariant i66: input = unknown_int();\nloop invariant i67: v1 = unknown_int();\nloop invariant i68: v2 = unknown_int();\nloop invariant i69: v3 = unknown_int();\nloop invariant i70: lock = 0;\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: ( lock == 1 ==> x <= y <= x + 1 );\nloop invariant i13: ( lock == 0 ==> x <= y );\n\n\nloop invariant i16: (input == 1 ==> (lock == 0 || y == x + 1));\n\n\n\n\n\n\nloop invariant i23: input == 1 ==> y == x + 1;\nloop invariant i24: input == 0 ==> y == x;\n\nloop invariant i26: input == 0 ==> x == y;\n\n\nloop invariant i29: input == 1 ==> lock == 0;\nloop invariant i30: input == 0 ==> lock == 1;\n\n\n\n\nloop invariant i35: x == y ==> lock == 1;\n\nloop invariant i37: y == 100000 ==> ((x >= 1) && (x <= 100000) && (y >= 1) && (y <= 100000));\n\nloop invariant i39: y >= x;\n\n\nloop invariant i42: lock == 1 ==> x == y;\nloop invariant i43: lock == 0 ==> x != y;\n\nloop invariant i45: lock == 0 ==> x != y + 1;\n\n\n\n\n\nloop invariant i51: y <= (y + 1);\n\n\nloop invariant i54: 0 <= lock <= 1;\n\n\n\n\nloop invariant i59: (input == 1) ==> (y == (x + 1));\nloop invariant i60: (lock == 1) ==> (x == y);\nloop invariant i61: (lock == 0) ==> (y >= (x + 1));\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 78,
        "success_count": 67,
        "failure_count": 11,
        "success_rate": 0.8589743589743589
    }
}