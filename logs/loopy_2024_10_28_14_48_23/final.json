{
    "params": {
        "cli_args": {
            "config_file": "../config/loop_invariants.yaml",
            "no_preprocess": false,
            "termination_analysis": false,
            "recursive_functions": false,
            "loop_invariants": false,
            "loop_invariants_prompt": null,
            "repair_invariants": false,
            "repair_input": "",
            "repair_retries": 5,
            "repair_from_k": 0,
            "max_benchmarks": 75,
            "start_index": 40,
            "debug": false,
            "check_only": true,
            "input_log": "../../syncode/loopy_expts/logs/2024_10_26_05_45_01_expt_logs_qc_processed_1.json"
        },
        "config_file_args": {
            "checker": "frama-c",
            "model": "gpt-4-32k",
            "benchmarks": "syncode/benchmarks.txt",
            "benchmark_features": "one_loop_one_method",
            "debug": true
        }
    },
    "logs": [
        {
            "file": "../dataset/loop_invariants/code2inv/85.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant y <= 0;\nloop invariant x <= -15000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= -15000 + y;\nloop invariant y > 0;\nloop invariant x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 25000;\nloop invariant x >= (y * (y + 1) / 2) - 15000;\nloop invariant x <= (y * (y - 1) / 2) - 15000;\nloop invariant (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\nloop invariant (y > 0) ==> (x >= (y * (y + 1) / 2) - 15000);\n*/\n```",
                "```\n/*@\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y > 0;\nloop invariant x = 0;\nloop invariant y = 1;\n*/\n```",
                "```\n/*@\nloop invariant y > 0;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x < 0;\nloop invariant y <= 100000;\nloop invariant x >= -15000;\nloop invariant y > 0;\nloop invariant x >= -15000;\nloop invariant y >= 1;\nloop invariant x < 0;\nloop invariant y <= 100000;\nloop invariant x >= (y - 1) * y / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y; loop invariant x <= -15000; loop invariant x <= -15000 + y; loop invariant y <= x + 15000; loop invariant y <= x + 15000 - 1; loop invariant y <= x + 15000 - 2; loop invariant y <= x + 15000 - 3; loop invariant y <= x + 15000 - 4; loop invariant y <= x + 15000 - 5; loop invariant y <= x + 15000 - 6; loop invariant y <= x + 15000 - 7; loop invariant y <= x + 15000 - 8; loop invariant y <= x + 15000 - 9; loop invariant y <= x + 15000 - 10; loop invariant y <= x + 15000 - 11; loop invariant y <= x + 15000 - 12; loop invariant y <= x + 15000 - 13; loop invariant y <= x + 15000 - 14; loop invariant y <= x + 15000 - 15; loop invariant y <= x + 15000 - 16; loop invariant y <= x + 15000 - 17; loop invariant y <= x + 15000 - 18; loop invariant y <= x + 15000 - 19; loop invariant y <= x + 15000 - 20; loop invariant y <= x + 15000 - 21; loop invariant y <= x + 15000 - 22; loop invariant y <= x + 15000 - 23; loop invariant y <= x + 15000 - 24; loop invariant y <= x + 15000 - 25; loop invariant y <= x + 15000 - 26; loop invariant y <= x + 15000 - 27; loop invariant y <= x + 15000 - 28; loop invariant y <= x + 15000 - 29; loop invariant y <= x + 15000 - 30; loop invariant y <= x + 15000 - 31; loop invariant y <= x + 15000 - 32; loop invariant y <= x + 15000 - 33; loop invariant y <= x + 15000 - 34; loop invariant y <= x + 15000 - 35; loop invariant y <= x + 15000 - 36; loop invariant y <= x + 15000 - 37; loop invariant y <= x + 15000 - 38; loop invariant y <= x + 15000 - 39; loop invariant y <= x + 15000 - 40; loop invariant y <= x + 15000 - 41; loop invariant y <= x + 15000 - 42; loop invariant y <= x + 15000 - 43; loop invariant y <= x + 15000 - 44; loop invariant y <= x + 15000 - 45; loop invariant y <= x + 15000 - 46; loop invariant y <= x + 15000 - 47; loop invariant y <= x + 15000 - 48; loop invariant y <= x + 15000 - 49; loop invariant y <= x + 15000 - 50; loop invariant y <= x + 15000 - 51; loop invariant y <= x + 15000 - 52; loop invariant y <= x + 15000 - 53; loop invariant y <= x + 15000 - 54; loop invariant y <= x + 15000 - 55; loop invariant y <= x + 15000 - 56;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < 0; loop invariant y > 0; loop invariant x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -15000;\nloop invariant y > 0;\nloop invariant y >= 1;\nloop invariant y <= 100000;\nloop invariant x >= -15000 + y;\nloop invariant x >= y;\nloop invariant x >= -15000 + (y - 1) * y / 2;\nloop invariant x >= -15000 + y - 1;\nloop invariant x >= -15000 + y;\nloop invariant x >= -15000 + y + 1;\nloop invariant x >= -15000 + y + 2;\nloop invariant x >= -15000 + y + 3;\nloop invariant x >= -15000 + y + 4;\nloop invariant x >= -15000 + y + 5;\nloop invariant x >= -15000 + y + 6;\nloop invariant x >= -15000 + y + 7;\nloop invariant x >= -15000 + y + 8;\nloop invariant x >= -15000 + y + 9;\nloop invariant x >= -15000 + y + 10;\nloop invariant x >= -15000 + y + 11;\nloop invariant x >= -15000 + y + 12;\nloop invariant x >= -15000 + y + 13;\nloop invariant x >= -15000 + y + 14;\nloop invariant x >= -15000 + y + 15;\nloop invariant x >= -15000 + y + 16;\nloop invariant x >= -15000 + y + 17;\nloop invariant x >= -15000 + y + 18;\nloop invariant x >= -15000 + y + 19;\nloop invariant x >= -15000 + y + 20;\nloop invariant x >= -15000 + y + 21;\nloop invariant x >= -15000 + y + 22;\nloop invariant x >= -15000 + y + 23;\nloop invariant x >= -15000 + y + 24;\nloop invariant x >= -15000 + y + 25;\nloop invariant x >= -15000 + y + 26;\nloop invariant x >= -15000 + y + 27;\nloop invariant x >= -15000 + y + 28;\nloop invariant x >= -15000 + y + 29;\nloop invariant x >= -15000 + y + 30;\nloop invariant x >= -15000 + y + 31;\nloop invariant x >= -15000 + y + 32;\nloop invariant x >= -15000 + y + 33;\nloop invariant x >= -15000 + y + 34;\nloop invariant x >= -15000 + y + 35;\nloop invariant x >= -15000 + y + 36;\nloop invariant x >= -15000 + y + 37;\nloop invariant x >= -15000 + y + 38;\nloop invariant x >= -15000 + y + 39;\nloop invariant x >= -15000 + y + 40;\nloop invariant x >= -15000 + y + 41;\nloop invariant x >= -15000 + y + 42;\nloop invariant x >= -15000 + y + 43;\nloop invariant x >= -15000 + y + 44;\nloop invariant x >= -15000 + y + 45;\nloop invariant x >= -15000 + y + 46;\nloop invariant x >= -15000 + y + 47;\nloop invariant x >= -15000 + y + 48;\nloop invariant x >= -15000 + y + 49;\nloop invariant x >= -15000 + y + 50;\nloop invariant x >= -15000 + y + 51;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= -15000;\nloop invariant y >= 1;\nloop invariant y <= 15000;\nloop invariant x == (x + y) - y;\nloop invariant x + y == y + x;\nloop invariant x + y == x + y;\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant y > 0; (This is another implication, because it holds even after the loop termination) loop invariant x = (x + y) * y / 2; (This is a simplified version of the invariant) loop invariant x = (x + y) * y / 2 ==> y > 0;\n*/\n```",
                "```\n/*@\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 < y <= x;\nloop invariant x >= -15000;\nloop invariant y = x + 15000;\nloop invariant y > 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant x < 15000;\nloop invariant y = x + 15000;\nloop invariant y > 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant x < 15000;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant y <= 0;\nloop invariant x <= -15000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= -15000 + y;\nloop invariant y > 0;\nloop invariant x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y <= 0 is preserved but not established.\nloop invariant x <= -15000 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x >= -15000 + y is partially proven to be inductive.\nloop invariant y > 0 is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 25000;\nloop invariant x >= (y * (y + 1) / 2) - 15000;\nloop invariant x <= (y * (y - 1) / 2) - 15000;\nloop invariant (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\nloop invariant (y > 0) ==> (x >= (y * (y + 1) / 2) - 15000);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 25000 is preserved but not established.\nloop invariant x >= (y * (y + 1) / 2) - 15000 is neither established nor preserved.\nloop invariant x <= (y * (y - 1) / 2) - 15000 is partially proven to be inductive.\nloop invariant (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000) is partially proven to be inductive.\nloop invariant (y > 0) ==> (x >= (y * (y + 1) / 2) - 15000) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\nloop invariant i3: x <= (y * (y - 1) / 2) - 15000;\nloop invariant i4: (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y > 0;\nloop invariant x = 0;\nloop invariant y = 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x < 0;\nloop invariant y <= 100000;\nloop invariant x >= -15000;\nloop invariant y > 0;\nloop invariant x >= -15000;\nloop invariant y >= 1;\nloop invariant x < 0;\nloop invariant y <= 100000;\nloop invariant x >= (y - 1) * y / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y > 0 is preserved but not established.\nloop invariant x >= (y - 1) * y / 2 is preserved but not established.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x >= -15000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x <= -15000; loop invariant x <= -15000 + y; loop invariant y <= x + 15000; loop invariant y <= x + 15000 - 1; loop invariant y <= x + 15000 - 2; loop invariant y <= x + 15000 - 3; loop invariant y <= x + 15000 - 4; loop invariant y <= x + 15000 - 5; loop invariant y <= x + 15000 - 6; loop invariant y <= x + 15000 - 7; loop invariant y <= x + 15000 - 8; loop invariant y <= x + 15000 - 9; loop invariant y <= x + 15000 - 10; loop invariant y <= x + 15000 - 11; loop invariant y <= x + 15000 - 12; loop invariant y <= x + 15000 - 13; loop invariant y <= x + 15000 - 14; loop invariant y <= x + 15000 - 15; loop invariant y <= x + 15000 - 16; loop invariant y <= x + 15000 - 17; loop invariant y <= x + 15000 - 18; loop invariant y <= x + 15000 - 19; loop invariant y <= x + 15000 - 20; loop invariant y <= x + 15000 - 21; loop invariant y <= x + 15000 - 22; loop invariant y <= x + 15000 - 23; loop invariant y <= x + 15000 - 24; loop invariant y <= x + 15000 - 25; loop invariant y <= x + 15000 - 26; loop invariant y <= x + 15000 - 27; loop invariant y <= x + 15000 - 28; loop invariant y <= x + 15000 - 29; loop invariant y <= x + 15000 - 30; loop invariant y <= x + 15000 - 31; loop invariant y <= x + 15000 - 32; loop invariant y <= x + 15000 - 33; loop invariant y <= x + 15000 - 34; loop invariant y <= x + 15000 - 35; loop invariant y <= x + 15000 - 36; loop invariant y <= x + 15000 - 37; loop invariant y <= x + 15000 - 38; loop invariant y <= x + 15000 - 39; loop invariant y <= x + 15000 - 40; loop invariant y <= x + 15000 - 41; loop invariant y <= x + 15000 - 42; loop invariant y <= x + 15000 - 43; loop invariant y <= x + 15000 - 44; loop invariant y <= x + 15000 - 45; loop invariant y <= x + 15000 - 46; loop invariant y <= x + 15000 - 47; loop invariant y <= x + 15000 - 48; loop invariant y <= x + 15000 - 49; loop invariant y <= x + 15000 - 50; loop invariant y <= x + 15000 - 51; loop invariant y <= x + 15000 - 52; loop invariant y <= x + 15000 - 53; loop invariant y <= x + 15000 - 54; loop invariant y <= x + 15000 - 55; loop invariant y <= x + 15000 - 56;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y; loop invariant x <= -15000; loop invariant x <= -15000 + y; loop invariant y <= x + 15000; loop invariant y <= x + 15000 - 1; loop invariant y <= x + 15000 - 2; loop invariant y <= x + 15000 - 3; loop invariant y <= x + 15000 - 4; loop invariant y <= x + 15000 - 5; loop invariant y <= x + 15000 - 6; loop invariant y <= x + 15000 - 7; loop invariant y <= x + 15000 - 8; loop invariant y <= x + 15000 - 9; loop invariant y <= x + 15000 - 10; loop invariant y <= x + 15000 - 11; loop invariant y <= x + 15000 - 12; loop invariant y <= x + 15000 - 13; loop invariant y <= x + 15000 - 14; loop invariant y <= x + 15000 - 15; loop invariant y <= x + 15000 - 16; loop invariant y <= x + 15000 - 17; loop invariant y <= x + 15000 - 18; loop invariant y <= x + 15000 - 19; loop invariant y <= x + 15000 - 20; loop invariant y <= x + 15000 - 21; loop invariant y <= x + 15000 - 22; loop invariant y <= x + 15000 - 23; loop invariant y <= x + 15000 - 24; loop invariant y <= x + 15000 - 25; loop invariant y <= x + 15000 - 26; loop invariant y <= x + 15000 - 27; loop invariant y <= x + 15000 - 28; loop invariant y <= x + 15000 - 29; loop invariant y <= x + 15000 - 30; loop invariant y <= x + 15000 - 31; loop invariant y <= x + 15000 - 32; loop invariant y <= x + 15000 - 33; loop invariant y <= x + 15000 - 34; loop invariant y <= x + 15000 - 35; loop invariant y <= x + 15000 - 36; loop invariant y <= x + 15000 - 37; loop invariant y <= x + 15000 - 38; loop invariant y <= x + 15000 - 39; loop invariant y <= x + 15000 - 40; loop invariant y <= x + 15000 - 41; loop invariant y <= x + 15000 - 42; loop invariant y <= x + 15000 - 43; loop invariant y <= x + 15000 - 44; loop invariant y <= x + 15000 - 45; loop invariant y <= x + 15000 - 46; loop invariant y <= x + 15000 - 47; loop invariant y <= x + 15000 - 48; loop invariant y <= x + 15000 - 49; loop invariant y <= x + 15000 - 50; loop invariant y <= x + 15000 - 51; loop invariant y <= x + 15000 - 52; loop invariant y <= x + 15000 - 53; loop invariant y <= x + 15000 - 54; loop invariant y <= x + 15000 - 55; loop invariant y <= x + 15000 - 56 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < 0; loop invariant y > 0; loop invariant x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x < 0; loop invariant y > 0; loop invariant x >= y is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -15000;\nloop invariant y > 0;\nloop invariant y >= 1;\nloop invariant y <= 100000;\nloop invariant x >= -15000 + y;\nloop invariant x >= y;\nloop invariant x >= -15000 + (y - 1) * y / 2;\nloop invariant x >= -15000 + y - 1;\nloop invariant x >= -15000 + y;\nloop invariant x >= -15000 + y + 1;\nloop invariant x >= -15000 + y + 2;\nloop invariant x >= -15000 + y + 3;\nloop invariant x >= -15000 + y + 4;\nloop invariant x >= -15000 + y + 5;\nloop invariant x >= -15000 + y + 6;\nloop invariant x >= -15000 + y + 7;\nloop invariant x >= -15000 + y + 8;\nloop invariant x >= -15000 + y + 9;\nloop invariant x >= -15000 + y + 10;\nloop invariant x >= -15000 + y + 11;\nloop invariant x >= -15000 + y + 12;\nloop invariant x >= -15000 + y + 13;\nloop invariant x >= -15000 + y + 14;\nloop invariant x >= -15000 + y + 15;\nloop invariant x >= -15000 + y + 16;\nloop invariant x >= -15000 + y + 17;\nloop invariant x >= -15000 + y + 18;\nloop invariant x >= -15000 + y + 19;\nloop invariant x >= -15000 + y + 20;\nloop invariant x >= -15000 + y + 21;\nloop invariant x >= -15000 + y + 22;\nloop invariant x >= -15000 + y + 23;\nloop invariant x >= -15000 + y + 24;\nloop invariant x >= -15000 + y + 25;\nloop invariant x >= -15000 + y + 26;\nloop invariant x >= -15000 + y + 27;\nloop invariant x >= -15000 + y + 28;\nloop invariant x >= -15000 + y + 29;\nloop invariant x >= -15000 + y + 30;\nloop invariant x >= -15000 + y + 31;\nloop invariant x >= -15000 + y + 32;\nloop invariant x >= -15000 + y + 33;\nloop invariant x >= -15000 + y + 34;\nloop invariant x >= -15000 + y + 35;\nloop invariant x >= -15000 + y + 36;\nloop invariant x >= -15000 + y + 37;\nloop invariant x >= -15000 + y + 38;\nloop invariant x >= -15000 + y + 39;\nloop invariant x >= -15000 + y + 40;\nloop invariant x >= -15000 + y + 41;\nloop invariant x >= -15000 + y + 42;\nloop invariant x >= -15000 + y + 43;\nloop invariant x >= -15000 + y + 44;\nloop invariant x >= -15000 + y + 45;\nloop invariant x >= -15000 + y + 46;\nloop invariant x >= -15000 + y + 47;\nloop invariant x >= -15000 + y + 48;\nloop invariant x >= -15000 + y + 49;\nloop invariant x >= -15000 + y + 50;\nloop invariant x >= -15000 + y + 51;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -15000 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x >= -15000 + y is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= -15000 + (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x >= -15000 + y - 1 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 1 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 2 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 3 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 4 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 5 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 6 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 7 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 8 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 9 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 10 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 11 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 12 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 13 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 14 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 15 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 16 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 17 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 18 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 19 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 20 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 21 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 22 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 23 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 24 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 25 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 26 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 27 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 28 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 29 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 30 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 31 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 32 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 33 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 34 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 35 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 36 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 37 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 38 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 39 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 40 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 41 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 42 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 43 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 44 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 45 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 46 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 47 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 48 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 49 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 50 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 51 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= -15000;\nloop invariant y >= 1;\nloop invariant y <= 15000;\nloop invariant x == (x + y) - y;\nloop invariant x + y == y + x;\nloop invariant x + y == x + y;\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= -15000 is preserved but not established.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 15000 is partially proven to be inductive.\nloop invariant x == (x + y) - y is partially proven to be inductive.\nloop invariant x + y == y + x is partially proven to be inductive.\nloop invariant x + y == x + y is partially proven to be inductive.\nloop invariant y > 0 ==> (x >= y) ==> (x >= y) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\nloop invariant i4: x == (x + y) - y;\nloop invariant i5: x + y == y + x;\nloop invariant i6: x + y == x + y;\nloop invariant i7: y > 0 ==> (x >= y) ==> (x >= y);\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant y > 0; (This is another implication, because it holds even after the loop termination) loop invariant x = (x + y) * y / 2; (This is a simplified version of the invariant) loop invariant x = (x + y) * y / 2 ==> y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 < y <= x;\nloop invariant x >= -15000;\nloop invariant y = x + 15000;\nloop invariant y > 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant x < 15000;\nloop invariant y = x + 15000;\nloop invariant y > 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant x < 15000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 31: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\nloop invariant i1: y <= 0;\nloop invariant i2: x <= -15000;\nloop invariant i3: y >= 0;\nloop invariant i4: y <= 100000;\nloop invariant i5: x >= -15000 + y;\nloop invariant i6: y > 0;\nloop invariant i7: x >= y;\nloop invariant i8: 0 <= y <= 25000;\nloop invariant i9: x >= (y * (y + 1) / 2) - 15000;\nloop invariant i10: x <= (y * (y - 1) / 2) - 15000;\nloop invariant i11: (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\nloop invariant i12: (y > 0) ==> (x >= (y * (y + 1) / 2) - 15000);\nloop invariant i13: 0 <= x < 0;\nloop invariant i14: x = 0;\nloop invariant i15: y = 1;\nloop invariant i16: x >= (y - 1) * y / 2;\nloop invariant i17: y >= 1;\nloop invariant i18: x < 0;\nloop invariant i19: x >= -15000;\nloop invariant i20: 0 <= y; loop invariant x <= -15000; loop invariant x <= -15000 + y; loop invariant y <= x + 15000; loop invariant y <= x + 15000 - 1; loop invariant y <= x + 15000 - 2; loop invariant y <= x + 15000 - 3; loop invariant y <= x + 15000 - 4; loop invariant y <= x + 15000 - 5; loop invariant y <= x + 15000 - 6; loop invariant y <= x + 15000 - 7; loop invariant y <= x + 15000 - 8; loop invariant y <= x + 15000 - 9; loop invariant y <= x + 15000 - 10; loop invariant y <= x + 15000 - 11; loop invariant y <= x + 15000 - 12; loop invariant y <= x + 15000 - 13; loop invariant y <= x + 15000 - 14; loop invariant y <= x + 15000 - 15; loop invariant y <= x + 15000 - 16; loop invariant y <= x + 15000 - 17; loop invariant y <= x + 15000 - 18; loop invariant y <= x + 15000 - 19; loop invariant y <= x + 15000 - 20; loop invariant y <= x + 15000 - 21; loop invariant y <= x + 15000 - 22; loop invariant y <= x + 15000 - 23; loop invariant y <= x + 15000 - 24; loop invariant y <= x + 15000 - 25; loop invariant y <= x + 15000 - 26; loop invariant y <= x + 15000 - 27; loop invariant y <= x + 15000 - 28; loop invariant y <= x + 15000 - 29; loop invariant y <= x + 15000 - 30; loop invariant y <= x + 15000 - 31; loop invariant y <= x + 15000 - 32; loop invariant y <= x + 15000 - 33; loop invariant y <= x + 15000 - 34; loop invariant y <= x + 15000 - 35; loop invariant y <= x + 15000 - 36; loop invariant y <= x + 15000 - 37; loop invariant y <= x + 15000 - 38; loop invariant y <= x + 15000 - 39; loop invariant y <= x + 15000 - 40; loop invariant y <= x + 15000 - 41; loop invariant y <= x + 15000 - 42; loop invariant y <= x + 15000 - 43; loop invariant y <= x + 15000 - 44; loop invariant y <= x + 15000 - 45; loop invariant y <= x + 15000 - 46; loop invariant y <= x + 15000 - 47; loop invariant y <= x + 15000 - 48; loop invariant y <= x + 15000 - 49; loop invariant y <= x + 15000 - 50; loop invariant y <= x + 15000 - 51; loop invariant y <= x + 15000 - 52; loop invariant y <= x + 15000 - 53; loop invariant y <= x + 15000 - 54; loop invariant y <= x + 15000 - 55; loop invariant y <= x + 15000 - 56;\nloop invariant i21: 0 <= x < 0; loop invariant y > 0; loop invariant x >= y;\nloop invariant i22: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i23: 0 <= y <= 100000;\nloop invariant i24: x >= (1 + (y - 1) * y / 2);\nloop invariant i25: x >= -15000 + (y - 1) * y / 2;\nloop invariant i26: x >= -15000 + y - 1;\nloop invariant i27: x >= -15000 + y + 1;\nloop invariant i28: x >= -15000 + y + 2;\nloop invariant i29: x >= -15000 + y + 3;\nloop invariant i30: x >= -15000 + y + 4;\nloop invariant i31: x >= -15000 + y + 5;\nloop invariant i32: x >= -15000 + y + 6;\nloop invariant i33: x >= -15000 + y + 7;\nloop invariant i34: x >= -15000 + y + 8;\nloop invariant i35: x >= -15000 + y + 9;\nloop invariant i36: x >= -15000 + y + 10;\nloop invariant i37: x >= -15000 + y + 11;\nloop invariant i38: x >= -15000 + y + 12;\nloop invariant i39: x >= -15000 + y + 13;\nloop invariant i40: x >= -15000 + y + 14;\nloop invariant i41: x >= -15000 + y + 15;\nloop invariant i42: x >= -15000 + y + 16;\nloop invariant i43: x >= -15000 + y + 17;\nloop invariant i44: x >= -15000 + y + 18;\nloop invariant i45: x >= -15000 + y + 19;\nloop invariant i46: x >= -15000 + y + 20;\nloop invariant i47: x >= -15000 + y + 21;\nloop invariant i48: x >= -15000 + y + 22;\nloop invariant i49: x >= -15000 + y + 23;\nloop invariant i50: x >= -15000 + y + 24;\nloop invariant i51: x >= -15000 + y + 25;\nloop invariant i52: x >= -15000 + y + 26;\nloop invariant i53: x >= -15000 + y + 27;\nloop invariant i54: x >= -15000 + y + 28;\nloop invariant i55: x >= -15000 + y + 29;\nloop invariant i56: x >= -15000 + y + 30;\nloop invariant i57: x >= -15000 + y + 31;\nloop invariant i58: x >= -15000 + y + 32;\nloop invariant i59: x >= -15000 + y + 33;\nloop invariant i60: x >= -15000 + y + 34;\nloop invariant i61: x >= -15000 + y + 35;\nloop invariant i62: x >= -15000 + y + 36;\nloop invariant i63: x >= -15000 + y + 37;\nloop invariant i64: x >= -15000 + y + 38;\nloop invariant i65: x >= -15000 + y + 39;\nloop invariant i66: x >= -15000 + y + 40;\nloop invariant i67: x >= -15000 + y + 41;\nloop invariant i68: x >= -15000 + y + 42;\nloop invariant i69: x >= -15000 + y + 43;\nloop invariant i70: x >= -15000 + y + 44;\nloop invariant i71: x >= -15000 + y + 45;\nloop invariant i72: x >= -15000 + y + 46;\nloop invariant i73: x >= -15000 + y + 47;\nloop invariant i74: x >= -15000 + y + 48;\nloop invariant i75: x >= -15000 + y + 49;\nloop invariant i76: x >= -15000 + y + 50;\nloop invariant i77: x >= -15000 + y + 51;\nloop invariant i78: 1 <= x <= -15000;\nloop invariant i79: y <= 15000;\nloop invariant i80: x == (x + y) - y;\nloop invariant i81: x + y == y + x;\nloop invariant i82: x + y == x + y;\nloop invariant i83: y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant i84: y > 0; (This is another implication, because it holds even after the loop termination) loop invariant x = (x + y) * y / 2; (This is a simplified version of the invariant) loop invariant x = (x + y) * y / 2 ==> y > 0;\nloop invariant i85: 0 < y <= x;\nloop invariant i86: y = x + 15000;\nloop invariant i87: y <= x;\nloop invariant i88: x >= 0;\nloop invariant i89: x < 15000;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 22,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x <= (y * (y - 1) / 2) - 15000;\nloop invariant i11: (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i80: x == (x + y) - y;\nloop invariant i81: x + y == y + x;\nloop invariant i82: x + y == x + y;\nloop invariant i83: y > 0 ==> (x >= y) ==> (x >= y);\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y <= 50;\nloop invariant 0 <= z <= 400;\nloop invariant x == 100 ==> z == 400 && y == 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= z <= 400;\nloop invariant x >= y;\nloop invariant y >= z;\nloop invariant x >= z;\n*/\n```",
                "```\n/*@\nloop invariant y >= (2 * x - 50);\nloop invariant y <= (2 * x - 25);\nloop invariant z >= (5 * x + 4 * x - 25);\nloop invariant z <= (5 * x + 4 * x + 100);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y == x - 50 + 1;\nloop invariant z == 4 * (x - 25) + 1;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x >= 0;\nloop invariant x <= 100;\n*/\n```",
                "```\n/*@\nloop invariant x <= 100;\nloop invariant y >= -49;\nloop invariant y <= 50;\nloop invariant z >= -50;\nloop invariant z <= 400;\nloop invariant (x <= 50 ==> y == x+1);\nloop invariant (x > 50 ==> y == x-1);\nloop invariant (x < 25 ==> z == x+1);\nloop invariant (x >= 25 ==> z == x+5);\nloop invariant (x == 100 ==> y == 2);\nloop invariant (x == 100 ==> z == 400);\n*/\n```",
                "```\n/*@\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( 0 <= z ) && ( z <= 400 ) );\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( ( ( x < 25 ) && ( z == ( x * x / 2 + x ) ) ) || ( ( !( x < 25 ) ) && ( z == ( 12 + ( 5 * ( x - 25 ) ) ) ) ) ) && ( ( ( x <= 50 ) && ( y == ( 1 + x ) ) ) || ( ( !( x <= 50 ) ) && ( y == ( - 1 + x ) ) ) ) );\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 100 ==> y >= -1;\nloop invariant x <= 100 ==> y <= 1;\nloop invariant x <= 25 ==> z >= 1;\nloop invariant x <= 25 ==> z <= 5;\nloop invariant x >= 25 ==> z >= 5;\nloop invariant x >= 25 ==> z <= 405;\nloop invariant x >= 50 ==> y >= 0;\nloop invariant x >= 50 ==> y <= 1;\nloop invariant x >= 50 ==> z >= 5;\nloop invariant x >= 50 ==> z <= 405;\nloop invariant x >= 100 ==> z == 400;\nloop invariant x >= 100 ==> y == 2;\nloop invariant x >= 100 ==> x == 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -49 <= y <= 50;\nloop invariant 0 <= z <= 450;\nloop invariant x <= 50 ==> y == x + 1;\nloop invariant x > 50 ==> y == 2 * (50 - x) + 1;\nloop invariant x < 25 ==> z == x + 24;\nloop invariant x >= 25 ==> z == 5 * (x - 25) + 125;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 500;\nloop invariant y <= 2;\nloop invariant z >= x;\nloop invariant z <= (x + 5);\nloop invariant y >= (x - 1);\nloop invariant y <= (x + 1);\nloop invariant (x <= 50 ==> y == (x + 1));\nloop invariant (x > 50 ==> y == (x - 1));\nloop invariant (x < 25 ==> z == (x + 1));\nloop invariant (x >= 25 ==> z == (x + 5));\nloop invariant (x == 0 ==> y == 2);\nloop invariant (x == 0 ==> z == 0);\nloop invariant (x == 100 ==> y == 2);\nloop invariant (x == 100 ==> z == 400);\nloop invariant (x == 100 ==> (y == 2 ==> z == 400));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -100 <= y <= 100;\nloop invariant 0 <= z <= 500;\n*/\n```",
                "```\n/*@\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x == 100;\nloop invariant y == 2;\nloop invariant z == 400;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= z <= 500;\nloop invariant x <= y + 1;\nloop invariant (x < 25) ==> (z = x * 4);\nloop invariant (x >= 25) ==> (z = x * 5);\nloop invariant (x < 50) ==> (y = x);\nloop invariant (x >= 50) ==> (y = x - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant 0 <= z <= 400;\nloop invariant x < 100 ==> (y == 2);\nloop invariant x == 100 ==> (y == 2);\nloop invariant x < 100 ==> (z == 400);\nloop invariant x == 100 ==> (z == 400);\nloop invariant x < 25 ==> (z == 400);\nloop invariant 25 <= x < 50 ==> (z == 400);\nloop invariant 50 <= x < 75 ==> (z == 400);\nloop invariant 75 <= x < 100 ==> (z == 400);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 200;\nloop invariant if x <= 50 then y == 1 else y == -1;\nloop invariant if x < 25 then z == 1 else z == 5;\nloop invariant x == y + z;\nloop invariant x == 100;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y <= 50;\nloop invariant 0 <= z <= 400;\nloop invariant x == 100 ==> z == 400 && y == 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x < 100 is established but not preserved.\nloop invariant 0 <= y <= 50 is established but not preserved.\nloop invariant 0 <= z <= 400 is established but not preserved.\nloop invariant x == 100 ==> z == 400 && y == 2 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= z <= 400;\nloop invariant x >= y;\nloop invariant y >= z;\nloop invariant x >= z;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant -1 <= y <= 1 is established but not preserved.\nloop invariant 0 <= z <= 400 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y >= z is established but not preserved.\nloop invariant x >= z is partially proven to be inductive.\nAssertion z == 400: Unproven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: x >= y;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant y >= (2 * x - 50);\nloop invariant y <= (2 * x - 25);\nloop invariant z >= (5 * x + 4 * x - 25);\nloop invariant z <= (5 * x + 4 * x + 100);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y >= (2 * x - 50) is partially proven to be inductive.\nloop invariant y <= (2 * x - 25) is preserved but not established.\nloop invariant z >= (5 * x + 4 * x - 25) is partially proven to be inductive.\nloop invariant z <= (5 * x + 4 * x + 100) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n\nloop invariant i4: z <= (5 * x + 4 * x + 100);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y == x - 50 + 1;\nloop invariant z == 4 * (x - 25) + 1;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x >= 0;\nloop invariant x <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant y == x - 50 + 1 is preserved but not established.\nloop invariant z == 4 * (x - 25) + 1 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 400 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\nloop invariant i6: z >= 0;\n\nloop invariant i8: x >= 0;\nloop invariant i9: x <= 100;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant x <= 100;\nloop invariant y >= -49;\nloop invariant y <= 50;\nloop invariant z >= -50;\nloop invariant z <= 400;\nloop invariant (x <= 50 ==> y == x+1);\nloop invariant (x > 50 ==> y == x-1);\nloop invariant (x < 25 ==> z == x+1);\nloop invariant (x >= 25 ==> z == x+5);\nloop invariant (x == 100 ==> y == 2);\nloop invariant (x == 100 ==> z == 400);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x <= 100 is partially proven to be inductive.\nloop invariant y >= -49 is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nloop invariant z >= -50 is partially proven to be inductive.\nloop invariant z <= 400 is partially proven to be inductive.\nloop invariant (x <= 50 ==> y == x+1) is preserved but not established.\nloop invariant (x > 50 ==> y == x-1) is partially proven to be inductive.\nloop invariant (x < 25 ==> z == x+1) is partially proven to be inductive.\nloop invariant (x >= 25 ==> z == x+5) is partially proven to be inductive.\nloop invariant (x == 100 ==> y == 2) is partially proven to be inductive.\nloop invariant (x == 100 ==> z == 400) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: x <= 100;\n\n\nloop invariant i4: z >= -50;\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( 0 <= z ) && ( z <= 400 ) );\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( ( ( x < 25 ) && ( z == ( x * x / 2 + x ) ) ) || ( ( !( x < 25 ) ) && ( z == ( 12 + ( 5 * ( x - 25 ) ) ) ) ) ) && ( ( ( x <= 50 ) && ( y == ( 1 + x ) ) ) || ( ( !( x <= 50 ) ) && ( y == ( - 1 + x ) ) ) ) );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( 0 <= z ) && ( z <= 400 ) ) is partially proven to be inductive.\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( ( ( x < 25 ) && ( z == ( x * x / 2 + x ) ) ) || ( ( !( x < 25 ) ) && ( z == ( 12 + ( 5 * ( x - 25 ) ) ) ) ) ) && ( ( ( x <= 50 ) && ( y == ( 1 + x ) ) ) || ( ( !( x <= 50 ) ) && ( y == ( - 1 + x ) ) ) ) ) is preserved but not established.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 11: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 100 ==> y >= -1;\nloop invariant x <= 100 ==> y <= 1;\nloop invariant x <= 25 ==> z >= 1;\nloop invariant x <= 25 ==> z <= 5;\nloop invariant x >= 25 ==> z >= 5;\nloop invariant x >= 25 ==> z <= 405;\nloop invariant x >= 50 ==> y >= 0;\nloop invariant x >= 50 ==> y <= 1;\nloop invariant x >= 50 ==> z >= 5;\nloop invariant x >= 50 ==> z <= 405;\nloop invariant x >= 100 ==> z == 400;\nloop invariant x >= 100 ==> y == 2;\nloop invariant x >= 100 ==> x == 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant x <= 100 ==> y >= -1 is partially proven to be inductive.\nloop invariant x <= 100 ==> y <= 1 is partially proven to be inductive.\nloop invariant x <= 25 ==> z >= 1 is preserved but not established.\nloop invariant x <= 25 ==> z <= 5 is partially proven to be inductive.\nloop invariant x >= 25 ==> z >= 5 is partially proven to be inductive.\nloop invariant x >= 25 ==> z <= 405 is partially proven to be inductive.\nloop invariant x >= 50 ==> y >= 0 is partially proven to be inductive.\nloop invariant x >= 50 ==> y <= 1 is partially proven to be inductive.\nloop invariant x >= 50 ==> z >= 5 is partially proven to be inductive.\nloop invariant x >= 50 ==> z <= 405 is partially proven to be inductive.\nloop invariant x >= 100 ==> z == 400 is partially proven to be inductive.\nloop invariant x >= 100 ==> y == 2 is partially proven to be inductive.\nloop invariant x >= 100 ==> x == 100 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: z >= 0;\n\n\n\n\n\n\n\n\nloop invariant i12: x >= 50 ==> z >= 5;\n\n\n\nloop invariant i16: x >= 100 ==> x == 100;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -49 <= y <= 50;\nloop invariant 0 <= z <= 450;\nloop invariant x <= 50 ==> y == x + 1;\nloop invariant x > 50 ==> y == 2 * (50 - x) + 1;\nloop invariant x < 25 ==> z == x + 24;\nloop invariant x >= 25 ==> z == 5 * (x - 25) + 125;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant -49 <= y <= 50 is partially proven to be inductive.\nloop invariant 0 <= z <= 450 is partially proven to be inductive.\nloop invariant x <= 50 ==> y == x + 1 is preserved but not established.\nloop invariant x > 50 ==> y == 2 * (50 - x) + 1 is partially proven to be inductive.\nloop invariant x < 25 ==> z == x + 24 is partially proven to be inductive.\nloop invariant x >= 25 ==> z == 5 * (x - 25) + 125 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 500;\nloop invariant y <= 2;\nloop invariant z >= x;\nloop invariant z <= (x + 5);\nloop invariant y >= (x - 1);\nloop invariant y <= (x + 1);\nloop invariant (x <= 50 ==> y == (x + 1));\nloop invariant (x > 50 ==> y == (x - 1));\nloop invariant (x < 25 ==> z == (x + 1));\nloop invariant (x >= 25 ==> z == (x + 5));\nloop invariant (x == 0 ==> y == 2);\nloop invariant (x == 0 ==> z == 0);\nloop invariant (x == 100 ==> y == 2);\nloop invariant (x == 100 ==> z == 400);\nloop invariant (x == 100 ==> (y == 2 ==> z == 400));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 500 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant z >= x is partially proven to be inductive.\nloop invariant z <= (x + 5) is partially proven to be inductive.\nloop invariant y >= (x - 1) is partially proven to be inductive.\nloop invariant y <= (x + 1) is partially proven to be inductive.\nloop invariant (x <= 50 ==> y == (x + 1)) is preserved but not established.\nloop invariant (x > 50 ==> y == (x - 1)) is partially proven to be inductive.\nloop invariant (x < 25 ==> z == (x + 1)) is partially proven to be inductive.\nloop invariant (x >= 25 ==> z == (x + 5)) is partially proven to be inductive.\nloop invariant (x == 0 ==> y == 2) is partially proven to be inductive.\nloop invariant (x == 0 ==> z == 0) is partially proven to be inductive.\nloop invariant (x == 100 ==> y == 2) is partially proven to be inductive.\nloop invariant (x == 100 ==> z == 400) is partially proven to be inductive.\nloop invariant (x == 100 ==> (y == 2 ==> z == 400)) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: z >= 0;\n\n\nloop invariant i6: z >= x;\n\n\nloop invariant i9: y <= (x + 1);\n\n\n\n\n\nloop invariant i15: (x == 0 ==> z == 0);\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -100 <= y <= 100;\nloop invariant 0 <= z <= 500;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant -100 <= y <= 100 is established but not preserved.\nloop invariant 0 <= z <= 500 is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x == 100;\nloop invariant y == 2;\nloop invariant z == 400;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x == 0 is partially proven to be inductive.\nloop invariant y == 0 is partially proven to be inductive.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y >= -50 is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 400 is partially proven to be inductive.\nloop invariant x == 100 is preserved but not established.\nloop invariant y == 2 is partially proven to be inductive.\nloop invariant z == 400 is partially proven to be inductive.\nloop invariant x == 100 ==> y == 2 is partially proven to be inductive.\nloop invariant x == 100 ==> z == 400 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: x <= 100;\n\n\nloop invariant i8: z >= 0;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= z <= 500;\nloop invariant x <= y + 1;\nloop invariant (x < 25) ==> (z = x * 4);\nloop invariant (x >= 25) ==> (z = x * 5);\nloop invariant (x < 50) ==> (y = x);\nloop invariant (x >= 50) ==> (y = x - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant 0 <= z <= 400;\nloop invariant x < 100 ==> (y == 2);\nloop invariant x == 100 ==> (y == 2);\nloop invariant x < 100 ==> (z == 400);\nloop invariant x == 100 ==> (z == 400);\nloop invariant x < 25 ==> (z == 400);\nloop invariant 25 <= x < 50 ==> (z == 400);\nloop invariant 50 <= x < 75 ==> (z == 400);\nloop invariant 75 <= x < 100 ==> (z == 400);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant 0 <= z <= 400 is partially proven to be inductive.\nloop invariant x < 100 ==> (y == 2) is preserved but not established.\nloop invariant x == 100 ==> (y == 2) is partially proven to be inductive.\nloop invariant x < 100 ==> (z == 400) is partially proven to be inductive.\nloop invariant x == 100 ==> (z == 400) is partially proven to be inductive.\nloop invariant x < 25 ==> (z == 400) is partially proven to be inductive.\nloop invariant 25 <= x < 50 ==> (z == 400) is partially proven to be inductive.\nloop invariant 50 <= x < 75 ==> (z == 400) is partially proven to be inductive.\nloop invariant 75 <= x < 100 ==> (z == 400) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 200;\nloop invariant if x <= 50 then y == 1 else y == -1;\nloop invariant if x < 25 then z == 1 else z == 5;\nloop invariant x == y + z;\nloop invariant x == 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'x'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 86: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x < 100;\nloop invariant i2: 0 <= y <= 50;\nloop invariant i3: 0 <= z <= 400;\nloop invariant i4: x == 100 ==> z == 400 && y == 2;\nloop invariant i5: 0 <= x <= 100;\nloop invariant i6: -1 <= y <= 1;\nloop invariant i7: x >= y;\nloop invariant i8: y >= z;\nloop invariant i9: x >= z;\nloop invariant i10: y >= (2 * x - 50);\nloop invariant i11: y <= (2 * x - 25);\nloop invariant i12: z >= (5 * x + 4 * x - 25);\nloop invariant i13: z <= (5 * x + 4 * x + 100);\nloop invariant i14: y == x - 50 + 1;\nloop invariant i15: z == 4 * (x - 25) + 1;\nloop invariant i16: y >= 0;\nloop invariant i17: y <= 2;\nloop invariant i18: z >= 0;\nloop invariant i19: z <= 400;\nloop invariant i20: x >= 0;\nloop invariant i21: x <= 100;\nloop invariant i22: y >= -49;\nloop invariant i23: y <= 50;\nloop invariant i24: z >= -50;\nloop invariant i25: (x <= 50 ==> y == x+1);\nloop invariant i26: (x > 50 ==> y == x-1);\nloop invariant i27: (x < 25 ==> z == x+1);\nloop invariant i28: (x >= 25 ==> z == x+5);\nloop invariant i29: (x == 100 ==> y == 2);\nloop invariant i30: (x == 100 ==> z == 400);\nloop invariant i31: ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( 0 <= z ) && ( z <= 400 ) );\nloop invariant i32: ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( ( ( x < 25 ) && ( z == ( x * x / 2 + x ) ) ) || ( ( !( x < 25 ) ) && ( z == ( 12 + ( 5 * ( x - 25 ) ) ) ) ) ) && ( ( ( x <= 50 ) && ( y == ( 1 + x ) ) ) || ( ( !( x <= 50 ) ) && ( y == ( - 1 + x ) ) ) ) );\nloop invariant i33: x <= 100 ==> y >= -1;\nloop invariant i34: x <= 100 ==> y <= 1;\nloop invariant i35: x <= 25 ==> z >= 1;\nloop invariant i36: x <= 25 ==> z <= 5;\nloop invariant i37: x >= 25 ==> z >= 5;\nloop invariant i38: x >= 25 ==> z <= 405;\nloop invariant i39: x >= 50 ==> y >= 0;\nloop invariant i40: x >= 50 ==> y <= 1;\nloop invariant i41: x >= 50 ==> z >= 5;\nloop invariant i42: x >= 50 ==> z <= 405;\nloop invariant i43: x >= 100 ==> z == 400;\nloop invariant i44: x >= 100 ==> y == 2;\nloop invariant i45: x >= 100 ==> x == 100;\nloop invariant i46: -49 <= y <= 50;\nloop invariant i47: 0 <= z <= 450;\nloop invariant i48: x <= 50 ==> y == x + 1;\nloop invariant i49: x > 50 ==> y == 2 * (50 - x) + 1;\nloop invariant i50: x < 25 ==> z == x + 24;\nloop invariant i51: x >= 25 ==> z == 5 * (x - 25) + 125;\nloop invariant i52: z <= 500;\nloop invariant i53: z >= x;\nloop invariant i54: z <= (x + 5);\nloop invariant i55: y >= (x - 1);\nloop invariant i56: y <= (x + 1);\nloop invariant i57: (x <= 50 ==> y == (x + 1));\nloop invariant i58: (x > 50 ==> y == (x - 1));\nloop invariant i59: (x < 25 ==> z == (x + 1));\nloop invariant i60: (x >= 25 ==> z == (x + 5));\nloop invariant i61: (x == 0 ==> y == 2);\nloop invariant i62: (x == 0 ==> z == 0);\nloop invariant i63: (x == 100 ==> (y == 2 ==> z == 400));\nloop invariant i64: -100 <= y <= 100;\nloop invariant i65: 0 <= z <= 500;\nloop invariant i66: x == 0;\nloop invariant i67: y == 0;\nloop invariant i68: z == 0;\nloop invariant i69: y >= -50;\nloop invariant i70: x == 100;\nloop invariant i71: y == 2;\nloop invariant i72: z == 400;\nloop invariant i73: x == 100 ==> y == 2;\nloop invariant i74: x == 100 ==> z == 400;\nloop invariant i75: x <= y + 1;\nloop invariant i76: (x < 25) ==> (z = x * 4);\nloop invariant i77: (x >= 25) ==> (z = x * 5);\nloop invariant i78: (x < 50) ==> (y = x);\nloop invariant i79: (x >= 50) ==> (y = x - 1);\nloop invariant i80: 0 <= y <= 100;\nloop invariant i81: x < 100 ==> (y == 2);\nloop invariant i82: x == 100 ==> (y == 2);\nloop invariant i83: x < 100 ==> (z == 400);\nloop invariant i84: x == 100 ==> (z == 400);\nloop invariant i85: x < 25 ==> (z == 400);\nloop invariant i86: 25 <= x < 50 ==> (z == 400);\nloop invariant i87: 50 <= x < 75 ==> (z == 400);\nloop invariant i88: 75 <= x < 100 ==> (z == 400);\nloop invariant i89: 0 <= y <= 2;\nloop invariant i90: 0 <= z <= 200;\nloop invariant i91: if x <= 50 then y == 1 else y == -1;\nloop invariant i92: if x < 25 then z == 1 else z == 5;\nloop invariant i93: x == y + z;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
            "combined_annotation_num_solver_calls": 56,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n\n\nloop invariant i5: 0 <= x <= 100;\n\nloop invariant i7: x >= y;\n\n\n\n\n\nloop invariant i13: z <= (5 * x + 4 * x + 100);\n\n\n\n\nloop invariant i18: z >= 0;\n\nloop invariant i20: x >= 0;\nloop invariant i21: x <= 100;\n\n\nloop invariant i24: z >= -50;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: x >= 25 ==> z >= 5;\n\n\n\nloop invariant i41: x >= 50 ==> z >= 5;\n\n\n\nloop invariant i45: x >= 100 ==> x == 100;\n\n\n\n\n\n\n\nloop invariant i53: z >= x;\n\n\nloop invariant i56: y <= (x + 1);\n\n\n\n\n\nloop invariant i62: (x == 0 ==> z == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  while(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= y + 1;\nloop invariant 1 <= y <= 100000;\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y+1;\nloop invariant a >= 1;\nloop invariant a <= 2;\nloop invariant a%2 == 1;\nloop invariant a%2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant flag == 0;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant flag == 0 ==> (0 < a && a < 3);\nloop invariant flag == 1 ==> (0 <= a && a <= 3);\n*/\n```",
                "```\n/*@\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant a >= 0;\nloop invariant x + y <= a;\nloop invariant x <= y + 1;\nloop invariant y <= x + 1;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= 2;\nloop invariant (x >= 1) ==> (y >= 1);\nloop invariant (x >= 1) ==> (x <= 2);\nloop invariant (y >= 1) ==> (y <= 2);\nloop invariant (a%2 == 1) ==> (a == 1);\nloop invariant (a%2 == 0) ==> (a == 0);\nloop invariant (x >= 1) ==> (a <= 2);\nloop invariant (y >= 1) ==> (a <= 2);\nloop invariant (x >= 1) ==> (a >= 0);\nloop invariant (y >= 1) ==> (a >= 0);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant a <= 100000;\nloop invariant a%2 == 0 ==> x == y;\nloop invariant a%2 == 1 ==> x == y+1;\nloop invariant a%2 == 0 ==> y == x;\nloop invariant a%2 == 1 ==> y == x+1;\nloop invariant a%2 == 0 ==> a == x + y;\nloop invariant a%2 == 1 ==> a == x + y + 1;\nloop invariant a%2 == 0 ==> x >= 1;\nloop invariant a%2 == 1 ==> x >= 0;\nloop invariant a%2 == 0 ==> y >= 1;\nloop invariant a%2 == 1 ==> y >= 0;\nloop invariant a%2 == 0 ==> a >= y;\nloop invariant a%2 == 1 ==> a >= x;\nloop invariant a%2 == 0 ==> x <= a;\nloop invariant a%2 == 1 ==> y <= a;\nloop invariant a%2 == 0 ==> y <= a - 1;\nloop invariant a%2 == 1 ==> x <= a - 1;\nloop invariant a%2 == 0 ==> a <= x + y;\nloop invariant a%2 == 1 ==> a <= x + y + 1;\nloop invariant a%2 == 0 ==> x + y <= a;\nloop invariant a%2 == 1 ==> x + y + 1 <= a;\nloop invariant a%2 == 0 ==> x + y <= a - 1;\nloop invariant a%2 == 1 ==> x + y + 1 <= a - 1;\nloop invariant a%2 == 0 ==> x + y - 1 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 2;\nloop invariant a%2 == 0 ==> x + y - 2 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 3;\nloop invariant a%2 == 0 ==> x + y - 3 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 4;\nloop invariant a%2 == 0 ==> x + y - 4 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 5;\nloop invariant a%2 == 0 ==> x + y - 5 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 6;\nloop invariant a%2 == 0 ==> x + y - 6 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 7;\nloop invariant a%2 == 0 ==> x + y - 7 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 8;\nloop invariant a%2 == 0 ==> x + y - 8 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 9;\nloop invariant a%2 == 0 ==> x + y - 9 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 10;\nloop invariant a%2 == 0 ==> x + y - 10 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 11;\nloop invariant a%2 == 0 ==> x + y - 11 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 12;\nloop invariant a%2 == 0 ==> x + y - 12 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 13;\nloop invariant a%2 == 0 ==> x + y - 13 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 14;\nloop invariant a%2 == 0 ==> x + y - 14 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 15;\nloop invariant a%2 == 0 ==> x + y - 15 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 16;\nloop invariant a%2 == 0 ==> x + y - 16 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 17;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant a%2 == 1 ==> a >= 1;\nloop invariant a%2 == 0 ==> a >= 2;\nloop invariant a%2 == 1 ==> a <= 3;\nloop invariant a%2 == 0 ==> a <= 4;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant a <= 100000;\nloop invariant a%2==1 ==> a < 100000;\nloop invariant a%2==1 ==> a >= 1;\nloop invariant a%2==1 ==> a >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> a >= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= y;\nloop invariant a%2==1 ==> x <= 100000;\nloop invariant a%2==1 ==> y <= 100000;\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y >= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a = x + y;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant a >= 3;\nloop invariant a <= 4;\nloop invariant flag ==> a == 1;\nloop invariant !flag ==> a == 0;\nloop invariant flag ==> y == x;\nloop invariant !flag ==> y == x + 1;\nloop invariant flag ==> x >= 1;\nloop invariant flag ==> x <= 2;\nloop invariant !flag ==> x >= 1;\nloop invariant !flag ==> x <= 2;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a == 2 * x + y;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant a >= 3;\nloop invariant a <= 4;\nloop invariant flag ==> a == 1;\nloop invariant !flag ==> a == 0;\nloop invariant flag ==> y == x;\nloop invariant !flag ==> y == x + 1;\nloop invariant flag ==> x >= 1;\nloop invariant flag ==> x <= 2;\nloop invariant !flag ==> x >= 1;\nloop invariant !flag ==> x <= 2;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a == 2 * x + y;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= (a + 1);\nloop invariant 1 <= y <= (a + 1);\nloop invariant a%2==1 ==> (x == 1 && y == 1);\nloop invariant a%2==0 ==> (x == 2 && y == 1);\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x <= a;\nloop invariant y <= a;\nloop invariant a%2==1 ==> (y == (a + 1));\nloop invariant a%2==0 ==> (x == (a + 1));\nloop invariant a%2==1 ==> (x == 1);\nloop invariant a%2==0 ==> (y == 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x+y <= a <= x+y+1;\nloop invariant a%2 == 0 or a%2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant a >= x+y;\nloop invariant a >= x+y+1;\nloop invariant a%2==1 ==> y%2==1;\nloop invariant a%2==0 ==> x%2==0;\nloop invariant (flag ==> a%2==1) || (!flag ==> a%2==0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant (x + y) >= a;\nloop invariant a % 2 == 1 ==> a >= 2;\nloop invariant flag == 1 ==> x == y;\nloop invariant flag == 0 ==> x >= y;\nloop invariant a % 2 == 0 ==> a >= 2;\nloop invariant flag == 1 ==> a == x + y + 1;\nloop invariant flag == 0 ==> a == x + y + 2;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a == 2 * x + y + 2;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a >= 3;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a >= 3;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is established but not preserved.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= y + 1;\nloop invariant 1 <= y <= 100000;\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= y + 1 is partially proven to be inductive.\nloop invariant 1 <= y <= 100000 is established but not preserved.\nloop invariant (flag ? x == y + 1 : x == y) is neither established nor preserved.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y+1;\nloop invariant a >= 1;\nloop invariant a <= 2;\nloop invariant a%2 == 1;\nloop invariant a%2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x <= y+1 is partially proven to be inductive.\nloop invariant a >= 1 is preserved but not established.\nloop invariant a <= 2 is partially proven to be inductive.\nloop invariant a%2 == 1 is partially proven to be inductive.\nloop invariant a%2 == 0 is preserved but not established.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\nloop invariant i3: x >= 1;\nloop invariant i4: y >= 1;\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant flag == 0;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant flag == 0 ==> (0 < a && a < 3);\nloop invariant flag == 1 ==> (0 <= a && a <= 3);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant flag == 0 is preserved but not established.\nloop invariant 1 <= x <= 2 is established but not preserved.\nloop invariant 1 <= y <= 2 is established but not preserved.\nloop invariant flag == 0 ==> (0 < a && a < 3) is partially proven to be inductive.\nloop invariant flag == 1 ==> (0 <= a && a <= 3) is partially proven to be inductive.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant a >= 0;\nloop invariant x + y <= a;\nloop invariant x <= y + 1;\nloop invariant y <= x + 1;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant x + y <= a is preserved but not established.\nloop invariant x <= y + 1 is partially proven to be inductive.\nloop invariant y <= x + 1 is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: a >= 0;\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= 2;\nloop invariant (x >= 1) ==> (y >= 1);\nloop invariant (x >= 1) ==> (x <= 2);\nloop invariant (y >= 1) ==> (y <= 2);\nloop invariant (a%2 == 1) ==> (a == 1);\nloop invariant (a%2 == 0) ==> (a == 0);\nloop invariant (x >= 1) ==> (a <= 2);\nloop invariant (y >= 1) ==> (a <= 2);\nloop invariant (x >= 1) ==> (a >= 0);\nloop invariant (y >= 1) ==> (a >= 0);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a <= 2 is partially proven to be inductive.\nloop invariant (x >= 1) ==> (y >= 1) is partially proven to be inductive.\nloop invariant (x >= 1) ==> (x <= 2) is partially proven to be inductive.\nloop invariant (y >= 1) ==> (y <= 2) is partially proven to be inductive.\nloop invariant (a%2 == 1) ==> (a == 1) is partially proven to be inductive.\nloop invariant (a%2 == 0) ==> (a == 0) is partially proven to be inductive.\nloop invariant (x >= 1) ==> (a <= 2) is partially proven to be inductive.\nloop invariant (y >= 1) ==> (a <= 2) is partially proven to be inductive.\nloop invariant (x >= 1) ==> (a >= 0) is partially proven to be inductive.\nloop invariant (y >= 1) ==> (a >= 0) is partially proven to be inductive.\nloop invariant (flag ==> a == 1) is preserved but not established.\nloop invariant (!flag ==> a == 0) is preserved but not established.\nloop invariant (flag ==> y == 1) is partially proven to be inductive.\nloop invariant (!flag ==> y == 2) is partially proven to be inductive.\nloop invariant (flag ==> x == 1) is partially proven to be inductive.\nloop invariant (!flag ==> x == 2) is partially proven to be inductive.\nloop invariant (flag ==> x >= y) is partially proven to be inductive.\nloop invariant (!flag ==> y >= x) is partially proven to be inductive.\nloop invariant (flag ==> y < 2) is partially proven to be inductive.\nloop invariant (!flag ==> x < 2) is partially proven to be inductive.\nloop invariant (flag ==> y > x) is partially proven to be inductive.\nloop invariant (!flag ==> x > y) is partially proven to be inductive.\nloop invariant (flag ==> a < 2) is partially proven to be inductive.\nloop invariant (!flag ==> a > 0) is partially proven to be inductive.\nloop invariant (flag ==> a > 0) is partially proven to be inductive.\nloop invariant (!flag ==> a < 2) is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: (flag ==> x >= y);\nloop invariant i18: (!flag ==> y >= x);\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 26,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant a <= 100000;\nloop invariant a%2 == 0 ==> x == y;\nloop invariant a%2 == 1 ==> x == y+1;\nloop invariant a%2 == 0 ==> y == x;\nloop invariant a%2 == 1 ==> y == x+1;\nloop invariant a%2 == 0 ==> a == x + y;\nloop invariant a%2 == 1 ==> a == x + y + 1;\nloop invariant a%2 == 0 ==> x >= 1;\nloop invariant a%2 == 1 ==> x >= 0;\nloop invariant a%2 == 0 ==> y >= 1;\nloop invariant a%2 == 1 ==> y >= 0;\nloop invariant a%2 == 0 ==> a >= y;\nloop invariant a%2 == 1 ==> a >= x;\nloop invariant a%2 == 0 ==> x <= a;\nloop invariant a%2 == 1 ==> y <= a;\nloop invariant a%2 == 0 ==> y <= a - 1;\nloop invariant a%2 == 1 ==> x <= a - 1;\nloop invariant a%2 == 0 ==> a <= x + y;\nloop invariant a%2 == 1 ==> a <= x + y + 1;\nloop invariant a%2 == 0 ==> x + y <= a;\nloop invariant a%2 == 1 ==> x + y + 1 <= a;\nloop invariant a%2 == 0 ==> x + y <= a - 1;\nloop invariant a%2 == 1 ==> x + y + 1 <= a - 1;\nloop invariant a%2 == 0 ==> x + y - 1 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 2;\nloop invariant a%2 == 0 ==> x + y - 2 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 3;\nloop invariant a%2 == 0 ==> x + y - 3 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 4;\nloop invariant a%2 == 0 ==> x + y - 4 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 5;\nloop invariant a%2 == 0 ==> x + y - 5 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 6;\nloop invariant a%2 == 0 ==> x + y - 6 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 7;\nloop invariant a%2 == 0 ==> x + y - 7 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 8;\nloop invariant a%2 == 0 ==> x + y - 8 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 9;\nloop invariant a%2 == 0 ==> x + y - 9 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 10;\nloop invariant a%2 == 0 ==> x + y - 10 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 11;\nloop invariant a%2 == 0 ==> x + y - 11 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 12;\nloop invariant a%2 == 0 ==> x + y - 12 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 13;\nloop invariant a%2 == 0 ==> x + y - 13 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 14;\nloop invariant a%2 == 0 ==> x + y - 14 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 15;\nloop invariant a%2 == 0 ==> x + y - 15 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 16;\nloop invariant a%2 == 0 ==> x + y - 16 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 17;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= 100000 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x == y is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x == y+1 is preserved but not established.\nloop invariant a%2 == 0 ==> y == x is partially proven to be inductive.\nloop invariant a%2 == 1 ==> y == x+1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a == x + y is preserved but not established.\nloop invariant a%2 == 1 ==> a == x + y + 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x >= 1 is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x >= 0 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> y >= 1 is partially proven to be inductive.\nloop invariant a%2 == 1 ==> y >= 0 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a >= y is partially proven to be inductive.\nloop invariant a%2 == 1 ==> a >= x is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> y <= a is partially proven to be inductive.\nloop invariant a%2 == 0 ==> y <= a - 1 is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x <= a - 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a <= x + y is partially proven to be inductive.\nloop invariant a%2 == 1 ==> a <= x + y + 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y + 1 <= a is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y <= a - 1 is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y + 1 <= a - 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 1 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 2 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 2 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 3 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 3 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 4 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 4 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 5 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 5 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 6 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 6 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 7 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 7 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 8 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 8 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 9 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 9 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 10 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 10 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 11 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 11 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 12 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 12 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 13 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 13 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 14 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 14 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 15 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 15 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 16 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 16 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 17 is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\nloop invariant i4: a >= 0;\n\n\n\n\n\n\n\nloop invariant i12: a%2 == 0 ==> x >= 1;\nloop invariant i13: a%2 == 1 ==> x >= 0;\n\n\n\n\n\n\n\n\nloop invariant i22: a%2 == 0 ==> a <= x + y;\nloop invariant i23: a%2 == 1 ==> a <= x + y + 1;\n\n\n\n\n\n\nloop invariant i30: a%2 == 0 ==> x + y - 2 <= a;\n\nloop invariant i32: a%2 == 0 ==> x + y - 3 <= a;\n\nloop invariant i34: a%2 == 0 ==> x + y - 4 <= a;\n\nloop invariant i36: a%2 == 0 ==> x + y - 5 <= a;\n\nloop invariant i38: a%2 == 0 ==> x + y - 6 <= a;\n\nloop invariant i40: a%2 == 0 ==> x + y - 7 <= a;\n\nloop invariant i42: a%2 == 0 ==> x + y - 8 <= a;\n\nloop invariant i44: a%2 == 0 ==> x + y - 9 <= a;\n\nloop invariant i46: a%2 == 0 ==> x + y - 10 <= a;\n\nloop invariant i48: a%2 == 0 ==> x + y - 11 <= a;\n\nloop invariant i50: a%2 == 0 ==> x + y - 12 <= a;\n\nloop invariant i52: a%2 == 0 ==> x + y - 13 <= a;\n\nloop invariant i54: a%2 == 0 ==> x + y - 14 <= a;\n\nloop invariant i56: a%2 == 0 ==> x + y - 15 <= a;\n\nloop invariant i58: a%2 == 0 ==> x + y - 16 <= a;\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant a%2 == 1 ==> a >= 1;\nloop invariant a%2 == 0 ==> a >= 2;\nloop invariant a%2 == 1 ==> a <= 3;\nloop invariant a%2 == 0 ==> a <= 4;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2 is established but not preserved.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant a%2 == 1 ==> a >= 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a >= 2 is neither established nor preserved.\nloop invariant a%2 == 1 ==> a <= 3 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a <= 4 is partially proven to be inductive.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\nloop invariant i3: a%2 == 1 ==> a >= 1;\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant a <= 100000;\nloop invariant a%2==1 ==> a < 100000;\nloop invariant a%2==1 ==> a >= 1;\nloop invariant a%2==1 ==> a >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> a >= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= y;\nloop invariant a%2==1 ==> x <= 100000;\nloop invariant a%2==1 ==> y <= 100000;\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y >= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is established but not preserved.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= 100000 is established but not preserved.\nloop invariant a%2==1 ==> a < 100000 is partially proven to be inductive.\nloop invariant a%2==1 ==> a >= 1 is partially proven to be inductive.\nloop invariant a%2==1 ==> a >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant a%2==1 ==> a >= (1 + (x - 1) * x / 2) is established but not preserved.\nloop invariant a%2==1 ==> x >= y is partially proven to be inductive.\nloop invariant a%2==1 ==> x <= 100000 is partially proven to be inductive.\nloop invariant a%2==1 ==> y <= 100000 is partially proven to be inductive.\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant a%2==1 ==> y >= (1 + (x - 1) * x / 2) is established but not preserved.\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2) is partially proven to be inductive.\nAssertion a % 2 == 1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: a%2==1 ==> a >= 1;\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a = x + y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant a >= 3;\nloop invariant a <= 4;\nloop invariant flag ==> a == 1;\nloop invariant !flag ==> a == 0;\nloop invariant flag ==> y == x;\nloop invariant !flag ==> y == x + 1;\nloop invariant flag ==> x >= 1;\nloop invariant flag ==> x <= 2;\nloop invariant !flag ==> x >= 1;\nloop invariant !flag ==> x <= 2;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a == 2 * x + y;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant a >= 3;\nloop invariant a <= 4;\nloop invariant flag ==> a == 1;\nloop invariant !flag ==> a == 0;\nloop invariant flag ==> y == x;\nloop invariant !flag ==> y == x + 1;\nloop invariant flag ==> x >= 1;\nloop invariant flag ==> x <= 2;\nloop invariant !flag ==> x >= 1;\nloop invariant !flag ==> x <= 2;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a == 2 * x + y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 2 is partially proven to be inductive.\nloop invariant 1 <= y <= 2 is partially proven to be inductive.\nloop invariant a >= 3 is preserved but not established.\nloop invariant a <= 4 is partially proven to be inductive.\nloop invariant flag ==> a == 1 is partially proven to be inductive.\nloop invariant !flag ==> a == 0 is partially proven to be inductive.\nloop invariant flag ==> y == x is partially proven to be inductive.\nloop invariant !flag ==> y == x + 1 is partially proven to be inductive.\nloop invariant flag ==> x >= 1 is partially proven to be inductive.\nloop invariant flag ==> x <= 2 is partially proven to be inductive.\nloop invariant !flag ==> x >= 1 is partially proven to be inductive.\nloop invariant !flag ==> x <= 2 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant a == 2 * x + y is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: flag ==> x >= 1;\n\nloop invariant i11: !flag ==> x >= 1;\n\nloop invariant i13: y >= 1;\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= (a + 1);\nloop invariant 1 <= y <= (a + 1);\nloop invariant a%2==1 ==> (x == 1 && y == 1);\nloop invariant a%2==0 ==> (x == 2 && y == 1);\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x <= a;\nloop invariant y <= a;\nloop invariant a%2==1 ==> (y == (a + 1));\nloop invariant a%2==0 ==> (x == (a + 1));\nloop invariant a%2==1 ==> (x == 1);\nloop invariant a%2==0 ==> (y == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= (a + 1) is partially proven to be inductive.\nloop invariant 1 <= y <= (a + 1) is partially proven to be inductive.\nloop invariant a%2==1 ==> (x == 1 && y == 1) is partially proven to be inductive.\nloop invariant a%2==0 ==> (x == 2 && y == 1) is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x <= a is partially proven to be inductive.\nloop invariant y <= a is partially proven to be inductive.\nloop invariant a%2==1 ==> (y == (a + 1)) is preserved but not established.\nloop invariant a%2==0 ==> (x == (a + 1)) is partially proven to be inductive.\nloop invariant a%2==1 ==> (x == 1) is partially proven to be inductive.\nloop invariant a%2==0 ==> (y == 1) is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: 1 <= x <= (a + 1);\nloop invariant i2: 1 <= y <= (a + 1);\n\n\nloop invariant i5: x >= 1;\nloop invariant i6: y >= 1;\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x+y <= a <= x+y+1;\nloop invariant a%2 == 0 or a%2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: unexpected token 'or'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant a >= x+y;\nloop invariant a >= x+y+1;\nloop invariant a%2==1 ==> y%2==1;\nloop invariant a%2==0 ==> x%2==0;\nloop invariant (flag ==> a%2==1) || (!flag ==> a%2==0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y <= 100000 is partially proven to be inductive.\nloop invariant a >= x+y is preserved but not established.\nloop invariant a >= x+y+1 is partially proven to be inductive.\nloop invariant a%2==1 ==> y%2==1 is partially proven to be inductive.\nloop invariant a%2==0 ==> x%2==0 is partially proven to be inductive.\nloop invariant (flag ==> a%2==1) || (!flag ==> a%2==0) is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\nloop invariant i6: (flag ==> a%2==1) || (!flag ==> a%2==0);\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant (x + y) >= a;\nloop invariant a % 2 == 1 ==> a >= 2;\nloop invariant flag == 1 ==> x == y;\nloop invariant flag == 0 ==> x >= y;\nloop invariant a % 2 == 0 ==> a >= 2;\nloop invariant flag == 1 ==> a == x + y + 1;\nloop invariant flag == 0 ==> a == x + y + 2;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a == 2 * x + y + 2;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a >= 3;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a >= 3;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 100000 is partially proven to be inductive.\nloop invariant 1 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant (x + y) >= a is partially proven to be inductive.\nloop invariant a % 2 == 1 ==> a >= 2 is preserved but not established.\nloop invariant flag == 1 ==> x == y is partially proven to be inductive.\nloop invariant flag == 0 ==> x >= y is partially proven to be inductive.\nloop invariant a % 2 == 0 ==> a >= 2 is preserved but not established.\nloop invariant flag == 1 ==> a == x + y + 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a == x + y + 2 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a == 2 * x + y + 2 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a >= 3 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a >= 3 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1 is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\nloop invariant i4: a >= 0;\nloop invariant i5: (x + y) >= a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 142: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 1 <= x <= y + 1;\nloop invariant i4: 1 <= y <= 100000;\nloop invariant i5: (flag ? x == y + 1 : x == y);\nloop invariant i6: 0 <= x <= 100000;\nloop invariant i7: x >= 1;\nloop invariant i8: y >= 1;\nloop invariant i9: x <= y+1;\nloop invariant i10: a >= 1;\nloop invariant i11: a <= 2;\nloop invariant i12: a%2 == 1;\nloop invariant i13: a%2 == 0;\nloop invariant i14: flag == 0;\nloop invariant i15: 1 <= x <= 2;\nloop invariant i16: 1 <= y <= 2;\nloop invariant i17: flag == 0 ==> (0 < a && a < 3);\nloop invariant i18: flag == 1 ==> (0 <= a && a <= 3);\nloop invariant i19: a >= 0;\nloop invariant i20: x + y <= a;\nloop invariant i21: x <= y + 1;\nloop invariant i22: y <= x + 1;\nloop invariant i23: 0 <= a <= 2;\nloop invariant i24: (x >= 1) ==> (y >= 1);\nloop invariant i25: (x >= 1) ==> (x <= 2);\nloop invariant i26: (y >= 1) ==> (y <= 2);\nloop invariant i27: (a%2 == 1) ==> (a == 1);\nloop invariant i28: (a%2 == 0) ==> (a == 0);\nloop invariant i29: (x >= 1) ==> (a <= 2);\nloop invariant i30: (y >= 1) ==> (a <= 2);\nloop invariant i31: (x >= 1) ==> (a >= 0);\nloop invariant i32: (y >= 1) ==> (a >= 0);\nloop invariant i33: (flag ==> a == 1);\nloop invariant i34: (!flag ==> a == 0);\nloop invariant i35: (flag ==> y == 1);\nloop invariant i36: (!flag ==> y == 2);\nloop invariant i37: (flag ==> x == 1);\nloop invariant i38: (!flag ==> x == 2);\nloop invariant i39: (flag ==> x >= y);\nloop invariant i40: (!flag ==> y >= x);\nloop invariant i41: (flag ==> y < 2);\nloop invariant i42: (!flag ==> x < 2);\nloop invariant i43: (flag ==> y > x);\nloop invariant i44: (!flag ==> x > y);\nloop invariant i45: (flag ==> a < 2);\nloop invariant i46: (!flag ==> a > 0);\nloop invariant i47: (flag ==> a > 0);\nloop invariant i48: (!flag ==> a < 2);\nloop invariant i49: a <= 100000;\nloop invariant i50: a%2 == 0 ==> x == y;\nloop invariant i51: a%2 == 1 ==> x == y+1;\nloop invariant i52: a%2 == 0 ==> y == x;\nloop invariant i53: a%2 == 1 ==> y == x+1;\nloop invariant i54: a%2 == 0 ==> a == x + y;\nloop invariant i55: a%2 == 1 ==> a == x + y + 1;\nloop invariant i56: a%2 == 0 ==> x >= 1;\nloop invariant i57: a%2 == 1 ==> x >= 0;\nloop invariant i58: a%2 == 0 ==> y >= 1;\nloop invariant i59: a%2 == 1 ==> y >= 0;\nloop invariant i60: a%2 == 0 ==> a >= y;\nloop invariant i61: a%2 == 1 ==> a >= x;\nloop invariant i62: a%2 == 0 ==> x <= a;\nloop invariant i63: a%2 == 1 ==> y <= a;\nloop invariant i64: a%2 == 0 ==> y <= a - 1;\nloop invariant i65: a%2 == 1 ==> x <= a - 1;\nloop invariant i66: a%2 == 0 ==> a <= x + y;\nloop invariant i67: a%2 == 1 ==> a <= x + y + 1;\nloop invariant i68: a%2 == 0 ==> x + y <= a;\nloop invariant i69: a%2 == 1 ==> x + y + 1 <= a;\nloop invariant i70: a%2 == 0 ==> x + y <= a - 1;\nloop invariant i71: a%2 == 1 ==> x + y + 1 <= a - 1;\nloop invariant i72: a%2 == 0 ==> x + y - 1 <= a;\nloop invariant i73: a%2 == 1 ==> x + y <= a - 2;\nloop invariant i74: a%2 == 0 ==> x + y - 2 <= a;\nloop invariant i75: a%2 == 1 ==> x + y <= a - 3;\nloop invariant i76: a%2 == 0 ==> x + y - 3 <= a;\nloop invariant i77: a%2 == 1 ==> x + y <= a - 4;\nloop invariant i78: a%2 == 0 ==> x + y - 4 <= a;\nloop invariant i79: a%2 == 1 ==> x + y <= a - 5;\nloop invariant i80: a%2 == 0 ==> x + y - 5 <= a;\nloop invariant i81: a%2 == 1 ==> x + y <= a - 6;\nloop invariant i82: a%2 == 0 ==> x + y - 6 <= a;\nloop invariant i83: a%2 == 1 ==> x + y <= a - 7;\nloop invariant i84: a%2 == 0 ==> x + y - 7 <= a;\nloop invariant i85: a%2 == 1 ==> x + y <= a - 8;\nloop invariant i86: a%2 == 0 ==> x + y - 8 <= a;\nloop invariant i87: a%2 == 1 ==> x + y <= a - 9;\nloop invariant i88: a%2 == 0 ==> x + y - 9 <= a;\nloop invariant i89: a%2 == 1 ==> x + y <= a - 10;\nloop invariant i90: a%2 == 0 ==> x + y - 10 <= a;\nloop invariant i91: a%2 == 1 ==> x + y <= a - 11;\nloop invariant i92: a%2 == 0 ==> x + y - 11 <= a;\nloop invariant i93: a%2 == 1 ==> x + y <= a - 12;\nloop invariant i94: a%2 == 0 ==> x + y - 12 <= a;\nloop invariant i95: a%2 == 1 ==> x + y <= a - 13;\nloop invariant i96: a%2 == 0 ==> x + y - 13 <= a;\nloop invariant i97: a%2 == 1 ==> x + y <= a - 14;\nloop invariant i98: a%2 == 0 ==> x + y - 14 <= a;\nloop invariant i99: a%2 == 1 ==> x + y <= a - 15;\nloop invariant i100: a%2 == 0 ==> x + y - 15 <= a;\nloop invariant i101: a%2 == 1 ==> x + y <= a - 16;\nloop invariant i102: a%2 == 0 ==> x + y - 16 <= a;\nloop invariant i103: a%2 == 1 ==> x + y <= a - 17;\nloop invariant i104: 0 <= x <= 2;\nloop invariant i105: 0 <= y <= 2;\nloop invariant i106: a%2 == 1 ==> a >= 1;\nloop invariant i107: a%2 == 0 ==> a >= 2;\nloop invariant i108: a%2 == 1 ==> a <= 3;\nloop invariant i109: a%2 == 0 ==> a <= 4;\nloop invariant i110: a%2==1 ==> a < 100000;\nloop invariant i111: a%2==1 ==> a >= 1;\nloop invariant i112: a%2==1 ==> a >= (1 + (y - 1) * y / 2);\nloop invariant i113: a%2==1 ==> a >= (1 + (x - 1) * x / 2);\nloop invariant i114: a%2==1 ==> x >= y;\nloop invariant i115: a%2==1 ==> x <= 100000;\nloop invariant i116: a%2==1 ==> y <= 100000;\nloop invariant i117: a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i118: a%2==1 ==> y >= (1 + (x - 1) * x / 2);\nloop invariant i119: a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant i120: a = x + y;\nloop invariant i121: a >= 3;\nloop invariant i122: a <= 4;\nloop invariant i123: flag ==> a == 1;\nloop invariant i124: !flag ==> a == 0;\nloop invariant i125: flag ==> y == x;\nloop invariant i126: !flag ==> y == x + 1;\nloop invariant i127: flag ==> x >= 1;\nloop invariant i128: flag ==> x <= 2;\nloop invariant i129: !flag ==> x >= 1;\nloop invariant i130: !flag ==> x <= 2;\nloop invariant i131: y <= 2;\nloop invariant i132: a == 2 * x + y;\nloop invariant i133: 1 <= x <= (a + 1);\nloop invariant i134: 1 <= y <= (a + 1);\nloop invariant i135: a%2==1 ==> (x == 1 && y == 1);\nloop invariant i136: a%2==0 ==> (x == 2 && y == 1);\nloop invariant i137: x <= y;\nloop invariant i138: x <= a;\nloop invariant i139: y <= a;\nloop invariant i140: a%2==1 ==> (y == (a + 1));\nloop invariant i141: a%2==0 ==> (x == (a + 1));\nloop invariant i142: a%2==1 ==> (x == 1);\nloop invariant i143: a%2==0 ==> (y == 1);\nloop invariant i144: 0 <= x <= y;\nloop invariant i145: x+y <= a <= x+y+1;\nloop invariant i146: a%2 == 0 or a%2 == 1;\nloop invariant i147: 0 <= x <= y <= 100000;\nloop invariant i148: a >= x+y;\nloop invariant i149: a >= x+y+1;\nloop invariant i150: a%2==1 ==> y%2==1;\nloop invariant i151: a%2==0 ==> x%2==0;\nloop invariant i152: (flag ==> a%2==1) || (!flag ==> a%2==0);\nloop invariant i153: 1 <= x <= 100000;\nloop invariant i154: (x + y) >= a;\nloop invariant i155: a % 2 == 1 ==> a >= 2;\nloop invariant i156: flag == 1 ==> x == y;\nloop invariant i157: flag == 0 ==> x >= y;\nloop invariant i158: a % 2 == 0 ==> a >= 2;\nloop invariant i159: flag == 1 ==> a == x + y + 1;\nloop invariant i160: flag == 0 ==> a == x + y + 2;\nloop invariant i161: flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y;\nloop invariant i162: flag == 0 ==> a % 2 == 1 ==> a == 2 * x + y + 2;\nloop invariant i163: flag == 1 ==> a % 2 == 1 ==> a >= 3;\nloop invariant i164: flag == 0 ==> a % 2 == 1 ==> a >= 3;\nloop invariant i165: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant i166: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant i167: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant i168: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant i169: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant i170: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant i171: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant i172: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant i173: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant i174: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant i175: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant i176: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant i177: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant i178: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant i179: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant i180: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant i181: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\nloop invariant i182: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
            "combined_annotation_num_solver_calls": 65,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: x >= 1;\nloop invariant i8: y >= 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: a >= 0;\n\n\n\n\nloop invariant i24: (x >= 1) ==> (y >= 1);\n\n\n\n\n\n\nloop invariant i31: (x >= 1) ==> (a >= 0);\nloop invariant i32: (y >= 1) ==> (a >= 0);\n\n\nloop invariant i35: (flag ==> y == 1);\n\n\n\nloop invariant i39: (flag ==> x >= y);\nloop invariant i40: (!flag ==> y >= x);\nloop invariant i41: (flag ==> y < 2);\nloop invariant i42: (!flag ==> x < 2);\n\n\n\nloop invariant i46: (!flag ==> a > 0);\n\n\n\n\n\n\n\n\n\nloop invariant i56: a%2 == 0 ==> x >= 1;\nloop invariant i57: a%2 == 1 ==> x >= 0;\nloop invariant i58: a%2 == 0 ==> y >= 1;\nloop invariant i59: a%2 == 1 ==> y >= 0;\n\nloop invariant i61: a%2 == 1 ==> a >= x;\n\nloop invariant i63: a%2 == 1 ==> y <= a;\n\n\nloop invariant i66: a%2 == 0 ==> a <= x + y;\nloop invariant i67: a%2 == 1 ==> a <= x + y + 1;\n\n\n\n\n\n\nloop invariant i74: a%2 == 0 ==> x + y - 2 <= a;\n\nloop invariant i76: a%2 == 0 ==> x + y - 3 <= a;\n\nloop invariant i78: a%2 == 0 ==> x + y - 4 <= a;\n\nloop invariant i80: a%2 == 0 ==> x + y - 5 <= a;\n\nloop invariant i82: a%2 == 0 ==> x + y - 6 <= a;\n\nloop invariant i84: a%2 == 0 ==> x + y - 7 <= a;\n\nloop invariant i86: a%2 == 0 ==> x + y - 8 <= a;\n\nloop invariant i88: a%2 == 0 ==> x + y - 9 <= a;\n\nloop invariant i90: a%2 == 0 ==> x + y - 10 <= a;\n\nloop invariant i92: a%2 == 0 ==> x + y - 11 <= a;\n\nloop invariant i94: a%2 == 0 ==> x + y - 12 <= a;\n\nloop invariant i96: a%2 == 0 ==> x + y - 13 <= a;\n\nloop invariant i98: a%2 == 0 ==> x + y - 14 <= a;\n\nloop invariant i100: a%2 == 0 ==> x + y - 15 <= a;\n\nloop invariant i102: a%2 == 0 ==> x + y - 16 <= a;\n\n\n\nloop invariant i106: a%2 == 1 ==> a >= 1;\n\n\n\n\nloop invariant i111: a%2==1 ==> a >= 1;\n\nloop invariant i113: a%2==1 ==> a >= (1 + (x - 1) * x / 2);\n\nloop invariant i115: a%2==1 ==> x <= 100000;\n\n\nloop invariant i118: a%2==1 ==> y >= (1 + (x - 1) * x / 2);\n\n\n\n\n\n\n\n\nloop invariant i127: flag ==> x >= 1;\n\nloop invariant i129: !flag ==> x >= 1;\nloop invariant i130: !flag ==> x <= 2;\n\n\nloop invariant i133: 1 <= x <= (a + 1);\nloop invariant i134: 1 <= y <= (a + 1);\n\n\n\n\n\n\nloop invariant i141: a%2==0 ==> (x == (a + 1));\nloop invariant i142: a%2==1 ==> (x == 1);\nloop invariant i143: a%2==0 ==> (y == 1);\n\n\n\n\n\n\nloop invariant i150: a%2==1 ==> y%2==1;\n\nloop invariant i152: (flag ==> a%2==1) || (!flag ==> a%2==0);\n\nloop invariant i154: (x + y) >= a;\n\n\n\n\n\n\nloop invariant i161: flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y;\n\nloop invariant i163: flag == 1 ==> a % 2 == 1 ==> a >= 3;\n\nloop invariant i165: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1;\n\nloop invariant i167: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\n\nloop invariant i169: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\n\nloop invariant i171: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\n\nloop invariant i173: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\n\nloop invariant i175: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\n\nloop invariant i177: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\n\nloop invariant i179: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\n\nloop invariant i181: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (y % 2) == (x % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant y % 2 == (x % 2);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant x >= y;\nloop invariant x <= y + 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x == y || x == y - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= y <= 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x <= y;\nloop invariant 0 <= x <= 99;\nloop invariant x <= y;\nloop invariant 99 <= x <= 101;\nloop invariant x == y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= unknown_uint();\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\nloop invariant x % 2 != y % 2 ==> (x + 1 * (x / 2)) % 2 == y % 2;\nloop invariant (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant if (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant y % 2 != 0 ==> (x % 2 != 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 99;\nloop invariant (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant (y % 2 == 1) ==> (x % 2 == 1);\nloop invariant (x % 2 == 0) ==> (x >= y);\nloop invariant (x % 2 == 1) ==> (x >= y + 1);\nloop invariant (x % 2 == 0) ==> (x >= 2 * y);\nloop invariant (x % 2 == 1) ==> (x >= 2 * y + 1);\nloop invariant (x % 2 == 0) ==> (x >= y + 1);\nloop invariant (x % 2 == 1) ==> (x >= y);\nloop invariant (x % 2 == 0) ==> (y <= x / 2);\nloop invariant (x % 2 == 1) ==> (y <= (x - 1) / 2);\nloop invariant (x % 2 == 0) ==> (x <= 2 * y);\nloop invariant (x % 2 == 1) ==> (x <= 2 * y + 1);\nloop invariant (x % 2 == 0) ==> (x <= 99);\nloop invariant (x % 2 == 1) ==> (x <= 99);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) ==> ((y % 2) == 0);\nloop invariant (! (x % 2) ==> ((y % 2) == 1);\nloop invariant x + ((y / 2) * (y / 2 + 1)) == 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (y % 2) == (x % 2);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant (x + y) % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (y % 2) == (x % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (y % 2) == (x % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant y % 2 == (x % 2);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant x >= y;\nloop invariant x <= y + 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant y % 2 == (x % 2) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant x >= y is preserved but not established.\nloop invariant x <= y + 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x % 2 == (y % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\nloop invariant i4: x >= 0;\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x == y || x == y - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant x == y || x == y - 1 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant i3: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant i4: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i5: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant i6: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i7: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i8: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i9: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= y <= 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x <= y;\nloop invariant 0 <= x <= 99;\nloop invariant x <= y;\nloop invariant 99 <= x <= 101;\nloop invariant x == y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant 99 <= x <= 101 is preserved but not established.\nloop invariant x == y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= unknown_uint();\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\nloop invariant x % 2 != y % 2 ==> (x + 1 * (x / 2)) % 2 == y % 2;\nloop invariant (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\n\nloop invariant i5: (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant i6: (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant i7: (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant i8: (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1) is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> x >= 2 * (x / 2) is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\nloop invariant i4: (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant i5: (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant i6: (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant if (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant y % 2 != 0 ==> (x % 2 != 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 99;\nloop invariant (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant (y % 2 == 1) ==> (x % 2 == 1);\nloop invariant (x % 2 == 0) ==> (x >= y);\nloop invariant (x % 2 == 1) ==> (x >= y + 1);\nloop invariant (x % 2 == 0) ==> (x >= 2 * y);\nloop invariant (x % 2 == 1) ==> (x >= 2 * y + 1);\nloop invariant (x % 2 == 0) ==> (x >= y + 1);\nloop invariant (x % 2 == 1) ==> (x >= y);\nloop invariant (x % 2 == 0) ==> (y <= x / 2);\nloop invariant (x % 2 == 1) ==> (y <= (x - 1) / 2);\nloop invariant (x % 2 == 0) ==> (x <= 2 * y);\nloop invariant (x % 2 == 1) ==> (x <= 2 * y + 1);\nloop invariant (x % 2 == 0) ==> (x <= 99);\nloop invariant (x % 2 == 1) ==> (x <= 99);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 99 is preserved but not established.\nloop invariant (y % 2 == 0) ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant (y % 2 == 1) ==> (x % 2 == 1) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x >= y) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x >= y + 1) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x >= 2 * y) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x >= 2 * y + 1) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x >= y + 1) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x >= y) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (y <= x / 2) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (y <= (x - 1) / 2) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x <= 2 * y) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x <= 2 * y + 1) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x <= 99) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x <= 99) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: (y % 2 == 0) ==> (x % 2 == 0);\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: (x % 2 == 1) ==> (x <= 99);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) ==> ((y % 2) == 0);\nloop invariant (! (x % 2) ==> ((y % 2) == 1);\nloop invariant x + ((y / 2) * (y / 2 + 1)) == 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ';'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (y % 2) == (x % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (y % 2) == (x % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 40: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: (x % 2) == (y % 2);\nloop invariant i3: (x + y) % 2 == 0;\nloop invariant i4: (y % 2) == (x % 2);\nloop invariant i5: y % 2 == (x % 2);\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 99;\nloop invariant i8: x >= y;\nloop invariant i9: x <= y + 99;\nloop invariant i10: x % 2 == y % 2;\nloop invariant i11: x % 2 == (y % 2);\nloop invariant i12: x == y || x == y - 1;\nloop invariant i13: 0 <= x <= y;\nloop invariant i14: 0 <= y;\nloop invariant i15: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant i16: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant i17: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i18: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant i19: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i20: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i21: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i22: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant i23: 0 <= y <= 99;\nloop invariant i24: x <= y;\nloop invariant i25: 99 <= x <= 101;\nloop invariant i26: x == y;\nloop invariant i27: 0 <= y <= unknown_uint();\nloop invariant i28: x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\nloop invariant i29: x % 2 != y % 2 ==> (x + 1 * (x / 2)) % 2 == y % 2;\nloop invariant i30: (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant i31: (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant i32: (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant i33: (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant i34: (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant i35: (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant i36: (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\nloop invariant i37: 1 <= x <= 99;\nloop invariant i38: if (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i39: y % 2 != 0 ==> (x % 2 != 0);\nloop invariant i40: (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i41: (y % 2 == 1) ==> (x % 2 == 1);\nloop invariant i42: (x % 2 == 0) ==> (x >= y);\nloop invariant i43: (x % 2 == 1) ==> (x >= y + 1);\nloop invariant i44: (x % 2 == 0) ==> (x >= 2 * y);\nloop invariant i45: (x % 2 == 1) ==> (x >= 2 * y + 1);\nloop invariant i46: (x % 2 == 0) ==> (x >= y + 1);\nloop invariant i47: (x % 2 == 1) ==> (x >= y);\nloop invariant i48: (x % 2 == 0) ==> (y <= x / 2);\nloop invariant i49: (x % 2 == 1) ==> (y <= (x - 1) / 2);\nloop invariant i50: (x % 2 == 0) ==> (x <= 2 * y);\nloop invariant i51: (x % 2 == 1) ==> (x <= 2 * y + 1);\nloop invariant i52: (x % 2 == 0) ==> (x <= 99);\nloop invariant i53: (x % 2 == 1) ==> (x <= 99);\nloop invariant i54: (x % 2) ==> ((y % 2) == 0);\nloop invariant i55: (! (x % 2) ==> ((y % 2) == 1);\nloop invariant i56: x + ((y / 2) * (y / 2 + 1)) == 99;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 16,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 0;\n\n\n\n\n\n\n\nloop invariant i14: 0 <= y;\nloop invariant i15: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant i16: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant i17: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i18: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant i19: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i20: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i21: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i22: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\n\n\n\n\n\nloop invariant i28: x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\n\nloop invariant i30: (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant i31: (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant i32: (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant i33: (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant i34: (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant i35: (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant i36: (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\n\n\n\nloop invariant i40: (y % 2 == 0) ==> (x % 2 == 0);\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i53: (x % 2 == 1) ==> (x <= 99);\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant k <= i / j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / (i + j);\nloop invariant i <= k * j;\nloop invariant j <= i / k;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + k * j < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant j >= 1;\nloop invariant i + k * j < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant unknown_int() >= 1;\nloop invariant unknown_int() < 1000000;\nloop invariant i >= k * unknown_int();\nloop invariant i < (k + 1) * unknown_int();\nloop invariant k >= 0;\nloop invariant k < 1000000;\nloop invariant unknown_int() != 0 ==> k < 1000000;\nloop invariant unknown_int() != 0 ==> i < 1000000;\nloop invariant unknown_int() != 0 ==> i >= 0;\nloop invariant unknown_int() != 0 ==> k >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i >= k * (LARGE_INT - 1);\nloop invariant i <= k * LARGE_INT;\nloop invariant i + j == i + unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= j;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j = i' + j';\nloop invariant k + 1 = k' + 1;\nloop invariant (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant (i + j) >= i;\nloop invariant (i + j) >= j;\nloop invariant (i + j) <= (LARGE_INT + LARGE_INT);\nloop invariant (k + 1) >= k;\nloop invariant (k + 1) <= LARGE_INT;\nloop invariant (i + j) >= (i + j);\nloop invariant (i + j) <= (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k == i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k == i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant unknown_int() ==> j == unknown_int();\nloop invariant i == k * j;\nloop invariant j == unknown_int();\nloop invariant (i == k * j) ==> (i == k * j);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i + k * j <= LARGE_INT;\nloop invariant i == (k * j + i);\nloop invariant j == (unknown_int());\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant j == unknown_int();\nloop invariant unknown_int() < LARGE_INT ==> i <= LARGE_INT;\nloop invariant unknown_int() < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i == k * j;\nloop invariant unknown_int() < LARGE_INT ==> i <= k * (LARGE_INT - 1);\nloop invariant unknown_int() >= 1 ==> k <= LARGE_INT;\nloop invariant unknown_int() >= 1 ==> i <= LARGE_INT - 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant k <= i / j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / (i + j);\nloop invariant i <= k * j;\nloop invariant j <= i / k;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is established but not preserved.\nloop invariant 0 <= k <= 1000000 is established but not preserved.\nAssertion k <= 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + k * j < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant j >= 1;\nloop invariant i + k * j < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is established but not preserved.\nloop invariant 0 <= k <= LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> k < LARGE_INT is established but not preserved.\nloop invariant i < LARGE_INT ==> i <= LARGE_INT is partially proven to be inductive.\nloop invariant k < LARGE_INT ==> k <= LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i >= 0 is partially proven to be inductive.\nloop invariant k < LARGE_INT ==> k >= 0 is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i < LARGE_INT is partially proven to be inductive.\nloop invariant k < LARGE_INT ==> k < LARGE_INT is partially proven to be inductive.\nAssertion k <= 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\nloop invariant i4: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i5: k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i6: i < LARGE_INT ==> i >= 0;\nloop invariant i7: k < LARGE_INT ==> k >= 0;\nloop invariant i8: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i9: k < LARGE_INT ==> k < LARGE_INT;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant unknown_int() >= 1;\nloop invariant unknown_int() < 1000000;\nloop invariant i >= k * unknown_int();\nloop invariant i < (k + 1) * unknown_int();\nloop invariant k >= 0;\nloop invariant k < 1000000;\nloop invariant unknown_int() != 0 ==> k < 1000000;\nloop invariant unknown_int() != 0 ==> i < 1000000;\nloop invariant unknown_int() != 0 ==> i >= 0;\nloop invariant unknown_int() != 0 ==> k >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: k >= 0;\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i >= k * (LARGE_INT - 1);\nloop invariant i <= k * LARGE_INT;\nloop invariant i + j == i + unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\nloop invariant i4: i <= k * LARGE_INT;\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= j;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j = i' + j';\nloop invariant k + 1 = k' + 1;\nloop invariant (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: 1 <= j && j < LARGE_INT;\n\n\nloop invariant i6: (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant i7: (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant i8: (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant i9: (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant i10: (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant i11: (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant i12: (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i13: (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i14: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant i15: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i16: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i17: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i18: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant i19: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i20: (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i21: (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i22: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i23: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i24: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i25: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i26: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i27: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i28: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i29: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i30: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i31: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i32: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant (i + j) >= i;\nloop invariant (i + j) >= j;\nloop invariant (i + j) <= (LARGE_INT + LARGE_INT);\nloop invariant (k + 1) >= k;\nloop invariant (k + 1) <= LARGE_INT;\nloop invariant (i + j) >= (i + j);\nloop invariant (i + j) <= (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: (k + 1) >= k;\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k == i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k == i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= k <= LARGE_INT is partially proven to be inductive.\nloop invariant k == i / LARGE_INT is established but not preserved.\nloop invariant (i % LARGE_INT) == 0 ==> k == i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1 is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1 is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1 is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) is partially proven to be inductive.\nAssertion k <= 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\nloop invariant i6: (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\n\n\nloop invariant i9: (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant i10: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant unknown_int() ==> j == unknown_int();\nloop invariant i == k * j;\nloop invariant j == unknown_int();\nloop invariant (i == k * j) ==> (i == k * j);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i + k * j <= LARGE_INT;\nloop invariant i == (k * j + i);\nloop invariant j == (unknown_int());\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: i >= 0;\nloop invariant i14: k >= 0;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant j == unknown_int();\nloop invariant unknown_int() < LARGE_INT ==> i <= LARGE_INT;\nloop invariant unknown_int() < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i == k * j;\nloop invariant unknown_int() < LARGE_INT ==> i <= k * (LARGE_INT - 1);\nloop invariant unknown_int() >= 1 ==> k <= LARGE_INT;\nloop invariant unknown_int() >= 1 ==> i <= LARGE_INT - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 42: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: 1 <= j <= LARGE_INT;\nloop invariant i4: 0 <= i + j <= 2 * LARGE_INT;\nloop invariant i5: k <= i / j;\nloop invariant i6: j <= i / (k + 1);\nloop invariant i7: k <= i / (i + j);\nloop invariant i8: i <= k * j;\nloop invariant i9: j <= i / k;\nloop invariant i10: 0 <= k <= 1000000;\nloop invariant i11: i + k * j < LARGE_INT;\nloop invariant i12: i <= LARGE_INT;\nloop invariant i13: k <= LARGE_INT;\nloop invariant i14: j < LARGE_INT;\nloop invariant i15: j >= 1;\nloop invariant i16: i + k * j < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i17: i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i18: i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i19: i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i20: i < LARGE_INT ==> k < LARGE_INT;\nloop invariant i21: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i22: k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i23: i < LARGE_INT ==> i >= 0;\nloop invariant i24: k < LARGE_INT ==> k >= 0;\nloop invariant i25: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i26: k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i27: 0 <= i <= 1000000;\nloop invariant i28: unknown_int() >= 1;\nloop invariant i29: unknown_int() < 1000000;\nloop invariant i30: i >= k * unknown_int();\nloop invariant i31: i < (k + 1) * unknown_int();\nloop invariant i32: k >= 0;\nloop invariant i33: k < 1000000;\nloop invariant i34: unknown_int() != 0 ==> k < 1000000;\nloop invariant i35: unknown_int() != 0 ==> i < 1000000;\nloop invariant i36: unknown_int() != 0 ==> i >= 0;\nloop invariant i37: unknown_int() != 0 ==> k >= 0;\nloop invariant i38: i >= k * (LARGE_INT - 1);\nloop invariant i39: i <= k * LARGE_INT;\nloop invariant i40: i + j == i + unknown_int();\nloop invariant i41: i1;\nloop invariant i42: i2;\nloop invariant i43: i3;\nloop invariant i44: i4;\nloop invariant i45: i5;\nloop invariant i46: i6;\nloop invariant i47: i7;\nloop invariant i48: i8;\nloop invariant i49: i <= j;\nloop invariant i50: i < LARGE_INT;\nloop invariant i51: 1 <= j && j < LARGE_INT;\nloop invariant i52: i + j = i' + j';\nloop invariant i53: k + 1 = k' + 1;\nloop invariant i54: (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant i55: (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant i56: (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant i57: (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant i58: (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant i59: (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant i60: (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i61: (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i62: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant i63: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i64: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i65: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i66: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant i67: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i68: (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i69: (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i70: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i71: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i72: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i73: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i74: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i75: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i76: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i77: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i78: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i79: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i80: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i81: 0 <= j <= LARGE_INT;\nloop invariant i82: (i + j) >= i;\nloop invariant i83: (i + j) >= j;\nloop invariant i84: (i + j) <= (LARGE_INT + LARGE_INT);\nloop invariant i85: (k + 1) >= k;\nloop invariant i86: (k + 1) <= LARGE_INT;\nloop invariant i87: (i + j) >= (i + j);\nloop invariant i88: (i + j) <= (i + j);\nloop invariant i89: (i + j) == (i + j);\nloop invariant i90: k == i / LARGE_INT;\nloop invariant i91: (i % LARGE_INT) == 0 ==> k == i / LARGE_INT;\nloop invariant i92: (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT;\nloop invariant i93: (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\nloop invariant i94: (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT;\nloop invariant i95: (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1;\nloop invariant i96: (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant i97: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant i98: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant i99: (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant i100: (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant i101: unknown_int() ==> j == unknown_int();\nloop invariant i102: i == k * j;\nloop invariant i103: j == unknown_int();\nloop invariant i104: (i == k * j) ==> (i == k * j);\nloop invariant i105: 0 <= i + k * j <= LARGE_INT;\nloop invariant i106: i == (k * j + i);\nloop invariant i107: j == (unknown_int());\nloop invariant i108: i + j < LARGE_INT;\nloop invariant i109: i + j >= 0;\nloop invariant i110: i >= 0;\nloop invariant i111: unknown_int() < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i112: unknown_int() < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i113: unknown_int() < LARGE_INT ==> i <= k * (LARGE_INT - 1);\nloop invariant i114: unknown_int() >= 1 ==> k <= LARGE_INT;\nloop invariant i115: unknown_int() >= 1 ==> i <= LARGE_INT - 1;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 13,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: 1 <= j <= LARGE_INT;\nloop invariant i4: 0 <= i + j <= 2 * LARGE_INT;\nloop invariant i5: k <= i / j;\nloop invariant i6: j <= i / (k + 1);\nloop invariant i7: k <= i / (i + j);\nloop invariant i8: i <= k * j;\nloop invariant i9: j <= i / k;\nloop invariant i10: 0 <= k <= 1000000;\nloop invariant i11: i + k * j < LARGE_INT;\nloop invariant i12: i <= LARGE_INT;\nloop invariant i13: k <= LARGE_INT;\nloop invariant i14: j < LARGE_INT;\nloop invariant i15: j >= 1;\nloop invariant i16: i + k * j < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i17: i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i18: i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i19: i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i20: i < LARGE_INT ==> k < LARGE_INT;\nloop invariant i21: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i22: k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i23: i < LARGE_INT ==> i >= 0;\nloop invariant i24: k < LARGE_INT ==> k >= 0;\nloop invariant i25: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i26: k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i27: 0 <= i <= 1000000;\n\n\n\n\nloop invariant i32: k >= 0;\nloop invariant i33: k < 1000000;\n\n\n\n\nloop invariant i38: i >= k * (LARGE_INT - 1);\nloop invariant i39: i <= k * LARGE_INT;\n\nloop invariant i41: i1;\nloop invariant i42: i2;\nloop invariant i43: i3;\nloop invariant i44: i4;\nloop invariant i45: i5;\nloop invariant i46: i6;\nloop invariant i47: i7;\nloop invariant i48: i8;\nloop invariant i49: i <= j;\nloop invariant i50: i < LARGE_INT;\nloop invariant i51: 1 <= j && j < LARGE_INT;\n\n\nloop invariant i54: (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant i55: (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant i56: (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant i57: (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant i58: (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant i59: (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant i60: (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i61: (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i62: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant i63: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i64: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i65: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i66: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant i67: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i68: (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i69: (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i70: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i71: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i72: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i73: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i74: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i75: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i76: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i77: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i78: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i79: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i80: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i81: 0 <= j <= LARGE_INT;\nloop invariant i82: (i + j) >= i;\nloop invariant i83: (i + j) >= j;\nloop invariant i84: (i + j) <= (LARGE_INT + LARGE_INT);\nloop invariant i85: (k + 1) >= k;\nloop invariant i86: (k + 1) <= LARGE_INT;\nloop invariant i87: (i + j) >= (i + j);\nloop invariant i88: (i + j) <= (i + j);\nloop invariant i89: (i + j) == (i + j);\nloop invariant i90: k == i / LARGE_INT;\nloop invariant i91: (i % LARGE_INT) == 0 ==> k == i / LARGE_INT;\nloop invariant i92: (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT;\nloop invariant i93: (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\nloop invariant i94: (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT;\nloop invariant i95: (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1;\nloop invariant i96: (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant i97: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant i98: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant i99: (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant i100: (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant i101: unknown_int() ==> j == unknown_int();\nloop invariant i102: i == k * j;\nloop invariant i103: j == unknown_int();\nloop invariant i104: (i == k * j) ==> (i == k * j);\nloop invariant i105: 0 <= i + k * j <= LARGE_INT;\nloop invariant i106: i == (k * j + i);\nloop invariant i107: j == (unknown_int());\nloop invariant i108: i + j < LARGE_INT;\nloop invariant i109: i + j >= 0;\nloop invariant i110: i >= 0;\nloop invariant i111: unknown_int() < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i112: unknown_int() < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i113: unknown_int() < LARGE_INT ==> i <= k * (LARGE_INT - 1);\nloop invariant i114: unknown_int() >= 1 ==> k <= LARGE_INT;\nloop invariant i115: unknown_int() >= 1 ==> i <= LARGE_INT - 1;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + unknown_int());\nloop invariant (unknown_int() ==> x % 2 == 0);\nloop invariant (unknown_int() == false ==> x % 2 == 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 2^32;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 1;\nloop invariant unknown_int() == 0;\nloop invariant x % 2 ==> x >= 2;\nloop invariant x % 2 ==> x < 4294967296;\nloop invariant x % 2 ==> x != 1;\nloop invariant x % 2 ==> x != 2^32;\nloop invariant x % 2 ==> x != 0;\nloop invariant x % 2 ==> x != 2;\nloop invariant x % 2 ==> x != 4;\nloop invariant x % 2 ==> x != 6;\nloop invariant x % 2 ==> x != 8;\nloop invariant x % 2 ==> x != 10;\nloop invariant x % 2 ==> x != 12;\nloop invariant x % 2 ==> x != 14;\nloop invariant x % 2 ==> x != 16;\nloop invariant x % 2 ==> x != 18;\nloop invariant x % 2 ==> x != 20;\nloop invariant x % 2 ==> x != 22;\nloop invariant x % 2 ==> x != 24;\nloop invariant x % 2 ==> x != 26;\nloop invariant x % 2 ==> x != 28;\nloop invariant x % 2 ==> x != 30;\nloop invariant x % 2 ==> x != 32;\nloop invariant x % 2 ==> x != 34;\nloop invariant x % 2 ==> x != 36;\nloop invariant x % 2 ==> x != 38;\nloop invariant x % 2 ==> x != 40;\nloop invariant x % 2 ==> x != 42;\nloop invariant x % 2 ==> x != 44;\nloop invariant x % 2 ==> x != 46;\nloop invariant x % 2 ==> x != 48;\nloop invariant x % 2 ==> x != 50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= x % 2 <= 1;\nloop invariant (x % 2) == 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 2 * unknown_int();\nloop invariant unknown_int() ==> (x % 2 == 0);\nloop invariant unknown_int() ==> (x >= 1);\nloop invariant unknown_int() ==> (2 * unknown_int() >= x);\nloop invariant unknown_int() ==> (x % 2 == 1) ==> (x + 2 >= 3);\nloop invariant unknown_int() ==> (x % 2 == 1) ==> (x + 2 <= 2 * unknown_int() + 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * unknown_int();\nloop invariant unknown_int() == true ==> x % 2 == 0;\nloop invariant unknown_int() == false ==> x % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2^(sizeof(unsigned int) * 8) - 1;\nloop invariant unknown_int() ==> (x % 2) == 0;\nloop invariant !unknown_int() ==> (x % 2) == 1;\nloop invariant x >= 2;\nloop invariant !unknown_int() ==> x > 2;\nloop invariant x == 1 + 2 * (unknown_int() ? (unsigned int) (1 / (unsigned int) 0) : (unsigned int) (1 / (unsigned int) 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant x % 2 == 0;\nloop invariant (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 < x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> 1 < x <= 2 * x;\nloop invariant ~unknown_int() ==> x == 1;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x <= 2 * x;\nloop invariant unknown_int() ==> x < 2 * x;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant x >= 1;\nloop invariant x % 2 == 0 ==> x is even;\nloop invariant x % 2 != 0 ==> x is odd;\nloop invariant x % 2 == 0 ==> x is not odd;\nloop invariant x % 2 != 0 ==> x is not even;\nloop invariant x is even ==> x % 2 == 0;\nloop invariant x is odd ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x is divisible by 2;\nloop invariant x % 2 != 0 ==> x is not divisible by 2;\nloop invariant x is not divisible by 2 ==> x % 2 != 0;\nloop invariant x is divisible by 2 ==> x % 2 == 0;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not divisible by 2 ==> x is odd;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 2 == 0 is preserved but not established.\nAssertion x % 2 != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + unknown_int());\nloop invariant (unknown_int() ==> x % 2 == 0);\nloop invariant (unknown_int() == false ==> x % 2 == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 2^32;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 1;\nloop invariant unknown_int() == 0;\nloop invariant x % 2 ==> x >= 2;\nloop invariant x % 2 ==> x < 4294967296;\nloop invariant x % 2 ==> x != 1;\nloop invariant x % 2 ==> x != 2^32;\nloop invariant x % 2 ==> x != 0;\nloop invariant x % 2 ==> x != 2;\nloop invariant x % 2 ==> x != 4;\nloop invariant x % 2 ==> x != 6;\nloop invariant x % 2 ==> x != 8;\nloop invariant x % 2 ==> x != 10;\nloop invariant x % 2 ==> x != 12;\nloop invariant x % 2 ==> x != 14;\nloop invariant x % 2 ==> x != 16;\nloop invariant x % 2 ==> x != 18;\nloop invariant x % 2 ==> x != 20;\nloop invariant x % 2 ==> x != 22;\nloop invariant x % 2 ==> x != 24;\nloop invariant x % 2 ==> x != 26;\nloop invariant x % 2 ==> x != 28;\nloop invariant x % 2 ==> x != 30;\nloop invariant x % 2 ==> x != 32;\nloop invariant x % 2 ==> x != 34;\nloop invariant x % 2 ==> x != 36;\nloop invariant x % 2 ==> x != 38;\nloop invariant x % 2 ==> x != 40;\nloop invariant x % 2 ==> x != 42;\nloop invariant x % 2 ==> x != 44;\nloop invariant x % 2 ==> x != 46;\nloop invariant x % 2 ==> x != 48;\nloop invariant x % 2 ==> x != 50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\nloop invariant i6: x % 2 ==> x < 4294967296;\n\n\nloop invariant i9: x % 2 ==> x != 0;\nloop invariant i10: x % 2 ==> x != 2;\nloop invariant i11: x % 2 ==> x != 4;\nloop invariant i12: x % 2 ==> x != 6;\nloop invariant i13: x % 2 ==> x != 8;\nloop invariant i14: x % 2 ==> x != 10;\nloop invariant i15: x % 2 ==> x != 12;\nloop invariant i16: x % 2 ==> x != 14;\nloop invariant i17: x % 2 ==> x != 16;\nloop invariant i18: x % 2 ==> x != 18;\nloop invariant i19: x % 2 ==> x != 20;\nloop invariant i20: x % 2 ==> x != 22;\nloop invariant i21: x % 2 ==> x != 24;\nloop invariant i22: x % 2 ==> x != 26;\nloop invariant i23: x % 2 ==> x != 28;\nloop invariant i24: x % 2 ==> x != 30;\nloop invariant i25: x % 2 ==> x != 32;\nloop invariant i26: x % 2 ==> x != 34;\nloop invariant i27: x % 2 ==> x != 36;\nloop invariant i28: x % 2 ==> x != 38;\nloop invariant i29: x % 2 ==> x != 40;\nloop invariant i30: x % 2 ==> x != 42;\nloop invariant i31: x % 2 ==> x != 44;\nloop invariant i32: x % 2 ==> x != 46;\nloop invariant i33: x % 2 ==> x != 48;\nloop invariant i34: x % 2 ==> x != 50;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= x % 2 <= 1;\nloop invariant (x % 2) == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nloop invariant 0 <= x % 2 <= 1 is partially proven to be inductive.\nloop invariant (x % 2) == 1 is partially proven to be inductive.\nAssertion x % 2 != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\nloop invariant i2: 0 <= x % 2 <= 1;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 2 * unknown_int();\nloop invariant unknown_int() ==> (x % 2 == 0);\nloop invariant unknown_int() ==> (x >= 1);\nloop invariant unknown_int() ==> (2 * unknown_int() >= x);\nloop invariant unknown_int() ==> (x % 2 == 1) ==> (x + 2 >= 3);\nloop invariant unknown_int() ==> (x % 2 == 1) ==> (x + 2 <= 2 * unknown_int() + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * unknown_int();\nloop invariant unknown_int() == true ==> x % 2 == 0;\nloop invariant unknown_int() == false ==> x % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^(sizeof(unsigned int) * 8) - 1;\nloop invariant unknown_int() ==> (x % 2) == 0;\nloop invariant !unknown_int() ==> (x % 2) == 1;\nloop invariant x >= 2;\nloop invariant !unknown_int() ==> x > 2;\nloop invariant x == 1 + 2 * (unknown_int() ? (unsigned int) (1 / (unsigned int) 0) : (unsigned int) (1 / (unsigned int) 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant x % 2 == 0;\nloop invariant (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\nloop invariant i4: (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant i5: (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i6: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i7: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i8: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i9: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i10: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i11: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i12: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i13: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i14: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 < x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> 1 < x <= 2 * x;\nloop invariant ~unknown_int() ==> x == 1;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x <= 2 * x;\nloop invariant unknown_int() ==> x < 2 * x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant x % 2 == 0 is preserved but not established.\nAssertion x % 2 != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 24,
                    "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant x % 2 == 0 ==> x is even;\nloop invariant x % 2 != 0 ==> x is odd;\nloop invariant x % 2 == 0 ==> x is not odd;\nloop invariant x % 2 != 0 ==> x is not even;\nloop invariant x is even ==> x % 2 == 0;\nloop invariant x is odd ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x is divisible by 2;\nloop invariant x % 2 != 0 ==> x is not divisible by 2;\nloop invariant x is not divisible by 2 ==> x % 2 != 0;\nloop invariant x is divisible by 2 ==> x % 2 == 0;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not divisible by 2 ==> x is odd;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token 'is'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 15: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2^32 - 1;\nloop invariant i2: (x % 2) == 0;\nloop invariant i3: x >= 0;\nloop invariant i4: unknown_int() ==> x >= 1;\nloop invariant i5: unknown_int() ==> x % 2 == 0;\nloop invariant i6: unknown_int() ==> x >= 0;\nloop invariant i7: 0 <= x;\nloop invariant i8: x % 2 == 0;\nloop invariant i9: 0 <= x <= 2 * (1 + unknown_int());\nloop invariant i10: (unknown_int() ==> x % 2 == 0);\nloop invariant i11: (unknown_int() == false ==> x % 2 == 1);\nloop invariant i12: 1 <= x <= 2^32;\nloop invariant i13: unknown_int() == 1;\nloop invariant i14: unknown_int() == 0;\nloop invariant i15: x % 2 ==> x >= 2;\nloop invariant i16: x % 2 ==> x < 4294967296;\nloop invariant i17: x % 2 ==> x != 1;\nloop invariant i18: x % 2 ==> x != 2^32;\nloop invariant i19: x % 2 ==> x != 0;\nloop invariant i20: x % 2 ==> x != 2;\nloop invariant i21: x % 2 ==> x != 4;\nloop invariant i22: x % 2 ==> x != 6;\nloop invariant i23: x % 2 ==> x != 8;\nloop invariant i24: x % 2 ==> x != 10;\nloop invariant i25: x % 2 ==> x != 12;\nloop invariant i26: x % 2 ==> x != 14;\nloop invariant i27: x % 2 ==> x != 16;\nloop invariant i28: x % 2 ==> x != 18;\nloop invariant i29: x % 2 ==> x != 20;\nloop invariant i30: x % 2 ==> x != 22;\nloop invariant i31: x % 2 ==> x != 24;\nloop invariant i32: x % 2 ==> x != 26;\nloop invariant i33: x % 2 ==> x != 28;\nloop invariant i34: x % 2 ==> x != 30;\nloop invariant i35: x % 2 ==> x != 32;\nloop invariant i36: x % 2 ==> x != 34;\nloop invariant i37: x % 2 ==> x != 36;\nloop invariant i38: x % 2 ==> x != 38;\nloop invariant i39: x % 2 ==> x != 40;\nloop invariant i40: x % 2 ==> x != 42;\nloop invariant i41: x % 2 ==> x != 44;\nloop invariant i42: x % 2 ==> x != 46;\nloop invariant i43: x % 2 ==> x != 48;\nloop invariant i44: x % 2 ==> x != 50;\nloop invariant i45: 0 <= x <= 2147483647;\nloop invariant i46: 0 <= x % 2 <= 1;\nloop invariant i47: (x % 2) == 1;\nloop invariant i48: 1 <= x <= 2 * unknown_int();\nloop invariant i49: unknown_int() ==> (x % 2 == 0);\nloop invariant i50: unknown_int() ==> (x >= 1);\nloop invariant i51: unknown_int() ==> (2 * unknown_int() >= x);\nloop invariant i52: unknown_int() ==> (x % 2 == 1) ==> (x + 2 >= 3);\nloop invariant i53: unknown_int() ==> (x % 2 == 1) ==> (x + 2 <= 2 * unknown_int() + 1);\nloop invariant i54: 1 <= x;\nloop invariant i55: x >= 2 * unknown_int();\nloop invariant i56: unknown_int() == true ==> x % 2 == 0;\nloop invariant i57: unknown_int() == false ==> x % 2 == 1;\nloop invariant i58: 0 <= x <= 2^(sizeof(unsigned int) * 8) - 1;\nloop invariant i59: unknown_int() ==> (x % 2) == 0;\nloop invariant i60: !unknown_int() ==> (x % 2) == 1;\nloop invariant i61: x >= 2;\nloop invariant i62: !unknown_int() ==> x > 2;\nloop invariant i63: x == 1 + 2 * (unknown_int() ? (unsigned int) (1 / (unsigned int) 0) : (unsigned int) (1 / (unsigned int) 1));\nloop invariant i64: 0 <= x <= unknown_int();\nloop invariant i65: (x + 2) % 2 == 0;\nloop invariant i66: (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant i67: (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i68: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i69: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i70: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i71: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i72: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i73: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i74: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i75: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i76: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i77: 0 < x;\nloop invariant i78: unknown_int() ==> 1 < x <= 2 * x;\nloop invariant i79: ~unknown_int() ==> x == 1;\nloop invariant i80: unknown_int() ==> x <= 2 * x;\nloop invariant i81: unknown_int() ==> x < 2 * x;\nloop invariant i82: i1;\nloop invariant i83: i2;\nloop invariant i84: i3;\nloop invariant i85: i4;\nloop invariant i86: i5;\nloop invariant i87: i6;\nloop invariant i88: i7;\nloop invariant i89: i8;\nloop invariant i90: i9;\nloop invariant i91: i10;\nloop invariant i92: i11;\nloop invariant i93: i12;\nloop invariant i94: i13;\nloop invariant i95: i14;\nloop invariant i96: i15;\nloop invariant i97: i16;\nloop invariant i98: i17;\nloop invariant i99: i18;\nloop invariant i100: i19;\nloop invariant i101: i20;\nloop invariant i102: i21;\nloop invariant i103: i22;\nloop invariant i104: i23;\nloop invariant i105: i24;\nloop invariant i106: i25;\nloop invariant i107: i26;\nloop invariant i108: i27;\nloop invariant i109: i28;\nloop invariant i110: i29;\nloop invariant i111: i30;\nloop invariant i112: i31;\nloop invariant i113: i32;\nloop invariant i114: i33;\nloop invariant i115: i34;\nloop invariant i116: i35;\nloop invariant i117: i36;\nloop invariant i118: i37;\nloop invariant i119: i38;\nloop invariant i120: i39;\nloop invariant i121: i40;\nloop invariant i122: i41;\nloop invariant i123: i42;\nloop invariant i124: i43;\nloop invariant i125: i44;\nloop invariant i126: i45;\nloop invariant i127: i46;\nloop invariant i128: i47;\nloop invariant i129: i48;\nloop invariant i130: i49;\nloop invariant i131: i50;\nloop invariant i132: i51;\nloop invariant i133: i52;\nloop invariant i134: i53;\nloop invariant i135: i54;\nloop invariant i136: i55;\nloop invariant i137: i56;\nloop invariant i138: i57;\nloop invariant i139: i58;\nloop invariant i140: i59;\nloop invariant i141: i60;\nloop invariant i142: i61;\nloop invariant i143: i62;\nloop invariant i144: i63;\nloop invariant i145: i64;\nloop invariant i146: i65;\nloop invariant i147: i66;\nloop invariant i148: i67;\nloop invariant i149: i68;\nloop invariant i150: i69;\nloop invariant i151: i70;\nloop invariant i152: i71;\nloop invariant i153: i72;\nloop invariant i154: i73;\nloop invariant i155: i74;\nloop invariant i156: i75;\nloop invariant i157: i76;\nloop invariant i158: i77;\nloop invariant i159: i78;\nloop invariant i160: i79;\nloop invariant i161: i80;\nloop invariant i162: i81;\nloop invariant i163: i82;\nloop invariant i164: i83;\nloop invariant i165: i84;\nloop invariant i166: i85;\nloop invariant i167: i86;\nloop invariant i168: i87;\nloop invariant i169: i88;\nloop invariant i170: i89;\nloop invariant i171: i90;\nloop invariant i172: i91;\nloop invariant i173: i92;\nloop invariant i174: i93;\nloop invariant i175: i94;\nloop invariant i176: i95;\nloop invariant i177: i96;\nloop invariant i178: i97;\nloop invariant i179: i98;\nloop invariant i180: i99;\nloop invariant i181: i100;\nloop invariant i182: i101;\nloop invariant i183: i102;\nloop invariant i184: i103;\nloop invariant i185: i104;\nloop invariant i186: i105;\nloop invariant i187: i106;\nloop invariant i188: i107;\nloop invariant i189: i108;\nloop invariant i190: i109;\nloop invariant i191: i110;\nloop invariant i192: i111;\nloop invariant i193: i112;\nloop invariant i194: i113;\nloop invariant i195: i114;\nloop invariant i196: i115;\nloop invariant i197: i116;\nloop invariant i198: i117;\nloop invariant i199: i118;\nloop invariant i200: i119;\nloop invariant i201: i120;\nloop invariant i202: i121;\nloop invariant i203: i122;\nloop invariant i204: i123;\nloop invariant i205: i124;\nloop invariant i206: i125;\nloop invariant i207: i126;\nloop invariant i208: i127;\nloop invariant i209: i128;\nloop invariant i210: i129;\nloop invariant i211: i130;\nloop invariant i212: i131;\nloop invariant i213: i132;\nloop invariant i214: i133;\nloop invariant i215: i134;\nloop invariant i216: i135;\nloop invariant i217: i136;\nloop invariant i218: i137;\nloop invariant i219: i138;\nloop invariant i220: i139;\nloop invariant i221: i140;\nloop invariant i222: i141;\nloop invariant i223: i142;\nloop invariant i224: i143;\nloop invariant i225: i144;\nloop invariant i226: i145;\nloop invariant i227: i146;\nloop invariant i228: i147;\nloop invariant i229: i148;\nloop invariant i230: i149;\nloop invariant i231: i150;\nloop invariant i232: i151;\nloop invariant i233: i152;\nloop invariant i234: i153;\nloop invariant i235: i154;\nloop invariant i236: i155;\nloop invariant i237: i156;\nloop invariant i238: i157;\nloop invariant i239: i158;\nloop invariant i240: 0 <= x <= 2;\nloop invariant i241: x >= 1;\nloop invariant i242: x % 2 == 0 ==> x is even;\nloop invariant i243: x % 2 != 0 ==> x is odd;\nloop invariant i244: x % 2 == 0 ==> x is not odd;\nloop invariant i245: x % 2 != 0 ==> x is not even;\nloop invariant i246: x is even ==> x % 2 == 0;\nloop invariant i247: x is odd ==> x % 2 != 0;\nloop invariant i248: x % 2 == 0 ==> x is divisible by 2;\nloop invariant i249: x % 2 != 0 ==> x is not divisible by 2;\nloop invariant i250: x is not divisible by 2 ==> x % 2 != 0;\nloop invariant i251: x is divisible by 2 ==> x % 2 == 0;\nloop invariant i252: x is even ==> x is divisible by 2;\nloop invariant i253: x is odd ==> x is not divisible by 2;\nloop invariant i254: x is not divisible by 2 ==> x is odd;\nloop invariant i255: x is divisible by 2 ==> x is even;\nloop invariant i256: x is even ==> x is not odd;\nloop invariant i257: x is odd ==> x is not even;\nloop invariant i258: x is not even ==> x is odd;\nloop invariant i259: x is not odd ==> x is even;\nloop invariant i260: x is not even ==> x is not divisible by 2;\nloop invariant i261: x is not divisible by 2 ==> x is not even;\nloop invariant i262: x is not odd ==> x is divisible by 2;\nloop invariant i263: x is divisible by 2 ==> x is not odd;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 224,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\nloop invariant i7: 0 <= x;\n\n\n\n\n\n\n\n\nloop invariant i16: x % 2 ==> x < 4294967296;\n\n\nloop invariant i19: x % 2 ==> x != 0;\nloop invariant i20: x % 2 ==> x != 2;\nloop invariant i21: x % 2 ==> x != 4;\nloop invariant i22: x % 2 ==> x != 6;\nloop invariant i23: x % 2 ==> x != 8;\nloop invariant i24: x % 2 ==> x != 10;\nloop invariant i25: x % 2 ==> x != 12;\nloop invariant i26: x % 2 ==> x != 14;\nloop invariant i27: x % 2 ==> x != 16;\nloop invariant i28: x % 2 ==> x != 18;\nloop invariant i29: x % 2 ==> x != 20;\nloop invariant i30: x % 2 ==> x != 22;\nloop invariant i31: x % 2 ==> x != 24;\nloop invariant i32: x % 2 ==> x != 26;\nloop invariant i33: x % 2 ==> x != 28;\nloop invariant i34: x % 2 ==> x != 30;\nloop invariant i35: x % 2 ==> x != 32;\nloop invariant i36: x % 2 ==> x != 34;\nloop invariant i37: x % 2 ==> x != 36;\nloop invariant i38: x % 2 ==> x != 38;\nloop invariant i39: x % 2 ==> x != 40;\nloop invariant i40: x % 2 ==> x != 42;\nloop invariant i41: x % 2 ==> x != 44;\nloop invariant i42: x % 2 ==> x != 46;\nloop invariant i43: x % 2 ==> x != 48;\nloop invariant i44: x % 2 ==> x != 50;\n\nloop invariant i46: 0 <= x % 2 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i66: (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant i67: (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i68: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i69: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i70: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i71: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i72: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i73: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i74: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i75: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i76: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 2 * (unknown_int());\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant 0 <= x <= 1;\nloop invariant x % 2 == 0 ==> x == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x; (x % 2) == 0; (x >= 2); (x % 4) == 0; (x % 8) == 0; (x % 16) == 0; (x % 32) == 0; (x % 64) == 0; (x % 128) == 0; (x % 256) == 0; (x % 512) == 0; (x % 1024) == 0; (x % 2048) == 0; (x % 4096) == 0; (x % 8192) == 0; (x % 16384) == 0; (x % 32768) == 0; (x % 65536) == 0; (x % 131072) == 0; (x % 262144) == 0; (x % 524288) == 0; (x % 1048576) == 0; (x % 2097152) == 0; (x % 4194304) == 0; (x % 8388608) == 0; (x % 16777216) == 0; (x % 33554432) == 0; (x % 67108864) == 0; (x % 134217728) == 0; (x % 268435456) == 0; (x % 536870912) == 0; (x % 1073741824) == 0; (x % 2147483648) == 0; (x % 4294967296) == 0; (x % 8589934592) == 0; (x % 17179869184) == 0; (x % 34359738368) == 0; (x % 68719476736) == 0; (x % 137438953472) == 0; (x % 274877906944) == 0; (x % 549755813888) == 0; (x % 1099511627776) == 0; (x % 2199023255552) == 0; (x % 4398046511104) == 0; (x % 8796093022208) == 0; (x % 17592186044416) == 0; (x % 35184372088832) == 0; (x % 70368744177664) == 0; (x % 140737488355328) == 0; (x % 281474976710656) == 0; (x % 562949953421312) == 0; (x % 1125899906842624) == 0; (x % 2251799813685248) == 0; (x % 4503599627370496) == 0; (x % 9007199254740992) == 0; (x % 18014398509481984) == 0; (x % 36028797018963968) == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x <= 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 0 ==> x >= 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 1 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 2 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 3 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 4 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 5 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 6 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 7 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 8 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 9 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 10 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 11 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 12 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 13 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 14 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 15 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 16 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 17 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 18 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 19 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 20 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 21 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 22 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 23 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 24 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 25 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 26 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 27 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 28 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 29 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 30 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 31 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 32 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 33 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 34 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 35 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 36 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 37 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 38 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 39 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 40 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 41 ==> x == 2 * (unknown_int() + 1);\n*/\n```",
                "```\n/*@\nloop invariant x <= 2 * (x + 2);\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant x <= 2 * x_pre;\nloop invariant x >= 0;\nloop invariant x <= 2 * x_post;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0; loop invariant x % 2 == 0; loop invariant x >= 2 * unknown_int();\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x % 2 == 0 ==> unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant ( x >= 0 ) ==> ( 0 <= x );\nloop invariant ( x >= 0 ) ==> ( x % 2 == 0 );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant unknown_int() == 1 ==> x % 2 == 0;\nloop invariant unknown_int() == 0 ==> x % 2 == 1;\nloop invariant unknown_int() ==> (x + 2) % 2 == 0;\nloop invariant !unknown_int() ==> (x + 2) % 2 == 1;\nloop invariant x % 2 ==> !(unknown_int());\nloop invariant x % 2 == 0 ==> unknown_int() == 1;\nloop invariant x % 2 == 1 ==> unknown_int() == 0;\nloop invariant x % 2 == 0 ==> !(unknown_int());\nloop invariant x % 2 == 1 ==> unknown_int();\nloop invariant x % 2 == 0 ==> !(x % 2 == 1);\nloop invariant x % 2 == 1 ==> !(x % 2 == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * n + 1;\nloop invariant n >= 0;\nloop invariant n <= x / 2;\nloop invariant n >= 0;\nloop invariant n <= x / 2;\nloop invariant x >= 2 * n + 1;\nloop invariant (x % 2) == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x % 2 == 0;\nloop invariant (x == 0) ==> (unknown_int() == 0);\nloop invariant (unknown_int() == 0) ==> (x == 0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * (unknown_int());\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant 0 <= x <= 1;\nloop invariant x % 2 == 0 ==> x == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant 0 <= x <= 1 is established but not preserved.\nloop invariant x % 2 == 0 ==> x == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x; (x % 2) == 0; (x >= 2); (x % 4) == 0; (x % 8) == 0; (x % 16) == 0; (x % 32) == 0; (x % 64) == 0; (x % 128) == 0; (x % 256) == 0; (x % 512) == 0; (x % 1024) == 0; (x % 2048) == 0; (x % 4096) == 0; (x % 8192) == 0; (x % 16384) == 0; (x % 32768) == 0; (x % 65536) == 0; (x % 131072) == 0; (x % 262144) == 0; (x % 524288) == 0; (x % 1048576) == 0; (x % 2097152) == 0; (x % 4194304) == 0; (x % 8388608) == 0; (x % 16777216) == 0; (x % 33554432) == 0; (x % 67108864) == 0; (x % 134217728) == 0; (x % 268435456) == 0; (x % 536870912) == 0; (x % 1073741824) == 0; (x % 2147483648) == 0; (x % 4294967296) == 0; (x % 8589934592) == 0; (x % 17179869184) == 0; (x % 34359738368) == 0; (x % 68719476736) == 0; (x % 137438953472) == 0; (x % 274877906944) == 0; (x % 549755813888) == 0; (x % 1099511627776) == 0; (x % 2199023255552) == 0; (x % 4398046511104) == 0; (x % 8796093022208) == 0; (x % 17592186044416) == 0; (x % 35184372088832) == 0; (x % 70368744177664) == 0; (x % 140737488355328) == 0; (x % 281474976710656) == 0; (x % 562949953421312) == 0; (x % 1125899906842624) == 0; (x % 2251799813685248) == 0; (x % 4503599627370496) == 0; (x % 9007199254740992) == 0; (x % 18014398509481984) == 0; (x % 36028797018963968) == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 46,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant x <= 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 0 ==> x >= 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 1 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 2 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 3 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 4 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 5 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 6 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 7 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 8 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 9 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 10 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 11 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 12 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 13 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 14 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 15 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 16 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 17 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 18 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 19 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 20 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 21 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 22 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 23 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 24 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 25 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 26 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 27 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 28 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 29 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 30 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 31 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 32 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 33 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 34 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 35 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 36 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 37 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 38 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 39 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 40 ==> x == 2 * (unknown_int() + 1);\nloop invariant unknown_int() == 41 ==> x == 2 * (unknown_int() + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant x <= 2 * (x + 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x <= 2 * (x + 2) is inductive.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: x <= 2 * (x + 2);\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: x >= 0;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x <= 2 * x_pre;\nloop invariant x >= 0;\nloop invariant x <= 2 * x_post;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable x_pre. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant x >= 0; loop invariant x % 2 == 0; loop invariant x >= 2 * unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x % 2 == 0 ==> unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: x >= 0;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( x >= 0 ) ==> ( 0 <= x );\nloop invariant ( x >= 0 ) ==> ( x % 2 == 0 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( x >= 0 ) ==> ( 0 <= x ) is partially proven to be inductive.\nloop invariant ( x >= 0 ) ==> ( x % 2 == 0 ) is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: ( x >= 0 ) ==> ( 0 <= x );\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant unknown_int() == 1 ==> x % 2 == 0;\nloop invariant unknown_int() == 0 ==> x % 2 == 1;\nloop invariant unknown_int() ==> (x + 2) % 2 == 0;\nloop invariant !unknown_int() ==> (x + 2) % 2 == 1;\nloop invariant x % 2 ==> !(unknown_int());\nloop invariant x % 2 == 0 ==> unknown_int() == 1;\nloop invariant x % 2 == 1 ==> unknown_int() == 0;\nloop invariant x % 2 == 0 ==> !(unknown_int());\nloop invariant x % 2 == 1 ==> unknown_int();\nloop invariant x % 2 == 0 ==> !(x % 2 == 1);\nloop invariant x % 2 == 1 ==> !(x % 2 == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n\n\n\n\n\n\nloop invariant i11: x % 2 == 0 ==> !(x % 2 == 1);\nloop invariant i12: x % 2 == 1 ==> !(x % 2 == 0);\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * n + 1;\nloop invariant n >= 0;\nloop invariant n <= x / 2;\nloop invariant n >= 0;\nloop invariant n <= x / 2;\nloop invariant x >= 2 * n + 1;\nloop invariant (x % 2) == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable n. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x % 2 == 0;\nloop invariant (x == 0) ==> (unknown_int() == 0);\nloop invariant (unknown_int() == 0) ==> (x == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 12: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 2 * (unknown_int());\nloop invariant i2: 0 <= x;\nloop invariant i3: x % 2 == 0;\nloop invariant i4: 0 <= x <= 1;\nloop invariant i5: x % 2 == 0 ==> x == 0;\nloop invariant i6: 0 <= x; (x % 2) == 0; (x >= 2); (x % 4) == 0; (x % 8) == 0; (x % 16) == 0; (x % 32) == 0; (x % 64) == 0; (x % 128) == 0; (x % 256) == 0; (x % 512) == 0; (x % 1024) == 0; (x % 2048) == 0; (x % 4096) == 0; (x % 8192) == 0; (x % 16384) == 0; (x % 32768) == 0; (x % 65536) == 0; (x % 131072) == 0; (x % 262144) == 0; (x % 524288) == 0; (x % 1048576) == 0; (x % 2097152) == 0; (x % 4194304) == 0; (x % 8388608) == 0; (x % 16777216) == 0; (x % 33554432) == 0; (x % 67108864) == 0; (x % 134217728) == 0; (x % 268435456) == 0; (x % 536870912) == 0; (x % 1073741824) == 0; (x % 2147483648) == 0; (x % 4294967296) == 0; (x % 8589934592) == 0; (x % 17179869184) == 0; (x % 34359738368) == 0; (x % 68719476736) == 0; (x % 137438953472) == 0; (x % 274877906944) == 0; (x % 549755813888) == 0; (x % 1099511627776) == 0; (x % 2199023255552) == 0; (x % 4398046511104) == 0; (x % 8796093022208) == 0; (x % 17592186044416) == 0; (x % 35184372088832) == 0; (x % 70368744177664) == 0; (x % 140737488355328) == 0; (x % 281474976710656) == 0; (x % 562949953421312) == 0; (x % 1125899906842624) == 0; (x % 2251799813685248) == 0; (x % 4503599627370496) == 0; (x % 9007199254740992) == 0; (x % 18014398509481984) == 0; (x % 36028797018963968) == 0;\nloop invariant i7: x <= 2 * (unknown_int() + 1);\nloop invariant i8: unknown_int() == 0 ==> x >= 2 * (unknown_int() + 1);\nloop invariant i9: unknown_int() == 1 ==> x == 2 * (unknown_int() + 1);\nloop invariant i10: unknown_int() == 2 ==> x == 2 * (unknown_int() + 1);\nloop invariant i11: unknown_int() == 3 ==> x == 2 * (unknown_int() + 1);\nloop invariant i12: unknown_int() == 4 ==> x == 2 * (unknown_int() + 1);\nloop invariant i13: unknown_int() == 5 ==> x == 2 * (unknown_int() + 1);\nloop invariant i14: unknown_int() == 6 ==> x == 2 * (unknown_int() + 1);\nloop invariant i15: unknown_int() == 7 ==> x == 2 * (unknown_int() + 1);\nloop invariant i16: unknown_int() == 8 ==> x == 2 * (unknown_int() + 1);\nloop invariant i17: unknown_int() == 9 ==> x == 2 * (unknown_int() + 1);\nloop invariant i18: unknown_int() == 10 ==> x == 2 * (unknown_int() + 1);\nloop invariant i19: unknown_int() == 11 ==> x == 2 * (unknown_int() + 1);\nloop invariant i20: unknown_int() == 12 ==> x == 2 * (unknown_int() + 1);\nloop invariant i21: unknown_int() == 13 ==> x == 2 * (unknown_int() + 1);\nloop invariant i22: unknown_int() == 14 ==> x == 2 * (unknown_int() + 1);\nloop invariant i23: unknown_int() == 15 ==> x == 2 * (unknown_int() + 1);\nloop invariant i24: unknown_int() == 16 ==> x == 2 * (unknown_int() + 1);\nloop invariant i25: unknown_int() == 17 ==> x == 2 * (unknown_int() + 1);\nloop invariant i26: unknown_int() == 18 ==> x == 2 * (unknown_int() + 1);\nloop invariant i27: unknown_int() == 19 ==> x == 2 * (unknown_int() + 1);\nloop invariant i28: unknown_int() == 20 ==> x == 2 * (unknown_int() + 1);\nloop invariant i29: unknown_int() == 21 ==> x == 2 * (unknown_int() + 1);\nloop invariant i30: unknown_int() == 22 ==> x == 2 * (unknown_int() + 1);\nloop invariant i31: unknown_int() == 23 ==> x == 2 * (unknown_int() + 1);\nloop invariant i32: unknown_int() == 24 ==> x == 2 * (unknown_int() + 1);\nloop invariant i33: unknown_int() == 25 ==> x == 2 * (unknown_int() + 1);\nloop invariant i34: unknown_int() == 26 ==> x == 2 * (unknown_int() + 1);\nloop invariant i35: unknown_int() == 27 ==> x == 2 * (unknown_int() + 1);\nloop invariant i36: unknown_int() == 28 ==> x == 2 * (unknown_int() + 1);\nloop invariant i37: unknown_int() == 29 ==> x == 2 * (unknown_int() + 1);\nloop invariant i38: unknown_int() == 30 ==> x == 2 * (unknown_int() + 1);\nloop invariant i39: unknown_int() == 31 ==> x == 2 * (unknown_int() + 1);\nloop invariant i40: unknown_int() == 32 ==> x == 2 * (unknown_int() + 1);\nloop invariant i41: unknown_int() == 33 ==> x == 2 * (unknown_int() + 1);\nloop invariant i42: unknown_int() == 34 ==> x == 2 * (unknown_int() + 1);\nloop invariant i43: unknown_int() == 35 ==> x == 2 * (unknown_int() + 1);\nloop invariant i44: unknown_int() == 36 ==> x == 2 * (unknown_int() + 1);\nloop invariant i45: unknown_int() == 37 ==> x == 2 * (unknown_int() + 1);\nloop invariant i46: unknown_int() == 38 ==> x == 2 * (unknown_int() + 1);\nloop invariant i47: unknown_int() == 39 ==> x == 2 * (unknown_int() + 1);\nloop invariant i48: unknown_int() == 40 ==> x == 2 * (unknown_int() + 1);\nloop invariant i49: unknown_int() == 41 ==> x == 2 * (unknown_int() + 1);\nloop invariant i50: x <= 2 * (x + 2);\nloop invariant i51: x >= 0;\nloop invariant i52: unknown_int() ==> x % 2 == 0;\nloop invariant i53: x <= 2 * x_pre;\nloop invariant i54: x <= 2 * x_post;\nloop invariant i55: x >= 0; loop invariant x % 2 == 0; loop invariant x >= 2 * unknown_int();\nloop invariant i56: x % 2 == 0 ==> unknown_int();\nloop invariant i57: ( x >= 0 ) ==> ( 0 <= x );\nloop invariant i58: ( x >= 0 ) ==> ( x % 2 == 0 );\nloop invariant i59: unknown_int() == 1 ==> x % 2 == 0;\nloop invariant i60: unknown_int() == 0 ==> x % 2 == 1;\nloop invariant i61: unknown_int() ==> (x + 2) % 2 == 0;\nloop invariant i62: !unknown_int() ==> (x + 2) % 2 == 1;\nloop invariant i63: x % 2 ==> !(unknown_int());\nloop invariant i64: x % 2 == 0 ==> unknown_int() == 1;\nloop invariant i65: x % 2 == 1 ==> unknown_int() == 0;\nloop invariant i66: x % 2 == 0 ==> !(unknown_int());\nloop invariant i67: x % 2 == 1 ==> unknown_int();\nloop invariant i68: x % 2 == 0 ==> !(x % 2 == 1);\nloop invariant i69: x % 2 == 1 ==> !(x % 2 == 0);\nloop invariant i70: 0 <= x <= 2 * n + 1;\nloop invariant i71: n >= 0;\nloop invariant i72: n <= x / 2;\nloop invariant i73: x >= 2 * n + 1;\nloop invariant i74: (x % 2) == 0;\nloop invariant i75: 0 <= x <= UINT_MAX;\nloop invariant i76: (x == 0) ==> (unknown_int() == 0);\nloop invariant i77: (unknown_int() == 0) ==> (x == 0);\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 72,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\nloop invariant i2: 0 <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i50: x <= 2 * (x + 2);\nloop invariant i51: x >= 0;\n\n\n\n\n\nloop invariant i57: ( x >= 0 ) ==> ( 0 <= x );\n\n\n\n\n\n\n\n\n\n\nloop invariant i68: x % 2 == 0 ==> !(x % 2 == 1);\nloop invariant i69: x % 2 == 1 ==> !(x % 2 == 0);\n\n\n\n\n\nloop invariant i75: 0 <= x <= UINT_MAX;\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/24.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant i + j == 11;\nloop invariant j >= 6;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i <= 9;\nloop invariant j <= 10;\nloop invariant 0 <= i <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant i + j == 11;\nloop invariant j >= 6;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i <= 9;\nloop invariant j <= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= j; loop invariant i % 2 == 1; loop invariant j % 2 == 0; loop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= j <= 10;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i + j <= 11;\nloop invariant i >= 2;\nloop invariant j >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant i <= j;\nloop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 11;loop invariant 0 <= j <= 10;loop invariant i <= j + 1;loop invariant (i <= j + 1) ==> (j >= i);loop invariant (j >= i) ==> (i <= j + 1);loop invariant i <= j + 1;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= j <= 10;\nloop invariant i >= j + 1;\nloop invariant i <= j + 1;\nloop invariant j >= i - 1;\nloop invariant j <= i - 1;\nloop invariant i + j >= 11;\nloop invariant i + j <= 11;\nloop invariant i * j >= 10;\nloop invariant i * j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= j <= 10;\nloop invariant (j >= i) ==> (j <= 9);\nloop invariant j >= i ==> (i <= 9);\nloop invariant j >= i ==> (i >= 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= j + 1;\nloop invariant i % 2 == 1;\nloop invariant j >= i;\nloop invariant i * j >= (i - 1) * (j + 1) / 2;\nloop invariant i * j <= (i + 1) * (j - 1) / 2;\nloop invariant i * j == (i + 1) * (j - 1) / 2;\n*/\n```",
                "```\n/*@\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j >= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= 11;\nloop invariant j <= 9;\nloop invariant i >= 2;\nloop invariant j >= 8;\nloop invariant i <= 13;\nloop invariant j <= 7;\nloop invariant i >= 3;\nloop invariant j >= 6;\nloop invariant i <= 15;\nloop invariant j <= 5;\nloop invariant i >= 4;\nloop invariant j >= 4;\nloop invariant i <= 17;\nloop invariant j <= 3;\nloop invariant i >= 5;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 6;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 3;\nloop invariant j >= 8;\nloop invariant i <= 13;\nloop invariant j <= 7;\nloop invariant i >= 4;\nloop invariant j >= 6;\nloop invariant i <= 15;\nloop invariant j <= 5;\nloop invariant i >= 5;\nloop invariant j >= 4;\nloop invariant i <= 17;\nloop invariant j <= 3;\nloop invariant i >= 6;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 7;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 5;\nloop invariant j >= 6;\nloop invariant i <= 15;\nloop invariant j <= 5;\nloop invariant i >= 6;\nloop invariant j >= 4;\nloop invariant i <= 17;\nloop invariant j <= 3;\nloop invariant i >= 7;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 8;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 7;\nloop invariant j >= 4;\nloop invariant i <= 17;\nloop invariant j <= 3;\nloop invariant i >= 8;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 9;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 9;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 10;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 10;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 11;\nloop invariant j <= -1;\nloop invariant i <= 21;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 12;\nloop invariant j <= -1;\nloop invariant i <= 21;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 13;\nloop invariant j <= -1;\nloop invariant i <= 21;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 14;\nloop invariant j <= -1;\nloop invariant i <= 21;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i >= 1;\nloop invariant j >= 0;\nloop invariant j <= 10;\nloop invariant i >= 1;\nloop invariant j >= 0;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= j <= 9;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant j - i <= 9;\nloop invariant j - i >= 1;\nloop invariant j - i == 10 - i/2;\nloop invariant i/2 + j/2 == 10;\nloop invariant i + j <= 20;\nloop invariant i + j >= 11;\nloop invariant i + j == 20 - (i - 1)/2;\nloop invariant i + j == 11 + (j - 1)/2;\nloop invariant i + j == 11 + 10 - i/2;\nloop invariant i + j == 21 - i/2;\nloop invariant i + j == 21 - (i - 1)/2;\nloop invariant i + j == 20 + (j - 1)/2;\nloop invariant i + j == 20 + 10 - i/2;\nloop invariant i + j == 30 - i/2;\nloop invariant i + j == 30 - (i - 1)/2;\nloop invariant i + j == 21 + (j - 1)/2;\nloop invariant i + j == 21 + 10 - i/2;\nloop invariant i + j == 31 - i/2;\nloop invariant i + j == 31 - (i - 1)/2;\nloop invariant i + j == 22 + (j - 1)/2;\nloop invariant i + j == 22 + 10 - i/2;\nloop invariant i + j == 32 - i/2;\nloop invariant i + j == 32 - (i - 1)/2;\nloop invariant i + j == 23 + (j - 1)/2;\nloop invariant i + j == 23 + 10 - i/2;\nloop invariant i + j == 33 - i/2;\nloop invariant i + j == 33 - (i - 1)/2;\nloop invariant i + j == 24 + (j - 1)/2;\nloop invariant i + j == 24 + 10 - i/2;\nloop invariant i + j == 34 - i/2;\nloop invariant i + j == 34 - (i - 1)/2;\nloop invariant i + j == 25 + (j - 1)/2;\nloop invariant i + j == 25 + 10 - i/2;\nloop invariant i + j == 35 - i/2;\nloop invariant i + j == 35 - (i - 1)/2;\nloop invariant i + j == 26 + (j - 1)/2;\nloop invariant i + j == 26 + 10 - i/2;\nloop invariant i + j == 36 - i/2;\nloop invariant i + j == 36 - (i - 1)/2;\nloop invariant i + j == 27 + (j - 1)/2;\nloop invariant i + j == 27 + 10 - i/2;\nloop invariant i + j == 37 - i/2;\nloop invariant i + j == 37 - (i - 1)/2;\nloop invariant i + j == 28 + (j - 1)/2;\nloop invariant i + j == 28 + 10 - i/2;\nloop invariant i + j == 38 - i/2;\nloop invariant i + j == 38 - (i - 1)/2;\nloop invariant i + j == 29 + (j - 1)/2;\nloop invariant i + j == 29 + 10 - i/2;\nloop invariant i + j == 39 - i/2;\nloop invariant i + j == 39 - (i - 1)/2;\nloop invariant i + j == 30 + (j - 1)/2;\nloop invariant i + j == 30 + 10 - i/2;\nloop invariant i + j == 40 - i/2;\nloop invariant i + j == 40 - (i - 1)/2;\nloop invariant i + j == 31 + (j - 1)/2;\nloop invariant i + j == 31 + 10 - i/2;\nloop invariant i + j == 41 - i/2;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 1 <= j <= 10;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 10;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\n*/\n```",
                "```\n/*@\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i = i + 2;\nloop invariant j = j - 1;\nloop invariant j < i;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant i + j == 11;\nloop invariant j >= 6;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i <= 9;\nloop invariant j <= 10;\nloop invariant 0 <= i <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant i + j == 11;\nloop invariant j >= 6;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i <= 9;\nloop invariant j <= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= j <= 10 is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant i + j == 11 is established but not preserved.\nloop invariant j >= 6 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant i <= 9 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: i % 2 == 1;\n\n\nloop invariant i5: i >= 1;\n\n\nloop invariant i8: j <= 10;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= j; loop invariant i % 2 == 1; loop invariant j % 2 == 0; loop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= j; loop invariant i % 2 == 1; loop invariant j % 2 == 0; loop invariant j >= i is established but not preserved.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= j <= 10;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i + j <= 11;\nloop invariant i >= 2;\nloop invariant j >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 0 is preserved but not established.\nloop invariant j % 2 == 1 is partially proven to be inductive.\nloop invariant i + j <= 11 is partially proven to be inductive.\nloop invariant i >= 2 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 10;\nloop invariant i <= j;\nloop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is established but not preserved.\nloop invariant i <= j is established but not preserved.\nloop invariant j >= i is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 11;loop invariant 0 <= j <= 10;loop invariant i <= j + 1;loop invariant (i <= j + 1) ==> (j >= i);loop invariant (j >= i) ==> (i <= j + 1);loop invariant i <= j + 1;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 11;loop invariant 0 <= j <= 10;loop invariant i <= j + 1;loop invariant (i <= j + 1) ==> (j >= i);loop invariant (j >= i) ==> (i <= j + 1);loop invariant i <= j + 1;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i is established but not preserved.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= j <= 10;\nloop invariant i >= j + 1;\nloop invariant i <= j + 1;\nloop invariant j >= i - 1;\nloop invariant j <= i - 1;\nloop invariant i + j >= 11;\nloop invariant i + j <= 11;\nloop invariant i * j >= 10;\nloop invariant i * j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= j + 1 is preserved but not established.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant j >= i - 1 is partially proven to be inductive.\nloop invariant j <= i - 1 is partially proven to be inductive.\nloop invariant i + j >= 11 is partially proven to be inductive.\nloop invariant i + j <= 11 is partially proven to be inductive.\nloop invariant i * j >= 10 is partially proven to be inductive.\nloop invariant i * j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant j % 2 == 1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: 1 <= j <= 10;\n\n\n\n\nloop invariant i7: i + j >= 11;\n\nloop invariant i9: i * j >= 10;\n\nloop invariant i11: i % 2 == 1;\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= j <= 10;\nloop invariant (j >= i) ==> (j <= 9);\nloop invariant j >= i ==> (i <= 9);\nloop invariant j >= i ==> (i >= 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant (j >= i) ==> (j <= 9) is preserved but not established.\nloop invariant j >= i ==> (i <= 9) is partially proven to be inductive.\nloop invariant j >= i ==> (i >= 1) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n\nloop invariant i5: j >= i ==> (i >= 1);\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= j + 1;\nloop invariant i % 2 == 1;\nloop invariant j >= i;\nloop invariant i * j >= (i - 1) * (j + 1) / 2;\nloop invariant i * j <= (i + 1) * (j - 1) / 2;\nloop invariant i * j == (i + 1) * (j - 1) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= j + 1 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i * j >= (i - 1) * (j + 1) / 2 is partially proven to be inductive.\nloop invariant i * j <= (i + 1) * (j - 1) / 2 is preserved but not established.\nloop invariant i * j == (i + 1) * (j - 1) / 2 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: i % 2 == 1;\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 28,
                    "annotations": "```\n/*@\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j >= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= 11;\nloop invariant j <= 9;\nloop invariant i >= 2;\nloop invariant j >= 8;\nloop invariant i <= 13;\nloop invariant j <= 7;\nloop invariant i >= 3;\nloop invariant j >= 6;\nloop invariant i <= 15;\nloop invariant j <= 5;\nloop invariant i >= 4;\nloop invariant j >= 4;\nloop invariant i <= 17;\nloop invariant j <= 3;\nloop invariant i >= 5;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 6;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 3;\nloop invariant j >= 8;\nloop invariant i <= 13;\nloop invariant j <= 7;\nloop invariant i >= 4;\nloop invariant j >= 6;\nloop invariant i <= 15;\nloop invariant j <= 5;\nloop invariant i >= 5;\nloop invariant j >= 4;\nloop invariant i <= 17;\nloop invariant j <= 3;\nloop invariant i >= 6;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 7;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 5;\nloop invariant j >= 6;\nloop invariant i <= 15;\nloop invariant j <= 5;\nloop invariant i >= 6;\nloop invariant j >= 4;\nloop invariant i <= 17;\nloop invariant j <= 3;\nloop invariant i >= 7;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 8;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 7;\nloop invariant j >= 4;\nloop invariant i <= 17;\nloop invariant j <= 3;\nloop invariant i >= 8;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 9;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 9;\nloop invariant j >= 2;\nloop invariant i <= 19;\nloop invariant j <= 1;\nloop invariant i >= 10;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 10;\nloop invariant j >= 0;\nloop invariant i <= 21;\nloop invariant j <= -1;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 11;\nloop invariant j <= -1;\nloop invariant i <= 21;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 12;\nloop invariant j <= -1;\nloop invariant i <= 21;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 13;\nloop invariant j <= -1;\nloop invariant i <= 21;\nloop invariant j - i >= -1;\nloop invariant i <= j;\nloop invariant i >= 14;\nloop invariant j <= -1;\nloop invariant i <= 21;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant j - i >= -1 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j <= 9 is preserved but not established.\nloop invariant i >= 2 is partially proven to be inductive.\nloop invariant j >= 8 is partially proven to be inductive.\nloop invariant i <= 13 is partially proven to be inductive.\nloop invariant j <= 7 is partially proven to be inductive.\nloop invariant i >= 3 is partially proven to be inductive.\nloop invariant j >= 6 is partially proven to be inductive.\nloop invariant i <= 15 is partially proven to be inductive.\nloop invariant j <= 5 is partially proven to be inductive.\nloop invariant i >= 4 is partially proven to be inductive.\nloop invariant j >= 4 is partially proven to be inductive.\nloop invariant i <= 17 is partially proven to be inductive.\nloop invariant j <= 3 is partially proven to be inductive.\nloop invariant i >= 5 is partially proven to be inductive.\nloop invariant j >= 2 is partially proven to be inductive.\nloop invariant i <= 19 is partially proven to be inductive.\nloop invariant j <= 1 is partially proven to be inductive.\nloop invariant i >= 6 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i <= 21 is partially proven to be inductive.\nloop invariant j <= -1 is partially proven to be inductive.\nloop invariant i >= 7 is partially proven to be inductive.\nloop invariant i >= 8 is partially proven to be inductive.\nloop invariant i >= 9 is partially proven to be inductive.\nloop invariant i >= 10 is partially proven to be inductive.\nloop invariant i >= 11 is partially proven to be inductive.\nloop invariant i >= 12 is partially proven to be inductive.\nloop invariant i >= 13 is partially proven to be inductive.\nloop invariant i >= 14 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\nloop invariant i3: i >= 1;\n\nloop invariant i5: i % 2 == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: j >= 0;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i >= 1;\nloop invariant j >= 0;\nloop invariant j <= 10;\nloop invariant i >= 1;\nloop invariant j >= 0;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i >= j;\nloop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i >= j is preserved but not established.\nloop invariant j >= i is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i >= 1;\nloop invariant i3: j <= 10;\nloop invariant i4: j >= 0;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 59,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= j <= 9;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant j - i <= 9;\nloop invariant j - i >= 1;\nloop invariant j - i == 10 - i/2;\nloop invariant i/2 + j/2 == 10;\nloop invariant i + j <= 20;\nloop invariant i + j >= 11;\nloop invariant i + j == 20 - (i - 1)/2;\nloop invariant i + j == 11 + (j - 1)/2;\nloop invariant i + j == 11 + 10 - i/2;\nloop invariant i + j == 21 - i/2;\nloop invariant i + j == 21 - (i - 1)/2;\nloop invariant i + j == 20 + (j - 1)/2;\nloop invariant i + j == 20 + 10 - i/2;\nloop invariant i + j == 30 - i/2;\nloop invariant i + j == 30 - (i - 1)/2;\nloop invariant i + j == 21 + (j - 1)/2;\nloop invariant i + j == 21 + 10 - i/2;\nloop invariant i + j == 31 - i/2;\nloop invariant i + j == 31 - (i - 1)/2;\nloop invariant i + j == 22 + (j - 1)/2;\nloop invariant i + j == 22 + 10 - i/2;\nloop invariant i + j == 32 - i/2;\nloop invariant i + j == 32 - (i - 1)/2;\nloop invariant i + j == 23 + (j - 1)/2;\nloop invariant i + j == 23 + 10 - i/2;\nloop invariant i + j == 33 - i/2;\nloop invariant i + j == 33 - (i - 1)/2;\nloop invariant i + j == 24 + (j - 1)/2;\nloop invariant i + j == 24 + 10 - i/2;\nloop invariant i + j == 34 - i/2;\nloop invariant i + j == 34 - (i - 1)/2;\nloop invariant i + j == 25 + (j - 1)/2;\nloop invariant i + j == 25 + 10 - i/2;\nloop invariant i + j == 35 - i/2;\nloop invariant i + j == 35 - (i - 1)/2;\nloop invariant i + j == 26 + (j - 1)/2;\nloop invariant i + j == 26 + 10 - i/2;\nloop invariant i + j == 36 - i/2;\nloop invariant i + j == 36 - (i - 1)/2;\nloop invariant i + j == 27 + (j - 1)/2;\nloop invariant i + j == 27 + 10 - i/2;\nloop invariant i + j == 37 - i/2;\nloop invariant i + j == 37 - (i - 1)/2;\nloop invariant i + j == 28 + (j - 1)/2;\nloop invariant i + j == 28 + 10 - i/2;\nloop invariant i + j == 38 - i/2;\nloop invariant i + j == 38 - (i - 1)/2;\nloop invariant i + j == 29 + (j - 1)/2;\nloop invariant i + j == 29 + 10 - i/2;\nloop invariant i + j == 39 - i/2;\nloop invariant i + j == 39 - (i - 1)/2;\nloop invariant i + j == 30 + (j - 1)/2;\nloop invariant i + j == 30 + 10 - i/2;\nloop invariant i + j == 40 - i/2;\nloop invariant i + j == 40 - (i - 1)/2;\nloop invariant i + j == 31 + (j - 1)/2;\nloop invariant i + j == 31 + 10 - i/2;\nloop invariant i + j == 41 - i/2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= j <= 9 is preserved but not established.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant j - i <= 9 is partially proven to be inductive.\nloop invariant j - i >= 1 is partially proven to be inductive.\nloop invariant j - i == 10 - i/2 is partially proven to be inductive.\nloop invariant i/2 + j/2 == 10 is partially proven to be inductive.\nloop invariant i + j <= 20 is partially proven to be inductive.\nloop invariant i + j >= 11 is partially proven to be inductive.\nloop invariant i + j == 20 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 11 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 11 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 21 - i/2 is partially proven to be inductive.\nloop invariant i + j == 21 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 20 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 20 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 30 - i/2 is partially proven to be inductive.\nloop invariant i + j == 30 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 21 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 21 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 31 - i/2 is partially proven to be inductive.\nloop invariant i + j == 31 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 22 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 22 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 32 - i/2 is partially proven to be inductive.\nloop invariant i + j == 32 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 23 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 23 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 33 - i/2 is partially proven to be inductive.\nloop invariant i + j == 33 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 24 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 24 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 34 - i/2 is partially proven to be inductive.\nloop invariant i + j == 34 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 25 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 25 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 35 - i/2 is partially proven to be inductive.\nloop invariant i + j == 35 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 26 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 26 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 36 - i/2 is partially proven to be inductive.\nloop invariant i + j == 36 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 27 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 27 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 37 - i/2 is partially proven to be inductive.\nloop invariant i + j == 37 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 28 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 28 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 38 - i/2 is partially proven to be inductive.\nloop invariant i + j == 38 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 29 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 29 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 39 - i/2 is partially proven to be inductive.\nloop invariant i + j == 39 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 30 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 30 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 40 - i/2 is partially proven to be inductive.\nloop invariant i + j == 40 - (i - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 31 + (j - 1)/2 is partially proven to be inductive.\nloop invariant i + j == 31 + 10 - i/2 is partially proven to be inductive.\nloop invariant i + j == 41 - i/2 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\nloop invariant i4: i % 2 == 1;\n\nloop invariant i6: j - i <= 9;\n\n\n\n\nloop invariant i11: i + j >= 11;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 1 <= j <= 10;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 10;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\nloop invariant i - j <= 9;\nloop invariant i * j >= 10;\nloop invariant i / j <= 1;\nloop invariant i % j >= 0;\nloop invariant j % i >= 0;\nloop invariant i + j >= 11;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= j is established but not preserved.\nloop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i + j >= 11 is partially proven to be inductive.\nloop invariant i - j <= 9 is partially proven to be inductive.\nloop invariant i * j >= 10 is partially proven to be inductive.\nloop invariant i / j <= 1 is partially proven to be inductive.\nloop invariant i % j >= 0 is partially proven to be inductive.\nloop invariant j % i >= 0 is partially proven to be inductive.\nloop invariant i + j >= 10 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: 1 <= j <= 10;\nloop invariant i3: i >= 1;\n\nloop invariant i5: i + j >= 11;\nloop invariant i6: i - j <= 9;\nloop invariant i7: i * j >= 10;\nloop invariant i8: i / j <= 1;\nloop invariant i9: i % j >= 0;\nloop invariant i10: j % i >= 0;\nloop invariant i11: i + j >= 10;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i <= j is established but not preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: j <= 10;\nloop invariant i4: i % 2 == 1;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i = i + 2;\nloop invariant j = j - 1;\nloop invariant j < i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: i % 2 == 1;\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 147: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= i <= j <= 10;\nloop invariant i2: i % 2 == 1;\nloop invariant i3: i + j == 11;\nloop invariant i4: j >= 6;\nloop invariant i5: i >= 1;\nloop invariant i6: j >= 1;\nloop invariant i7: i <= 9;\nloop invariant i8: j <= 10;\nloop invariant i9: 0 <= i <= j; loop invariant i % 2 == 1; loop invariant j % 2 == 0; loop invariant j >= i;\nloop invariant i10: 1 <= i <= 10;\nloop invariant i11: 1 <= j <= 10;\nloop invariant i12: i % 2 == 0;\nloop invariant i13: j % 2 == 1;\nloop invariant i14: i + j <= 11;\nloop invariant i15: i >= 2;\nloop invariant i16: 0 <= j <= 10;\nloop invariant i17: i <= j;\nloop invariant i18: j >= i;\nloop invariant i19: 0 <= i <= 11;loop invariant 0 <= j <= 10;loop invariant i <= j + 1;loop invariant (i <= j + 1) ==> (j >= i);loop invariant (j >= i) ==> (i <= j + 1);loop invariant i <= j + 1;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;\nloop invariant i20: 0 <= i <= 10;\nloop invariant i21: i >= j + 1;\nloop invariant i22: i <= j + 1;\nloop invariant i23: j >= i - 1;\nloop invariant i24: j <= i - 1;\nloop invariant i25: i + j >= 11;\nloop invariant i26: i * j >= 10;\nloop invariant i27: i * j <= 10;\nloop invariant i28: j % 2 == 0;\nloop invariant i29: (j >= i) ==> (j <= 9);\nloop invariant i30: j >= i ==> (i <= 9);\nloop invariant i31: j >= i ==> (i >= 1);\nloop invariant i32: 1 <= i <= j + 1;\nloop invariant i33: i * j >= (i - 1) * (j + 1) / 2;\nloop invariant i34: i * j <= (i + 1) * (j - 1) / 2;\nloop invariant i35: i * j == (i + 1) * (j - 1) / 2;\nloop invariant i36: j - i >= -1;\nloop invariant i37: j >= 10;\nloop invariant i38: i <= 11;\nloop invariant i39: j <= 9;\nloop invariant i40: j >= 8;\nloop invariant i41: i <= 13;\nloop invariant i42: j <= 7;\nloop invariant i43: i >= 3;\nloop invariant i44: i <= 15;\nloop invariant i45: j <= 5;\nloop invariant i46: i >= 4;\nloop invariant i47: j >= 4;\nloop invariant i48: i <= 17;\nloop invariant i49: j <= 3;\nloop invariant i50: i >= 5;\nloop invariant i51: j >= 2;\nloop invariant i52: i <= 19;\nloop invariant i53: j <= 1;\nloop invariant i54: i >= 6;\nloop invariant i55: j >= 0;\nloop invariant i56: i <= 21;\nloop invariant i57: j <= -1;\nloop invariant i58: i >= 7;\nloop invariant i59: i >= 8;\nloop invariant i60: i >= 9;\nloop invariant i61: i >= 10;\nloop invariant i62: i >= 11;\nloop invariant i63: i >= 12;\nloop invariant i64: i >= 13;\nloop invariant i65: i >= 14;\nloop invariant i66: i >= j;\nloop invariant i67: 1 <= j <= 9;\nloop invariant i68: j - i <= 9;\nloop invariant i69: j - i >= 1;\nloop invariant i70: j - i == 10 - i/2;\nloop invariant i71: i/2 + j/2 == 10;\nloop invariant i72: i + j <= 20;\nloop invariant i73: i + j == 20 - (i - 1)/2;\nloop invariant i74: i + j == 11 + (j - 1)/2;\nloop invariant i75: i + j == 11 + 10 - i/2;\nloop invariant i76: i + j == 21 - i/2;\nloop invariant i77: i + j == 21 - (i - 1)/2;\nloop invariant i78: i + j == 20 + (j - 1)/2;\nloop invariant i79: i + j == 20 + 10 - i/2;\nloop invariant i80: i + j == 30 - i/2;\nloop invariant i81: i + j == 30 - (i - 1)/2;\nloop invariant i82: i + j == 21 + (j - 1)/2;\nloop invariant i83: i + j == 21 + 10 - i/2;\nloop invariant i84: i + j == 31 - i/2;\nloop invariant i85: i + j == 31 - (i - 1)/2;\nloop invariant i86: i + j == 22 + (j - 1)/2;\nloop invariant i87: i + j == 22 + 10 - i/2;\nloop invariant i88: i + j == 32 - i/2;\nloop invariant i89: i + j == 32 - (i - 1)/2;\nloop invariant i90: i + j == 23 + (j - 1)/2;\nloop invariant i91: i + j == 23 + 10 - i/2;\nloop invariant i92: i + j == 33 - i/2;\nloop invariant i93: i + j == 33 - (i - 1)/2;\nloop invariant i94: i + j == 24 + (j - 1)/2;\nloop invariant i95: i + j == 24 + 10 - i/2;\nloop invariant i96: i + j == 34 - i/2;\nloop invariant i97: i + j == 34 - (i - 1)/2;\nloop invariant i98: i + j == 25 + (j - 1)/2;\nloop invariant i99: i + j == 25 + 10 - i/2;\nloop invariant i100: i + j == 35 - i/2;\nloop invariant i101: i + j == 35 - (i - 1)/2;\nloop invariant i102: i + j == 26 + (j - 1)/2;\nloop invariant i103: i + j == 26 + 10 - i/2;\nloop invariant i104: i + j == 36 - i/2;\nloop invariant i105: i + j == 36 - (i - 1)/2;\nloop invariant i106: i + j == 27 + (j - 1)/2;\nloop invariant i107: i + j == 27 + 10 - i/2;\nloop invariant i108: i + j == 37 - i/2;\nloop invariant i109: i + j == 37 - (i - 1)/2;\nloop invariant i110: i + j == 28 + (j - 1)/2;\nloop invariant i111: i + j == 28 + 10 - i/2;\nloop invariant i112: i + j == 38 - i/2;\nloop invariant i113: i + j == 38 - (i - 1)/2;\nloop invariant i114: i + j == 29 + (j - 1)/2;\nloop invariant i115: i + j == 29 + 10 - i/2;\nloop invariant i116: i + j == 39 - i/2;\nloop invariant i117: i + j == 39 - (i - 1)/2;\nloop invariant i118: i + j == 30 + (j - 1)/2;\nloop invariant i119: i + j == 30 + 10 - i/2;\nloop invariant i120: i + j == 40 - i/2;\nloop invariant i121: i + j == 40 - (i - 1)/2;\nloop invariant i122: i + j == 31 + (j - 1)/2;\nloop invariant i123: i + j == 31 + 10 - i/2;\nloop invariant i124: i + j == 41 - i/2;\nloop invariant i125: 0 <= i <= j;\nloop invariant i126: i - j <= 9;\nloop invariant i127: i / j <= 1;\nloop invariant i128: i % j >= 0;\nloop invariant i129: j % i >= 0;\nloop invariant i130: i + j >= 10;\nloop invariant i131: i >= 0;\nloop invariant i132: i = i + 2;\nloop invariant i133: j = j - 1;\nloop invariant i134: j < i;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 88,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: 0 <= i <= j <= 10;\nloop invariant i2: i % 2 == 1;\n\nloop invariant i4: j >= 6;\nloop invariant i5: i >= 1;\nloop invariant i6: j >= 1;\nloop invariant i7: i <= 9;\nloop invariant i8: j <= 10;\nloop invariant i9: 0 <= i <= j; loop invariant i % 2 == 1; loop invariant j % 2 == 0; loop invariant j >= i;\nloop invariant i10: 1 <= i <= 10;\nloop invariant i11: 1 <= j <= 10;\n\n\nloop invariant i14: i + j <= 11;\n\nloop invariant i16: 0 <= j <= 10;\nloop invariant i17: i <= j;\nloop invariant i18: j >= i;\nloop invariant i19: 0 <= i <= 11;loop invariant 0 <= j <= 10;loop invariant i <= j + 1;loop invariant (i <= j + 1) ==> (j >= i);loop invariant (j >= i) ==> (i <= j + 1);loop invariant i <= j + 1;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;loop invariant j >= i;\nloop invariant i20: 0 <= i <= 10;\n\nloop invariant i22: i <= j + 1;\nloop invariant i23: j >= i - 1;\n\nloop invariant i25: i + j >= 11;\nloop invariant i26: i * j >= 10;\nloop invariant i27: i * j <= 10;\nloop invariant i28: j % 2 == 0;\n\nloop invariant i30: j >= i ==> (i <= 9);\nloop invariant i31: j >= i ==> (i >= 1);\nloop invariant i32: 1 <= i <= j + 1;\nloop invariant i33: i * j >= (i - 1) * (j + 1) / 2;\n\n\nloop invariant i36: j - i >= -1;\nloop invariant i37: j >= 10;\nloop invariant i38: i <= 11;\n\nloop invariant i40: j >= 8;\nloop invariant i41: i <= 13;\n\n\nloop invariant i44: i <= 15;\n\n\nloop invariant i47: j >= 4;\nloop invariant i48: i <= 17;\n\n\nloop invariant i51: j >= 2;\nloop invariant i52: i <= 19;\n\n\nloop invariant i55: j >= 0;\nloop invariant i56: i <= 21;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i68: j - i <= 9;\nloop invariant i69: j - i >= 1;\n\n\nloop invariant i72: i + j <= 20;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i125: 0 <= i <= j;\nloop invariant i126: i - j <= 9;\nloop invariant i127: i / j <= 1;\nloop invariant i128: i % j >= 0;\nloop invariant i129: j % i >= 0;\nloop invariant i130: i + j >= 10;\nloop invariant i131: i >= 0;\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/130.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= x1;\nloop invariant x3 >= x2;\nloop invariant x3 >= x1;\nloop invariant x1 >= 0 ==> x1 >= d1;\nloop invariant x2 >= 0 ==> x2 >= d2;\nloop invariant x3 >= 0 ==> x3 >= d3;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0 ==> x3 >= 0;\nloop invariant x2 <= x2 + d2 * x1;\nloop invariant x3 <= x3 + d3 * x1;\nloop invariant x2 >= x2 - d2 * x1;\nloop invariant x3 >= x3 - d3 * x1;\nloop invariant x1 >= x1 - d1 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= d1;\nloop invariant 0 <= x2 <= d2;\nloop invariant 0 <= x3 <= d3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant x1 <= 1;\nloop invariant x2 <= 1;\nloop invariant x3 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 <= x1;\nloop invariant d2 <= x2;\nloop invariant d3 <= x3;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 <= 1;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= x2 - d2;\nloop invariant x1 >= x3 - d3;\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= x2 - d2;\nloop invariant x1 >= x3 - d3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 0 < x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant x2 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 0;\nloop invariant 0 <= x3 <= 0;\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant x2 <= x1;\nloop invariant x3 <= x1;\nloop invariant x2 <= x3;\nloop invariant x3 == 1 ==> x2 == 0;\nloop invariant x2 == 0 ==> x3 == 1;\nloop invariant x3 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> x3 == 1;\nloop invariant d2 == 1 ==> x2 == 0;\nloop invariant x2 == 0 ==> d2 == 1;\nloop invariant d1 == 1 ==> x1 == 1;\nloop invariant x1 == 1 ==> d1 == 1;\nloop invariant d3 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d3 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 >= d1 * (x2 + x3);\nloop invariant x2 >= d2 * (x3);\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= d1 * (x2 + x3);\nloop invariant x2 >= d2 * (x3);\nloop invariant x3 >= d3;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x1 <= INT_MAX;\nloop invariant 0 <= x2 <= INT_MAX;\nloop invariant 0 <= x3 <= INT_MAX;\nloop invariant 1 <= d1 <= INT_MAX;\nloop invariant 1 <= d2 <= INT_MAX;\nloop invariant 1 <= d3 <= INT_MAX;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= x1 - (x1 / d1) * d1;\nloop invariant x3 >= x2 - (x2 / d2) * d2;\nloop invariant x3 >= x1 - (x1 / d1) * d1 - (x2 / d2) * d2;\n*/\n```",
                "```\n/*@\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= d1;\nloop invariant x1 >= d2;\nloop invariant x1 >= d3;\nloop invariant x2 >= d2;\nloop invariant x2 >= d3;\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= d1 <= 1;\nloop invariant 1 <= d2 <= 1;\nloop invariant 1 <= d3 <= 1;\nloop invariant 1 <= x1 <= 1;\nloop invariant x2 <= 1;\nloop invariant x3 <= 1;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= d1 <= 10;\nloop invariant 1 <= d2 <= 10;\nloop invariant 1 <= d3 <= 10;\nloop invariant 1 <= x1 <= 10;\nloop invariant 1 <= x2 <= 10;\nloop invariant 1 <= x3 <= 10;\nloop invariant x1 >= 0 ==> x2 >= 0;\nloop invariant x1 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= x2;\nloop invariant x1 >= 0 ==> x1 >= x3;\nloop invariant x1 >= 0 ==> x2 >= x3;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= x1;\nloop invariant x3 >= x2;\nloop invariant x3 >= x1;\nloop invariant x1 >= 0 ==> x1 >= d1;\nloop invariant x2 >= 0 ==> x2 >= d2;\nloop invariant x3 >= 0 ==> x3 >= d3;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x2 >= x1 is neither established nor preserved.\nloop invariant x3 >= x2 is neither established nor preserved.\nloop invariant x3 >= x1 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 is established but not preserved.\nloop invariant x2 >= 0 ==> x2 >= d2 is established but not preserved.\nloop invariant x3 >= 0 ==> x3 >= d3 is established but not preserved.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: d1 >= 0;\nloop invariant i2: d2 >= 0;\nloop invariant i3: d3 >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i13: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant i14: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant i15: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant i16: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i17: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i18: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i19: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i20: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i21: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i22: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i23: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i24: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i25: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i26: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i27: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i28: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i29: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i30: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i31: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i32: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i33: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i34: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x1 >= x2 is neither established nor preserved.\nloop invariant x2 >= x3 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 1;\nloop invariant i2: 0 <= d2 <= 1;\nloop invariant i3: 0 <= d3 <= 1;\nloop invariant i4: x1 >= 0;\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0 ==> x3 >= 0;\nloop invariant x2 <= x2 + d2 * x1;\nloop invariant x3 <= x3 + d3 * x1;\nloop invariant x2 >= x2 - d2 * x1;\nloop invariant x3 >= x3 - d3 * x1;\nloop invariant x1 >= x1 - d1 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant x2 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x2 <= x2 + d2 * x1 is partially proven to be inductive.\nloop invariant x3 <= x3 + d3 * x1 is partially proven to be inductive.\nloop invariant x2 >= x2 - d2 * x1 is partially proven to be inductive.\nloop invariant x3 >= x3 - d3 * x1 is partially proven to be inductive.\nloop invariant x1 >= x1 - d1 * x1 is partially proven to be inductive.\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 is partially proven to be inductive.\nloop invariant x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1 is partially proven to be inductive.\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant i11: x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant i12: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x2 <= 1 is neither established nor preserved.\nloop invariant x1 >= 1 is established but not preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= d1;\nloop invariant 0 <= x2 <= d2;\nloop invariant 0 <= x3 <= d3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= d1 is established but not preserved.\nloop invariant 0 <= x2 <= d2 is neither established nor preserved.\nloop invariant 0 <= x3 <= d3 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant x1 <= 1;\nloop invariant x2 <= 1;\nloop invariant x3 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 <= x1;\nloop invariant d2 <= x2;\nloop invariant d3 <= x3;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 <= 1;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant d1 > 0 is partially proven to be inductive.\nloop invariant d2 > 0 is partially proven to be inductive.\nloop invariant d3 > 0 is partially proven to be inductive.\nloop invariant x1 <= 1 is partially proven to be inductive.\nloop invariant x2 <= 1 is partially proven to be inductive.\nloop invariant x3 <= 1 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant d1 <= x1 is established but not preserved.\nloop invariant d2 <= x2 is preserved but not established.\nloop invariant d3 <= x3 is preserved but not established.\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) is partially proven to be inductive.\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) is partially proven to be inductive.\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) is partially proven to be inductive.\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2) is partially proven to be inductive.\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2) is partially proven to be inductive.\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2) is partially proven to be inductive.\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1 is partially proven to be inductive.\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 <= 1 is partially proven to be inductive.\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1 is partially proven to be inductive.\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\nloop invariant i4: d1 > 0;\nloop invariant i5: d2 > 0;\nloop invariant i6: d3 > 0;\nloop invariant i7: x1 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i24: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= x2 - d2;\nloop invariant x1 >= x3 - d3;\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= x2 - d2;\nloop invariant x1 >= x3 - d3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant x1 >= x2 is neither established nor preserved.\nloop invariant x1 >= x3 is neither established nor preserved.\nloop invariant x2 >= x3 is neither established nor preserved.\nloop invariant x1 >= x2 - d2 is established but not preserved.\nloop invariant x1 >= x3 - d3 is established but not preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 0 < x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant x2 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant 0 < x1 <= 1 is established but not preserved.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant x2 >= 0 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 1;\nloop invariant i2: 0 <= d2 <= 1;\nloop invariant i3: 0 <= d3 <= 1;\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 0;\nloop invariant 0 <= x3 <= 0;\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant x2 <= x1;\nloop invariant x3 <= x1;\nloop invariant x2 <= x3;\nloop invariant x3 == 1 ==> x2 == 0;\nloop invariant x2 == 0 ==> x3 == 1;\nloop invariant x3 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> x3 == 1;\nloop invariant d2 == 1 ==> x2 == 0;\nloop invariant x2 == 0 ==> d2 == 1;\nloop invariant d1 == 1 ==> x1 == 1;\nloop invariant x1 == 1 ==> d1 == 1;\nloop invariant d3 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d3 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 0 is preserved but not established.\nloop invariant 0 <= x3 <= 0 is preserved but not established.\nloop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant x2 <= x1 is partially proven to be inductive.\nloop invariant x3 <= x1 is partially proven to be inductive.\nloop invariant x2 <= x3 is partially proven to be inductive.\nloop invariant x3 == 1 ==> x2 == 0 is partially proven to be inductive.\nloop invariant x2 == 0 ==> x3 == 1 is preserved but not established.\nloop invariant x3 == 1 ==> d3 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 ==> x3 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 ==> x2 == 0 is partially proven to be inductive.\nloop invariant x2 == 0 ==> d2 == 1 is partially proven to be inductive.\nloop invariant d1 == 1 ==> x1 == 1 is partially proven to be inductive.\nloop invariant x1 == 1 ==> d1 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 ==> d2 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 ==> d3 == 1 is partially proven to be inductive.\nloop invariant d1 == 1 ==> d2 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 ==> d1 == 1 is partially proven to be inductive.\nloop invariant d1 == 1 ==> d3 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 ==> d1 == 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x1 <= 1;\n\n\nloop invariant i4: 0 <= d1 <= 1;\nloop invariant i5: 0 <= d2 <= 1;\nloop invariant i6: 0 <= d3 <= 1;\n\n\n\n\n\nloop invariant i12: x3 == 1 ==> d3 == 1;\n\n\nloop invariant i15: x2 == 0 ==> d2 == 1;\n\nloop invariant i17: x1 == 1 ==> d1 == 1;\nloop invariant i18: d3 == 1 ==> d2 == 1;\nloop invariant i19: d2 == 1 ==> d3 == 1;\nloop invariant i20: d1 == 1 ==> d2 == 1;\nloop invariant i21: d2 == 1 ==> d1 == 1;\nloop invariant i22: d1 == 1 ==> d3 == 1;\nloop invariant i23: d3 == 1 ==> d1 == 1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 >= d1 * (x2 + x3);\nloop invariant x2 >= d2 * (x3);\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= d1 * (x2 + x3);\nloop invariant x2 >= d2 * (x3);\nloop invariant x3 >= d3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 is partially proven to be inductive.\nloop invariant 0 <= x2 is preserved but not established.\nloop invariant 0 <= x3 is preserved but not established.\nloop invariant x1 >= d1 * (x2 + x3) is preserved but not established.\nloop invariant x2 >= d2 * (x3) is preserved but not established.\nloop invariant x3 >= d3 is preserved but not established.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x1 <= INT_MAX;\nloop invariant 0 <= x2 <= INT_MAX;\nloop invariant 0 <= x3 <= INT_MAX;\nloop invariant 1 <= d1 <= INT_MAX;\nloop invariant 1 <= d2 <= INT_MAX;\nloop invariant 1 <= d3 <= INT_MAX;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= x1 - (x1 / d1) * d1;\nloop invariant x3 >= x2 - (x2 / d2) * d2;\nloop invariant x3 >= x1 - (x1 / d1) * d1 - (x2 / d2) * d2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x1 <= INT_MAX is established but not preserved.\nloop invariant 0 <= x2 <= INT_MAX is neither established nor preserved.\nloop invariant 0 <= x3 <= INT_MAX is neither established nor preserved.\nloop invariant 1 <= d1 <= INT_MAX is partially proven to be inductive.\nloop invariant 1 <= d2 <= INT_MAX is partially proven to be inductive.\nloop invariant 1 <= d3 <= INT_MAX is partially proven to be inductive.\nloop invariant x2 <= x1 is neither established nor preserved.\nloop invariant x3 <= x2 is neither established nor preserved.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant x2 >= x1 - (x1 / d1) * d1 is established but not preserved.\nloop invariant x3 >= x2 - (x2 / d2) * d2 is established but not preserved.\nloop invariant x3 >= x1 - (x1 / d1) * d1 - (x2 / d2) * d2 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\nloop invariant i4: 1 <= d1 <= INT_MAX;\nloop invariant i5: 1 <= d2 <= INT_MAX;\nloop invariant i6: 1 <= d3 <= INT_MAX;\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= d1;\nloop invariant x1 >= d2;\nloop invariant x1 >= d3;\nloop invariant x2 >= d2;\nloop invariant x2 >= d3;\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x1 >= x2 + x3 is preserved but not established.\nloop invariant x1 >= d1 is partially proven to be inductive.\nloop invariant x1 >= d2 is partially proven to be inductive.\nloop invariant x1 >= d3 is partially proven to be inductive.\nloop invariant x2 >= d2 is preserved but not established.\nloop invariant x2 >= d3 is partially proven to be inductive.\nloop invariant x3 >= d3 is preserved but not established.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: d1 >= 0;\nloop invariant i2: d2 >= 0;\nloop invariant i3: d3 >= 0;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= d1 <= 1;\nloop invariant 1 <= d2 <= 1;\nloop invariant 1 <= d3 <= 1;\nloop invariant 1 <= x1 <= 1;\nloop invariant x2 <= 1;\nloop invariant x3 <= 1;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 1 <= d1 <= 1;\nloop invariant i2: 1 <= d2 <= 1;\nloop invariant i3: 1 <= d3 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= d1 <= 10;\nloop invariant 1 <= d2 <= 10;\nloop invariant 1 <= d3 <= 10;\nloop invariant 1 <= x1 <= 10;\nloop invariant 1 <= x2 <= 10;\nloop invariant 1 <= x3 <= 10;\nloop invariant x1 >= 0 ==> x2 >= 0;\nloop invariant x1 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= x2;\nloop invariant x1 >= 0 ==> x1 >= x3;\nloop invariant x1 >= 0 ==> x2 >= x3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= d1 <= 10 is partially proven to be inductive.\nloop invariant 1 <= d2 <= 10 is partially proven to be inductive.\nloop invariant 1 <= d3 <= 10 is partially proven to be inductive.\nloop invariant 1 <= x1 <= 10 is established but not preserved.\nloop invariant 1 <= x2 <= 10 is neither established nor preserved.\nloop invariant 1 <= x3 <= 10 is neither established nor preserved.\nloop invariant x1 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= x2 is neither established nor preserved.\nloop invariant x1 >= 0 ==> x1 >= x3 is neither established nor preserved.\nloop invariant x1 >= 0 ==> x2 >= x3 is established but not preserved.\nAssertion x2 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 1 <= d1 <= 10;\nloop invariant i2: 1 <= d2 <= 10;\nloop invariant i3: 1 <= d3 <= 10;\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 140: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: d1 >= 0;\nloop invariant i2: d2 >= 0;\nloop invariant i3: d3 >= 0;\nloop invariant i4: x1 >= 0;\nloop invariant i5: x2 >= 0;\nloop invariant i6: x3 >= 0;\nloop invariant i7: x2 >= x1;\nloop invariant i8: x3 >= x2;\nloop invariant i9: x3 >= x1;\nloop invariant i10: x1 >= 0 ==> x1 >= d1;\nloop invariant i11: x2 >= 0 ==> x2 >= d2;\nloop invariant i12: x3 >= 0 ==> x3 >= d3;\nloop invariant i13: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant i14: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant i15: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant i16: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i17: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i18: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i19: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i20: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i21: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i22: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i23: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i24: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i25: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i26: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i27: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i28: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i29: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i30: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i31: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i32: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i33: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i34: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i35: 0 <= d1 <= 1;\nloop invariant i36: 0 <= d2 <= 1;\nloop invariant i37: 0 <= d3 <= 1;\nloop invariant i38: x1 >= x2;\nloop invariant i39: x2 >= x3;\nloop invariant i40: 0 <= x1;\nloop invariant i41: x2 >= 0 ==> x3 >= 0;\nloop invariant i42: x2 <= x2 + d2 * x1;\nloop invariant i43: x3 <= x3 + d3 * x1;\nloop invariant i44: x2 >= x2 - d2 * x1;\nloop invariant i45: x3 >= x3 - d3 * x1;\nloop invariant i46: x1 >= x1 - d1 * x1;\nloop invariant i47: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant i48: x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant i49: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant i50: 0 <= x2 <= 1;\nloop invariant i51: x1 >= 1;\nloop invariant i52: 0 <= x1 <= d1;\nloop invariant i53: 0 <= x2 <= d2;\nloop invariant i54: 0 <= x3 <= d3;\nloop invariant i55: 0 <= x1 <= 1;\nloop invariant i56: 0 <= x3 <= 1;\nloop invariant i57: d1 > 0;\nloop invariant i58: d2 > 0;\nloop invariant i59: d3 > 0;\nloop invariant i60: x1 <= 1;\nloop invariant i61: x2 <= 1;\nloop invariant i62: x3 <= 1;\nloop invariant i63: d1 <= x1;\nloop invariant i64: d2 <= x2;\nloop invariant i65: d3 <= x3;\nloop invariant i66: x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant i67: x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant i68: x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant i69: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant i70: x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant i71: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant i72: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1;\nloop invariant i73: x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 <= 1;\nloop invariant i74: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\nloop invariant i75: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant i76: x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant i77: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant i78: x1 >= x3;\nloop invariant i79: x1 >= x2 - d2;\nloop invariant i80: x1 >= x3 - d3;\nloop invariant i81: 0 < x1 <= 1;\nloop invariant i82: 0 <= x2 <= 0;\nloop invariant i83: 0 <= x3 <= 0;\nloop invariant i84: x2 <= x1;\nloop invariant i85: x3 <= x1;\nloop invariant i86: x2 <= x3;\nloop invariant i87: x3 == 1 ==> x2 == 0;\nloop invariant i88: x2 == 0 ==> x3 == 1;\nloop invariant i89: x3 == 1 ==> d3 == 1;\nloop invariant i90: d3 == 1 ==> x3 == 1;\nloop invariant i91: d2 == 1 ==> x2 == 0;\nloop invariant i92: x2 == 0 ==> d2 == 1;\nloop invariant i93: d1 == 1 ==> x1 == 1;\nloop invariant i94: x1 == 1 ==> d1 == 1;\nloop invariant i95: d3 == 1 ==> d2 == 1;\nloop invariant i96: d2 == 1 ==> d3 == 1;\nloop invariant i97: d1 == 1 ==> d2 == 1;\nloop invariant i98: d2 == 1 ==> d1 == 1;\nloop invariant i99: d1 == 1 ==> d3 == 1;\nloop invariant i100: d3 == 1 ==> d1 == 1;\nloop invariant i101: 0 <= x2;\nloop invariant i102: 0 <= x3;\nloop invariant i103: x1 >= d1 * (x2 + x3);\nloop invariant i104: x2 >= d2 * (x3);\nloop invariant i105: x3 >= d3;\nloop invariant i106: 1 <= x1 <= INT_MAX;\nloop invariant i107: 0 <= x2 <= INT_MAX;\nloop invariant i108: 0 <= x3 <= INT_MAX;\nloop invariant i109: 1 <= d1 <= INT_MAX;\nloop invariant i110: 1 <= d2 <= INT_MAX;\nloop invariant i111: 1 <= d3 <= INT_MAX;\nloop invariant i112: x3 <= x2;\nloop invariant i113: x2 >= x1 - (x1 / d1) * d1;\nloop invariant i114: x3 >= x2 - (x2 / d2) * d2;\nloop invariant i115: x3 >= x1 - (x1 / d1) * d1 - (x2 / d2) * d2;\nloop invariant i116: x1 >= x2 + x3;\nloop invariant i117: x1 >= d1;\nloop invariant i118: x1 >= d2;\nloop invariant i119: x1 >= d3;\nloop invariant i120: x2 >= d2;\nloop invariant i121: x2 >= d3;\nloop invariant i122: 1 <= d1 <= 1;\nloop invariant i123: 1 <= d2 <= 1;\nloop invariant i124: 1 <= d3 <= 1;\nloop invariant i125: 1 <= x1 <= 1;\nloop invariant i126: x2 = 0;\nloop invariant i127: x3 = 0;\nloop invariant i128: 1 <= d1 <= 10;\nloop invariant i129: 1 <= d2 <= 10;\nloop invariant i130: 1 <= d3 <= 10;\nloop invariant i131: 1 <= x1 <= 10;\nloop invariant i132: 1 <= x2 <= 10;\nloop invariant i133: 1 <= x3 <= 10;\nloop invariant i134: x1 >= 0 ==> x2 >= 0;\nloop invariant i135: x1 >= 0 ==> x3 >= 0;\nloop invariant i136: x1 >= 0 ==> x1 >= x2;\nloop invariant i137: x1 >= 0 ==> x1 >= x3;\nloop invariant i138: x1 >= 0 ==> x2 >= x3;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 21,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: d1 >= 0;\nloop invariant i2: d2 >= 0;\nloop invariant i3: d3 >= 0;\nloop invariant i4: x1 >= 0;\n\n\n\n\n\n\n\n\nloop invariant i13: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant i14: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant i15: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant i16: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i17: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i18: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i19: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i20: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i21: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i22: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i23: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i24: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i25: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i26: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i27: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i28: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i29: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i30: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i31: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i32: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i33: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i34: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i35: 0 <= d1 <= 1;\nloop invariant i36: 0 <= d2 <= 1;\nloop invariant i37: 0 <= d3 <= 1;\n\n\nloop invariant i40: 0 <= x1;\n\nloop invariant i42: x2 <= x2 + d2 * x1;\nloop invariant i43: x3 <= x3 + d3 * x1;\nloop invariant i44: x2 >= x2 - d2 * x1;\nloop invariant i45: x3 >= x3 - d3 * x1;\nloop invariant i46: x1 >= x1 - d1 * x1;\nloop invariant i47: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant i48: x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant i49: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\n\n\nloop invariant i52: 0 <= x1 <= d1;\n\n\nloop invariant i55: 0 <= x1 <= 1;\n\nloop invariant i57: d1 > 0;\nloop invariant i58: d2 > 0;\nloop invariant i59: d3 > 0;\nloop invariant i60: x1 <= 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1;\n\nloop invariant i74: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\nloop invariant i75: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\n\nloop invariant i77: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i89: x3 == 1 ==> d3 == 1;\n\n\nloop invariant i92: x2 == 0 ==> d2 == 1;\n\nloop invariant i94: x1 == 1 ==> d1 == 1;\nloop invariant i95: d3 == 1 ==> d2 == 1;\nloop invariant i96: d2 == 1 ==> d3 == 1;\nloop invariant i97: d1 == 1 ==> d2 == 1;\nloop invariant i98: d2 == 1 ==> d1 == 1;\nloop invariant i99: d1 == 1 ==> d3 == 1;\nloop invariant i100: d3 == 1 ==> d1 == 1;\n\n\n\n\n\n\n\n\nloop invariant i109: 1 <= d1 <= INT_MAX;\nloop invariant i110: 1 <= d2 <= INT_MAX;\nloop invariant i111: 1 <= d3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: 1 <= d1 <= 1;\nloop invariant i123: 1 <= d2 <= 1;\nloop invariant i124: 1 <= d3 <= 1;\n\n\n\nloop invariant i128: 1 <= d1 <= 10;\nloop invariant i129: 1 <= d2 <= 10;\nloop invariant i130: 1 <= d3 <= 10;\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == (2*i - 2);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn >= 0;\nloop invariant sn <= n * 2;\nloop invariant sn <= n * (2);\nloop invariant n >= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn >= 0;\nloop invariant sn <= n * 2;\nloop invariant sn <= n * (2);\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant sn == 2*i - 2;\nloop invariant sn == 0 ==> i == 1;\nloop invariant n == -1000 ==> i == 1;\nloop invariant sn == 2*n ==> i == n;\nloop invariant sn == 0 ==> i == 1 && n == -1000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= 2 * n;\nloop invariant 1 <= i <= n + 1;\nloop invariant n == unknown_int() && n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= sn <= (n * 2 || n == 0);\nloop invariant i >= 1 || i <= n;\nloop invariant sn >= (2 * (i - 1) || n == 0);\nloop invariant sn <= (2 * i || n == 0);\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant sn == i*(2)|| sn == 0;\nloop invariant sn == n*(2)|| sn == 0;\nloop invariant sn == i*(2)|| sn == 0;\nloop invariant sn == n*(2)|| sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * 2;\nloop invariant i >= 1 || sn == 0;\nloop invariant i <= n || sn == 0;\nloop invariant sn >= 0 || sn == n * 2;\nloop invariant sn <= n * 2 || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i * 2;\nloop invariant i >= 1 ==> sn == 0;\nloop invariant i <= n ==> sn == 0;\nloop invariant sn >= 0 ==> sn == n * 2;\nloop invariant sn <= n * 2 ==> sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn == (2 * i);\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant sn >= (2 * (i - 1));\nloop invariant sn <= (2 * i);\nloop invariant sn >= (2 * (i - 1) + 2);\nloop invariant sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= 2 * i - 2;\nloop invariant sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i >= 1 && i <= n;\nloop invariant sn >= 0 && sn <= 2 * n - 2;\nloop invariant sn == 0 ==> sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> i == n + 1;\nloop invariant sn == (n - i + 1) * (2) ==> i == 1;\nloop invariant sn == 0 ==> i == n + 1 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> i == 1 || sn == 0;\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant i == 1;\nloop invariant sn == (2 * (i - 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * i;\nloop invariant sn >= 2 * (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= 2*n;\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sn == (2*i);\nloop invariant i <= n ==> sn <= 2*n;\nloop invariant sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n; loop invariant sn == i * (2);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == (2*i - 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= 2*n is partially proven to be inductive.\nloop invariant sn == (2*i - 2) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn == (2*i - 2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn >= 0;\nloop invariant sn <= n * 2;\nloop invariant sn <= n * (2);\nloop invariant n >= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn >= 0;\nloop invariant sn <= n * 2;\nloop invariant sn <= n * (2);\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant n >= -1000 is partially proven to be inductive.\nloop invariant n < 1000 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n * 2 is established but not preserved.\nloop invariant sn <= n * (2) is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: n >= -1000;\nloop invariant i3: n < 1000;\nloop invariant i4: sn >= 0;\n\n\n\nloop invariant i8: i >= 1;\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant sn == 2*i - 2;\nloop invariant sn == 0 ==> i == 1;\nloop invariant n == -1000 ==> i == 1;\nloop invariant sn == 2*n ==> i == n;\nloop invariant sn == 0 ==> i == 1 && n == -1000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i - 2 is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant n == -1000 ==> i == 1 is partially proven to be inductive.\nloop invariant sn == 2*n ==> i == n is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 && n == -1000 is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: sn == 2*i - 2;\nloop invariant i7: sn == 0 ==> i == 1;\nloop invariant i8: n == -1000 ==> i == 1;\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2 * n;\nloop invariant 1 <= i <= n + 1;\nloop invariant n == unknown_int() && n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\nloop invariant i5: sn == (i - 1) * (2);\n\nloop invariant i7: sn >= 0;\n\nloop invariant i9: i >= 1;\n\nloop invariant i11: n < 1000 && n >= -1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 1 <= sn <= (n * 2 || n == 0);\nloop invariant i >= 1 || i <= n;\nloop invariant sn >= (2 * (i - 1) || n == 0);\nloop invariant sn <= (2 * i || n == 0);\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: comparison of incompatible types: int and 𝔹. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant sn == i*(2)|| sn == 0;\nloop invariant sn == n*(2)|| sn == 0;\nloop invariant sn == i*(2)|| sn == 0;\nloop invariant sn == n*(2)|| sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == 2*i is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2*n is partially proven to be inductive.\nloop invariant sn == i*(2)|| sn == 0 is partially proven to be inductive.\nloop invariant sn == n*(2)|| sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * 2;\nloop invariant i >= 1 || sn == 0;\nloop invariant i <= n || sn == 0;\nloop invariant sn >= 0 || sn == n * 2;\nloop invariant sn <= n * 2 || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i * 2;\nloop invariant i >= 1 ==> sn == 0;\nloop invariant i <= n ==> sn == 0;\nloop invariant sn >= 0 ==> sn == n * 2;\nloop invariant sn <= n * 2 ==> sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i * 2 is preserved but not established.\nloop invariant i >= 1 || sn == 0 is partially proven to be inductive.\nloop invariant i <= n || sn == 0 is partially proven to be inductive.\nloop invariant sn >= 0 || sn == n * 2 is partially proven to be inductive.\nloop invariant sn <= n * 2 || sn == 0 is partially proven to be inductive.\nloop invariant i >= 1 ==> sn == 0 is partially proven to be inductive.\nloop invariant i <= n ==> sn == 0 is partially proven to be inductive.\nloop invariant sn >= 0 ==> sn == n * 2 is partially proven to be inductive.\nloop invariant sn <= n * 2 ==> sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn == (2 * i);\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant sn >= (2 * (i - 1));\nloop invariant sn <= (2 * i);\nloop invariant sn >= (2 * (i - 1) + 2);\nloop invariant sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant n >= -1000 is partially proven to be inductive.\nloop invariant n < 1000 is partially proven to be inductive.\nloop invariant sn == (2 * i) is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2 * n is partially proven to be inductive.\nloop invariant sn >= (2 * (i - 1)) is partially proven to be inductive.\nloop invariant sn <= (2 * i) is partially proven to be inductive.\nloop invariant sn >= (2 * (i - 1) + 2) is partially proven to be inductive.\nloop invariant sn <= (2 * i + 2) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn == (2 * i) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= 2 is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= 2 * i is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1)) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: n >= -1000;\nloop invariant i4: n < 1000;\n\nloop invariant i6: sn >= 0;\n\nloop invariant i8: sn >= (2 * (i - 1));\nloop invariant i9: sn <= (2 * i);\n\nloop invariant i11: sn <= (2 * i + 2);\nloop invariant i12: sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant i13: sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant i14: sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant i15: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant i16: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant i17: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant i18: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= 2 * i - 2;\nloop invariant sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i >= 1 && i <= n;\nloop invariant sn >= 0 && sn <= 2 * n - 2;\nloop invariant sn == 0 ==> sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> i == n + 1;\nloop invariant sn == (n - i + 1) * (2) ==> i == 1;\nloop invariant sn == 0 ==> i == n + 1 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> i == 1 || sn == 0;\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= 2 * i - 2 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) || sn == 0 is partially proven to be inductive.\nloop invariant i >= 1 && i <= n is partially proven to be inductive.\nloop invariant sn >= 0 && sn <= 2 * n - 2 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == (n - i + 1) * (2) is preserved but not established.\nloop invariant sn == (n - i + 1) * (2) ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> i == 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> i == n + 1 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> i == 1 || sn == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: 0 <= sn <= 2 * i - 2;\n\n\n\n\n\nloop invariant i8: sn == 0 ==> sn == 0;\nloop invariant i9: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\n\n\n\n\nloop invariant i14: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i15: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i16: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i17: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i18: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i19: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i20: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i21: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i22: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i23: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i24: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i25: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i == 1;\nloop invariant sn == (2 * (i - 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i == 1 is established but not preserved.\nloop invariant sn == (2 * (i - 1)) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: sn == (2 * (i - 1));\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn == i * 2 is preserved but not established.\nloop invariant sn >= i * (-2) is partially proven to be inductive.\nloop invariant sn <= i * 2 is partially proven to be inductive.\nloop invariant sn >= i * 2 || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= i * (-2);\nloop invariant i4: sn <= i * 2;\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * i;\nloop invariant sn >= 2 * (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2 * i is partially proven to be inductive.\nloop invariant sn >= 2 * (i - 1) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= 2 * i;\nloop invariant i4: sn >= 2 * (i - 1);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 20,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*n;\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sn == (2*i);\nloop invariant i <= n ==> sn <= 2*n;\nloop invariant sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= 2*n is preserved but not established.\nloop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2*n is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == (2*i) is preserved but not established.\nloop invariant i <= n ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> i <= n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> i >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i is partially proven to be inductive.\nloop invariant sn == 2*i ==> i == i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> i <= n ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> i >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i == i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: i >= 0;\n\n\n\n\n\n\nloop invariant i12: sn == 2*i ==> sn >= 0;\nloop invariant i13: sn == 2*i ==> i >= 0;\nloop invariant i14: sn == 2*i ==> sn == 2*i;\nloop invariant i15: sn == 2*i ==> i == i;\n\nloop invariant i17: sn == 2*i ==> i <= n ==> sn <= 2*n;\n\n\n\nloop invariant i21: sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i22: sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i23: sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i24: sn == 2*i ==> sn == 2*i ==> i == i;\n\nloop invariant i26: sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n\n\n\nloop invariant i30: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i31: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i32: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i33: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\n\nloop invariant i35: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n\n\n\nloop invariant i39: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i40: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i41: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i42: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\n\nloop invariant i44: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant sn == i * (2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n; loop invariant sn == i * (2) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 33: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: 0 <= sn <= 2*n;\nloop invariant i3: sn == (2*i - 2);\nloop invariant i4: n >= -1000;\nloop invariant i5: n < 1000;\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= n * 2;\nloop invariant i8: sn <= n * (2);\nloop invariant i9: n >= 0;\nloop invariant i10: i >= 1;\nloop invariant i11: i <= n;\nloop invariant i12: 0 <= n <= 1000;\nloop invariant i13: sn <= 2*n;\nloop invariant i14: sn == 2*i - 2;\nloop invariant i15: sn == 0 ==> i == 1;\nloop invariant i16: n == -1000 ==> i == 1;\nloop invariant i17: sn == 2*n ==> i == n;\nloop invariant i18: sn == 0 ==> i == 1 && n == -1000;\nloop invariant i19: 0 <= sn <= 2 * n;\nloop invariant i20: 1 <= i <= n + 1;\nloop invariant i21: n == unknown_int() && n < 1000 && n >= -1000;\nloop invariant i22: i == 1 || (i > 1 && i <= n);\nloop invariant i23: sn == (i - 1) * (2);\nloop invariant i24: sn <= 2 * n;\nloop invariant i25: i <= n + 1;\nloop invariant i26: unknown_int() == n;\nloop invariant i27: n < 1000 && n >= -1000;\nloop invariant i28: 1 <= sn <= (n * 2 || n == 0);\nloop invariant i29: i >= 1 || i <= n;\nloop invariant i30: sn >= (2 * (i - 1) || n == 0);\nloop invariant i31: sn <= (2 * i || n == 0);\nloop invariant i32: sn == (2 * n || n == 0);\nloop invariant i33: sn == (i * 2 || n == 0);\nloop invariant i34: sn == (n * 2 || i > n);\nloop invariant i35: sn == 0 || n == 0;\nloop invariant i36: 0 <= i <= n;\nloop invariant i37: sn == 2*i;\nloop invariant i38: sn == i*(2)|| sn == 0;\nloop invariant i39: sn == n*(2)|| sn == 0;\nloop invariant i40: sn == i * 2;\nloop invariant i41: i >= 1 || sn == 0;\nloop invariant i42: i <= n || sn == 0;\nloop invariant i43: sn >= 0 || sn == n * 2;\nloop invariant i44: sn <= n * 2 || sn == 0;\nloop invariant i45: i >= 1 ==> sn == 0;\nloop invariant i46: i <= n ==> sn == 0;\nloop invariant i47: sn >= 0 ==> sn == n * 2;\nloop invariant i48: sn <= n * 2 ==> sn == 0;\nloop invariant i49: sn == (2 * i);\nloop invariant i50: sn >= (2 * (i - 1));\nloop invariant i51: sn <= (2 * i);\nloop invariant i52: sn >= (2 * (i - 1) + 2);\nloop invariant i53: sn <= (2 * i + 2);\nloop invariant i54: sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant i55: sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant i56: sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant i57: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant i58: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant i59: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant i60: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant i61: 0 <= sn <= 2 * i - 2;\nloop invariant i62: sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i63: i >= 1 && i <= n;\nloop invariant i64: sn >= 0 && sn <= 2 * n - 2;\nloop invariant i65: sn == 0 ==> sn == (n - i + 1) * (2);\nloop invariant i66: sn == (n - i + 1) * (2) ==> sn == 0;\nloop invariant i67: sn == 0 ==> sn == 0;\nloop invariant i68: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\nloop invariant i69: sn == 0 ==> i == n + 1;\nloop invariant i70: sn == (n - i + 1) * (2) ==> i == 1;\nloop invariant i71: sn == 0 ==> i == n + 1 || sn == (n - i + 1) * (2);\nloop invariant i72: sn == (n - i + 1) * (2) ==> i == 1 || sn == 0;\nloop invariant i73: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i74: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i75: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i76: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i77: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i78: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i79: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i80: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i81: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i82: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i83: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i84: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i85: sn = 2 * i;\nloop invariant i86: i == 1;\nloop invariant i87: sn == (2 * (i - 1));\nloop invariant i88: 0 <= i <= n + 1;\nloop invariant i89: sn >= i * (-2);\nloop invariant i90: sn <= i * 2;\nloop invariant i91: sn >= i * 2 || sn == 0;\nloop invariant i92: sn <= 2 * i;\nloop invariant i93: sn >= 2 * (i - 1);\nloop invariant i94: i >= 0;\nloop invariant i95: sn == (2*i);\nloop invariant i96: i <= n ==> sn <= 2*n;\nloop invariant i97: sn >= 0 ==> sn <= 2*n;\nloop invariant i98: sn == 2*i ==> sn <= 2*n;\nloop invariant i99: sn == 2*i ==> i <= n;\nloop invariant i100: sn == 2*i ==> sn >= 0;\nloop invariant i101: sn == 2*i ==> i >= 0;\nloop invariant i102: sn == 2*i ==> sn == 2*i;\nloop invariant i103: sn == 2*i ==> i == i;\nloop invariant i104: sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i105: sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i106: sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i107: sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i108: sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i109: sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i110: sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i111: sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i112: sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i113: sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i114: sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i115: sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i116: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i117: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i118: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i119: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i120: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i121: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i122: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i123: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i124: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i125: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i126: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i127: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i128: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i129: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i130: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i131: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i132: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i133: 0 <= i <= n; loop invariant sn == i * (2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 27,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn == (2*i - 2);\nloop invariant i4: n >= -1000;\nloop invariant i5: n < 1000;\nloop invariant i6: sn >= 0;\n\n\n\nloop invariant i10: i >= 1;\n\n\n\nloop invariant i14: sn == 2*i - 2;\nloop invariant i15: sn == 0 ==> i == 1;\nloop invariant i16: n == -1000 ==> i == 1;\n\n\n\n\n\n\nloop invariant i23: sn == (i - 1) * (2);\n\n\n\nloop invariant i27: n < 1000 && n >= -1000;\n\nloop invariant i29: i >= 1 || i <= n;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i41: i >= 1 || sn == 0;\n\nloop invariant i43: sn >= 0 || sn == n * 2;\nloop invariant i44: sn <= n * 2 || sn == 0;\n\n\n\n\n\nloop invariant i50: sn >= (2 * (i - 1));\nloop invariant i51: sn <= (2 * i);\n\nloop invariant i53: sn <= (2 * i + 2);\nloop invariant i54: sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant i55: sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant i56: sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant i57: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant i58: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant i59: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant i60: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant i61: 0 <= sn <= 2 * i - 2;\n\n\n\n\n\nloop invariant i67: sn == 0 ==> sn == 0;\nloop invariant i68: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\n\n\n\n\nloop invariant i73: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i74: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i75: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i76: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i77: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i78: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i79: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i80: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i81: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i82: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i83: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i84: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\n\n\nloop invariant i87: sn == (2 * (i - 1));\n\nloop invariant i89: sn >= i * (-2);\nloop invariant i90: sn <= i * 2;\n\nloop invariant i92: sn <= 2 * i;\nloop invariant i93: sn >= 2 * (i - 1);\nloop invariant i94: i >= 0;\n\nloop invariant i96: i <= n ==> sn <= 2*n;\n\nloop invariant i98: sn == 2*i ==> sn <= 2*n;\nloop invariant i99: sn == 2*i ==> i <= n;\nloop invariant i100: sn == 2*i ==> sn >= 0;\nloop invariant i101: sn == 2*i ==> i >= 0;\nloop invariant i102: sn == 2*i ==> sn == 2*i;\nloop invariant i103: sn == 2*i ==> i == i;\nloop invariant i104: sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i105: sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i106: sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i107: sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i108: sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i109: sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i110: sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i111: sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i112: sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i113: sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i114: sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i115: sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i116: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i117: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i118: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i119: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i120: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i121: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i122: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i123: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i124: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i125: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i126: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i127: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i128: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i129: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i130: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i131: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i132: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant x % 2 == y % 2 ==> x == y;\n*/\n```",
                "```\n/*@\nloop invariant y % 2 == 0;\nloop invariant x == 2 * (y / 2) + (y % 2);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant y % 2 == 0 ==> x == 2 * (y / 2);\nloop invariant y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x <= y;\nloop invariant y % 2 == 1 ==> x <= y;\nloop invariant y % 2 == 0 ==> x >= y - 1;\nloop invariant y % 2 == 1 ==> x >= y - 1;\nloop invariant y % 2 == 0 ==> x <= y + 1;\nloop invariant y % 2 == 1 ==> x <= y + 1;\nloop invariant y % 2 == 0 ==> x >= y - 2;\nloop invariant y % 2 == 1 ==> x >= y - 2;\nloop invariant y % 2 == 0 ==> x <= y + 2;\nloop invariant y % 2 == 1 ==> x <= y + 2;\nloop invariant y % 2 == 0 ==> x >= y - 3;\nloop invariant y % 2 == 1 ==> x >= y - 3;\nloop invariant y % 2 == 0 ==> x <= y + 3;\nloop invariant y % 2 == 1 ==> x <= y + 3;\nloop invariant y % 2 == 0 ==> x >= y - 4;\nloop invariant y % 2 == 1 ==> x >= y - 4;\nloop invariant y % 2 == 0 ==> x <= y + 4;\nloop invariant y % 2 == 1 ==> x <= y + 4;\nloop invariant y % 2 == 0 ==> x >= y - 5;\nloop invariant y % 2 == 1 ==> x >= y - 5;\nloop invariant y % 2 == 0 ==> x <= y + 5;\nloop invariant y % 2 == 1 ==> x <= y + 5;\nloop invariant y % 2 == 0 ==> x >= y - 6;\nloop invariant y % 2 == 1 ==> x >= y - 6;\nloop invariant y % 2 == 0 ==> x <= y + 6;\nloop invariant y % 2 == 1 ==> x <= y + 6;\nloop invariant y % 2 == 0 ==> x >= y - 7;\nloop invariant y % 2 == 1 ==> x >= y - 7;\nloop invariant y % 2 == 0 ==> x <= y + 7;\nloop invariant y % 2 == 1 ==> x <= y + 7;\nloop invariant y % 2 == 0 ==> x >= y - 8;\nloop invariant y % 2 == 1 ==> x >= y - 8;\nloop invariant y % 2 == 0 ==> x <= y + 8;\nloop invariant y % 2 == 1 ==> x <= y + 8;\nloop invariant y % 2 == 0 ==> x >= y - 9;\nloop invariant y % 2 == 1 ==> x >= y - 9;\nloop invariant y % 2 == 0 ==> x <= y + 9;\nloop invariant y % 2 == 1 ==> x <= y + 9;\nloop invariant y % 2 == 0 ==> x >= y - 10;\nloop invariant y % 2 == 1 ==> x >= y - 10;\nloop invariant y % 2 == 0 ==> x <= y + 10;\nloop invariant y % 2 == 1 ==> x <= y + 10;\nloop invariant y % 2 == 0 ==> x >= y - 11;\nloop invariant y % 2 == 1 ==> x >= y - 11;\nloop invariant y % 2 == 0 ==> x <= y + 11;\nloop invariant y % 2 == 1 ==> x <= y + 11;\nloop invariant y % 2 == 0 ==> x >= y - 12;\nloop invariant y % 2 == 1 ==> x >= y - 12;\nloop invariant y % 2 == 0 ==> x <= y + 12;\nloop invariant y % 2 == 1 ==> x <= y + 12;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == ((x + y) % 2);\nloop invariant (x % 2) == ((y + 1) % 2);\nloop invariant (x % 2) == ((x + y + 1) % 2);\nloop invariant (x % 2) == ((y + 2) % 2);\nloop invariant (x % 2) == ((x + y + 2) % 2);\nloop invariant (x % 2) == ((y + 3) % 2);\nloop invariant (x % 2) == ((x + y + 3) % 2);\nloop invariant (x % 2) == ((y + 4) % 2);\nloop invariant (x % 2) == ((x + y + 4) % 2);\nloop invariant (x % 2) == ((y + 5) % 2);\nloop invariant (x % 2) == ((x + y + 5) % 2);\nloop invariant (x % 2) == ((y + 6) % 2);\nloop invariant (x % 2) == ((x + y + 6) % 2);\nloop invariant (x % 2) == ((y + 7) % 2);\nloop invariant (x % 2) == ((x + y + 7) % 2);\nloop invariant (x % 2) == ((y + 8) % 2);\nloop invariant (x % 2) == ((x + y + 8) % 2);\nloop invariant (x % 2) == ((y + 9) % 2);\nloop invariant (x % 2) == ((x + y + 9) % 2);\nloop invariant (x % 2) == ((y + 10) % 2);\nloop invariant (x % 2) == ((x + y + 10) % 2);\nloop invariant (x % 2) == ((y + 11) % 2);\nloop invariant (x % 2) == ((x + y + 11) % 2);\nloop invariant (x % 2) == ((y + 12) % 2);\nloop invariant (x % 2) == ((x + y + 12) % 2);\nloop invariant (x % 2) == ((y + 13) % 2);\nloop invariant (x % 2) == ((x + y + 13) % 2);\nloop invariant (x % 2) == ((y + 14) % 2);\nloop invariant (x % 2) == ((x + y + 14) % 2);\nloop invariant (x % 2) == ((y + 15) % 2);\nloop invariant (x % 2) == ((x + y + 15) % 2);\nloop invariant (x % 2) == ((y + 16) % 2);\nloop invariant (x % 2) == ((x + y + 16) % 2);\nloop invariant (x % 2) == ((y + 17) % 2);\nloop invariant (x % 2) == ((x + y + 17) % 2);\nloop invariant (x % 2) == ((y + 18) % 2);\nloop invariant (x % 2) == ((x + y + 18) % 2);\nloop invariant (x % 2) == ((y + 19) % 2);\nloop invariant (x % 2) == ((x + y + 19) % 2);\nloop invariant (x % 2) == ((y + 20) % 2);\nloop invariant (x % 2) == ((x + y + 20) % 2);\nloop invariant (x % 2) == ((y + 21) % 2);\nloop invariant (x % 2) == ((x + y + 21) % 2);\nloop invariant (x % 2) == ((y + 22) % 2);\nloop invariant (x % 2) == ((x + y + 22) % 2);\nloop invariant (x % 2) == ((y + 23) % 2);\nloop invariant (x % 2) == ((x + y + 23) % 2);\n*/\n```",
                "```\n/*@\nloop invariant x <= 99;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= 99;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 98;\nloop invariant x % 2 == y % 2 ==> x + y <= 99;\nloop invariant x % 2 != y % 2 ==> x + y <= 98;\nloop invariant y % 2 == 0 ==> x + 2 * y <= 98;\nloop invariant y % 2 != 0 ==> x + (2 * y + 1) <= 97;\nloop invariant y % 2 == 0 ==> x + 2 * y == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) ==> (y % 2);\nloop invariant (x % 2) ==> (y % 2);\nloop invariant !(x % 2) ==> !(y % 2);\nloop invariant !(x % 2) ==> !(y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y;\nloop invariant (x + 2 * y) % 2 == 0;\nloop invariant (x + 2 * y) % 2 + 1 == y % 2;\nloop invariant (x + 2 * y) % 2 + y == 2 * x;\nloop invariant x % 2 + 1 == (x + y) % 2;\nloop invariant x % 2 + (x + y) % 2 == (x + y) % 2;\nloop invariant (x + y) % 2 == y % 2;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 1;\nloop invariant (x + y) % 2 == y % 2;\nloop invariant (x + y) % 2 == 2;\nloop invariant (x + y) % 2 == 3;\nloop invariant (x + y) % 2 == 4;\nloop invariant (x + y) % 2 == 5;\nloop invariant (x + y) % 2 == 6;\nloop invariant (x + y) % 2 == 7;\nloop invariant (x + y) % 2 == 8;\nloop invariant (x + y) % 2 == 9;\nloop invariant (x + y) % 2 == 10;\nloop invariant (x + y) % 2 == 11;\nloop invariant (x + y) % 2 == 12;\nloop invariant (x + y) % 2 == 13;\nloop invariant (x + y) % 2 == 14;\nloop invariant (x + y) % 2 == 15;\nloop invariant (x + y) % 2 == 16;\nloop invariant (x + y) % 2 == 17;\nloop invariant (x + y) % 2 == 18;\nloop invariant (x + y) % 2 == 19;\nloop invariant (x + y) % 2 == 20;\nloop invariant (x + y) % 2 == 21;\nloop invariant (x + y) % 2 == 22;\nloop invariant (x + y) % 2 == 23;\nloop invariant (x + y) % 2 == 24;\nloop invariant (x + y) % 2 == 25;\nloop invariant (x + y) % 2 == 26;\nloop invariant (x + y) % 2 == 27;\nloop invariant (x + y) % 2 == 28;\nloop invariant (x + y) % 2 == 29;\nloop invariant (x + y) % 2 == 30;\nloop invariant (x + y) % 2 == 31;\nloop invariant (x + y) % 2 == 32;\nloop invariant (x + y) % 2 == 33;\nloop invariant (x + y) % 2 == 34;\nloop invariant (x + y) % 2 == 35;\nloop invariant (x + y) % 2 == 36;\nloop invariant (x + y) % 2 == 37;\nloop invariant (x + y) % 2 == 38;\nloop invariant (x + y) % 2 == 39;\nloop invariant (x + y) % 2 == 40;\nloop invariant (x + y) % 2 == 41;\nloop invariant (x + y) % 2 == 42;\nloop invariant (x + y) % 2 == 43;\nloop invariant (x + y) % 2 == 44;\nloop invariant (x + y) % 2 == 45;\nloop invariant (x + y) % 2 == 46;\nloop invariant (x + y) % 2 == 47;\nloop invariant (x + y) % 2 == 48;\nloop invariant (x + y) % 2 == 49;\nloop invariant (x + y) % 2 == 50;\nloop invariant (x + y) % 2 == 51;\nloop invariant (x + y) % 2 == 52;\nloop invariant (x + y) % 2 == 53;\nloop invariant (x + y) % 2 == 54;\nloop invariant (x + y) % 2 == 55;\nloop invariant (x + y) % 2 == 56;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0 ==> x == y;\nloop invariant x % 2 == 1 ==> x == y + 1;\nloop invariant x == (y / 2) * 2 ==> y % 2 == 0;\nloop invariant x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\nloop invariant 0 <= x < 100;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2);\nloop invariant x + y % 2 == 0 ==> y % 2 == 0;\nloop invariant x + y % 2 != 0 ==> y % 2 != 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2);\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0;\nloop invariant y % 2 == (x % 2) ==> y % 2 == 0;\nloop invariant y % 2 != (x % 2) ==> (x % 2) == 1;\nloop invariant y % 2 != (x % 2) ==> y % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant x % 2 == y % 2 ==> x == y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y == 0 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> x == y is established but not preserved.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 18,
                    "annotations": "```\n/*@\nloop invariant y % 2 == 0;\nloop invariant x == 2 * (y / 2) + (y % 2);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant y % 2 == 0 ==> x == 2 * (y / 2);\nloop invariant y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x <= y;\nloop invariant y % 2 == 1 ==> x <= y;\nloop invariant y % 2 == 0 ==> x >= y - 1;\nloop invariant y % 2 == 1 ==> x >= y - 1;\nloop invariant y % 2 == 0 ==> x <= y + 1;\nloop invariant y % 2 == 1 ==> x <= y + 1;\nloop invariant y % 2 == 0 ==> x >= y - 2;\nloop invariant y % 2 == 1 ==> x >= y - 2;\nloop invariant y % 2 == 0 ==> x <= y + 2;\nloop invariant y % 2 == 1 ==> x <= y + 2;\nloop invariant y % 2 == 0 ==> x >= y - 3;\nloop invariant y % 2 == 1 ==> x >= y - 3;\nloop invariant y % 2 == 0 ==> x <= y + 3;\nloop invariant y % 2 == 1 ==> x <= y + 3;\nloop invariant y % 2 == 0 ==> x >= y - 4;\nloop invariant y % 2 == 1 ==> x >= y - 4;\nloop invariant y % 2 == 0 ==> x <= y + 4;\nloop invariant y % 2 == 1 ==> x <= y + 4;\nloop invariant y % 2 == 0 ==> x >= y - 5;\nloop invariant y % 2 == 1 ==> x >= y - 5;\nloop invariant y % 2 == 0 ==> x <= y + 5;\nloop invariant y % 2 == 1 ==> x <= y + 5;\nloop invariant y % 2 == 0 ==> x >= y - 6;\nloop invariant y % 2 == 1 ==> x >= y - 6;\nloop invariant y % 2 == 0 ==> x <= y + 6;\nloop invariant y % 2 == 1 ==> x <= y + 6;\nloop invariant y % 2 == 0 ==> x >= y - 7;\nloop invariant y % 2 == 1 ==> x >= y - 7;\nloop invariant y % 2 == 0 ==> x <= y + 7;\nloop invariant y % 2 == 1 ==> x <= y + 7;\nloop invariant y % 2 == 0 ==> x >= y - 8;\nloop invariant y % 2 == 1 ==> x >= y - 8;\nloop invariant y % 2 == 0 ==> x <= y + 8;\nloop invariant y % 2 == 1 ==> x <= y + 8;\nloop invariant y % 2 == 0 ==> x >= y - 9;\nloop invariant y % 2 == 1 ==> x >= y - 9;\nloop invariant y % 2 == 0 ==> x <= y + 9;\nloop invariant y % 2 == 1 ==> x <= y + 9;\nloop invariant y % 2 == 0 ==> x >= y - 10;\nloop invariant y % 2 == 1 ==> x >= y - 10;\nloop invariant y % 2 == 0 ==> x <= y + 10;\nloop invariant y % 2 == 1 ==> x <= y + 10;\nloop invariant y % 2 == 0 ==> x >= y - 11;\nloop invariant y % 2 == 1 ==> x >= y - 11;\nloop invariant y % 2 == 0 ==> x <= y + 11;\nloop invariant y % 2 == 1 ==> x <= y + 11;\nloop invariant y % 2 == 0 ==> x >= y - 12;\nloop invariant y % 2 == 1 ==> x >= y - 12;\nloop invariant y % 2 == 0 ==> x <= y + 12;\nloop invariant y % 2 == 1 ==> x <= y + 12;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y % 2 == 0 is preserved but not established.\nloop invariant x == 2 * (y / 2) + (y % 2) is neither established nor preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x == 2 * (y / 2) is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 1 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 3 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 3 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 3 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 3 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 5 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 5 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 5 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 5 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 6 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 6 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 7 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 7 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 7 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 7 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 9 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 9 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 9 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 9 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 10 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 10 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 11 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 11 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 11 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 11 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 12 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 12 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 12 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 12 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\nloop invariant i7: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 is established but not preserved.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\nloop invariant i5: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i6: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i7: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant i8: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 27,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == ((x + y) % 2);\nloop invariant (x % 2) == ((y + 1) % 2);\nloop invariant (x % 2) == ((x + y + 1) % 2);\nloop invariant (x % 2) == ((y + 2) % 2);\nloop invariant (x % 2) == ((x + y + 2) % 2);\nloop invariant (x % 2) == ((y + 3) % 2);\nloop invariant (x % 2) == ((x + y + 3) % 2);\nloop invariant (x % 2) == ((y + 4) % 2);\nloop invariant (x % 2) == ((x + y + 4) % 2);\nloop invariant (x % 2) == ((y + 5) % 2);\nloop invariant (x % 2) == ((x + y + 5) % 2);\nloop invariant (x % 2) == ((y + 6) % 2);\nloop invariant (x % 2) == ((x + y + 6) % 2);\nloop invariant (x % 2) == ((y + 7) % 2);\nloop invariant (x % 2) == ((x + y + 7) % 2);\nloop invariant (x % 2) == ((y + 8) % 2);\nloop invariant (x % 2) == ((x + y + 8) % 2);\nloop invariant (x % 2) == ((y + 9) % 2);\nloop invariant (x % 2) == ((x + y + 9) % 2);\nloop invariant (x % 2) == ((y + 10) % 2);\nloop invariant (x % 2) == ((x + y + 10) % 2);\nloop invariant (x % 2) == ((y + 11) % 2);\nloop invariant (x % 2) == ((x + y + 11) % 2);\nloop invariant (x % 2) == ((y + 12) % 2);\nloop invariant (x % 2) == ((x + y + 12) % 2);\nloop invariant (x % 2) == ((y + 13) % 2);\nloop invariant (x % 2) == ((x + y + 13) % 2);\nloop invariant (x % 2) == ((y + 14) % 2);\nloop invariant (x % 2) == ((x + y + 14) % 2);\nloop invariant (x % 2) == ((y + 15) % 2);\nloop invariant (x % 2) == ((x + y + 15) % 2);\nloop invariant (x % 2) == ((y + 16) % 2);\nloop invariant (x % 2) == ((x + y + 16) % 2);\nloop invariant (x % 2) == ((y + 17) % 2);\nloop invariant (x % 2) == ((x + y + 17) % 2);\nloop invariant (x % 2) == ((y + 18) % 2);\nloop invariant (x % 2) == ((x + y + 18) % 2);\nloop invariant (x % 2) == ((y + 19) % 2);\nloop invariant (x % 2) == ((x + y + 19) % 2);\nloop invariant (x % 2) == ((y + 20) % 2);\nloop invariant (x % 2) == ((x + y + 20) % 2);\nloop invariant (x % 2) == ((y + 21) % 2);\nloop invariant (x % 2) == ((x + y + 21) % 2);\nloop invariant (x % 2) == ((y + 22) % 2);\nloop invariant (x % 2) == ((x + y + 22) % 2);\nloop invariant (x % 2) == ((y + 23) % 2);\nloop invariant (x % 2) == ((x + y + 23) % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is preserved but not established.\nloop invariant (x % 2) == ((x + y) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 1) % 2) is preserved but not established.\nloop invariant (x % 2) == ((x + y + 1) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 2) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 2) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 3) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 3) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 4) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 4) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 5) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 5) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 6) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 6) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 7) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 7) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 8) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 8) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 9) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 9) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 10) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 10) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 11) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 11) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 12) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 12) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 13) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 13) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 14) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 14) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 15) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 15) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 16) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 16) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 17) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 17) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 18) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 18) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 19) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 19) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 20) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 20) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 21) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 21) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 22) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 22) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 23) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 23) % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x <= 99;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= 99;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x <= 99 is established but not preserved.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= y;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 98;\nloop invariant x % 2 == y % 2 ==> x + y <= 99;\nloop invariant x % 2 != y % 2 ==> x + y <= 98;\nloop invariant y % 2 == 0 ==> x + 2 * y <= 98;\nloop invariant y % 2 != 0 ==> x + (2 * y + 1) <= 97;\nloop invariant y % 2 == 0 ==> x + 2 * y == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 98 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> x + y <= 99 is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> x + y <= 98 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x + 2 * y <= 98 is preserved but not established.\nloop invariant y % 2 != 0 ==> x + (2 * y + 1) <= 97 is neither established nor preserved.\nloop invariant y % 2 == 0 ==> x + 2 * y == 0 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) ==> (y % 2);\nloop invariant (x % 2) ==> (y % 2);\nloop invariant !(x % 2) ==> !(y % 2);\nloop invariant !(x % 2) ==> !(y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (x % 2) ==> (y % 2) is partially proven to be inductive.\nloop invariant !(x % 2) ==> !(y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: (x % 2) ==> (y % 2);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 62,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y;\nloop invariant (x + 2 * y) % 2 == 0;\nloop invariant (x + 2 * y) % 2 + 1 == y % 2;\nloop invariant (x + 2 * y) % 2 + y == 2 * x;\nloop invariant x % 2 + 1 == (x + y) % 2;\nloop invariant x % 2 + (x + y) % 2 == (x + y) % 2;\nloop invariant (x + y) % 2 == y % 2;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 1;\nloop invariant (x + y) % 2 == y % 2;\nloop invariant (x + y) % 2 == 2;\nloop invariant (x + y) % 2 == 3;\nloop invariant (x + y) % 2 == 4;\nloop invariant (x + y) % 2 == 5;\nloop invariant (x + y) % 2 == 6;\nloop invariant (x + y) % 2 == 7;\nloop invariant (x + y) % 2 == 8;\nloop invariant (x + y) % 2 == 9;\nloop invariant (x + y) % 2 == 10;\nloop invariant (x + y) % 2 == 11;\nloop invariant (x + y) % 2 == 12;\nloop invariant (x + y) % 2 == 13;\nloop invariant (x + y) % 2 == 14;\nloop invariant (x + y) % 2 == 15;\nloop invariant (x + y) % 2 == 16;\nloop invariant (x + y) % 2 == 17;\nloop invariant (x + y) % 2 == 18;\nloop invariant (x + y) % 2 == 19;\nloop invariant (x + y) % 2 == 20;\nloop invariant (x + y) % 2 == 21;\nloop invariant (x + y) % 2 == 22;\nloop invariant (x + y) % 2 == 23;\nloop invariant (x + y) % 2 == 24;\nloop invariant (x + y) % 2 == 25;\nloop invariant (x + y) % 2 == 26;\nloop invariant (x + y) % 2 == 27;\nloop invariant (x + y) % 2 == 28;\nloop invariant (x + y) % 2 == 29;\nloop invariant (x + y) % 2 == 30;\nloop invariant (x + y) % 2 == 31;\nloop invariant (x + y) % 2 == 32;\nloop invariant (x + y) % 2 == 33;\nloop invariant (x + y) % 2 == 34;\nloop invariant (x + y) % 2 == 35;\nloop invariant (x + y) % 2 == 36;\nloop invariant (x + y) % 2 == 37;\nloop invariant (x + y) % 2 == 38;\nloop invariant (x + y) % 2 == 39;\nloop invariant (x + y) % 2 == 40;\nloop invariant (x + y) % 2 == 41;\nloop invariant (x + y) % 2 == 42;\nloop invariant (x + y) % 2 == 43;\nloop invariant (x + y) % 2 == 44;\nloop invariant (x + y) % 2 == 45;\nloop invariant (x + y) % 2 == 46;\nloop invariant (x + y) % 2 == 47;\nloop invariant (x + y) % 2 == 48;\nloop invariant (x + y) % 2 == 49;\nloop invariant (x + y) % 2 == 50;\nloop invariant (x + y) % 2 == 51;\nloop invariant (x + y) % 2 == 52;\nloop invariant (x + y) % 2 == 53;\nloop invariant (x + y) % 2 == 54;\nloop invariant (x + y) % 2 == 55;\nloop invariant (x + y) % 2 == 56;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 + 1 == y % 2 is preserved but not established.\nloop invariant (x + 2 * y) % 2 + y == 2 * x is preserved but not established.\nloop invariant x % 2 + 1 == (x + y) % 2 is partially proven to be inductive.\nloop invariant x % 2 + (x + y) % 2 == (x + y) % 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == y % 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 1 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 3 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 4 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 5 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 6 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 7 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 8 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 9 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 10 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 11 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 12 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 13 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 14 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 15 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 16 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 17 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 18 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 19 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 20 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 21 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 22 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 23 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 24 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 25 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 26 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 27 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 28 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 29 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 30 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 31 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 32 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 33 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 34 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 35 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 36 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 37 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 38 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 39 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 40 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 41 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 42 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 43 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 44 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 45 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 46 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 47 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 48 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 49 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 50 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 51 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 52 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 53 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 54 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 55 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 56 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0 ==> x == y;\nloop invariant x % 2 == 1 ==> x == y + 1;\nloop invariant x == (y / 2) * 2 ==> y % 2 == 0;\nloop invariant x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\nloop invariant 0 <= x < 100;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < 2 is preserved but not established.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 2 == 0 ==> x == y is established but not preserved.\nloop invariant x % 2 == 1 ==> x == y + 1 is partially proven to be inductive.\nloop invariant x == (y / 2) * 2 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant 0 <= x < 100 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\n\n\nloop invariant i9: y % 2 == 0 ==> x % 2 == 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is neither established nor preserved.\nloop invariant x == (y * (y + 1)) / 2 is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 98 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\nloop invariant i4: y >= 0;\n\nloop invariant i6: x >= 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2);\nloop invariant x + y % 2 == 0 ==> y % 2 == 0;\nloop invariant x + y % 2 != 0 ==> y % 2 != 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) is neither established nor preserved.\nloop invariant x + y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x + y % 2 != 0 ==> y % 2 != 0 is established but not preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: x + y % 2 == 0 ==> y % 2 == 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2);\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == (x % 2) is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: y >= 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0;\nloop invariant y % 2 == (x % 2) ==> y % 2 == 0;\nloop invariant y % 2 != (x % 2) ==> (x % 2) == 1;\nloop invariant y % 2 != (x % 2) ==> y % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 != (x % 2) ==> (x % 2) == 1 is preserved but not established.\nloop invariant y % 2 != (x % 2) ==> y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n\nloop invariant i6: y % 2 != (x % 2) ==> y % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2)) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y == 0 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> x == y is partially proven to be inductive.\nloop invariant y % 2 == 0 is partially proven to be inductive.\nloop invariant x == 2 * (y / 2) + (y % 2) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x == 2 * (y / 2) is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 1 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 3 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 3 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 3 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 3 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 5 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 5 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 5 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 5 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 6 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 6 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 7 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 7 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 7 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 7 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 9 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 9 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 9 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 9 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 10 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 10 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 11 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 11 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 11 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 11 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 12 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 12 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 12 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 12 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 1) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 1) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 2) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 2) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 3) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 3) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 4) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 4) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 5) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 5) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 6) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 6) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 7) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 7) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 8) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 8) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 9) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 9) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 10) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 10) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 11) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 11) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 12) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 12) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 13) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 13) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 14) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 14) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 15) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 15) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 16) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 16) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 17) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 17) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 18) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 18) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 19) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 19) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 20) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 20) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 21) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 21) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 22) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 22) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 23) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 23) % 2) is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= y <= 98 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> x + y <= 99 is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> x + y <= 98 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x + 2 * y <= 98 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> x + (2 * y + 1) <= 97 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x + 2 * y == 0 is partially proven to be inductive.\nloop invariant (x % 2) ==> (y % 2) is partially proven to be inductive.\nloop invariant !(x % 2) ==> !(y % 2) is partially proven to be inductive.\nloop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 + 1 == y % 2 is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 + y == 2 * x is partially proven to be inductive.\nloop invariant x % 2 + 1 == (x + y) % 2 is partially proven to be inductive.\nloop invariant x % 2 + (x + y) % 2 == (x + y) % 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == y % 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 1 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 3 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 4 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 5 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 6 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 7 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 8 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 9 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 10 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 11 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 12 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 13 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 14 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 15 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 16 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 17 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 18 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 19 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 20 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 21 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 22 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 23 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 24 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 25 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 26 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 27 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 28 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 29 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 30 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 31 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 32 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 33 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 34 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 35 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 36 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 37 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 38 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 39 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 40 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 41 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 42 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 43 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 44 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 45 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 46 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 47 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 48 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 49 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 50 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 51 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 52 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 53 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 54 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 55 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 56 is partially proven to be inductive.\nloop invariant 0 <= y < 2 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x == y is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x == y + 1 is partially proven to be inductive.\nloop invariant x == (y / 2) * 2 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant 0 <= x < 100 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is partially proven to be inductive.\nloop invariant x == (y * (y + 1)) / 2 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant x <= 98 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) is partially proven to be inductive.\nloop invariant x + y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x + y % 2 != 0 ==> y % 2 != 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 != (x % 2) ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant y % 2 != (x % 2) ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2)) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: y == 0;\nloop invariant i3: x % 2 == y % 2 ==> x == y;\nloop invariant i4: y % 2 == 0;\nloop invariant i5: x == 2 * (y / 2) + (y % 2);\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 99;\nloop invariant i8: y % 2 == 0 ==> x == 2 * (y / 2);\nloop invariant i9: y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1;\nloop invariant i10: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i11: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i12: y % 2 == 0 ==> x <= y;\nloop invariant i13: y % 2 == 1 ==> x <= y;\nloop invariant i14: y % 2 == 0 ==> x >= y - 1;\nloop invariant i15: y % 2 == 1 ==> x >= y - 1;\nloop invariant i16: y % 2 == 0 ==> x <= y + 1;\nloop invariant i17: y % 2 == 1 ==> x <= y + 1;\nloop invariant i18: y % 2 == 0 ==> x >= y - 2;\nloop invariant i19: y % 2 == 1 ==> x >= y - 2;\nloop invariant i20: y % 2 == 0 ==> x <= y + 2;\nloop invariant i21: y % 2 == 1 ==> x <= y + 2;\nloop invariant i22: y % 2 == 0 ==> x >= y - 3;\nloop invariant i23: y % 2 == 1 ==> x >= y - 3;\nloop invariant i24: y % 2 == 0 ==> x <= y + 3;\nloop invariant i25: y % 2 == 1 ==> x <= y + 3;\nloop invariant i26: y % 2 == 0 ==> x >= y - 4;\nloop invariant i27: y % 2 == 1 ==> x >= y - 4;\nloop invariant i28: y % 2 == 0 ==> x <= y + 4;\nloop invariant i29: y % 2 == 1 ==> x <= y + 4;\nloop invariant i30: y % 2 == 0 ==> x >= y - 5;\nloop invariant i31: y % 2 == 1 ==> x >= y - 5;\nloop invariant i32: y % 2 == 0 ==> x <= y + 5;\nloop invariant i33: y % 2 == 1 ==> x <= y + 5;\nloop invariant i34: y % 2 == 0 ==> x >= y - 6;\nloop invariant i35: y % 2 == 1 ==> x >= y - 6;\nloop invariant i36: y % 2 == 0 ==> x <= y + 6;\nloop invariant i37: y % 2 == 1 ==> x <= y + 6;\nloop invariant i38: y % 2 == 0 ==> x >= y - 7;\nloop invariant i39: y % 2 == 1 ==> x >= y - 7;\nloop invariant i40: y % 2 == 0 ==> x <= y + 7;\nloop invariant i41: y % 2 == 1 ==> x <= y + 7;\nloop invariant i42: y % 2 == 0 ==> x >= y - 8;\nloop invariant i43: y % 2 == 1 ==> x >= y - 8;\nloop invariant i44: y % 2 == 0 ==> x <= y + 8;\nloop invariant i45: y % 2 == 1 ==> x <= y + 8;\nloop invariant i46: y % 2 == 0 ==> x >= y - 9;\nloop invariant i47: y % 2 == 1 ==> x >= y - 9;\nloop invariant i48: y % 2 == 0 ==> x <= y + 9;\nloop invariant i49: y % 2 == 1 ==> x <= y + 9;\nloop invariant i50: y % 2 == 0 ==> x >= y - 10;\nloop invariant i51: y % 2 == 1 ==> x >= y - 10;\nloop invariant i52: y % 2 == 0 ==> x <= y + 10;\nloop invariant i53: y % 2 == 1 ==> x <= y + 10;\nloop invariant i54: y % 2 == 0 ==> x >= y - 11;\nloop invariant i55: y % 2 == 1 ==> x >= y - 11;\nloop invariant i56: y % 2 == 0 ==> x <= y + 11;\nloop invariant i57: y % 2 == 1 ==> x <= y + 11;\nloop invariant i58: y % 2 == 0 ==> x >= y - 12;\nloop invariant i59: y % 2 == 1 ==> x >= y - 12;\nloop invariant i60: y % 2 == 0 ==> x <= y + 12;\nloop invariant i61: y % 2 == 1 ==> x <= y + 12;\nloop invariant i62: 0 <= y <= 99;\nloop invariant i63: x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant i64: x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant i65: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i66: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i67: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant i68: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\nloop invariant i69: y >= 0;\nloop invariant i70: (x % 2) == (y % 2);\nloop invariant i71: (x % 2) == ((x + y) % 2);\nloop invariant i72: (x % 2) == ((y + 1) % 2);\nloop invariant i73: (x % 2) == ((x + y + 1) % 2);\nloop invariant i74: (x % 2) == ((y + 2) % 2);\nloop invariant i75: (x % 2) == ((x + y + 2) % 2);\nloop invariant i76: (x % 2) == ((y + 3) % 2);\nloop invariant i77: (x % 2) == ((x + y + 3) % 2);\nloop invariant i78: (x % 2) == ((y + 4) % 2);\nloop invariant i79: (x % 2) == ((x + y + 4) % 2);\nloop invariant i80: (x % 2) == ((y + 5) % 2);\nloop invariant i81: (x % 2) == ((x + y + 5) % 2);\nloop invariant i82: (x % 2) == ((y + 6) % 2);\nloop invariant i83: (x % 2) == ((x + y + 6) % 2);\nloop invariant i84: (x % 2) == ((y + 7) % 2);\nloop invariant i85: (x % 2) == ((x + y + 7) % 2);\nloop invariant i86: (x % 2) == ((y + 8) % 2);\nloop invariant i87: (x % 2) == ((x + y + 8) % 2);\nloop invariant i88: (x % 2) == ((y + 9) % 2);\nloop invariant i89: (x % 2) == ((x + y + 9) % 2);\nloop invariant i90: (x % 2) == ((y + 10) % 2);\nloop invariant i91: (x % 2) == ((x + y + 10) % 2);\nloop invariant i92: (x % 2) == ((y + 11) % 2);\nloop invariant i93: (x % 2) == ((x + y + 11) % 2);\nloop invariant i94: (x % 2) == ((y + 12) % 2);\nloop invariant i95: (x % 2) == ((x + y + 12) % 2);\nloop invariant i96: (x % 2) == ((y + 13) % 2);\nloop invariant i97: (x % 2) == ((x + y + 13) % 2);\nloop invariant i98: (x % 2) == ((y + 14) % 2);\nloop invariant i99: (x % 2) == ((x + y + 14) % 2);\nloop invariant i100: (x % 2) == ((y + 15) % 2);\nloop invariant i101: (x % 2) == ((x + y + 15) % 2);\nloop invariant i102: (x % 2) == ((y + 16) % 2);\nloop invariant i103: (x % 2) == ((x + y + 16) % 2);\nloop invariant i104: (x % 2) == ((y + 17) % 2);\nloop invariant i105: (x % 2) == ((x + y + 17) % 2);\nloop invariant i106: (x % 2) == ((y + 18) % 2);\nloop invariant i107: (x % 2) == ((x + y + 18) % 2);\nloop invariant i108: (x % 2) == ((y + 19) % 2);\nloop invariant i109: (x % 2) == ((x + y + 19) % 2);\nloop invariant i110: (x % 2) == ((y + 20) % 2);\nloop invariant i111: (x % 2) == ((x + y + 20) % 2);\nloop invariant i112: (x % 2) == ((y + 21) % 2);\nloop invariant i113: (x % 2) == ((x + y + 21) % 2);\nloop invariant i114: (x % 2) == ((y + 22) % 2);\nloop invariant i115: (x % 2) == ((x + y + 22) % 2);\nloop invariant i116: (x % 2) == ((y + 23) % 2);\nloop invariant i117: (x % 2) == ((x + y + 23) % 2);\nloop invariant i118: 0 <= x;\nloop invariant i119: 0 <= y;\nloop invariant i120: 0 <= y <= 98;\nloop invariant i121: x % 2 == y % 2 ==> x + y <= 99;\nloop invariant i122: x % 2 != y % 2 ==> x + y <= 98;\nloop invariant i123: y % 2 == 0 ==> x + 2 * y <= 98;\nloop invariant i124: y % 2 != 0 ==> x + (2 * y + 1) <= 97;\nloop invariant i125: y % 2 == 0 ==> x + 2 * y == 0;\nloop invariant i126: (x % 2) ==> (y % 2);\nloop invariant i127: !(x % 2) ==> !(y % 2);\nloop invariant i128: 0 <= x <= 2;\nloop invariant i129: (x + 2 * y) % 2 == 0;\nloop invariant i130: (x + 2 * y) % 2 + 1 == y % 2;\nloop invariant i131: (x + 2 * y) % 2 + y == 2 * x;\nloop invariant i132: x % 2 + 1 == (x + y) % 2;\nloop invariant i133: x % 2 + (x + y) % 2 == (x + y) % 2;\nloop invariant i134: (x + y) % 2 == y % 2;\nloop invariant i135: (x + y) % 2 == 0;\nloop invariant i136: (x + y) % 2 == 1;\nloop invariant i137: (x + y) % 2 == 2;\nloop invariant i138: (x + y) % 2 == 3;\nloop invariant i139: (x + y) % 2 == 4;\nloop invariant i140: (x + y) % 2 == 5;\nloop invariant i141: (x + y) % 2 == 6;\nloop invariant i142: (x + y) % 2 == 7;\nloop invariant i143: (x + y) % 2 == 8;\nloop invariant i144: (x + y) % 2 == 9;\nloop invariant i145: (x + y) % 2 == 10;\nloop invariant i146: (x + y) % 2 == 11;\nloop invariant i147: (x + y) % 2 == 12;\nloop invariant i148: (x + y) % 2 == 13;\nloop invariant i149: (x + y) % 2 == 14;\nloop invariant i150: (x + y) % 2 == 15;\nloop invariant i151: (x + y) % 2 == 16;\nloop invariant i152: (x + y) % 2 == 17;\nloop invariant i153: (x + y) % 2 == 18;\nloop invariant i154: (x + y) % 2 == 19;\nloop invariant i155: (x + y) % 2 == 20;\nloop invariant i156: (x + y) % 2 == 21;\nloop invariant i157: (x + y) % 2 == 22;\nloop invariant i158: (x + y) % 2 == 23;\nloop invariant i159: (x + y) % 2 == 24;\nloop invariant i160: (x + y) % 2 == 25;\nloop invariant i161: (x + y) % 2 == 26;\nloop invariant i162: (x + y) % 2 == 27;\nloop invariant i163: (x + y) % 2 == 28;\nloop invariant i164: (x + y) % 2 == 29;\nloop invariant i165: (x + y) % 2 == 30;\nloop invariant i166: (x + y) % 2 == 31;\nloop invariant i167: (x + y) % 2 == 32;\nloop invariant i168: (x + y) % 2 == 33;\nloop invariant i169: (x + y) % 2 == 34;\nloop invariant i170: (x + y) % 2 == 35;\nloop invariant i171: (x + y) % 2 == 36;\nloop invariant i172: (x + y) % 2 == 37;\nloop invariant i173: (x + y) % 2 == 38;\nloop invariant i174: (x + y) % 2 == 39;\nloop invariant i175: (x + y) % 2 == 40;\nloop invariant i176: (x + y) % 2 == 41;\nloop invariant i177: (x + y) % 2 == 42;\nloop invariant i178: (x + y) % 2 == 43;\nloop invariant i179: (x + y) % 2 == 44;\nloop invariant i180: (x + y) % 2 == 45;\nloop invariant i181: (x + y) % 2 == 46;\nloop invariant i182: (x + y) % 2 == 47;\nloop invariant i183: (x + y) % 2 == 48;\nloop invariant i184: (x + y) % 2 == 49;\nloop invariant i185: (x + y) % 2 == 50;\nloop invariant i186: (x + y) % 2 == 51;\nloop invariant i187: (x + y) % 2 == 52;\nloop invariant i188: (x + y) % 2 == 53;\nloop invariant i189: (x + y) % 2 == 54;\nloop invariant i190: (x + y) % 2 == 55;\nloop invariant i191: (x + y) % 2 == 56;\nloop invariant i192: 0 <= y < 2;\nloop invariant i193: x % 2 == y % 2;\nloop invariant i194: x % 2 == 0 ==> x == y;\nloop invariant i195: x % 2 == 1 ==> x == y + 1;\nloop invariant i196: x == (y / 2) * 2 ==> y % 2 == 0;\nloop invariant i197: x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\nloop invariant i198: 0 <= x < 100;\nloop invariant i199: y % 2 == x % 2;\nloop invariant i200: x == (y * (y + 1)) / 2;\nloop invariant i201: y <= 99;\nloop invariant i202: x <= 98;\nloop invariant i203: 0 <= y <= 100;\nloop invariant i204: y % 2 == (x % 2);\nloop invariant i205: x + y % 2 == 0 ==> y % 2 == 0;\nloop invariant i206: x + y % 2 != 0 ==> y % 2 != 0;\nloop invariant i207: y % 2 == (x % 2) ==> (x % 2) == 0;\nloop invariant i208: y % 2 == (x % 2) ==> y % 2 == 0;\nloop invariant i209: y % 2 != (x % 2) ==> (x % 2) == 1;\nloop invariant i210: y % 2 != (x % 2) ==> y % 2 == 1;\nloop invariant i211: ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 110,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 0;\n\n\n\nloop invariant i10: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i65: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i66: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i67: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant i68: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\nloop invariant i69: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i118: 0 <= x;\nloop invariant i119: 0 <= y;\n\n\n\n\n\n\nloop invariant i126: (x % 2) ==> (y % 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i197: x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\n\n\n\n\n\n\n\nloop invariant i205: x + y % 2 == 0 ==> y % 2 == 0;\n\n\n\n\nloop invariant i210: y % 2 != (x % 2) ==> y % 2 == 1;\nloop invariant i211: ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant x_min >= 10;\nloop invariant x_max >= x_min;\nloop invariant x_max <= 20;\nloop invariant x_min % 2 == 0;\nloop invariant x_max % 2 == 0;\nloop invariant x >= x_min;\nloop invariant x <= x_max;\nloop invariant x_min >= 10;\nloop invariant x_max >= x_min;\nloop invariant x_max <= 20;\nloop invariant x_min % 2 == 0;\nloop invariant x_max % 2 == 0;\nloop invariant x >= x_min;\nloop invariant x <= x_max;\nloop invariant !(x % 2);\n*/\n```",
                "```\n/*@\nloop invariant 10 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x <= -2;\nloop invariant x >= 12 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant (x - 2) % 2 == 0 ==> x >= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x >= 10 ==> 10 <= x <= 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 1;\nloop invariant x % 2 == 1 ==> x >= 10;\nloop invariant x % 2 == 1 ==> x <= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x >= 2;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x >= 10;\n*/\n```",
                "```\n/*@\nloop invariant 10 >= x >= 12;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x <= 12;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 22;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x <= 100 ==> x <= 100;\nloop invariant x >= 10;\nloop invariant x <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= 10;\nloop invariant (x >= 10) ==> (x % 2 == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 20;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant x_min >= 10;\nloop invariant x_max >= x_min;\nloop invariant x_max <= 20;\nloop invariant x_min % 2 == 0;\nloop invariant x_max % 2 == 0;\nloop invariant x >= x_min;\nloop invariant x <= x_max;\nloop invariant x_min >= 10;\nloop invariant x_max >= x_min;\nloop invariant x_max <= 20;\nloop invariant x_min % 2 == 0;\nloop invariant x_max % 2 == 0;\nloop invariant x >= x_min;\nloop invariant x <= x_max;\nloop invariant !(x % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 11: unbound logic variable x_min. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 10 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x <= -2;\nloop invariant x >= 12 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 10 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x <= -2 is partially proven to be inductive.\nloop invariant x >= 12 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x <= 8 ==> x % 2 != 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant (x - 2) % 2 == 0 ==> x >= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 20 is established but not preserved.\nloop invariant (x - 2) % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x >= 10 ==> 10 <= x <= 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> 10 <= x <= 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant i7: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i8: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i9: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i10: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i11: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i12: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i13: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i14: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i15: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i16: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i17: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i18: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 1;\nloop invariant x % 2 == 1 ==> x >= 10;\nloop invariant x % 2 == 1 ==> x <= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is partially proven to be inductive.\nloop invariant x % 2 == 1 is preserved but not established.\nloop invariant x % 2 == 1 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x >= 2;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x >= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x >= 2 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\nloop invariant i3: x >= 10 ==> x >= 2;\nloop invariant i4: x >= 10 ==> x % 2 == 0 ==> x >= 10;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 10 >= x >= 12;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 10 >= x >= 12 is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x <= 12;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x <= 12 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 22;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 22 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x <= 100 ==> x <= 100;\nloop invariant x >= 10;\nloop invariant x <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 10 ==> x >= 10 is partially proven to be inductive.\nloop invariant x <= 100 ==> x <= 100 is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x <= 100 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: x >= 10 ==> x >= 10;\nloop invariant i2: x <= 100 ==> x <= 100;\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= 10;\nloop invariant (x >= 10) ==> (x % 2 == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant (x >= 10) ==> (x % 2 == 0) is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 20 is established but not preserved.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 11: unbound logic variable x_min. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: x_min >= 10;\nloop invariant i2: x_max >= x_min;\nloop invariant i3: x_max <= 20;\nloop invariant i4: x_min % 2 == 0;\nloop invariant i5: x_max % 2 == 0;\nloop invariant i6: x >= x_min;\nloop invariant i7: x <= x_max;\nloop invariant i8: !(x % 2);\nloop invariant i9: 10 <= x <= 10;\nloop invariant i10: x % 2 == 0 ==> x >= 10;\nloop invariant i11: x % 2 != 0 ==> x <= -2;\nloop invariant i12: x >= 12 ==> x % 2 == 0;\nloop invariant i13: x <= 8 ==> x % 2 != 0;\nloop invariant i14: x >= 10 ==> x % 2 == 0;\nloop invariant i15: 0 <= x <= 20;\nloop invariant i16: (x - 2) % 2 == 0 ==> x >= 10;\nloop invariant i17: 0 <= x <= 10;\nloop invariant i18: x % 2 == 0;\nloop invariant i19: x >= 10 ==> 10 <= x <= 10;\nloop invariant i20: x >= 10 ==> x % 2 == 0 ==> x == 10;\nloop invariant i21: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant i22: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i23: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i24: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i25: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i26: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i27: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i28: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i29: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i30: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i31: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i32: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i33: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i34: x % 2 == 1;\nloop invariant i35: x % 2 == 1 ==> x >= 10;\nloop invariant i36: x % 2 == 1 ==> x <= 10;\nloop invariant i37: x >= 10 ==> x >= 2;\nloop invariant i38: x >= 10 ==> x % 2 == 0 ==> x >= 10;\nloop invariant i39: 10 >= x >= 12;\nloop invariant i40: 0 <= x <= 100000;\nloop invariant i41: x >= (1 + (y - 1) * y / 2);\nloop invariant i42: x >= 10;\nloop invariant i43: x >= y;\nloop invariant i44: x <= 12;\nloop invariant i45: 0 <= x <= 22;\nloop invariant i46: x >= 10 ==> x >= 10;\nloop invariant i47: x <= 100 ==> x <= 100;\nloop invariant i48: x <= 100;\nloop invariant i49: (x >= 10) ==> (x % 2 == 0);\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 27,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant i22: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i23: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i24: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i25: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i26: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i27: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i28: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i29: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i30: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i31: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i32: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i33: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n\n\n\nloop invariant i37: x >= 10 ==> x >= 2;\nloop invariant i38: x >= 10 ==> x % 2 == 0 ==> x >= 10;\n\n\n\n\n\n\n\nloop invariant i46: x >= 10 ==> x >= 10;\nloop invariant i47: x <= 100 ==> x <= 100;\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/113.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn <= i;\nloop invariant sn >= i - 1;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i-1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sn <= n;\nloop invariant i == sn + 1;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == sn + 1;\nloop invariant (n == 0 ==> sn == 0);\nloop invariant (sn == n ==> i == n + 1);\n*/\n```",
                "```\n/*@\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - 1 - (n - i));\nloop invariant sn == (n - 2 - (n - i));\nloop invariant sn == (n - 3 - (n - i));\nloop invariant sn == (n - 4 - (n - i));\nloop invariant sn == (n - 5 - (n - i));\nloop invariant sn == (n - 6 - (n - i));\nloop invariant sn == (n - 7 - (n - i));\nloop invariant sn == (n - 8 - (n - i));\nloop invariant sn == (n - 9 - (n - i));\nloop invariant sn == (n - 10 - (n - i));\nloop invariant sn == (n - 11 - (n - i));\nloop invariant sn == (n - 12 - (n - i));\nloop invariant sn == (n - 13 - (n - i));\nloop invariant sn == (n - 14 - (n - i));\nloop invariant sn == (n - 15 - (n - i));\nloop invariant sn == (n - 16 - (n - i));\nloop invariant sn == (n - 17 - (n - i));\nloop invariant sn == (n - 18 - (n - i));\nloop invariant sn == (n - 19 - (n - i));\nloop invariant sn == (n - 20 - (n - i));\nloop invariant sn == (n - 21 - (n - i));\nloop invariant sn == (n - 22 - (n - i));\nloop invariant sn == (n - 23 - (n - i));\nloop invariant sn == (n - 24 - (n - i));\nloop invariant sn == (n - 25 - (n - i));\nloop invariant sn == (n - 26 - (n - i));\nloop invariant sn == (n - 27 - (n - i));\nloop invariant sn == (n - 28 - (n - i));\nloop invariant sn == (n - 29 - (n - i));\nloop invariant sn == (n - 30 - (n - i));\nloop invariant sn == (n - 31 - (n - i));\nloop invariant sn == (n - 32 - (n - i));\nloop invariant sn == (n - 33 - (n - i));\nloop invariant sn == (n - 34 - (n - i));\nloop invariant sn == (n - 35 - (n - i));\nloop invariant sn == (n - 36 - (n - i));\nloop invariant sn == (n - 37 - (n - i));\nloop invariant sn == (n - 38 - (n - i));\nloop invariant sn == (n - 39 - (n - i));\nloop invariant sn == (n - 40 - (n - i));\nloop invariant sn == (n - 41 - (n - i));\nloop invariant sn == (n - 42 - (n - i));\nloop invariant sn == (n - 43 - (n - i));\nloop invariant sn == (n - 44 - (n - i));\nloop invariant sn == (n - 45 - (n - i));\nloop invariant sn == (n - 46 - (n - i));\nloop invariant sn == (n - 47 - (n - i));\nloop invariant sn == (n - 48 - (n - i));\nloop invariant sn == (n - 49 - (n - i));\nloop invariant sn == (n - 50 - (n - i));\nloop invariant sn == (n - 51 - (n - i));\nloop invariant sn == (n - 52 - (n - i));\nloop invariant sn == (n - 53 - (n - i));\nloop invariant sn == (n - 54 - (n - i));\nloop invariant sn == (n - 55 - (n - i));\nloop invariant sn == (n - 56 - (n - i));\nloop invariant sn == (n - 57 - (n - i));\nloop invariant sn == (n - 58 - (n - i));\nloop invariant sn == (n - 59 - (n - i));\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant n >= 0;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant ( (i <= n) ==> (sn == i - 1) );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn <= i;\nloop invariant sn >= i - 1;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 1 <= i <= n is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= sn + 1 is partially proven to be inductive.\nloop invariant sn >= sn - 1 is partially proven to be inductive.\nloop invariant sn >= i is preserved but not established.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn <= i;\nloop invariant i6: sn >= i - 1;\nloop invariant i7: sn <= sn + 1;\nloop invariant i8: sn >= sn - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i-1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i-1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sn <= n;\nloop invariant i == sn + 1;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 1 <= sn <= n is preserved but not established.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == sn + 1;\nloop invariant (n == 0 ==> sn == 0);\nloop invariant (sn == n ==> i == n + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant (n == 0 ==> sn == 0) is partially proven to be inductive.\nloop invariant (sn == n ==> i == n + 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i == sn + 1;\nloop invariant i5: (n == 0 ==> sn == 0);\nloop invariant i6: (sn == n ==> i == n + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i <= n is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nAssertion sn == n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn <= i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 61,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - 1 - (n - i));\nloop invariant sn == (n - 2 - (n - i));\nloop invariant sn == (n - 3 - (n - i));\nloop invariant sn == (n - 4 - (n - i));\nloop invariant sn == (n - 5 - (n - i));\nloop invariant sn == (n - 6 - (n - i));\nloop invariant sn == (n - 7 - (n - i));\nloop invariant sn == (n - 8 - (n - i));\nloop invariant sn == (n - 9 - (n - i));\nloop invariant sn == (n - 10 - (n - i));\nloop invariant sn == (n - 11 - (n - i));\nloop invariant sn == (n - 12 - (n - i));\nloop invariant sn == (n - 13 - (n - i));\nloop invariant sn == (n - 14 - (n - i));\nloop invariant sn == (n - 15 - (n - i));\nloop invariant sn == (n - 16 - (n - i));\nloop invariant sn == (n - 17 - (n - i));\nloop invariant sn == (n - 18 - (n - i));\nloop invariant sn == (n - 19 - (n - i));\nloop invariant sn == (n - 20 - (n - i));\nloop invariant sn == (n - 21 - (n - i));\nloop invariant sn == (n - 22 - (n - i));\nloop invariant sn == (n - 23 - (n - i));\nloop invariant sn == (n - 24 - (n - i));\nloop invariant sn == (n - 25 - (n - i));\nloop invariant sn == (n - 26 - (n - i));\nloop invariant sn == (n - 27 - (n - i));\nloop invariant sn == (n - 28 - (n - i));\nloop invariant sn == (n - 29 - (n - i));\nloop invariant sn == (n - 30 - (n - i));\nloop invariant sn == (n - 31 - (n - i));\nloop invariant sn == (n - 32 - (n - i));\nloop invariant sn == (n - 33 - (n - i));\nloop invariant sn == (n - 34 - (n - i));\nloop invariant sn == (n - 35 - (n - i));\nloop invariant sn == (n - 36 - (n - i));\nloop invariant sn == (n - 37 - (n - i));\nloop invariant sn == (n - 38 - (n - i));\nloop invariant sn == (n - 39 - (n - i));\nloop invariant sn == (n - 40 - (n - i));\nloop invariant sn == (n - 41 - (n - i));\nloop invariant sn == (n - 42 - (n - i));\nloop invariant sn == (n - 43 - (n - i));\nloop invariant sn == (n - 44 - (n - i));\nloop invariant sn == (n - 45 - (n - i));\nloop invariant sn == (n - 46 - (n - i));\nloop invariant sn == (n - 47 - (n - i));\nloop invariant sn == (n - 48 - (n - i));\nloop invariant sn == (n - 49 - (n - i));\nloop invariant sn == (n - 50 - (n - i));\nloop invariant sn == (n - 51 - (n - i));\nloop invariant sn == (n - 52 - (n - i));\nloop invariant sn == (n - 53 - (n - i));\nloop invariant sn == (n - 54 - (n - i));\nloop invariant sn == (n - 55 - (n - i));\nloop invariant sn == (n - 56 - (n - i));\nloop invariant sn == (n - 57 - (n - i));\nloop invariant sn == (n - 58 - (n - i));\nloop invariant sn == (n - 59 - (n - i));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == (n - (n - i)) is preserved but not established.\nloop invariant sn == (n - 1 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 2 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 3 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 4 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 5 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 6 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 7 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 8 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 9 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 10 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 11 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 12 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 13 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 14 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 15 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 16 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 17 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 18 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 19 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 20 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 21 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 22 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 23 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 24 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 25 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 26 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 27 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 28 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 29 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 30 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 31 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 32 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 33 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 34 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 35 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 36 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 37 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 38 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 39 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 40 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 41 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 42 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 43 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 44 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 45 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 46 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 47 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 48 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 49 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 50 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 51 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 52 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 53 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 54 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 55 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 56 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 57 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 58 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 59 - (n - i)) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i >= 1;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn == (i - 1);\n\nloop invariant i8: sn == (n - 1 - (n - i));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= n - 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\nloop invariant i5: sn == i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant n >= 0;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n is preserved but not established.\nloop invariant 1 <= i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\nloop invariant i5: i >= 1;\nloop invariant i6: sn >= 0;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant n == n is partially proven to be inductive.\nloop invariant sn == sn is partially proven to be inductive.\nloop invariant i == i is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: i >= 1;\n\nloop invariant i6: n == n;\nloop invariant i7: sn == sn;\nloop invariant i8: i == i;\nloop invariant i9: sn == i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant ( (i <= n) ==> (sn == i - 1) );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant ( (i <= n) ==> (sn == i - 1) ) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: sn >= 0;\n\nloop invariant i5: ( (i <= n) ==> (sn == i - 1) );\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == i - 1;\nloop invariant i4: i == sn + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 104: unbound logic variable i1. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 1 <= i <= n;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= n;\nloop invariant i5: sn <= i;\nloop invariant i6: sn >= i - 1;\nloop invariant i7: sn <= sn + 1;\nloop invariant i8: sn >= sn - 1;\nloop invariant i9: sn >= i;\nloop invariant i10: 1 <= i <= n+1;\nloop invariant i11: 0 <= sn <= n;\nloop invariant i12: sn == i-1;\nloop invariant i13: 1 <= sn <= n;\nloop invariant i14: i == sn + 1;\nloop invariant i15: 1 <= i <= n + 1;\nloop invariant i16: (n == 0 ==> sn == 0);\nloop invariant i17: (sn == n ==> i == n + 1);\nloop invariant i18: i <= n;\nloop invariant i19: sn == i - 1;\nloop invariant i20: i >= 1;\nloop invariant i21: i <= n + 1;\nloop invariant i22: sn <= i - 1;\nloop invariant i23: sn == (i - 1);\nloop invariant i24: sn == (n - (n - i));\nloop invariant i25: sn == (n - 1 - (n - i));\nloop invariant i26: sn == (n - 2 - (n - i));\nloop invariant i27: sn == (n - 3 - (n - i));\nloop invariant i28: sn == (n - 4 - (n - i));\nloop invariant i29: sn == (n - 5 - (n - i));\nloop invariant i30: sn == (n - 6 - (n - i));\nloop invariant i31: sn == (n - 7 - (n - i));\nloop invariant i32: sn == (n - 8 - (n - i));\nloop invariant i33: sn == (n - 9 - (n - i));\nloop invariant i34: sn == (n - 10 - (n - i));\nloop invariant i35: sn == (n - 11 - (n - i));\nloop invariant i36: sn == (n - 12 - (n - i));\nloop invariant i37: sn == (n - 13 - (n - i));\nloop invariant i38: sn == (n - 14 - (n - i));\nloop invariant i39: sn == (n - 15 - (n - i));\nloop invariant i40: sn == (n - 16 - (n - i));\nloop invariant i41: sn == (n - 17 - (n - i));\nloop invariant i42: sn == (n - 18 - (n - i));\nloop invariant i43: sn == (n - 19 - (n - i));\nloop invariant i44: sn == (n - 20 - (n - i));\nloop invariant i45: sn == (n - 21 - (n - i));\nloop invariant i46: sn == (n - 22 - (n - i));\nloop invariant i47: sn == (n - 23 - (n - i));\nloop invariant i48: sn == (n - 24 - (n - i));\nloop invariant i49: sn == (n - 25 - (n - i));\nloop invariant i50: sn == (n - 26 - (n - i));\nloop invariant i51: sn == (n - 27 - (n - i));\nloop invariant i52: sn == (n - 28 - (n - i));\nloop invariant i53: sn == (n - 29 - (n - i));\nloop invariant i54: sn == (n - 30 - (n - i));\nloop invariant i55: sn == (n - 31 - (n - i));\nloop invariant i56: sn == (n - 32 - (n - i));\nloop invariant i57: sn == (n - 33 - (n - i));\nloop invariant i58: sn == (n - 34 - (n - i));\nloop invariant i59: sn == (n - 35 - (n - i));\nloop invariant i60: sn == (n - 36 - (n - i));\nloop invariant i61: sn == (n - 37 - (n - i));\nloop invariant i62: sn == (n - 38 - (n - i));\nloop invariant i63: sn == (n - 39 - (n - i));\nloop invariant i64: sn == (n - 40 - (n - i));\nloop invariant i65: sn == (n - 41 - (n - i));\nloop invariant i66: sn == (n - 42 - (n - i));\nloop invariant i67: sn == (n - 43 - (n - i));\nloop invariant i68: sn == (n - 44 - (n - i));\nloop invariant i69: sn == (n - 45 - (n - i));\nloop invariant i70: sn == (n - 46 - (n - i));\nloop invariant i71: sn == (n - 47 - (n - i));\nloop invariant i72: sn == (n - 48 - (n - i));\nloop invariant i73: sn == (n - 49 - (n - i));\nloop invariant i74: sn == (n - 50 - (n - i));\nloop invariant i75: sn == (n - 51 - (n - i));\nloop invariant i76: sn == (n - 52 - (n - i));\nloop invariant i77: sn == (n - 53 - (n - i));\nloop invariant i78: sn == (n - 54 - (n - i));\nloop invariant i79: sn == (n - 55 - (n - i));\nloop invariant i80: sn == (n - 56 - (n - i));\nloop invariant i81: sn == (n - 57 - (n - i));\nloop invariant i82: sn == (n - 58 - (n - i));\nloop invariant i83: sn == (n - 59 - (n - i));\nloop invariant i84: sn <= n - 1;\nloop invariant i85: i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\nloop invariant i86: n >= 0;\nloop invariant i87: n >= 1;\nloop invariant i88: n == n;\nloop invariant i89: sn == sn;\nloop invariant i90: i == i;\nloop invariant i91: ( (i <= n) ==> (sn == i - 1) );\nloop invariant i92: 0 <= i <= n + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 67,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn <= i;\nloop invariant i6: sn >= i - 1;\nloop invariant i7: sn <= sn + 1;\nloop invariant i8: sn >= sn - 1;\n\n\n\nloop invariant i12: sn == i-1;\n\nloop invariant i14: i == sn + 1;\n\nloop invariant i16: (n == 0 ==> sn == 0);\nloop invariant i17: (sn == n ==> i == n + 1);\n\nloop invariant i19: sn == i - 1;\nloop invariant i20: i >= 1;\n\nloop invariant i22: sn <= i - 1;\nloop invariant i23: sn == (i - 1);\n\nloop invariant i25: sn == (n - 1 - (n - i));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i88: n == n;\nloop invariant i89: sn == sn;\nloop invariant i90: i == i;\nloop invariant i91: ( (i <= n) ==> (sn == i - 1) );\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant a >= 0;\nloop invariant b + (j - i) == a;\nloop invariant i == 0 || i == 1;\nloop invariant j == 1 || j == 2;\nloop invariant flag ==> a >= b;\nloop invariant !flag ==> a <= b;\nloop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant a == b ==> i == 0;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i%2 == 0;\nloop invariant a == b ==> j%2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant a >= 0;\nloop invariant b >= -((j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant j >= 1;\nloop invariant j >= 1;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= 2;\nloop invariant a = b * i / 2;\nloop invariant b = j * (j + 1) / 2;\nloop invariant (i%2 == 0 ==> j = i/2 + 1) && (i%2 != 0 ==> j = i/2 + 2);\nloop invariant (flag ==> a = b - i * (i - 1) / 2) && (!flag ==> a = b - i * (i + 1) / 2);\nloop invariant (flag ==> j = i/2 + 1) && (!flag ==> j = i/2 + 2);\nloop invariant (flag ==> a = (i*j + i*(i-1)/2) / 2) && (!flag ==> a = (i*j + i*(i+1)/2) / 2);\nloop invariant (flag ==> b = (i*j + j*(j+1)/2) / 2) && (!flag ==> b = (i*j + j*(j-1)/2) / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= b <= 100000;\nloop invariant a >= (1 + (b - 1) * b / 2);\nloop invariant (i == 0 || i == 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= unknown_int();\nloop invariant 1 <= i <= unknown_int();\nloop invariant 0 <= a <= unknown_int();\nloop invariant 0 <= b <= unknown_int();\nloop invariant a == b ==> unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a;\nloop invariant (flag & (i % 2 == 0) & (j == i)) ==> (b == a);\nloop invariant ((!flag) & (i % 2 == 1) & (j == i + 1)) ==> (b == a);\nloop invariant (flag & (i % 2 == 0) & (j == i + 1)) ==> (b == a);\nloop invariant ((!flag) & (i % 2 == 1) & (j == i)) ==> (b == a);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= a <= b;\nloop invariant a + (2 * (b - a)) <= b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= i + 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a == b;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 2 * j;\nloop invariant a >= b;\nloop invariant b <= j * i - i * i / 2;\nloop invariant b >= j * i - 2 * i * i / 2;\nloop invariant i == 1 || i == 3 || i == 5 || ...;\nloop invariant j == 1 || j == 3 || j == 5 || ...;\nloop invariant a == b ==> a == b;\nloop invariant a != b ==> a == b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j <= 2;\nloop invariant i < j;\nloop invariant a >= 0;\nloop invariant b >= a;\nloop invariant a == b ==> i == j;\nloop invariant a == b ==> i == 0;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= 2;\nloop invariant 0 <= a <= i;\nloop invariant 0 <= b <= (j - i) * (i / 2 + 1);\nloop invariant a <= b;\nloop invariant a >= b - (j - i) * (i / 2 + 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b ==> flag == 1;\nloop invariant a >= b ==> flag == 0;\nloop invariant a <= b ==> i == 0;\nloop invariant a >= b ==> i == 1;\nloop invariant a <= b ==> j == 1;\nloop invariant a >= b ==> j == 2;\nloop invariant a <= b ==> flag == 1;\nloop invariant a >= b ==> flag == 0;\n*/\n```",
                "```\n/*@\nloop invariant true ==> unknown_int();\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i%2 >= 0;\nloop invariant j%2 >= 0;\nloop invariant true ==> (a == b + (j - i));\nloop invariant true ==> (i == 2 * (a - b) + j);\nloop invariant true ==> (j == 1 + 2 * (b - a));\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant a >= 0;\nloop invariant b + (j - i) == a;\nloop invariant i == 0 || i == 1;\nloop invariant j == 1 || j == 2;\nloop invariant flag ==> a >= b;\nloop invariant !flag ==> a <= b;\nloop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b + (j - i) == a is neither established nor preserved.\nloop invariant i == 0 || i == 1 is established but not preserved.\nloop invariant j == 1 || j == 2 is partially proven to be inductive.\nloop invariant flag ==> a >= b is partially proven to be inductive.\nloop invariant !flag ==> a <= b is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: a >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant a == b ==> i == 0;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i%2 == 0;\nloop invariant a == b ==> j%2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is partially proven to be inductive.\nloop invariant 0 <= j <= 2 is partially proven to be inductive.\nloop invariant a == b ==> i == 0 is preserved but not established.\nloop invariant a == b ==> j == 1 is partially proven to be inductive.\nloop invariant a == b ==> i%2 == 0 is partially proven to be inductive.\nloop invariant a == b ==> j%2 == 0 is preserved but not established.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant a >= 0;\nloop invariant b >= -((j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant j >= 1;\nloop invariant j >= 1;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a >= (1 + (j - 1) * j / 2);\nloop invariant a >= (1 + (j - 1) * j / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 100000 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= -((j - 1) * j / 2) is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nloop invariant a >= (1 + (j - 1) * j / 2) is preserved but not established.\nloop invariant j >= 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: a >= 0;\nloop invariant i3: b >= -((j - 1) * j / 2);\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= 2;\nloop invariant a = b * i / 2;\nloop invariant b = j * (j + 1) / 2;\nloop invariant (i%2 == 0 ==> j = i/2 + 1) && (i%2 != 0 ==> j = i/2 + 2);\nloop invariant (flag ==> a = b - i * (i - 1) / 2) && (!flag ==> a = b - i * (i + 1) / 2);\nloop invariant (flag ==> j = i/2 + 1) && (!flag ==> j = i/2 + 2);\nloop invariant (flag ==> a = (i*j + i*(i-1)/2) / 2) && (!flag ==> a = (i*j + i*(i+1)/2) / 2);\nloop invariant (flag ==> b = (i*j + j*(j+1)/2) / 2) && (!flag ==> b = (i*j + j*(j-1)/2) / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= b <= 100000;\nloop invariant a >= (1 + (b - 1) * b / 2);\nloop invariant (i == 0 || i == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= b <= 100000 is partially proven to be inductive.\nloop invariant a >= (1 + (b - 1) * b / 2) is preserved but not established.\nloop invariant (i == 0 || i == 1) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= unknown_int();\nloop invariant 1 <= i <= unknown_int();\nloop invariant 0 <= a <= unknown_int();\nloop invariant 0 <= b <= unknown_int();\nloop invariant a == b ==> unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant b <= a;\nloop invariant (flag & (i % 2 == 0) & (j == i)) ==> (b == a);\nloop invariant ((!flag) & (i % 2 == 1) & (j == i + 1)) ==> (b == a);\nloop invariant (flag & (i % 2 == 0) & (j == i + 1)) ==> (b == a);\nloop invariant ((!flag) & (i % 2 == 1) & (j == i)) ==> (b == a);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 27: invalid operands to binary &; unexpected int and 𝔹. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= a <= b;\nloop invariant a + (2 * (b - a)) <= b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 0 <= j <= 2 is established but not preserved.\nloop invariant 0 <= a <= b is established but not preserved.\nloop invariant a + (2 * (b - a)) <= b is established but not preserved.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= i + 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a == b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 1 <= j <= i + 1 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a == b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 2 * j;\nloop invariant a >= b;\nloop invariant b <= j * i - i * i / 2;\nloop invariant b >= j * i - 2 * i * i / 2;\nloop invariant i == 1 || i == 3 || i == 5 || ...;\nloop invariant j == 1 || j == 3 || j == 5 || ...;\nloop invariant a == b ==> a == b;\nloop invariant a != b ==> a == b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 26: unexpected token '...'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: a == b ==> a == b;\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> a <= b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> a == b);\nloop invariant (flag ==> i == 0);\nloop invariant (flag ==> j == 1);\nloop invariant (flag ==> b == 0);\nloop invariant (flag ==> a == 0);\nloop invariant (flag ==> i <= 1);\nloop invariant (flag ==> j <= 2);\nloop invariant (flag ==> j == i + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 1 is established but not preserved.\nloop invariant (flag ==> a == b) is partially proven to be inductive.\nloop invariant (flag ==> i == 0) is established but not preserved.\nloop invariant (flag ==> j == 1) is partially proven to be inductive.\nloop invariant (flag ==> b == 0) is partially proven to be inductive.\nloop invariant (flag ==> a == 0) is partially proven to be inductive.\nloop invariant (flag ==> i <= 1) is partially proven to be inductive.\nloop invariant (flag ==> j <= 2) is partially proven to be inductive.\nloop invariant (flag ==> j == i + 1) is partially proven to be inductive.\nloop invariant (flag ==> a <= b) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\nloop invariant i3: i >= 0;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 1 <= j <= 2;\nloop invariant i < j;\nloop invariant a >= 0;\nloop invariant b >= a;\nloop invariant a == b ==> i == j;\nloop invariant a == b ==> i == 0;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\nloop invariant a == b ==> i < j;\nloop invariant a == b ==> i < 1;\nloop invariant a == b ==> j == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 1 <= j <= 2 is partially proven to be inductive.\nloop invariant i < j is preserved but not established.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= a is partially proven to be inductive.\nloop invariant a == b ==> i == j is preserved but not established.\nloop invariant a == b ==> i == 0 is partially proven to be inductive.\nloop invariant a == b ==> j == 1 is partially proven to be inductive.\nloop invariant a == b ==> i < j is partially proven to be inductive.\nloop invariant a == b ==> i < 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\nloop invariant i4: a >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= 2;\nloop invariant 0 <= a <= i;\nloop invariant 0 <= b <= (j - i) * (i / 2 + 1);\nloop invariant a <= b;\nloop invariant a >= b - (j - i) * (i / 2 + 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 1 <= j <= 2 is established but not preserved.\nloop invariant 0 <= a <= i is partially proven to be inductive.\nloop invariant 0 <= b <= (j - i) * (i / 2 + 1) is partially proven to be inductive.\nloop invariant a <= b is partially proven to be inductive.\nloop invariant a >= b - (j - i) * (i / 2 + 1) is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: a >= 0;\nloop invariant i8: b >= 0;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= b ==> flag == 1;\nloop invariant a >= b ==> flag == 0;\nloop invariant a <= b ==> i == 0;\nloop invariant a >= b ==> i == 1;\nloop invariant a <= b ==> j == 1;\nloop invariant a >= b ==> j == 2;\nloop invariant a <= b ==> flag == 1;\nloop invariant a >= b ==> flag == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 0 <= j <= 2 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a <= b ==> flag == 1 is preserved but not established.\nloop invariant a >= b ==> flag == 0 is preserved but not established.\nloop invariant a <= b ==> i == 0 is partially proven to be inductive.\nloop invariant a >= b ==> i == 1 is partially proven to be inductive.\nloop invariant a <= b ==> j == 1 is partially proven to be inductive.\nloop invariant a >= b ==> j == 2 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 16,
                    "annotations": "```\n/*@\nloop invariant true ==> unknown_int();\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i%2 >= 0;\nloop invariant j%2 >= 0;\nloop invariant true ==> (a == b + (j - i));\nloop invariant true ==> (i == 2 * (a - b) + j);\nloop invariant true ==> (j == 1 + 2 * (b - a));\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\nloop invariant true ==> (i%2 == 0);\nloop invariant true ==> (j%2 == 1);\nloop invariant true ==> (b >= a);\nloop invariant true ==> (j >= i);\nloop invariant true ==> (a >= 0);\nloop invariant true ==> (b >= 0);\nloop invariant true ==> (i >= 0);\nloop invariant true ==> (j >= 0);\nloop invariant true ==> (j - i <= 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\nloop invariant i6: i%2 >= 0;\nloop invariant i7: j%2 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 44: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: a >= 0;\nloop invariant i4: b + (j - i) == a;\nloop invariant i5: i == 0 || i == 1;\nloop invariant i6: j == 1 || j == 2;\nloop invariant i7: flag ==> a >= b;\nloop invariant i8: !flag ==> a <= b;\nloop invariant i9: j >= i;\nloop invariant i10: 0 <= i <= 2;\nloop invariant i11: 0 <= j <= 2;\nloop invariant i12: a == b ==> i == 0;\nloop invariant i13: a == b ==> j == 1;\nloop invariant i14: a == b ==> i%2 == 0;\nloop invariant i15: a == b ==> j%2 == 0;\nloop invariant i16: 0 <= j <= 100000;\nloop invariant i17: b >= -((j - 1) * j / 2);\nloop invariant i18: a >= b;\nloop invariant i19: a >= (1 + (j - 1) * j / 2);\nloop invariant i20: j >= 1;\nloop invariant i21: 0 <= a <= b;\nloop invariant i22: 1 <= j <= 2;\nloop invariant i23: a = b * i / 2;\nloop invariant i24: b = j * (j + 1) / 2;\nloop invariant i25: (i%2 == 0 ==> j = i/2 + 1) && (i%2 != 0 ==> j = i/2 + 2);\nloop invariant i26: (flag ==> a = b - i * (i - 1) / 2) && (!flag ==> a = b - i * (i + 1) / 2);\nloop invariant i27: (flag ==> j = i/2 + 1) && (!flag ==> j = i/2 + 2);\nloop invariant i28: (flag ==> a = (i*j + i*(i-1)/2) / 2) && (!flag ==> a = (i*j + i*(i+1)/2) / 2);\nloop invariant i29: (flag ==> b = (i*j + j*(j+1)/2) / 2) && (!flag ==> b = (i*j + j*(j-1)/2) / 2);\nloop invariant i30: 0 <= b <= 100000;\nloop invariant i31: a >= (1 + (b - 1) * b / 2);\nloop invariant i32: (i == 0 || i == 1);\nloop invariant i33: 0 <= j <= unknown_int();\nloop invariant i34: 1 <= i <= unknown_int();\nloop invariant i35: 0 <= a <= unknown_int();\nloop invariant i36: 0 <= b <= unknown_int();\nloop invariant i37: a == b ==> unknown_int();\nloop invariant i38: 0 <= i <= 1;\nloop invariant i39: b >= 0;\nloop invariant i40: b <= a;\nloop invariant i41: (flag & (i % 2 == 0) & (j == i)) ==> (b == a);\nloop invariant i42: ((!flag) & (i % 2 == 1) & (j == i + 1)) ==> (b == a);\nloop invariant i43: (flag & (i % 2 == 0) & (j == i + 1)) ==> (b == a);\nloop invariant i44: ((!flag) & (i % 2 == 1) & (j == i)) ==> (b == a);\nloop invariant i45: a + (2 * (b - a)) <= b;\nloop invariant i46: 1 <= j <= i + 1;\nloop invariant i47: a == b;\nloop invariant i48: 1 <= i <= 2 * j;\nloop invariant i49: b <= j * i - i * i / 2;\nloop invariant i50: b >= j * i - 2 * i * i / 2;\nloop invariant i51: i == 1 || i == 3 || i == 5 || ...;\nloop invariant i52: j == 1 || j == 3 || j == 5 || ...;\nloop invariant i53: a == b ==> a == b;\nloop invariant i54: a != b ==> a == b;\nloop invariant i55: 0 <= a;\nloop invariant i56: 0 <= b;\nloop invariant i57: (flag ==> a == b);\nloop invariant i58: (flag ==> i == 0);\nloop invariant i59: (flag ==> j == 1);\nloop invariant i60: (flag ==> b == 0);\nloop invariant i61: (flag ==> a == 0);\nloop invariant i62: (flag ==> i <= 1);\nloop invariant i63: (flag ==> j <= 2);\nloop invariant i64: (flag ==> j == i + 1);\nloop invariant i65: (flag ==> a <= b);\nloop invariant i66: i < j;\nloop invariant i67: b >= a;\nloop invariant i68: a == b ==> i == j;\nloop invariant i69: a == b ==> i < j;\nloop invariant i70: a == b ==> i < 1;\nloop invariant i71: 0 <= a <= i;\nloop invariant i72: 0 <= b <= (j - i) * (i / 2 + 1);\nloop invariant i73: a <= b;\nloop invariant i74: a >= b - (j - i) * (i / 2 + 1);\nloop invariant i75: a <= b ==> flag == 1;\nloop invariant i76: a >= b ==> flag == 0;\nloop invariant i77: a <= b ==> i == 0;\nloop invariant i78: a >= b ==> i == 1;\nloop invariant i79: a <= b ==> j == 1;\nloop invariant i80: a >= b ==> j == 2;\nloop invariant i81: true ==> unknown_int();\nloop invariant i82: i%2 >= 0;\nloop invariant i83: j%2 >= 0;\nloop invariant i84: true ==> (a == b + (j - i));\nloop invariant i85: true ==> (i == 2 * (a - b) + j);\nloop invariant i86: true ==> (j == 1 + 2 * (b - a));\nloop invariant i87: true ==> (b >= a);\nloop invariant i88: true ==> (j >= i);\nloop invariant i89: true ==> (a >= 0);\nloop invariant i90: true ==> (b >= 0);\nloop invariant i91: true ==> (i >= 0);\nloop invariant i92: true ==> (j >= 0);\nloop invariant i93: true ==> (j - i >= 0);\nloop invariant i94: true ==> (j - i <= 1);\nloop invariant i95: true ==> (i%2 == 0);\nloop invariant i96: true ==> (j%2 == 1);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 60,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: a >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: b >= -((j - 1) * j / 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i39: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i53: a == b ==> a == b;\n\nloop invariant i55: 0 <= a;\nloop invariant i56: 0 <= b;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i82: i%2 >= 0;\nloop invariant i83: j%2 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 2*ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize_0 - (leader_len + 2*ielen);\nloop invariant p <= bufsize + leader_len;\nloop invariant p <= bufsize + leader_len - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2*i;\nloop invariant p <= bufsize + leader_len - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 - 2;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= ielen;\nloop invariant ielen <= bufsize_0 / 2;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize_0 / 2;\nloop invariant bufsize_0 / 2 <= bufsize_0;\nloop invariant bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= p + 2*i;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\n*/\n```",
                "```\n/*@\nloop invariant p == 0;\nloop invariant bufsize == bufsize_0;\nloop invariant 0 <= p && p <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= i && i <= ielen;\nloop invariant 0 <= bufsize_0 && bufsize_0 <= bufsize;\nloop invariant 0 <= leader_len && leader_len <= bufsize;\nloop invariant 0 <= ielen && ielen <= bufsize;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len + i * 2 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p + 1 <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant bufsize < leader_len ==> i = 0;\nloop invariant bufsize >= leader_len ==> 0 <= i <= ielen - 1;\nloop invariant bufsize >= leader_len ==> bufsize > 2 * i;\nloop invariant bufsize >= leader_len ==> ielen > i;\nloop invariant bufsize >= leader_len ==> p = 2 * i + leader_len;\nloop invariant bufsize < leader_len ==> p = bufsize_0 - bufsize + leader_len;\nloop invariant bufsize < leader_len ==> (ielen - i) * 2 >= bufsize_0 - bufsize;\nloop invariant bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\nloop invariant bufsize < leader_len ==> i < ielen;\nloop invariant bufsize < leader_len ==> 2 * i + leader_len <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p;\nloop invariant p + 1 < bufsize_0;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2*ielen;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant p + 1 < bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant (bufsize - 2) * (bufsize - 2 + 1) / 2 <= p;\nloop invariant p <= bufsize_0 - 2 * i;\nloop invariant i * i + i <= p;\nloop invariant p <= bufsize_0 - 2 * (ielen - i);\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 40;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize_0 - leader_len <= bufsize_0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*ielen;\nloop invariant bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant ielen <= bufsize_0 - leader_len / 2;\nloop invariant 2*i <= bufsize <= bufsize_0 - leader_len - ielen;\nloop invariant p <= bufsize_0 - leader_len - ielen;\nloop invariant p >= 2*i;\nloop invariant p <= bufsize_0;\nloop invariant p >= 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 2*ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize_0 - (leader_len + 2*ielen);\nloop invariant p <= bufsize + leader_len;\nloop invariant p <= bufsize + leader_len - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2*i;\nloop invariant p <= bufsize + leader_len - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 - 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - (leader_len + 2*ielen) is neither established nor preserved.\nloop invariant p <= bufsize + leader_len is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen is preserved but not established.\nloop invariant p <= bufsize + leader_len - 2 - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen is preserved but not established.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen is preserved but not established.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*ielen is neither established nor preserved.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 - 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 0;\nloop invariant i4: bufsize_0 >= leader_len;\nloop invariant i5: bufsize_0 >= 2*ielen;\nloop invariant i6: bufsize >= 2;\n\nloop invariant i8: p >= 0;\nloop invariant i9: p <= bufsize_0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= ielen;\nloop invariant ielen <= bufsize_0 / 2;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize_0 / 2;\nloop invariant bufsize_0 / 2 <= bufsize_0;\nloop invariant bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= leader_len is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= ielen is partially proven to be inductive.\nloop invariant ielen <= bufsize_0 / 2 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= bufsize_0 / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 1) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 2) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 3) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 4) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 5) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 6) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 7) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 8) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 9) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 10) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 11) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 12) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 13) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 14) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 15) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 16) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 17) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 18) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 19) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 20) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 21) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 22) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 23) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 24) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 25) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 26) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 27) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 28) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 29) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 30) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 31) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 32) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 33) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 34) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 35) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 36) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 37) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 38) / 2 is partially proven to be inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 1 <= bufsize_0;\nloop invariant i2: 0 <= bufsize;\nloop invariant i3: 0 <= p;\nloop invariant i4: p <= bufsize_0;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= ielen;\nloop invariant i7: 0 <= leader_len;\nloop invariant i8: leader_len <= bufsize_0;\nloop invariant i9: 0 <= ielen;\nloop invariant i10: ielen <= bufsize_0 / 2;\nloop invariant i11: 0 <= bufsize_0;\nloop invariant i12: 0 <= bufsize_0 / 2;\nloop invariant i13: bufsize_0 / 2 <= bufsize_0;\nloop invariant i14: bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant i15: bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant i16: bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant i17: bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant i18: bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant i19: bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant i20: bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant i21: bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant i22: bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant i23: bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant i24: bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant i25: bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant i26: bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant i27: bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant i28: bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant i29: bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant i30: bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant i31: bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant i32: bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant i33: bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant i34: bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant i35: bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant i36: bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant i37: bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant i38: bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant i39: bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant i40: bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant i41: bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant i42: bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant i43: bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant i44: bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant i45: bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant i46: bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant i47: bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant i48: bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant i49: bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant i50: bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant i51: bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant i52: bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= p + 2*i;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize_0 >= p + 2*i is established but not preserved.\nloop invariant p + 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - p - 2*i is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize + p + 2*i is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= 0;\n\n\n\nloop invariant i6: bufsize >= bufsize_0 - p - 2*i;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: i <= ielen;\nloop invariant i4: bufsize >= 2;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant p == 0;\nloop invariant bufsize == bufsize_0;\nloop invariant 0 <= p && p <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= i && i <= ielen;\nloop invariant 0 <= bufsize_0 && bufsize_0 <= bufsize;\nloop invariant 0 <= leader_len && leader_len <= bufsize;\nloop invariant 0 <= ielen && ielen <= bufsize;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant p == 0 is preserved but not established.\nloop invariant bufsize == bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p && p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i && i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 && bufsize_0 <= bufsize is partially proven to be inductive.\nloop invariant 0 <= leader_len && leader_len <= bufsize is partially proven to be inductive.\nloop invariant 0 <= ielen && ielen <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\nloop invariant i3: 0 <= p && p <= bufsize_0;\nloop invariant i4: 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant i5: 0 <= i && i <= ielen;\n\n\nloop invariant i8: 0 <= ielen && ielen <= bufsize;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len + i * 2 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p + 1 <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len + i * 2 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 <= bufsize_0 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: leader_len + i * 2 <= p <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant i5: bufsize >= 2;\nloop invariant i6: p >= leader_len;\nloop invariant i7: p <= bufsize_0;\nloop invariant i8: 0 <= bufsize <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant bufsize < leader_len ==> i = 0;\nloop invariant bufsize >= leader_len ==> 0 <= i <= ielen - 1;\nloop invariant bufsize >= leader_len ==> bufsize > 2 * i;\nloop invariant bufsize >= leader_len ==> ielen > i;\nloop invariant bufsize >= leader_len ==> p = 2 * i + leader_len;\nloop invariant bufsize < leader_len ==> p = bufsize_0 - bufsize + leader_len;\nloop invariant bufsize < leader_len ==> (ielen - i) * 2 >= bufsize_0 - bufsize;\nloop invariant bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\nloop invariant bufsize < leader_len ==> i < ielen;\nloop invariant bufsize < leader_len ==> 2 * i + leader_len <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 39: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\n\n\n\n\n\n\n\nloop invariant i9: bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p + 1 < bufsize_0;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 is established but not preserved.\nloop invariant leader_len <= bufsize is preserved but not established.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\n\n\nloop invariant i4: leader_len <= bufsize_0;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= ielen;\nloop invariant i7: bufsize >= 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2*ielen;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize >= 2*ielen;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: bufsize >= 2;\nloop invariant i6: bufsize >= 2*i;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant p + 1 < bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 2 * (ielen - i) is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - p is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 0;\nloop invariant i3: bufsize >= 2 * (ielen - i);\nloop invariant i4: p >= 0;\nloop invariant i5: p <= bufsize_0;\nloop invariant i6: bufsize >= bufsize_0 - p;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant (bufsize - 2) * (bufsize - 2 + 1) / 2 <= p;\nloop invariant p <= bufsize_0 - 2 * i;\nloop invariant i * i + i <= p;\nloop invariant p <= bufsize_0 - 2 * (ielen - i);\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 40;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is established but not preserved.\nloop invariant (bufsize - 2) * (bufsize - 2 + 1) / 2 <= p is preserved but not established.\nloop invariant p <= bufsize_0 - 2 * i is established but not preserved.\nloop invariant i * i + i <= p is established but not preserved.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 1 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 2 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 3 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 4 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 5 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 6 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 7 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 8 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 9 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 10 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 11 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 12 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 13 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 14 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 15 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 16 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 17 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 18 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 19 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 20 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 21 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 22 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 23 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 24 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 25 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 26 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 27 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 28 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 29 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 30 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 31 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 32 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 33 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 34 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 35 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 36 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 37 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 38 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 39 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 40 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: 0 <= i;\nloop invariant i4: i <= ielen;\nloop invariant i5: 0 <= bufsize;\nloop invariant i6: bufsize <= bufsize_0;\n\n\n\n\nloop invariant i11: p <= bufsize_0 - 2 * (ielen - i);\nloop invariant i12: p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant i13: p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant i14: p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant i15: p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant i16: p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant i17: p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant i18: p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant i19: p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant i20: p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant i21: p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant i22: p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant i23: p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant i24: p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant i25: p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant i26: p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant i27: p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant i28: p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant i29: p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant i30: p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant i31: p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant i32: p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant i33: p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant i34: p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant i35: p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant i36: p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant i37: p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant i38: p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant i39: p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant i40: p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant i41: p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant i42: p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant i43: p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant i44: p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant i45: p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant i46: p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant i47: p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant i48: p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant i49: p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant i50: p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant i51: p <= bufsize_0 - 2 * (ielen - i) + 40;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 38: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize_0 - leader_len <= bufsize_0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*ielen;\nloop invariant bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2*i is established but not preserved.\nloop invariant bufsize <= bufsize_0 - 2*i is established but not preserved.\nloop invariant bufsize_0 - leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len - 2*ielen <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2*ielen is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len - 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\nloop invariant i4: 0 <= p <= bufsize_0;\n\n\nloop invariant i7: bufsize_0 - leader_len <= bufsize_0;\nloop invariant i8: bufsize_0 >= leader_len;\nloop invariant i9: bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant i10: bufsize_0 >= leader_len + 2*ielen;\nloop invariant i11: bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant i12: bufsize_0 >= leader_len + 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant ielen <= bufsize_0 - leader_len / 2;\nloop invariant 2*i <= bufsize <= bufsize_0 - leader_len - ielen;\nloop invariant p <= bufsize_0 - leader_len - ielen;\nloop invariant p >= 2*i;\nloop invariant p <= bufsize_0;\nloop invariant p >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant ielen <= bufsize_0 - leader_len / 2 is partially proven to be inductive.\nloop invariant 2*i <= bufsize <= bufsize_0 - leader_len - ielen is preserved but not established.\nloop invariant p <= bufsize_0 - leader_len - ielen is partially proven to be inductive.\nloop invariant p >= 2*i is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i4: leader_len <= bufsize_0;\nloop invariant i5: ielen <= bufsize_0 - leader_len / 2;\n\n\nloop invariant i8: p >= 2*i;\nloop invariant i9: p <= bufsize_0;\nloop invariant i10: p >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 157: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 0;\nloop invariant i4: bufsize_0 >= leader_len;\nloop invariant i5: bufsize_0 >= 2*ielen;\nloop invariant i6: bufsize >= 2;\nloop invariant i7: bufsize >= 2*i;\nloop invariant i8: p >= 0;\nloop invariant i9: p <= bufsize_0;\nloop invariant i10: p <= bufsize_0 - (leader_len + 2*ielen);\nloop invariant i11: p <= bufsize + leader_len;\nloop invariant i12: p <= bufsize + leader_len - 2*ielen;\nloop invariant i13: p <= bufsize + leader_len - 2*i;\nloop invariant i14: p <= bufsize + leader_len - 2;\nloop invariant i15: p <= bufsize + leader_len - 2*ielen + 2;\nloop invariant i16: p <= bufsize + leader_len - 2*i + 2;\nloop invariant i17: p <= bufsize + leader_len - 2 - 2*ielen;\nloop invariant i18: p <= bufsize + leader_len - 2 - 2*i;\nloop invariant i19: p <= bufsize + leader_len - 2 - 2;\nloop invariant i20: p <= bufsize + leader_len - 2*ielen + 2 - 2;\nloop invariant i21: p <= bufsize + leader_len - 2*i + 2 - 2;\nloop invariant i22: p <= bufsize + leader_len - 2 - 2*ielen + 2;\nloop invariant i23: p <= bufsize + leader_len - 2 - 2*i + 2;\nloop invariant i24: p <= bufsize + leader_len - 2 - 2 - 2*ielen;\nloop invariant i25: p <= bufsize + leader_len - 2 - 2 - 2*i;\nloop invariant i26: p <= bufsize + leader_len - 2 - 2 - 2;\nloop invariant i27: p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2;\nloop invariant i28: p <= bufsize + leader_len - 2*i - 2 - 2;\nloop invariant i29: p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2;\nloop invariant i30: p <= bufsize + leader_len - 2 - 2*i + 2 - 2;\nloop invariant i31: p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2;\nloop invariant i32: p <= bufsize + leader_len - 2 - 2 - 2*i + 2;\nloop invariant i33: p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen;\nloop invariant i34: p <= bufsize + leader_len - 2 - 2 - 2 - 2*i;\nloop invariant i35: p <= bufsize + leader_len - 2 - 2 - 2 - 2;\nloop invariant i36: p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant i37: p <= bufsize + leader_len - 2*i - 2 - 2 - 2;\nloop invariant i38: p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2;\nloop invariant i39: p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2;\nloop invariant i40: p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2;\nloop invariant i41: p <= bufsize + leader_len - 2 - 2 - 2*i + 2 - 2;\nloop invariant i42: p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen + 2;\nloop invariant i43: p <= bufsize + leader_len - 2 - 2 - 2 - 2*i + 2;\nloop invariant i44: p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*ielen;\nloop invariant i45: p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*i;\nloop invariant i46: p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2;\nloop invariant i47: p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 - 2;\nloop invariant i48: p <= bufsize + leader_len - 2*i - 2 - 2 - 2 - 2;\nloop invariant i49: p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant i50: p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 - 2;\nloop invariant i51: p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 - 2;\nloop invariant i52: 1 <= bufsize_0;\nloop invariant i53: 0 <= bufsize;\nloop invariant i54: 0 <= p;\nloop invariant i55: 0 <= i;\nloop invariant i56: i <= ielen;\nloop invariant i57: 0 <= leader_len;\nloop invariant i58: leader_len <= bufsize_0;\nloop invariant i59: 0 <= ielen;\nloop invariant i60: ielen <= bufsize_0 / 2;\nloop invariant i61: 0 <= bufsize_0;\nloop invariant i62: 0 <= bufsize_0 / 2;\nloop invariant i63: bufsize_0 / 2 <= bufsize_0;\nloop invariant i64: bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant i65: bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant i66: bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant i67: bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant i68: bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant i69: bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant i70: bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant i71: bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant i72: bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant i73: bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant i74: bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant i75: bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant i76: bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant i77: bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant i78: bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant i79: bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant i80: bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant i81: bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant i82: bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant i83: bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant i84: bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant i85: bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant i86: bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant i87: bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant i88: bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant i89: bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant i90: bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant i91: bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant i92: bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant i93: bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant i94: bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant i95: bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant i96: bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant i97: bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant i98: bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant i99: bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant i100: bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant i101: bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant i102: bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\nloop invariant i103: bufsize_0 >= p + 2*i;\nloop invariant i104: p + 2*i <= bufsize_0;\nloop invariant i105: bufsize >= bufsize_0 - p - 2*i;\nloop invariant i106: bufsize_0 >= bufsize + p + 2*i;\nloop invariant i107: p == 0;\nloop invariant i108: bufsize == bufsize_0;\nloop invariant i109: 0 <= p && p <= bufsize_0;\nloop invariant i110: 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant i111: 0 <= i && i <= ielen;\nloop invariant i112: 0 <= bufsize_0 && bufsize_0 <= bufsize;\nloop invariant i113: 0 <= leader_len && leader_len <= bufsize;\nloop invariant i114: 0 <= ielen && ielen <= bufsize;\nloop invariant i115: leader_len + i * 2 <= p <= bufsize_0;\nloop invariant i116: bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant i117: p >= leader_len;\nloop invariant i118: 0 <= bufsize <= bufsize_0;\nloop invariant i119: p + 1 <= bufsize_0;\nloop invariant i120: bufsize < leader_len ==> i = 0;\nloop invariant i121: bufsize >= leader_len ==> 0 <= i <= ielen - 1;\nloop invariant i122: bufsize >= leader_len ==> bufsize > 2 * i;\nloop invariant i123: bufsize >= leader_len ==> ielen > i;\nloop invariant i124: bufsize >= leader_len ==> p = 2 * i + leader_len;\nloop invariant i125: bufsize < leader_len ==> p = bufsize_0 - bufsize + leader_len;\nloop invariant i126: bufsize < leader_len ==> (ielen - i) * 2 >= bufsize_0 - bufsize;\nloop invariant i127: bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\nloop invariant i128: bufsize < leader_len ==> i < ielen;\nloop invariant i129: bufsize < leader_len ==> 2 * i + leader_len <= bufsize_0;\nloop invariant i130: p + 1 < bufsize_0;\nloop invariant i131: leader_len <= bufsize;\nloop invariant i132: bufsize >= 2*ielen;\nloop invariant i133: i >= 0;\nloop invariant i134: bufsize >= leader_len;\nloop invariant i135: 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\nloop invariant i136: bufsize >= 2 * (ielen - i);\nloop invariant i137: bufsize >= bufsize_0 - p;\nloop invariant i138: bufsize <= bufsize_0;\nloop invariant i139: bufsize >= 2 * i;\nloop invariant i140: (bufsize - 2) * (bufsize - 2 + 1) / 2 <= p;\nloop invariant i141: p <= bufsize_0 - 2 * i;\nloop invariant i142: i * i + i <= p;\nloop invariant i143: p <= bufsize_0 - 2 * (ielen - i);\nloop invariant i144: p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant i145: p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant i146: p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant i147: p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant i148: p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant i149: p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant i150: p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant i151: p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant i152: p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant i153: p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant i154: p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant i155: p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant i156: p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant i157: p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant i158: p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant i159: p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant i160: p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant i161: p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant i162: p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant i163: p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant i164: p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant i165: p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant i166: p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant i167: p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant i168: p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant i169: p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant i170: p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant i171: p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant i172: p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant i173: p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant i174: p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant i175: p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant i176: p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant i177: p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant i178: p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant i179: p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant i180: p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant i181: p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant i182: p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant i183: p <= bufsize_0 - 2 * (ielen - i) + 40;\nloop invariant i184: p <= bufsize_0 - 2*i;\nloop invariant i185: bufsize <= bufsize_0 - 2*i;\nloop invariant i186: bufsize_0 - leader_len <= bufsize_0;\nloop invariant i187: bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant i188: bufsize_0 >= leader_len + 2*ielen;\nloop invariant i189: bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant i190: bufsize_0 >= leader_len + 2*i;\nloop invariant i191: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i192: ielen <= bufsize_0 - leader_len / 2;\nloop invariant i193: 2*i <= bufsize <= bufsize_0 - leader_len - ielen;\nloop invariant i194: p <= bufsize_0 - leader_len - ielen;\nloop invariant i195: p >= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "combined_annotation_num_solver_calls": 20,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 0;\nloop invariant i4: bufsize_0 >= leader_len;\nloop invariant i5: bufsize_0 >= 2*ielen;\nloop invariant i6: bufsize >= 2;\nloop invariant i7: bufsize >= 2*i;\nloop invariant i8: p >= 0;\nloop invariant i9: p <= bufsize_0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i52: 1 <= bufsize_0;\nloop invariant i53: 0 <= bufsize;\nloop invariant i54: 0 <= p;\nloop invariant i55: 0 <= i;\nloop invariant i56: i <= ielen;\nloop invariant i57: 0 <= leader_len;\nloop invariant i58: leader_len <= bufsize_0;\nloop invariant i59: 0 <= ielen;\nloop invariant i60: ielen <= bufsize_0 / 2;\nloop invariant i61: 0 <= bufsize_0;\nloop invariant i62: 0 <= bufsize_0 / 2;\nloop invariant i63: bufsize_0 / 2 <= bufsize_0;\nloop invariant i64: bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant i65: bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant i66: bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant i67: bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant i68: bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant i69: bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant i70: bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant i71: bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant i72: bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant i73: bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant i74: bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant i75: bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant i76: bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant i77: bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant i78: bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant i79: bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant i80: bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant i81: bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant i82: bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant i83: bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant i84: bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant i85: bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant i86: bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant i87: bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant i88: bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant i89: bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant i90: bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant i91: bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant i92: bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant i93: bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant i94: bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant i95: bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant i96: bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant i97: bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant i98: bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant i99: bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant i100: bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant i101: bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant i102: bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\n\n\nloop invariant i105: bufsize >= bufsize_0 - p - 2*i;\n\n\n\nloop invariant i109: 0 <= p && p <= bufsize_0;\nloop invariant i110: 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant i111: 0 <= i && i <= ielen;\n\n\nloop invariant i114: 0 <= ielen && ielen <= bufsize;\nloop invariant i115: leader_len + i * 2 <= p <= bufsize_0;\nloop invariant i116: bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant i117: p >= leader_len;\nloop invariant i118: 0 <= bufsize <= bufsize_0;\nloop invariant i119: p + 1 <= bufsize_0;\n\nloop invariant i121: bufsize >= leader_len ==> 0 <= i <= ielen - 1;\nloop invariant i122: bufsize >= leader_len ==> bufsize > 2 * i;\nloop invariant i123: bufsize >= leader_len ==> ielen > i;\n\n\n\nloop invariant i127: bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\nloop invariant i128: bufsize < leader_len ==> i < ielen;\nloop invariant i129: bufsize < leader_len ==> 2 * i + leader_len <= bufsize_0;\nloop invariant i130: p + 1 < bufsize_0;\n\nloop invariant i132: bufsize >= 2*ielen;\nloop invariant i133: i >= 0;\n\nloop invariant i135: 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\nloop invariant i136: bufsize >= 2 * (ielen - i);\nloop invariant i137: bufsize >= bufsize_0 - p;\nloop invariant i138: bufsize <= bufsize_0;\nloop invariant i139: bufsize >= 2 * i;\n\n\n\nloop invariant i143: p <= bufsize_0 - 2 * (ielen - i);\nloop invariant i144: p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant i145: p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant i146: p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant i147: p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant i148: p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant i149: p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant i150: p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant i151: p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant i152: p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant i153: p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant i154: p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant i155: p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant i156: p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant i157: p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant i158: p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant i159: p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant i160: p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant i161: p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant i162: p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant i163: p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant i164: p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant i165: p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant i166: p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant i167: p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant i168: p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant i169: p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant i170: p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant i171: p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant i172: p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant i173: p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant i174: p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant i175: p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant i176: p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant i177: p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant i178: p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant i179: p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant i180: p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant i181: p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant i182: p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant i183: p <= bufsize_0 - 2 * (ielen - i) + 40;\n\n\nloop invariant i186: bufsize_0 - leader_len <= bufsize_0;\nloop invariant i187: bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant i188: bufsize_0 >= leader_len + 2*ielen;\nloop invariant i189: bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant i190: bufsize_0 >= leader_len + 2*i;\nloop invariant i191: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i192: ielen <= bufsize_0 - leader_len / 2;\n\n\nloop invariant i195: p >= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/69.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= y <= n;\nloop invariant (x >= 1) && (x <= n+1);\nloop invariant (y >= 1) && (y <= n);\nloop invariant (y == n - x);\nloop invariant (x == n+1);\nloop invariant (x > n);\nloop invariant (y == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant y >= n - n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y = n - x;\nloop invariant x - 1 <= y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\n*/\n```",
                "```\n/*@\nloop invariant ( x > 0 );\nloop invariant ( y >= 0 );\nloop invariant ( y <= n );\nloop invariant ( x <= n );\nloop invariant ( y = n - x );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant n <= 100000;\nloop invariant x <= (n + 1);\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x + y <= n;\nloop invariant x + y >= 1;\nloop invariant y >= n - x;\nloop invariant x >= 1;\nloop invariant (n > 0) ==> (y >= 0);\nloop invariant (x >= 1) ==> (y >= 0);\nloop invariant (x <= n) ==> (y >= 0);\nloop invariant (x <= n) ==> (y >= 0);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant x + y <= n;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y = n;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant x >= 1;\nloop invariant x <= n + 1;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y == n - (x - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant x <= n + 1 ==> y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 1;\nloop invariant x == n;\nloop invariant y == 0;\nloop invariant n <= x <= n;\nloop invariant x <= y <= n;\nloop invariant (n == 0 ==> y == n);\nloop invariant (n > 0 ==> y >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n+1;\nloop invariant n >= 0;\nloop invariant 0 <= y <= n+1;\nloop invariant n - x == y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= y <= n;\nloop invariant (x >= 1) && (x <= n+1);\nloop invariant (y >= 1) && (y <= n);\nloop invariant (y == n - x);\nloop invariant (x == n+1);\nloop invariant (x > n);\nloop invariant (y == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= y <= n is preserved but not established.\nloop invariant (x >= 1) && (x <= n+1) is partially proven to be inductive.\nloop invariant (y >= 1) && (y <= n) is partially proven to be inductive.\nloop invariant (y == n - x) is preserved but not established.\nloop invariant (x == n+1) is preserved but not established.\nloop invariant (x > n) is partially proven to be inductive.\nloop invariant (y == 0) is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y >= 0;\nloop invariant y <= n - x;\nloop invariant y >= n - n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= n - x is neither established nor preserved.\nloop invariant y >= n - n is partially proven to be inductive.\nloop invariant y <= n is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y = n - x;\nloop invariant x - 1 <= y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n + 1 is preserved but not established.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant ( x > 0 );\nloop invariant ( y >= 0 );\nloop invariant ( y <= n );\nloop invariant ( x <= n );\nloop invariant ( y = n - x );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: ( x > 0 );\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant n <= 100000;\nloop invariant x <= (n + 1);\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x + y <= n;\nloop invariant x + y >= 1;\nloop invariant y >= n - x;\nloop invariant x >= 1;\nloop invariant (n > 0) ==> (y >= 0);\nloop invariant (x >= 1) ==> (y >= 0);\nloop invariant (x <= n) ==> (y >= 0);\nloop invariant (x <= n) ==> (y >= 0);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\nloop invariant (x <= n) ==> (y <= 100000);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant n <= 100000 is preserved but not established.\nloop invariant x <= (n + 1) is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= 100000 is preserved but not established.\nloop invariant x + y <= n is neither established nor preserved.\nloop invariant x + y >= 1 is partially proven to be inductive.\nloop invariant y >= n - x is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant (n > 0) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (x >= 1) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (x <= n) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (x <= n) ==> (y <= 100000) is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n\n\nloop invariant i10: x >= 1;\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant x + y <= n;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant x + y <= n is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y = n;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n\n\n\nloop invariant i7: x >= 0;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant x >= 1;\nloop invariant x <= n + 1;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant y == n - (x - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n + 1 is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= n + 1 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= n is preserved but not established.\nloop invariant y == n - (x - 1) is preserved but not established.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\nloop invariant i2: x >= 1;\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant x <= n + 1 ==> y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 1 <= x <= n + 1 is partially proven to be inductive.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant x <= n + 1 ==> y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\nloop invariant x + y = n ==> x <= n;\nloop invariant x + y = n ==> y <= n - x;\nloop invariant x + y = n ==> y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y == n - x;\nloop invariant x + y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n is preserved but not established.\nloop invariant y == n - x is neither established nor preserved.\nloop invariant x + y <= n is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant y <= n is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 1;\nloop invariant x == n;\nloop invariant y == 0;\nloop invariant n <= x <= n;\nloop invariant x <= y <= n;\nloop invariant (n == 0 ==> y == n);\nloop invariant (n > 0 ==> y >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 1 is preserved but not established.\nloop invariant x == n is preserved but not established.\nloop invariant y == 0 is preserved but not established.\nloop invariant n <= x <= n is partially proven to be inductive.\nloop invariant x <= y <= n is preserved but not established.\nloop invariant (n == 0 ==> y == n) is partially proven to be inductive.\nloop invariant (n > 0 ==> y >= 0) is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n+1;\nloop invariant n >= 0;\nloop invariant 0 <= y <= n+1;\nloop invariant n - x == y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n+1 is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant 0 <= y <= n+1 is preserved but not established.\nloop invariant n - x == y is neither established nor preserved.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y = n - x;\nloop invariant x + y = n;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\nloop invariant i8: x >= 1;\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= y <= n;\nloop invariant i2: (x >= 1) && (x <= n+1);\nloop invariant i3: (y >= 1) && (y <= n);\nloop invariant i4: (y == n - x);\nloop invariant i5: (x == n+1);\nloop invariant i6: (x > n);\nloop invariant i7: (y == 0);\nloop invariant i8: 0 <= x <= n;\nloop invariant i9: y >= 0;\nloop invariant i10: y <= n - x;\nloop invariant i11: y >= n - n;\nloop invariant i12: y <= n;\nloop invariant i13: y = n - x;\nloop invariant i14: x - 1 <= y <= n;\nloop invariant i15: 0 <= x <= n + 1;\nloop invariant i16: 0 <= y <= n - x;\nloop invariant i17: ( x > 0 );\nloop invariant i18: ( y >= 0 );\nloop invariant i19: ( y <= n );\nloop invariant i20: ( x <= n );\nloop invariant i21: ( y = n - x );\nloop invariant i22: x >= 0;\nloop invariant i23: n <= 100000;\nloop invariant i24: x <= (n + 1);\nloop invariant i25: y <= 100000;\nloop invariant i26: x + y <= n;\nloop invariant i27: x + y >= 1;\nloop invariant i28: y >= n - x;\nloop invariant i29: x >= 1;\nloop invariant i30: (n > 0) ==> (y >= 0);\nloop invariant i31: (x >= 1) ==> (y >= 0);\nloop invariant i32: (x <= n) ==> (y >= 0);\nloop invariant i33: (x <= n) ==> (y <= 100000);\nloop invariant i34: x + y = n;\nloop invariant i35: x <= n;\nloop invariant i36: 1 <= x <= n + 1;\nloop invariant i37: x <= n + 1;\nloop invariant i38: y == n - (x - 1);\nloop invariant i39: 0 <= n;\nloop invariant i40: x <= n + 1 ==> y >= 0;\nloop invariant i41: x + y = n ==> y >= 0;\nloop invariant i42: x + y = n ==> x <= n;\nloop invariant i43: x + y = n ==> y <= n - x;\nloop invariant i44: 0 <= y <= n;\nloop invariant i45: y == n - x;\nloop invariant i46: 0 <= n <= 1;\nloop invariant i47: x == n;\nloop invariant i48: y == 0;\nloop invariant i49: n <= x <= n;\nloop invariant i50: x <= y <= n;\nloop invariant i51: (n == 0 ==> y == n);\nloop invariant i52: (n > 0 ==> y >= 0);\nloop invariant i53: 0 <= x <= n+1;\nloop invariant i54: n >= 0;\nloop invariant i55: 0 <= y <= n+1;\nloop invariant i56: n - x == y;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
            "combined_annotation_num_solver_calls": 20,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: ( x > 0 );\n\n\n\n\nloop invariant i22: x >= 0;\n\n\n\n\n\n\nloop invariant i29: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  while(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x && x <= (y + z);\nloop invariant 0 <= y && y <= (x + z);\nloop invariant 0 <= z && z <= (x + y);\nloop invariant (k%3 == 0) ==> x == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> x == (x + y + z + 1) / 3;\nloop invariant (k%3 == 0) ==> y == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> y == (x + y + z + 1) / 3;\nloop invariant (k%3 == 0) ==> z == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> z == (x + y + z + 1) / 3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k;\nloop invariant k <= x + y + z;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= unknown1(); loop invariant x <= y; loop invariant y <= z; loop invariant x <= z; loop invariant y <= unknown1(); loop invariant z <= unknown1(); loop invariant x + y + z == k; loop invariant x + y + z == unknown1(); loop invariant unknown1() ==> (x <= y); loop invariant unknown1() ==> (y <= z); loop invariant unknown1() ==> (x <= z); loop invariant unknown1() ==> (y <= unknown1()); loop invariant unknown1() ==> (z <= unknown1()); loop invariant unknown1() ==> (x + y + z == k); loop invariant unknown1() ==> (x + y + z == unknown1());\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant k == x + y + z;\nloop invariant k % 3 == 0 ==> x == 0;\nloop invariant k % 3 == 1 ==> x == 1;\nloop invariant k % 3 == 2 ==> x == 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y && y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z >= (1 + (y - 1) * y / 2);\nloop invariant k >= (1 + (y - 1) * y / 2);\nloop invariant x <= z && y <= z && k <= z;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= k <= 300000;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 0 ==> x == 0;\nloop invariant 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\nloop invariant k == x + y + z;\nloop invariant 0 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 0;\nloop invariant 1 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 1;\nloop invariant 2 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 1;\nloop invariant 3 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 2;\nloop invariant 4 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 3;\nloop invariant 5 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 4;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant x+y+z = k;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= 3*z;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant x == y ==> (x == z);\nloop invariant (x != y) ==> (x != z);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant k == x + y + z;\nloop invariant (k%3 == 0 ==> x == k/3);\nloop invariant (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1);\nloop invariant (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2);\nloop invariant y >= x;\nloop invariant z >= x;\nloop invariant y >= z;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant k >= x;\nloop invariant k >= y;\nloop invariant k >= z;\nloop invariant k <= x + y + z;\nloop invariant k <= 3 * x;\nloop invariant k <= 3 * y;\nloop invariant k <= 3 * z;\nloop invariant x == y ==> z == x;\nloop invariant x == z ==> y == x;\nloop invariant y == z ==> x == y;\nloop invariant x <= y ==> x == z;\nloop invariant y <= x ==> y == z;\nloop invariant z <= x ==> z == y;\nloop invariant z <= y ==> z == x;\nloop invariant y <= x ==> y == z;\nloop invariant z <= y ==> z == x;\nloop invariant x <= y ==> x == z;\nloop invariant x <= z ==> x == y;\nloop invariant y <= z ==> y == x;\nloop invariant z <= x ==> z == y;\nloop invariant x <= y ==> x == z;\nloop invariant x <= z ==> x == y;\nloop invariant y <= x ==> y == z;\nloop invariant y <= z ==> y == x;\nloop invariant z <= x ==> z == y;\nloop invariant z <= y ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= 3*y;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant x+y+z == k;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= unknown1();\nloop invariant y >= x;\nloop invariant z >= y;\nloop invariant 0 <= k <= 3 * (x + y + z);\nloop invariant k == x + y + z ==> unknown1() ==> x >= y && y >= z;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= z;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= k <= 2*(x+y+z);\nloop invariant x <= y <= z;\nloop invariant y <= z;\nloop invariant x <= k <= 2*(x+y+z);\nloop invariant y <= k <= 2*(x+y+z);\nloop invariant z <= k <= 2*(x+y+z);\nloop invariant k <= 2*(x+y+z);\nloop invariant k >= 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x && x <= (y + z);\nloop invariant 0 <= y && y <= (x + z);\nloop invariant 0 <= z && z <= (x + y);\nloop invariant (k%3 == 0) ==> x == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> x == (x + y + z + 1) / 3;\nloop invariant (k%3 == 0) ==> y == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> y == (x + y + z + 1) / 3;\nloop invariant (k%3 == 0) ==> z == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> z == (x + y + z + 1) / 3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x && x <= (y + z) is partially proven to be inductive.\nloop invariant 0 <= y && y <= (x + z) is partially proven to be inductive.\nloop invariant 0 <= z && z <= (x + y) is partially proven to be inductive.\nloop invariant (k%3 == 0) ==> x == (x + y + z) / 3 is partially proven to be inductive.\nloop invariant (k%3 != 0) ==> x == (x + y + z + 1) / 3 is established but not preserved.\nloop invariant (k%3 == 0) ==> y == (x + y + z) / 3 is partially proven to be inductive.\nloop invariant (k%3 != 0) ==> y == (x + y + z + 1) / 3 is partially proven to be inductive.\nloop invariant (k%3 == 0) ==> z == (x + y + z) / 3 is partially proven to be inductive.\nloop invariant (k%3 != 0) ==> z == (x + y + z + 1) / 3 is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x && x <= (y + z);\nloop invariant i2: 0 <= y && y <= (x + z);\nloop invariant i3: 0 <= z && z <= (x + y);\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant k <= x + y + z;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= k is inductive.\nloop invariant k <= x + y + z is inductive.\nloop invariant x <= y is inductive.\nloop invariant y <= z is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant z >= 0 is inductive.\nloop invariant k >= 0 is inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k;\nloop invariant i2: k <= x + y + z;\nloop invariant i3: x <= y;\nloop invariant i4: y <= z;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: z >= 0;\nloop invariant i8: k >= 0;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown1(); loop invariant x <= y; loop invariant y <= z; loop invariant x <= z; loop invariant y <= unknown1(); loop invariant z <= unknown1(); loop invariant x + y + z == k; loop invariant x + y + z == unknown1(); loop invariant unknown1() ==> (x <= y); loop invariant unknown1() ==> (y <= z); loop invariant unknown1() ==> (x <= z); loop invariant unknown1() ==> (y <= unknown1()); loop invariant unknown1() ==> (z <= unknown1()); loop invariant unknown1() ==> (x + y + z == k); loop invariant unknown1() ==> (x + y + z == unknown1());\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant k == x + y + z;\nloop invariant k % 3 == 0 ==> x == 0;\nloop invariant k % 3 == 1 ==> x == 1;\nloop invariant k % 3 == 2 ==> x == 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= k is partially proven to be inductive.\nloop invariant 0 <= y <= k is partially proven to be inductive.\nloop invariant 0 <= z <= k is partially proven to be inductive.\nloop invariant k == x + y + z is partially proven to be inductive.\nloop invariant k % 3 == 0 ==> x == 0 is established but not preserved.\nloop invariant k % 3 == 1 ==> x == 1 is established but not preserved.\nloop invariant k % 3 == 2 ==> x == 2 is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= k;\nloop invariant i2: 0 <= y <= k;\nloop invariant i3: 0 <= z <= k;\nloop invariant i4: k == x + y + z;\n\n\nloop invariant i7: k % 3 == 2 ==> x == 2;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y && y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z >= (1 + (y - 1) * y / 2);\nloop invariant k >= (1 + (y - 1) * y / 2);\nloop invariant x <= z && y <= z && k <= z;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y && y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant z >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant k >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x <= z && y <= z && k <= z is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= k <= 300000;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is established but not preserved.\nloop invariant 0 <= z <= 100000 is established but not preserved.\nloop invariant 0 <= k <= 300000 is partially proven to be inductive.\nloop invariant x == y && y == z ==> x == y is partially proven to be inductive.\nloop invariant x == y && y == z ==> y == z is partially proven to be inductive.\nloop invariant x == y && y == z ==> z == x is partially proven to be inductive.\nloop invariant x == y && y == z ==> x == z is partially proven to be inductive.\nloop invariant x == y && y == z ==> y == x is partially proven to be inductive.\nloop invariant x == y && y == z ==> z == y is partially proven to be inductive.\nloop invariant x == y && y == z ==> x <= y is partially proven to be inductive.\nloop invariant x == y && y == z ==> y <= x is partially proven to be inductive.\nloop invariant x == y && y == z ==> x >= y is partially proven to be inductive.\nloop invariant x == y && y == z ==> y >= x is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: x == y && y == z ==> x == y;\nloop invariant i6: x == y && y == z ==> y == z;\nloop invariant i7: x == y && y == z ==> z == x;\nloop invariant i8: x == y && y == z ==> x == z;\nloop invariant i9: x == y && y == z ==> y == x;\nloop invariant i10: x == y && y == z ==> z == y;\nloop invariant i11: x == y && y == z ==> x <= y;\nloop invariant i12: x == y && y == z ==> y <= x;\nloop invariant i13: x == y && y == z ==> x >= y;\nloop invariant i14: x == y && y == z ==> y >= x;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 0 ==> x == 0;\nloop invariant 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\nloop invariant k == x + y + z;\nloop invariant 0 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 0;\nloop invariant 1 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 1;\nloop invariant 2 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 1;\nloop invariant 3 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 2;\nloop invariant 4 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 3;\nloop invariant 5 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 4;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant 0 <= x <= 1 ==> x == 0 || x == 1 is partially proven to be inductive.\nloop invariant 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2 is partially proven to be inductive.\nloop invariant 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3 is partially proven to be inductive.\nloop invariant 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 is partially proven to be inductive.\nloop invariant 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 is partially proven to be inductive.\nloop invariant 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 is partially proven to be inductive.\nloop invariant 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 is partially proven to be inductive.\nloop invariant 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 is partially proven to be inductive.\nloop invariant 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 is partially proven to be inductive.\nloop invariant 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10 is partially proven to be inductive.\nloop invariant 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30 is partially proven to be inductive.\nloop invariant k == x + y + z is partially proven to be inductive.\nloop invariant 0 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 0 is established but not preserved.\nloop invariant 1 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 1 is partially proven to be inductive.\nloop invariant 2 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 1 is partially proven to be inductive.\nloop invariant 3 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 2 is partially proven to be inductive.\nloop invariant 4 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 3 is partially proven to be inductive.\nloop invariant 5 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 4 is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 0 ==> x == 0;\nloop invariant i2: 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant i3: 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant i4: 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant i5: 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i6: 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant i7: 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant i8: 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant i9: 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant i10: 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant i11: 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant i12: 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant i13: 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant i14: 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\nloop invariant i15: k == x + y + z;\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant x+y+z = k;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y <= z;\n\nloop invariant i3: y >= 0;\nloop invariant i4: z >= 0;\nloop invariant i5: x >= 0;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= 3*z;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant x == y ==> (x == z);\nloop invariant (x != y) ==> (x != z);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= k <= 3*z is established but not preserved.\nloop invariant 0 <= z <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is established but not preserved.\nloop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant x == y ==> (x == z) is established but not preserved.\nloop invariant (x != y) ==> (x != z) is established but not preserved.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant k == x + y + z;\nloop invariant (k%3 == 0 ==> x == k/3);\nloop invariant (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1);\nloop invariant (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2);\nloop invariant y >= x;\nloop invariant z >= x;\nloop invariant y >= z;\n*/\n```",
                    "checker_output_for_annotations": true,
                    "checker_message_for_annotations": "loop invariant 0 <= k is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant 0 <= z is inductive.\nloop invariant k == x + y + z is inductive.\nloop invariant (k%3 == 0 ==> x == k/3) is inductive.\nloop invariant (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1) is inductive.\nloop invariant (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2) is inductive.\nloop invariant y >= x is inductive.\nloop invariant z >= x is inductive.\nloop invariant y >= z is inductive.\nAssertion x == y == z: Valid"
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant k >= x;\nloop invariant k >= y;\nloop invariant k >= z;\nloop invariant k <= x + y + z;\nloop invariant k <= 3 * x;\nloop invariant k <= 3 * y;\nloop invariant k <= 3 * z;\nloop invariant x == y ==> z == x;\nloop invariant x == z ==> y == x;\nloop invariant y == z ==> x == y;\nloop invariant x <= y ==> x == z;\nloop invariant y <= x ==> y == z;\nloop invariant z <= x ==> z == y;\nloop invariant z <= y ==> z == x;\nloop invariant y <= x ==> y == z;\nloop invariant z <= y ==> z == x;\nloop invariant x <= y ==> x == z;\nloop invariant x <= z ==> x == y;\nloop invariant y <= z ==> y == x;\nloop invariant z <= x ==> z == y;\nloop invariant x <= y ==> x == z;\nloop invariant x <= z ==> x == y;\nloop invariant y <= x ==> y == z;\nloop invariant y <= z ==> y == x;\nloop invariant z <= x ==> z == y;\nloop invariant z <= y ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant 0 <= k is partially proven to be inductive.\nloop invariant k >= x is partially proven to be inductive.\nloop invariant k >= y is partially proven to be inductive.\nloop invariant k >= z is partially proven to be inductive.\nloop invariant k <= x + y + z is partially proven to be inductive.\nloop invariant k <= 3 * x is established but not preserved.\nloop invariant k <= 3 * y is partially proven to be inductive.\nloop invariant k <= 3 * z is partially proven to be inductive.\nloop invariant x == y ==> z == x is partially proven to be inductive.\nloop invariant x == z ==> y == x is partially proven to be inductive.\nloop invariant y == z ==> x == y is partially proven to be inductive.\nloop invariant x <= y ==> x == z is partially proven to be inductive.\nloop invariant y <= x ==> y == z is partially proven to be inductive.\nloop invariant z <= x ==> z == y is partially proven to be inductive.\nloop invariant z <= y ==> z == x is partially proven to be inductive.\nloop invariant x <= z ==> x == y is partially proven to be inductive.\nloop invariant y <= z ==> y == x is partially proven to be inductive.\nloop invariant k == x + y + z ==> x == y is partially proven to be inductive.\nloop invariant k == x + y + z ==> y == z is partially proven to be inductive.\nloop invariant k == x + y + z ==> z == x is partially proven to be inductive.\nloop invariant k == x + y + z ==> x == z is partially proven to be inductive.\nloop invariant k == x + y + z ==> y == x is partially proven to be inductive.\nloop invariant k == x + y + z ==> z == y is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= k;\nloop invariant i5: k >= x;\nloop invariant i6: k >= y;\nloop invariant i7: k >= z;\nloop invariant i8: k <= x + y + z;\n\n\n\nloop invariant i12: x == y ==> z == x;\nloop invariant i13: x == z ==> y == x;\n\n\nloop invariant i16: y <= x ==> y == z;\nloop invariant i17: z <= x ==> z == y;\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= 3*y;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant x+y+z == k;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= k <= 3*y is inductive.\nloop invariant x <= k is inductive.\nloop invariant y <= k is inductive.\nloop invariant z <= k is inductive.\nloop invariant x+y+z == k is inductive.\nloop invariant x <= y is inductive.\nloop invariant x <= z is inductive.\nloop invariant y <= z is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant z >= 0 is inductive.\nloop invariant k >= 0 is inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 3*y;\nloop invariant i2: x <= k;\nloop invariant i3: y <= k;\nloop invariant i4: z <= k;\nloop invariant i5: x+y+z == k;\nloop invariant i6: x <= y;\nloop invariant i7: x <= z;\nloop invariant i8: y <= z;\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 0;\nloop invariant i11: z >= 0;\nloop invariant i12: k >= 0;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= unknown1();\nloop invariant y >= x;\nloop invariant z >= y;\nloop invariant 0 <= k <= 3 * (x + y + z);\nloop invariant k == x + y + z ==> unknown1() ==> x >= y && y >= z;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\nloop invariant i2: y >= x;\nloop invariant i3: z >= y;\nloop invariant i4: 0 <= k <= 3 * (x + y + z);\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= z;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= k <= 2*(x+y+z);\nloop invariant x <= y <= z;\nloop invariant y <= z;\nloop invariant x <= k <= 2*(x+y+z);\nloop invariant y <= k <= 2*(x+y+z);\nloop invariant z <= k <= 2*(x+y+z);\nloop invariant k <= 2*(x+y+z);\nloop invariant k >= 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= z is partially proven to be inductive.\nloop invariant 0 <= y <= z is partially proven to be inductive.\nloop invariant 0 <= k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant x <= y <= z is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant x <= k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant y <= k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant z <= k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant k >= 2*(x+y+z) is established but not preserved.\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z) is partially proven to be inductive.\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z) is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= z;\nloop invariant i2: 0 <= y <= z;\nloop invariant i3: 0 <= k <= 2*(x+y+z);\nloop invariant i4: x <= y <= z;\nloop invariant i5: y <= z;\nloop invariant i6: x <= k <= 2*(x+y+z);\nloop invariant i7: y <= k <= 2*(x+y+z);\nloop invariant i8: z <= k <= 2*(x+y+z);\nloop invariant i9: k <= 2*(x+y+z);\n\n\nloop invariant i12: k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 34: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x && x <= (y + z);\nloop invariant i2: 0 <= y && y <= (x + z);\nloop invariant i3: 0 <= z && z <= (x + y);\nloop invariant i4: (k%3 == 0) ==> x == (x + y + z) / 3;\nloop invariant i5: (k%3 != 0) ==> x == (x + y + z + 1) / 3;\nloop invariant i6: (k%3 == 0) ==> y == (x + y + z) / 3;\nloop invariant i7: (k%3 != 0) ==> y == (x + y + z + 1) / 3;\nloop invariant i8: (k%3 == 0) ==> z == (x + y + z) / 3;\nloop invariant i9: (k%3 != 0) ==> z == (x + y + z + 1) / 3;\nloop invariant i10: 0 <= k;\nloop invariant i11: k <= x + y + z;\nloop invariant i12: x <= y;\nloop invariant i13: y <= z;\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\nloop invariant i16: z >= 0;\nloop invariant i17: k >= 0;\nloop invariant i18: 0 <= k <= unknown1(); loop invariant x <= y; loop invariant y <= z; loop invariant x <= z; loop invariant y <= unknown1(); loop invariant z <= unknown1(); loop invariant x + y + z == k; loop invariant x + y + z == unknown1(); loop invariant unknown1() ==> (x <= y); loop invariant unknown1() ==> (y <= z); loop invariant unknown1() ==> (x <= z); loop invariant unknown1() ==> (y <= unknown1()); loop invariant unknown1() ==> (z <= unknown1()); loop invariant unknown1() ==> (x + y + z == k); loop invariant unknown1() ==> (x + y + z == unknown1());\nloop invariant i19: 0 <= x <= k;\nloop invariant i20: 0 <= y <= k;\nloop invariant i21: 0 <= z <= k;\nloop invariant i22: k == x + y + z;\nloop invariant i23: k % 3 == 0 ==> x == 0;\nloop invariant i24: k % 3 == 1 ==> x == 1;\nloop invariant i25: k % 3 == 2 ==> x == 2;\nloop invariant i26: 0 <= y && y <= 100000;\nloop invariant i27: x >= (1 + (y - 1) * y / 2);\nloop invariant i28: z >= (1 + (y - 1) * y / 2);\nloop invariant i29: k >= (1 + (y - 1) * y / 2);\nloop invariant i30: x <= z && y <= z && k <= z;\nloop invariant i31: 0 <= x <= 100000;\nloop invariant i32: 0 <= y <= 100000;\nloop invariant i33: 0 <= z <= 100000;\nloop invariant i34: 0 <= k <= 300000;\nloop invariant i35: x == y && y == z ==> x == y;\nloop invariant i36: x == y && y == z ==> y == z;\nloop invariant i37: x == y && y == z ==> z == x;\nloop invariant i38: x == y && y == z ==> x == z;\nloop invariant i39: x == y && y == z ==> y == x;\nloop invariant i40: x == y && y == z ==> z == y;\nloop invariant i41: x == y && y == z ==> x <= y;\nloop invariant i42: x == y && y == z ==> y <= x;\nloop invariant i43: x == y && y == z ==> x >= y;\nloop invariant i44: x == y && y == z ==> y >= x;\nloop invariant i45: 0 <= x <= 0 ==> x == 0;\nloop invariant i46: 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant i47: 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant i48: 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant i49: 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i50: 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant i51: 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant i52: 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant i53: 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant i54: 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant i55: 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant i56: 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant i57: 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant i58: 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\nloop invariant i59: 0 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 0;\nloop invariant i60: 1 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 1;\nloop invariant i61: 2 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 1;\nloop invariant i62: 3 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 2;\nloop invariant i63: 4 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 3;\nloop invariant i64: 5 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 4;\nloop invariant i65: 0 <= x <= y <= z;\nloop invariant i66: x+y+z = k;\nloop invariant i67: 0 <= k <= 3*z;\nloop invariant i68: x == y ==> (x == z);\nloop invariant i69: (x != y) ==> (x != z);\nloop invariant i70: 0 <= x;\nloop invariant i71: 0 <= y;\nloop invariant i72: 0 <= z;\nloop invariant i73: (k%3 == 0 ==> x == k/3);\nloop invariant i74: (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1);\nloop invariant i75: (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2);\nloop invariant i76: y >= x;\nloop invariant i77: z >= x;\nloop invariant i78: y >= z;\nloop invariant i79: k >= x;\nloop invariant i80: k >= y;\nloop invariant i81: k >= z;\nloop invariant i82: k <= 3 * x;\nloop invariant i83: k <= 3 * y;\nloop invariant i84: k <= 3 * z;\nloop invariant i85: x == y ==> z == x;\nloop invariant i86: x == z ==> y == x;\nloop invariant i87: y == z ==> x == y;\nloop invariant i88: x <= y ==> x == z;\nloop invariant i89: y <= x ==> y == z;\nloop invariant i90: z <= x ==> z == y;\nloop invariant i91: z <= y ==> z == x;\nloop invariant i92: x <= z ==> x == y;\nloop invariant i93: y <= z ==> y == x;\nloop invariant i94: k == x + y + z ==> x == y;\nloop invariant i95: k == x + y + z ==> y == z;\nloop invariant i96: k == x + y + z ==> z == x;\nloop invariant i97: k == x + y + z ==> x == z;\nloop invariant i98: k == x + y + z ==> y == x;\nloop invariant i99: k == x + y + z ==> z == y;\nloop invariant i100: i1;\nloop invariant i101: i2;\nloop invariant i102: i3;\nloop invariant i103: i4;\nloop invariant i104: i5;\nloop invariant i105: i6;\nloop invariant i106: i7;\nloop invariant i107: i8;\nloop invariant i108: i9;\nloop invariant i109: i10;\nloop invariant i110: i11;\nloop invariant i111: i12;\nloop invariant i112: i13;\nloop invariant i113: i14;\nloop invariant i114: i15;\nloop invariant i115: i16;\nloop invariant i116: i17;\nloop invariant i117: i18;\nloop invariant i118: i19;\nloop invariant i119: i20;\nloop invariant i120: i21;\nloop invariant i121: i22;\nloop invariant i122: i23;\nloop invariant i123: i24;\nloop invariant i124: i25;\nloop invariant i125: i26;\nloop invariant i126: i27;\nloop invariant i127: i28;\nloop invariant i128: i29;\nloop invariant i129: i30;\nloop invariant i130: i31;\nloop invariant i131: i32;\nloop invariant i132: i33;\nloop invariant i133: i34;\nloop invariant i134: i35;\nloop invariant i135: i36;\nloop invariant i136: i37;\nloop invariant i137: i38;\nloop invariant i138: i39;\nloop invariant i139: i40;\nloop invariant i140: i41;\nloop invariant i141: i42;\nloop invariant i142: i43;\nloop invariant i143: i44;\nloop invariant i144: i45;\nloop invariant i145: i46;\nloop invariant i146: i47;\nloop invariant i147: i48;\nloop invariant i148: i49;\nloop invariant i149: i50;\nloop invariant i150: i51;\nloop invariant i151: i52;\nloop invariant i152: i53;\nloop invariant i153: i54;\nloop invariant i154: i55;\nloop invariant i155: i56;\nloop invariant i156: i57;\nloop invariant i157: i58;\nloop invariant i158: i59;\nloop invariant i159: i60;\nloop invariant i160: i61;\nloop invariant i161: i62;\nloop invariant i162: i63;\nloop invariant i163: i64;\nloop invariant i164: i65;\nloop invariant i165: i66;\nloop invariant i166: i67;\nloop invariant i167: i68;\nloop invariant i168: i69;\nloop invariant i169: i70;\nloop invariant i170: i71;\nloop invariant i171: i72;\nloop invariant i172: i73;\nloop invariant i173: i74;\nloop invariant i174: i75;\nloop invariant i175: i76;\nloop invariant i176: i77;\nloop invariant i177: i78;\nloop invariant i178: i79;\nloop invariant i179: i80;\nloop invariant i180: i81;\nloop invariant i181: i82;\nloop invariant i182: i83;\nloop invariant i183: i84;\nloop invariant i184: i85;\nloop invariant i185: i86;\nloop invariant i186: i87;\nloop invariant i187: i88;\nloop invariant i188: i89;\nloop invariant i189: i90;\nloop invariant i190: i91;\nloop invariant i191: i92;\nloop invariant i192: i93;\nloop invariant i193: i94;\nloop invariant i194: i95;\nloop invariant i195: i96;\nloop invariant i196: i97;\nloop invariant i197: i98;\nloop invariant i198: i99;\nloop invariant i199: i100;\nloop invariant i200: i101;\nloop invariant i201: i102;\nloop invariant i202: i103;\nloop invariant i203: i104;\nloop invariant i204: i105;\nloop invariant i205: i106;\nloop invariant i206: i107;\nloop invariant i207: i108;\nloop invariant i208: i109;\nloop invariant i209: i110;\nloop invariant i210: i111;\nloop invariant i211: i112;\nloop invariant i212: i113;\nloop invariant i213: i114;\nloop invariant i214: i115;\nloop invariant i215: i116;\nloop invariant i216: i117;\nloop invariant i217: i118;\nloop invariant i218: i119;\nloop invariant i219: i120;\nloop invariant i220: i121;\nloop invariant i221: i122;\nloop invariant i222: i123;\nloop invariant i223: i124;\nloop invariant i224: i125;\nloop invariant i225: i126;\nloop invariant i226: i127;\nloop invariant i227: i128;\nloop invariant i228: i129;\nloop invariant i229: i130;\nloop invariant i230: i131;\nloop invariant i231: i132;\nloop invariant i232: i133;\nloop invariant i233: i134;\nloop invariant i234: i135;\nloop invariant i235: i136;\nloop invariant i236: i137;\nloop invariant i237: i138;\nloop invariant i238: i139;\nloop invariant i239: i140;\nloop invariant i240: i141;\nloop invariant i241: i142;\nloop invariant i242: i143;\nloop invariant i243: i144;\nloop invariant i244: i145;\nloop invariant i245: i146;\nloop invariant i246: i147;\nloop invariant i247: i148;\nloop invariant i248: i149;\nloop invariant i249: i150;\nloop invariant i250: i151;\nloop invariant i251: i152;\nloop invariant i252: i153;\nloop invariant i253: i154;\nloop invariant i254: i155;\nloop invariant i255: i156;\nloop invariant i256: i157;\nloop invariant i257: i158;\nloop invariant i258: 0 <= k <= 3*y;\nloop invariant i259: x <= k;\nloop invariant i260: y <= k;\nloop invariant i261: z <= k;\nloop invariant i262: x+y+z == k;\nloop invariant i263: x <= z;\nloop invariant i264: 1 <= x <= unknown1();\nloop invariant i265: z >= y;\nloop invariant i266: 0 <= k <= 3 * (x + y + z);\nloop invariant i267: k == x + y + z ==> unknown1() ==> x >= y && y >= z;\nloop invariant i268: 0 <= x <= z;\nloop invariant i269: 0 <= y <= z;\nloop invariant i270: 0 <= k <= 2*(x+y+z);\nloop invariant i271: x <= y <= z;\nloop invariant i272: x <= k <= 2*(x+y+z);\nloop invariant i273: y <= k <= 2*(x+y+z);\nloop invariant i274: z <= k <= 2*(x+y+z);\nloop invariant i275: k <= 2*(x+y+z);\nloop invariant i276: k >= 2*(x+y+z);\nloop invariant i277: k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant i278: k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
            "combined_annotation_num_solver_calls": 179,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x && x <= (y + z);\nloop invariant i2: 0 <= y && y <= (x + z);\nloop invariant i3: 0 <= z && z <= (x + y);\nloop invariant i4: (k%3 == 0) ==> x == (x + y + z) / 3;\nloop invariant i5: (k%3 != 0) ==> x == (x + y + z + 1) / 3;\nloop invariant i6: (k%3 == 0) ==> y == (x + y + z) / 3;\nloop invariant i7: (k%3 != 0) ==> y == (x + y + z + 1) / 3;\nloop invariant i8: (k%3 == 0) ==> z == (x + y + z) / 3;\nloop invariant i9: (k%3 != 0) ==> z == (x + y + z + 1) / 3;\nloop invariant i10: 0 <= k;\nloop invariant i11: k <= x + y + z;\nloop invariant i12: x <= y;\nloop invariant i13: y <= z;\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\nloop invariant i16: z >= 0;\nloop invariant i17: k >= 0;\n\nloop invariant i19: 0 <= x <= k;\nloop invariant i20: 0 <= y <= k;\nloop invariant i21: 0 <= z <= k;\nloop invariant i22: k == x + y + z;\n\nloop invariant i24: k % 3 == 1 ==> x == 1;\nloop invariant i25: k % 3 == 2 ==> x == 2;\n\n\n\n\n\n\n\n\n\nloop invariant i35: x == y && y == z ==> x == y;\nloop invariant i36: x == y && y == z ==> y == z;\nloop invariant i37: x == y && y == z ==> z == x;\nloop invariant i38: x == y && y == z ==> x == z;\nloop invariant i39: x == y && y == z ==> y == x;\nloop invariant i40: x == y && y == z ==> z == y;\nloop invariant i41: x == y && y == z ==> x <= y;\nloop invariant i42: x == y && y == z ==> y <= x;\nloop invariant i43: x == y && y == z ==> x >= y;\nloop invariant i44: x == y && y == z ==> y >= x;\nloop invariant i45: 0 <= x <= 0 ==> x == 0;\nloop invariant i46: 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant i47: 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant i48: 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant i49: 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i50: 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant i51: 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant i52: 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant i53: 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant i54: 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant i55: 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant i56: 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant i57: 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant i58: 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\n\n\n\n\n\n\nloop invariant i65: 0 <= x <= y <= z;\n\nloop invariant i67: 0 <= k <= 3*z;\nloop invariant i68: x == y ==> (x == z);\nloop invariant i69: (x != y) ==> (x != z);\nloop invariant i70: 0 <= x;\nloop invariant i71: 0 <= y;\nloop invariant i72: 0 <= z;\nloop invariant i73: (k%3 == 0 ==> x == k/3);\nloop invariant i74: (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1);\nloop invariant i75: (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2);\nloop invariant i76: y >= x;\nloop invariant i77: z >= x;\nloop invariant i78: y >= z;\nloop invariant i79: k >= x;\nloop invariant i80: k >= y;\nloop invariant i81: k >= z;\nloop invariant i82: k <= 3 * x;\nloop invariant i83: k <= 3 * y;\nloop invariant i84: k <= 3 * z;\nloop invariant i85: x == y ==> z == x;\nloop invariant i86: x == z ==> y == x;\nloop invariant i87: y == z ==> x == y;\nloop invariant i88: x <= y ==> x == z;\nloop invariant i89: y <= x ==> y == z;\nloop invariant i90: z <= x ==> z == y;\nloop invariant i91: z <= y ==> z == x;\nloop invariant i92: x <= z ==> x == y;\nloop invariant i93: y <= z ==> y == x;\nloop invariant i94: k == x + y + z ==> x == y;\nloop invariant i95: k == x + y + z ==> y == z;\nloop invariant i96: k == x + y + z ==> z == x;\nloop invariant i97: k == x + y + z ==> x == z;\nloop invariant i98: k == x + y + z ==> y == x;\nloop invariant i99: k == x + y + z ==> z == y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i258: 0 <= k <= 3*y;\nloop invariant i259: x <= k;\nloop invariant i260: y <= k;\nloop invariant i261: z <= k;\nloop invariant i262: x+y+z == k;\nloop invariant i263: x <= z;\n\nloop invariant i265: z >= y;\nloop invariant i266: 0 <= k <= 3 * (x + y + z);\n\nloop invariant i268: 0 <= x <= z;\nloop invariant i269: 0 <= y <= z;\nloop invariant i270: 0 <= k <= 2*(x+y+z);\nloop invariant i271: x <= y <= z;\nloop invariant i272: x <= k <= 2*(x+y+z);\nloop invariant i273: y <= k <= 2*(x+y+z);\nloop invariant i274: z <= k <= 2*(x+y+z);\nloop invariant i275: k <= 2*(x+y+z);\n\n\nloop invariant i278: k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\n*/\n```",
                "```\n/*@\nloop invariant i == i;\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n < k;\n*/\n```",
                "```\n/*@\nloop invariant k < 0 ==> n == k;\nloop invariant k < 0 ==> k <= i <= 2*k;\nloop invariant k < 0 ==> n == (i/2);\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> n == k;\nloop invariant k >= 0 ==> k <= i <= 2*k;\nloop invariant k >= 0 ==> n == (i/2);\nloop invariant k >= 0 ==> i % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2 * k;\nloop invariant n == i / 2;\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant i < 2*k;\nloop invariant n >= 0;\nloop invariant n == (k + 1) / 2;\nloop invariant n == (k + 2) / 2;\nloop invariant n == (k + 3) / 2;\nloop invariant n == (k + 4) / 2;\nloop invariant n == (k + 5) / 2;\nloop invariant n == (k + 6) / 2;\nloop invariant n == (k + 7) / 2;\nloop invariant n == (k + 8) / 2;\nloop invariant n == (k + 9) / 2;\nloop invariant n == (k + 10) / 2;\nloop invariant n == (k + 11) / 2;\nloop invariant n == (k + 12) / 2;\nloop invariant n == (k + 13) / 2;\nloop invariant n == (k + 14) / 2;\nloop invariant n == (k + 15) / 2;\nloop invariant n == (k + 16) / 2;\nloop invariant n == (k + 17) / 2;\nloop invariant n == (k + 18) / 2;\nloop invariant n == (k + 19) / 2;\nloop invariant n == (k + 20) / 2;\nloop invariant n == (k + 21) / 2;\nloop invariant n == (k + 22) / 2;\nloop invariant n == (k + 23) / 2;\nloop invariant n == (k + 24) / 2;\nloop invariant n == (k + 25) / 2;\nloop invariant n == (k + 26) / 2;\nloop invariant n == (k + 27) / 2;\nloop invariant n == (k + 28) / 2;\nloop invariant n == (k + 29) / 2;\nloop invariant n == (k + 30) / 2;\nloop invariant n == (k + 31) / 2;\nloop invariant n == (k + 32) / 2;\nloop invariant n == (k + 33) / 2;\nloop invariant n == (k + 34) / 2;\nloop invariant n == (k + 35) / 2;\nloop invariant n == (k + 36) / 2;\nloop invariant n == (k + 37) / 2;\nloop invariant n == (k + 38) / 2;\nloop invariant n == (k + 39) / 2;\nloop invariant n == (k + 40) / 2;\nloop invariant n == (k + 41) / 2;\nloop invariant n == (k + 42) / 2;\nloop invariant n == (k + 43) / 2;\nloop invariant n == (k + 44) / 2;\nloop invariant n == (k + 45) / 2;\nloop invariant n == (k + 46) / 2;\nloop invariant n == (k + 47) / 2;\nloop invariant n == (k + 48) / 2;\nloop invariant n == (k + 49) / 2;\nloop invariant n == (k + 50) / 2;\nloop invariant n == (k + 51) / 2;\nloop invariant n == (k + 52) / 2;\nloop invariant n == (k + 53) / 2;\nloop invariant n == (k + 54) / 2;\nloop invariant n == (k + 55) / 2;\nloop invariant n == (k + 56) / 2;\nloop invariant n == (k + 57) / 2;\nloop invariant n == (k + 58) / 2;\nloop invariant n == (k + 59) / 2;\nloop invariant n == (k + 60) / 2;\nloop invariant n == (k + 61) / 2;\nloop invariant n == (k + 62) / 2;\nloop invariant n == (k + 63) / 2;\nloop invariant n == (k + 64) / 2;\nloop invariant n == (k + 65) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2*k;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 == 1;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant if (k >= 0) then n == k else n == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k; loop invariant n >= 0; loop invariant n >= i/2; loop invariant n <= i; loop invariant n >= i - 2; loop invariant n <= i - 1; loop invariant n >= i - 2*k; loop invariant n <= i - k; loop invariant n >= i - 2*k + 1; loop invariant n <= i - k + 1; loop invariant n >= i - 2*k + 2; loop invariant n <= i - k + 2; loop invariant n >= i - 2*k + 3; loop invariant n <= i - k + 3; loop invariant n >= i - 2*k + 4; loop invariant n <= i - k + 4; loop invariant n >= i - 2*k + 5; loop invariant n <= i - k + 5; loop invariant n >= i - 2*k + 6; loop invariant n <= i - k + 6; loop invariant n >= i - 2*k + 7; loop invariant n <= i - k + 7; loop invariant n >= i - 2*k + 8; loop invariant n <= i - k + 8; loop invariant n >= i - 2*k + 9; loop invariant n <= i - k + 9; loop invariant n >= i - 2*k + 10; loop invariant n <= i - k + 10; loop invariant n >= i - 2*k + 11; loop invariant n <= i - k + 11; loop invariant n >= i - 2*k + 12; loop invariant n <= i - k + 12; loop invariant n >= i - 2*k + 13; loop invariant n <= i - k + 13; loop invariant n >= i - 2*k + 14; loop invariant n <= i - k + 14; loop invariant n >= i - 2*k + 15; loop invariant n <= i - k + 15; loop invariant n >= i - 2*k + 16; loop invariant n <= i - k + 16; loop invariant n >= i - 2*k + 17; loop invariant n <= i - k + 17; loop invariant n >= i - 2*k + 18; loop invariant n <= i - k + 18; loop invariant n >= i - 2*k + 19; loop invariant n <= i - k + 19; loop invariant n >= i - 2*k + 20; loop invariant n <= i - k + 20; loop invariant n >= i - 2*k + 21; loop invariant n <= i - k + 21; loop invariant n >= i - 2*k + 22; loop invariant n <= i - k + 22; loop invariant n >= i - 2*k + 23; loop invariant n <= i - k + 23; loop invariant n >= i - 2*k + 24; loop invariant n <= i - k + 24; loop invariant n >= i - 2*k + 25; loop invariant n <= i - k + 25; loop invariant n >= i - 2*k + 26; loop invariant n <= i - k + 26; loop invariant n >= i - 2*k + 27; loop invariant n <= i - k + 27; loop invariant n >= i - 2*k + 28; loop invariant n <= i - k + 28; loop invariant n >= i - 2*k + 29; loop invariant n <= i - k + 29; loop invariant n >= i - 2*k + 30; loop invariant n <= i - k + 30; loop invariant n >= i - 2*k + 31; loop invariant n <= i - k + 31; loop invariant n >= i - 2*k + 32; loop invariant n <= i - k + 32; loop invariant n >= i - 2*k + 33; loop invariant n <= i - k + 33; loop invariant n >= i - 2*k + 34; loop invariant n <= i - k + 34; loop invariant n >= i - 2*k + 35; loop invariant n <= i - k + 35; loop invariant n >= i - 2*k + 36; loop invariant n <= i - k + 36; loop invariant n >= i - 2*k + 37;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k - i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i / 2;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant k < 0 || n <= k;\nloop invariant n >= 0;\nloop invariant n <= i;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2 * k);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2);\nloop invariant 0 <= i <= 2 * k;\nloop invariant k < 0 || n <= k;\nloop invariant n >= 0;\nloop invariant n <= i;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2 * k);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k;\nloop invariant i % 2 == 0 ==> i <= 2*k;\nloop invariant i % 2 != 0 ==> i <= 2*k;\nloop invariant i % 2 == 0 ==> i >= 0;\nloop invariant i % 2 != 0 ==> i >= 0;\nloop invariant n == k ==> i == 2*k;\nloop invariant n == k ==> i == 2*k;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 0 ==> n == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant n == k - (i - k) / 2;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == i/2;\nloop invariant i % 2 != 0 ==> n == (i-1)/2;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i == i;\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n < k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i == i is partially proven to be inductive.\nloop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant i % 2 == 0 ==> n == k is neither established nor preserved.\nloop invariant i % 2 != 0 ==> n < k is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i == i;\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant k < 0 ==> n == k;\nloop invariant k < 0 ==> k <= i <= 2*k;\nloop invariant k < 0 ==> n == (i/2);\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> n == k;\nloop invariant k >= 0 ==> k <= i <= 2*k;\nloop invariant k >= 0 ==> n == (i/2);\nloop invariant k >= 0 ==> i % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant k < 0 ==> n == k is preserved but not established.\nloop invariant k < 0 ==> k <= i <= 2*k is partially proven to be inductive.\nloop invariant k < 0 ==> n == (i/2) is partially proven to be inductive.\nloop invariant k < 0 ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant k >= 0 ==> n == k is preserved but not established.\nloop invariant k >= 0 ==> k <= i <= 2*k is partially proven to be inductive.\nloop invariant k >= 0 ==> n == (i/2) is partially proven to be inductive.\nloop invariant k >= 0 ==> i % 2 == 0 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: k < 0 ==> n == (i/2);\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2 * k;\nloop invariant n == i / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 2 * k is preserved but not established.\nloop invariant n == i / 2 is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 19,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i < 2*k;\nloop invariant n >= 0;\nloop invariant n == (k + 1) / 2;\nloop invariant n == (k + 2) / 2;\nloop invariant n == (k + 3) / 2;\nloop invariant n == (k + 4) / 2;\nloop invariant n == (k + 5) / 2;\nloop invariant n == (k + 6) / 2;\nloop invariant n == (k + 7) / 2;\nloop invariant n == (k + 8) / 2;\nloop invariant n == (k + 9) / 2;\nloop invariant n == (k + 10) / 2;\nloop invariant n == (k + 11) / 2;\nloop invariant n == (k + 12) / 2;\nloop invariant n == (k + 13) / 2;\nloop invariant n == (k + 14) / 2;\nloop invariant n == (k + 15) / 2;\nloop invariant n == (k + 16) / 2;\nloop invariant n == (k + 17) / 2;\nloop invariant n == (k + 18) / 2;\nloop invariant n == (k + 19) / 2;\nloop invariant n == (k + 20) / 2;\nloop invariant n == (k + 21) / 2;\nloop invariant n == (k + 22) / 2;\nloop invariant n == (k + 23) / 2;\nloop invariant n == (k + 24) / 2;\nloop invariant n == (k + 25) / 2;\nloop invariant n == (k + 26) / 2;\nloop invariant n == (k + 27) / 2;\nloop invariant n == (k + 28) / 2;\nloop invariant n == (k + 29) / 2;\nloop invariant n == (k + 30) / 2;\nloop invariant n == (k + 31) / 2;\nloop invariant n == (k + 32) / 2;\nloop invariant n == (k + 33) / 2;\nloop invariant n == (k + 34) / 2;\nloop invariant n == (k + 35) / 2;\nloop invariant n == (k + 36) / 2;\nloop invariant n == (k + 37) / 2;\nloop invariant n == (k + 38) / 2;\nloop invariant n == (k + 39) / 2;\nloop invariant n == (k + 40) / 2;\nloop invariant n == (k + 41) / 2;\nloop invariant n == (k + 42) / 2;\nloop invariant n == (k + 43) / 2;\nloop invariant n == (k + 44) / 2;\nloop invariant n == (k + 45) / 2;\nloop invariant n == (k + 46) / 2;\nloop invariant n == (k + 47) / 2;\nloop invariant n == (k + 48) / 2;\nloop invariant n == (k + 49) / 2;\nloop invariant n == (k + 50) / 2;\nloop invariant n == (k + 51) / 2;\nloop invariant n == (k + 52) / 2;\nloop invariant n == (k + 53) / 2;\nloop invariant n == (k + 54) / 2;\nloop invariant n == (k + 55) / 2;\nloop invariant n == (k + 56) / 2;\nloop invariant n == (k + 57) / 2;\nloop invariant n == (k + 58) / 2;\nloop invariant n == (k + 59) / 2;\nloop invariant n == (k + 60) / 2;\nloop invariant n == (k + 61) / 2;\nloop invariant n == (k + 62) / 2;\nloop invariant n == (k + 63) / 2;\nloop invariant n == (k + 64) / 2;\nloop invariant n == (k + 65) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < 2*k is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n == (k + 1) / 2 is preserved but not established.\nloop invariant n == (k + 2) / 2 is partially proven to be inductive.\nloop invariant n == (k + 3) / 2 is partially proven to be inductive.\nloop invariant n == (k + 4) / 2 is partially proven to be inductive.\nloop invariant n == (k + 5) / 2 is partially proven to be inductive.\nloop invariant n == (k + 6) / 2 is partially proven to be inductive.\nloop invariant n == (k + 7) / 2 is partially proven to be inductive.\nloop invariant n == (k + 8) / 2 is partially proven to be inductive.\nloop invariant n == (k + 9) / 2 is partially proven to be inductive.\nloop invariant n == (k + 10) / 2 is partially proven to be inductive.\nloop invariant n == (k + 11) / 2 is partially proven to be inductive.\nloop invariant n == (k + 12) / 2 is partially proven to be inductive.\nloop invariant n == (k + 13) / 2 is partially proven to be inductive.\nloop invariant n == (k + 14) / 2 is partially proven to be inductive.\nloop invariant n == (k + 15) / 2 is partially proven to be inductive.\nloop invariant n == (k + 16) / 2 is partially proven to be inductive.\nloop invariant n == (k + 17) / 2 is partially proven to be inductive.\nloop invariant n == (k + 18) / 2 is partially proven to be inductive.\nloop invariant n == (k + 19) / 2 is partially proven to be inductive.\nloop invariant n == (k + 20) / 2 is partially proven to be inductive.\nloop invariant n == (k + 21) / 2 is partially proven to be inductive.\nloop invariant n == (k + 22) / 2 is partially proven to be inductive.\nloop invariant n == (k + 23) / 2 is partially proven to be inductive.\nloop invariant n == (k + 24) / 2 is partially proven to be inductive.\nloop invariant n == (k + 25) / 2 is partially proven to be inductive.\nloop invariant n == (k + 26) / 2 is partially proven to be inductive.\nloop invariant n == (k + 27) / 2 is partially proven to be inductive.\nloop invariant n == (k + 28) / 2 is partially proven to be inductive.\nloop invariant n == (k + 29) / 2 is partially proven to be inductive.\nloop invariant n == (k + 30) / 2 is partially proven to be inductive.\nloop invariant n == (k + 31) / 2 is partially proven to be inductive.\nloop invariant n == (k + 32) / 2 is partially proven to be inductive.\nloop invariant n == (k + 33) / 2 is partially proven to be inductive.\nloop invariant n == (k + 34) / 2 is partially proven to be inductive.\nloop invariant n == (k + 35) / 2 is partially proven to be inductive.\nloop invariant n == (k + 36) / 2 is partially proven to be inductive.\nloop invariant n == (k + 37) / 2 is partially proven to be inductive.\nloop invariant n == (k + 38) / 2 is partially proven to be inductive.\nloop invariant n == (k + 39) / 2 is partially proven to be inductive.\nloop invariant n == (k + 40) / 2 is partially proven to be inductive.\nloop invariant n == (k + 41) / 2 is partially proven to be inductive.\nloop invariant n == (k + 42) / 2 is partially proven to be inductive.\nloop invariant n == (k + 43) / 2 is partially proven to be inductive.\nloop invariant n == (k + 44) / 2 is partially proven to be inductive.\nloop invariant n == (k + 45) / 2 is partially proven to be inductive.\nloop invariant n == (k + 46) / 2 is partially proven to be inductive.\nloop invariant n == (k + 47) / 2 is partially proven to be inductive.\nloop invariant n == (k + 48) / 2 is partially proven to be inductive.\nloop invariant n == (k + 49) / 2 is partially proven to be inductive.\nloop invariant n == (k + 50) / 2 is partially proven to be inductive.\nloop invariant n == (k + 51) / 2 is partially proven to be inductive.\nloop invariant n == (k + 52) / 2 is partially proven to be inductive.\nloop invariant n == (k + 53) / 2 is partially proven to be inductive.\nloop invariant n == (k + 54) / 2 is partially proven to be inductive.\nloop invariant n == (k + 55) / 2 is partially proven to be inductive.\nloop invariant n == (k + 56) / 2 is partially proven to be inductive.\nloop invariant n == (k + 57) / 2 is partially proven to be inductive.\nloop invariant n == (k + 58) / 2 is partially proven to be inductive.\nloop invariant n == (k + 59) / 2 is partially proven to be inductive.\nloop invariant n == (k + 60) / 2 is partially proven to be inductive.\nloop invariant n == (k + 61) / 2 is partially proven to be inductive.\nloop invariant n == (k + 62) / 2 is partially proven to be inductive.\nloop invariant n == (k + 63) / 2 is partially proven to be inductive.\nloop invariant n == (k + 64) / 2 is partially proven to be inductive.\nloop invariant n == (k + 65) / 2 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2*k;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nloop invariant k >= 0 ==> n == 2*k is preserved but not established.\nloop invariant k < 0 ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant k >= 0 ==> i % 2 == 1 is preserved but not established.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant if (k >= 0) then n == k else n == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k; loop invariant n >= 0; loop invariant n >= i/2; loop invariant n <= i; loop invariant n >= i - 2; loop invariant n <= i - 1; loop invariant n >= i - 2*k; loop invariant n <= i - k; loop invariant n >= i - 2*k + 1; loop invariant n <= i - k + 1; loop invariant n >= i - 2*k + 2; loop invariant n <= i - k + 2; loop invariant n >= i - 2*k + 3; loop invariant n <= i - k + 3; loop invariant n >= i - 2*k + 4; loop invariant n <= i - k + 4; loop invariant n >= i - 2*k + 5; loop invariant n <= i - k + 5; loop invariant n >= i - 2*k + 6; loop invariant n <= i - k + 6; loop invariant n >= i - 2*k + 7; loop invariant n <= i - k + 7; loop invariant n >= i - 2*k + 8; loop invariant n <= i - k + 8; loop invariant n >= i - 2*k + 9; loop invariant n <= i - k + 9; loop invariant n >= i - 2*k + 10; loop invariant n <= i - k + 10; loop invariant n >= i - 2*k + 11; loop invariant n <= i - k + 11; loop invariant n >= i - 2*k + 12; loop invariant n <= i - k + 12; loop invariant n >= i - 2*k + 13; loop invariant n <= i - k + 13; loop invariant n >= i - 2*k + 14; loop invariant n <= i - k + 14; loop invariant n >= i - 2*k + 15; loop invariant n <= i - k + 15; loop invariant n >= i - 2*k + 16; loop invariant n <= i - k + 16; loop invariant n >= i - 2*k + 17; loop invariant n <= i - k + 17; loop invariant n >= i - 2*k + 18; loop invariant n <= i - k + 18; loop invariant n >= i - 2*k + 19; loop invariant n <= i - k + 19; loop invariant n >= i - 2*k + 20; loop invariant n <= i - k + 20; loop invariant n >= i - 2*k + 21; loop invariant n <= i - k + 21; loop invariant n >= i - 2*k + 22; loop invariant n <= i - k + 22; loop invariant n >= i - 2*k + 23; loop invariant n <= i - k + 23; loop invariant n >= i - 2*k + 24; loop invariant n <= i - k + 24; loop invariant n >= i - 2*k + 25; loop invariant n <= i - k + 25; loop invariant n >= i - 2*k + 26; loop invariant n <= i - k + 26; loop invariant n >= i - 2*k + 27; loop invariant n <= i - k + 27; loop invariant n >= i - 2*k + 28; loop invariant n <= i - k + 28; loop invariant n >= i - 2*k + 29; loop invariant n <= i - k + 29; loop invariant n >= i - 2*k + 30; loop invariant n <= i - k + 30; loop invariant n >= i - 2*k + 31; loop invariant n <= i - k + 31; loop invariant n >= i - 2*k + 32; loop invariant n <= i - k + 32; loop invariant n >= i - 2*k + 33; loop invariant n <= i - k + 33; loop invariant n >= i - 2*k + 34; loop invariant n <= i - k + 34; loop invariant n >= i - 2*k + 35; loop invariant n <= i - k + 35; loop invariant n >= i - 2*k + 36; loop invariant n <= i - k + 36; loop invariant n >= i - 2*k + 37;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k; loop invariant n >= 0; loop invariant n >= i/2; loop invariant n <= i; loop invariant n >= i - 2; loop invariant n <= i - 1; loop invariant n >= i - 2*k; loop invariant n <= i - k; loop invariant n >= i - 2*k + 1; loop invariant n <= i - k + 1; loop invariant n >= i - 2*k + 2; loop invariant n <= i - k + 2; loop invariant n >= i - 2*k + 3; loop invariant n <= i - k + 3; loop invariant n >= i - 2*k + 4; loop invariant n <= i - k + 4; loop invariant n >= i - 2*k + 5; loop invariant n <= i - k + 5; loop invariant n >= i - 2*k + 6; loop invariant n <= i - k + 6; loop invariant n >= i - 2*k + 7; loop invariant n <= i - k + 7; loop invariant n >= i - 2*k + 8; loop invariant n <= i - k + 8; loop invariant n >= i - 2*k + 9; loop invariant n <= i - k + 9; loop invariant n >= i - 2*k + 10; loop invariant n <= i - k + 10; loop invariant n >= i - 2*k + 11; loop invariant n <= i - k + 11; loop invariant n >= i - 2*k + 12; loop invariant n <= i - k + 12; loop invariant n >= i - 2*k + 13; loop invariant n <= i - k + 13; loop invariant n >= i - 2*k + 14; loop invariant n <= i - k + 14; loop invariant n >= i - 2*k + 15; loop invariant n <= i - k + 15; loop invariant n >= i - 2*k + 16; loop invariant n <= i - k + 16; loop invariant n >= i - 2*k + 17; loop invariant n <= i - k + 17; loop invariant n >= i - 2*k + 18; loop invariant n <= i - k + 18; loop invariant n >= i - 2*k + 19; loop invariant n <= i - k + 19; loop invariant n >= i - 2*k + 20; loop invariant n <= i - k + 20; loop invariant n >= i - 2*k + 21; loop invariant n <= i - k + 21; loop invariant n >= i - 2*k + 22; loop invariant n <= i - k + 22; loop invariant n >= i - 2*k + 23; loop invariant n <= i - k + 23; loop invariant n >= i - 2*k + 24; loop invariant n <= i - k + 24; loop invariant n >= i - 2*k + 25; loop invariant n <= i - k + 25; loop invariant n >= i - 2*k + 26; loop invariant n <= i - k + 26; loop invariant n >= i - 2*k + 27; loop invariant n <= i - k + 27; loop invariant n >= i - 2*k + 28; loop invariant n <= i - k + 28; loop invariant n >= i - 2*k + 29; loop invariant n <= i - k + 29; loop invariant n >= i - 2*k + 30; loop invariant n <= i - k + 30; loop invariant n >= i - 2*k + 31; loop invariant n <= i - k + 31; loop invariant n >= i - 2*k + 32; loop invariant n <= i - k + 32; loop invariant n >= i - 2*k + 33; loop invariant n <= i - k + 33; loop invariant n >= i - 2*k + 34; loop invariant n <= i - k + 34; loop invariant n >= i - 2*k + 35; loop invariant n <= i - k + 35; loop invariant n >= i - 2*k + 36; loop invariant n <= i - k + 36; loop invariant n >= i - 2*k + 37 is preserved but not established.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k - i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= 2*k - i is established but not preserved.\nAssertion k < 0 || n == k: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i / 2;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant n == i / 2 is partially proven to be inductive.\nloop invariant k >= 0 ==> n == k is preserved but not established.\nloop invariant k < 0 ==> n == 0 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant k < 0 || n <= k;\nloop invariant n >= 0;\nloop invariant n <= i;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2 * k);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2);\nloop invariant 0 <= i <= 2 * k;\nloop invariant k < 0 || n <= k;\nloop invariant n >= 0;\nloop invariant n <= i;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2 * k);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * k is preserved but not established.\nloop invariant k < 0 || n <= k is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n <= i is partially proven to be inductive.\nloop invariant (k < 0 ==> n == k) is partially proven to be inductive.\nloop invariant (k >= 0 ==> n == 2 * k) is preserved but not established.\nloop invariant (i % 2 == 0 ==> n == i / 2) is partially proven to be inductive.\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2) is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: n >= 0;\nloop invariant i4: n <= i;\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k;\nloop invariant i % 2 == 0 ==> i <= 2*k;\nloop invariant i % 2 != 0 ==> i <= 2*k;\nloop invariant i % 2 == 0 ==> i >= 0;\nloop invariant i % 2 != 0 ==> i >= 0;\nloop invariant n == k ==> i == 2*k;\nloop invariant n == k ==> i == 2*k;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 0 ==> n == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> n == k is preserved but not established.\nloop invariant i % 2 != 0 ==> n == k is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i <= 2*k is partially proven to be inductive.\nloop invariant i % 2 != 0 ==> i <= 2*k is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i >= 0 is partially proven to be inductive.\nloop invariant i % 2 != 0 ==> i >= 0 is partially proven to be inductive.\nloop invariant n == k ==> i == 2*k is partially proven to be inductive.\nloop invariant i == 2*k ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant i == 2*k ==> n == k is partially proven to be inductive.\nloop invariant i == 0 ==> n == 0 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\nloop invariant i6: i % 2 != 0 ==> i <= 2*k;\nloop invariant i7: i % 2 == 0 ==> i >= 0;\nloop invariant i8: i % 2 != 0 ==> i >= 0;\n\nloop invariant i10: i == 2*k ==> i % 2 == 0;\n\nloop invariant i12: i == 0 ==> n == 0;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant n == k - (i - k) / 2;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * k is preserved but not established.\nloop invariant n == k - (i - k) / 2 is neither established nor preserved.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nloop invariant k >= 0 ==> n == k is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == i/2;\nloop invariant i % 2 != 0 ==> n == (i-1)/2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant i % 2 == 0 ==> n == i/2 is established but not preserved.\nloop invariant i % 2 != 0 ==> n == (i-1)/2 is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 105: unexpected token '('",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: i3;\nloop invariant i4: i == i;\nloop invariant i5: 0 <= i <= 2*k;\nloop invariant i6: i % 2 == 0 ==> n == k;\nloop invariant i7: i % 2 != 0 ==> n < k;\nloop invariant i8: k < 0 ==> n == k;\nloop invariant i9: k < 0 ==> k <= i <= 2*k;\nloop invariant i10: k < 0 ==> n == (i/2);\nloop invariant i11: k < 0 ==> i % 2 == 0;\nloop invariant i12: k >= 0 ==> n == k;\nloop invariant i13: k >= 0 ==> k <= i <= 2*k;\nloop invariant i14: k >= 0 ==> n == (i/2);\nloop invariant i15: k >= 0 ==> i % 2 == 0;\nloop invariant i16: i >= 0;\nloop invariant i17: i <= 2 * k;\nloop invariant i18: n == i / 2;\nloop invariant i19: i < 2*k;\nloop invariant i20: n >= 0;\nloop invariant i21: n == (k + 1) / 2;\nloop invariant i22: n == (k + 2) / 2;\nloop invariant i23: n == (k + 3) / 2;\nloop invariant i24: n == (k + 4) / 2;\nloop invariant i25: n == (k + 5) / 2;\nloop invariant i26: n == (k + 6) / 2;\nloop invariant i27: n == (k + 7) / 2;\nloop invariant i28: n == (k + 8) / 2;\nloop invariant i29: n == (k + 9) / 2;\nloop invariant i30: n == (k + 10) / 2;\nloop invariant i31: n == (k + 11) / 2;\nloop invariant i32: n == (k + 12) / 2;\nloop invariant i33: n == (k + 13) / 2;\nloop invariant i34: n == (k + 14) / 2;\nloop invariant i35: n == (k + 15) / 2;\nloop invariant i36: n == (k + 16) / 2;\nloop invariant i37: n == (k + 17) / 2;\nloop invariant i38: n == (k + 18) / 2;\nloop invariant i39: n == (k + 19) / 2;\nloop invariant i40: n == (k + 20) / 2;\nloop invariant i41: n == (k + 21) / 2;\nloop invariant i42: n == (k + 22) / 2;\nloop invariant i43: n == (k + 23) / 2;\nloop invariant i44: n == (k + 24) / 2;\nloop invariant i45: n == (k + 25) / 2;\nloop invariant i46: n == (k + 26) / 2;\nloop invariant i47: n == (k + 27) / 2;\nloop invariant i48: n == (k + 28) / 2;\nloop invariant i49: n == (k + 29) / 2;\nloop invariant i50: n == (k + 30) / 2;\nloop invariant i51: n == (k + 31) / 2;\nloop invariant i52: n == (k + 32) / 2;\nloop invariant i53: n == (k + 33) / 2;\nloop invariant i54: n == (k + 34) / 2;\nloop invariant i55: n == (k + 35) / 2;\nloop invariant i56: n == (k + 36) / 2;\nloop invariant i57: n == (k + 37) / 2;\nloop invariant i58: n == (k + 38) / 2;\nloop invariant i59: n == (k + 39) / 2;\nloop invariant i60: n == (k + 40) / 2;\nloop invariant i61: n == (k + 41) / 2;\nloop invariant i62: n == (k + 42) / 2;\nloop invariant i63: n == (k + 43) / 2;\nloop invariant i64: n == (k + 44) / 2;\nloop invariant i65: n == (k + 45) / 2;\nloop invariant i66: n == (k + 46) / 2;\nloop invariant i67: n == (k + 47) / 2;\nloop invariant i68: n == (k + 48) / 2;\nloop invariant i69: n == (k + 49) / 2;\nloop invariant i70: n == (k + 50) / 2;\nloop invariant i71: n == (k + 51) / 2;\nloop invariant i72: n == (k + 52) / 2;\nloop invariant i73: n == (k + 53) / 2;\nloop invariant i74: n == (k + 54) / 2;\nloop invariant i75: n == (k + 55) / 2;\nloop invariant i76: n == (k + 56) / 2;\nloop invariant i77: n == (k + 57) / 2;\nloop invariant i78: n == (k + 58) / 2;\nloop invariant i79: n == (k + 59) / 2;\nloop invariant i80: n == (k + 60) / 2;\nloop invariant i81: n == (k + 61) / 2;\nloop invariant i82: n == (k + 62) / 2;\nloop invariant i83: n == (k + 63) / 2;\nloop invariant i84: n == (k + 64) / 2;\nloop invariant i85: n == (k + 65) / 2;\nloop invariant i86: 0 <= n <= k;\nloop invariant i87: k >= 0 ==> n == 2*k;\nloop invariant i88: k >= 0 ==> i % 2 == 1;\nloop invariant i89: if (k >= 0) then n == k else n == 0;\nloop invariant i90: 0 <= i <= 2*k; loop invariant n >= 0; loop invariant n >= i/2; loop invariant n <= i; loop invariant n >= i - 2; loop invariant n <= i - 1; loop invariant n >= i - 2*k; loop invariant n <= i - k; loop invariant n >= i - 2*k + 1; loop invariant n <= i - k + 1; loop invariant n >= i - 2*k + 2; loop invariant n <= i - k + 2; loop invariant n >= i - 2*k + 3; loop invariant n <= i - k + 3; loop invariant n >= i - 2*k + 4; loop invariant n <= i - k + 4; loop invariant n >= i - 2*k + 5; loop invariant n <= i - k + 5; loop invariant n >= i - 2*k + 6; loop invariant n <= i - k + 6; loop invariant n >= i - 2*k + 7; loop invariant n <= i - k + 7; loop invariant n >= i - 2*k + 8; loop invariant n <= i - k + 8; loop invariant n >= i - 2*k + 9; loop invariant n <= i - k + 9; loop invariant n >= i - 2*k + 10; loop invariant n <= i - k + 10; loop invariant n >= i - 2*k + 11; loop invariant n <= i - k + 11; loop invariant n >= i - 2*k + 12; loop invariant n <= i - k + 12; loop invariant n >= i - 2*k + 13; loop invariant n <= i - k + 13; loop invariant n >= i - 2*k + 14; loop invariant n <= i - k + 14; loop invariant n >= i - 2*k + 15; loop invariant n <= i - k + 15; loop invariant n >= i - 2*k + 16; loop invariant n <= i - k + 16; loop invariant n >= i - 2*k + 17; loop invariant n <= i - k + 17; loop invariant n >= i - 2*k + 18; loop invariant n <= i - k + 18; loop invariant n >= i - 2*k + 19; loop invariant n <= i - k + 19; loop invariant n >= i - 2*k + 20; loop invariant n <= i - k + 20; loop invariant n >= i - 2*k + 21; loop invariant n <= i - k + 21; loop invariant n >= i - 2*k + 22; loop invariant n <= i - k + 22; loop invariant n >= i - 2*k + 23; loop invariant n <= i - k + 23; loop invariant n >= i - 2*k + 24; loop invariant n <= i - k + 24; loop invariant n >= i - 2*k + 25; loop invariant n <= i - k + 25; loop invariant n >= i - 2*k + 26; loop invariant n <= i - k + 26; loop invariant n >= i - 2*k + 27; loop invariant n <= i - k + 27; loop invariant n >= i - 2*k + 28; loop invariant n <= i - k + 28; loop invariant n >= i - 2*k + 29; loop invariant n <= i - k + 29; loop invariant n >= i - 2*k + 30; loop invariant n <= i - k + 30; loop invariant n >= i - 2*k + 31; loop invariant n <= i - k + 31; loop invariant n >= i - 2*k + 32; loop invariant n <= i - k + 32; loop invariant n >= i - 2*k + 33; loop invariant n <= i - k + 33; loop invariant n >= i - 2*k + 34; loop invariant n <= i - k + 34; loop invariant n >= i - 2*k + 35; loop invariant n <= i - k + 35; loop invariant n >= i - 2*k + 36; loop invariant n <= i - k + 36; loop invariant n >= i - 2*k + 37;\nloop invariant i91: 0 <= n <= 2*k - i;\nloop invariant i92: k < 0 ==> n == 0;\nloop invariant i93: 0 <= i <= 2 * k;\nloop invariant i94: k < 0 || n <= k;\nloop invariant i95: n <= i;\nloop invariant i96: (k < 0 ==> n == k);\nloop invariant i97: (k >= 0 ==> n == 2 * k);\nloop invariant i98: (i % 2 == 0 ==> n == i / 2);\nloop invariant i99: (i % 2 != 0 ==> n == (i - 1) / 2);\nloop invariant i100: i % 2 != 0 ==> n == k;\nloop invariant i101: i % 2 == 0 ==> i <= 2*k;\nloop invariant i102: i % 2 != 0 ==> i <= 2*k;\nloop invariant i103: i % 2 == 0 ==> i >= 0;\nloop invariant i104: i % 2 != 0 ==> i >= 0;\nloop invariant i105: n == k ==> i == 2*k;\nloop invariant i106: i == 2*k ==> i % 2 == 0;\nloop invariant i107: i == 2*k ==> n == k;\nloop invariant i108: i == 0 ==> n == 0;\nloop invariant i109: n == k - (i - k) / 2;\nloop invariant i110: i % 2 == 0 ==> n == i/2;\nloop invariant i111: i % 2 != 0 ==> n == (i-1)/2;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 36,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\nloop invariant i4: i == i;\n\n\n\n\n\nloop invariant i10: k < 0 ==> n == (i/2);\nloop invariant i11: k < 0 ==> i % 2 == 0;\n\n\n\n\nloop invariant i16: i >= 0;\n\n\n\nloop invariant i20: n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i92: k < 0 ==> n == 0;\n\n\nloop invariant i95: n <= i;\n\n\n\n\n\n\nloop invariant i102: i % 2 != 0 ==> i <= 2*k;\nloop invariant i103: i % 2 == 0 ==> i >= 0;\nloop invariant i104: i % 2 != 0 ==> i >= 0;\n\nloop invariant i106: i == 2*k ==> i % 2 == 0;\n\nloop invariant i108: i == 0 ==> n == 0;\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i - 1) * a;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant i > 0 && i <= SIZE;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant sn + a <= SIZE * a;\nloop invariant sn + a > i * a;\nloop invariant `v1 == unknown_int(); v2 == unknown_int(); v3 == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= SIZE;\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 0;\nloop invariant SIZE >= i;\nloop invariant SIZE >= sn;\nloop invariant SIZE >= a;\nloop invariant SIZE >= 0;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= v1;\nloop invariant SIZE >= v2;\nloop invariant SIZE >= v3;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant -SIZE * a <= sn <= SIZE * a;\nloop invariant -SIZE * a <= v1 <= SIZE * a;\nloop invariant -SIZE * a <= v2 <= SIZE * a;\nloop invariant -SIZE * a <= v3 <= SIZE * a;\nloop invariant sn == SIZE * a + (SIZE - i) * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * i;\nloop invariant v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant v3 <= 2147483647 && v3 >= -2147483648;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= SIZE*a || sn == 0;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= -1 || v1 >= 1;\nloop invariant v2 <= -1 || v2 >= 1;\nloop invariant v3 <= -1 || v3 >= 1;\nloop invariant v1 == v2 || v2 == v3 || v1 == v3;\nloop invariant v1 == v2 == v3 || v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 || v1 == v2 == v3 == 9;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i*a;\nloop invariant v1, v2, v3 are non-deterministic;\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant SIZE is non-deterministic;\nloop invariant SIZE <= unknown_int();\nloop invariant a == 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (SIZE*(SIZE+1))/2 if a == 1;\nloop invariant sn == (SIZE*(SIZE+1))/2;\nloop invariant sn == 0 if SIZE == 0;\nloop invariant sn == 0 if SIZE == 1;\nloop invariant sn == a if i == 1;\nloop invariant sn == i*a if i > 1;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == a * i - a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant v1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant SIZE >= 1;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= 1;\nloop invariant SIZE <= 2147483647;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= SIZE <= (2147483647 / a);\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant a == 1;\nloop invariant sn == i * a;\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant i == SIZE + 1 || sn == SIZE * a || sn == 0;\nloop invariant (i == SIZE + 1 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a);\nloop invariant (i > SIZE ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE; loop invariant sn == ((a * i) + ((1 - a) * i * (i - 1) / 2)); loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= i * a;\nloop invariant v1 = \\at(v1, Pre);\nloop invariant v2 = \\at(v2, Pre);\nloop invariant v3 = \\at(v3, Pre);\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 != SIZE;\nloop invariant v2 != SIZE;\nloop invariant v3 != SIZE;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i * a);\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i - 1) * a;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == (i - 1) * a;\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant i > 0 && i <= SIZE;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant sn + a <= SIZE * a;\nloop invariant sn + a > i * a;\nloop invariant `v1 == unknown_int(); v2 == unknown_int(); v3 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE;\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 0;\nloop invariant SIZE >= i;\nloop invariant SIZE >= sn;\nloop invariant SIZE >= a;\nloop invariant SIZE >= 0;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= v1;\nloop invariant SIZE >= v2;\nloop invariant SIZE >= v3;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= SIZE is neither established nor preserved.\nloop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= v1 <= 1 is neither established nor preserved.\nloop invariant 0 <= v2 <= 1 is neither established nor preserved.\nloop invariant 0 <= v3 <= 1 is neither established nor preserved.\nloop invariant SIZE >= 1 is partially proven to be inductive.\nloop invariant SIZE >= 0 is partially proven to be inductive.\nloop invariant SIZE >= i is partially proven to be inductive.\nloop invariant SIZE >= sn is partially proven to be inductive.\nloop invariant SIZE >= a is partially proven to be inductive.\nloop invariant SIZE >= v1 is partially proven to be inductive.\nloop invariant SIZE >= v2 is partially proven to be inductive.\nloop invariant SIZE >= v3 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant -SIZE * a <= sn <= SIZE * a;\nloop invariant -SIZE * a <= v1 <= SIZE * a;\nloop invariant -SIZE * a <= v2 <= SIZE * a;\nloop invariant -SIZE * a <= v3 <= SIZE * a;\nloop invariant sn == SIZE * a + (SIZE - i) * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is preserved but not established.\nloop invariant -SIZE * a <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant -SIZE * a <= v1 <= SIZE * a is preserved but not established.\nloop invariant -SIZE * a <= v2 <= SIZE * a is preserved but not established.\nloop invariant -SIZE * a <= v3 <= SIZE * a is preserved but not established.\nloop invariant sn == SIZE * a + (SIZE - i) * a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * i;\nloop invariant v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant v3 <= 2147483647 && v3 >= -2147483648;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == a * i is preserved but not established.\nloop invariant v1 <= 2147483647 && v1 >= -2147483648 is partially proven to be inductive.\nloop invariant v2 <= 2147483647 && v2 >= -2147483648 is partially proven to be inductive.\nloop invariant v3 <= 2147483647 && v3 >= -2147483648 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant i4: v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant i5: v3 <= 2147483647 && v3 >= -2147483648;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE*a || sn == 0;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= -1 || v1 >= 1;\nloop invariant v2 <= -1 || v2 >= 1;\nloop invariant v3 <= -1 || v3 >= 1;\nloop invariant v1 == v2 || v2 == v3 || v1 == v3;\nloop invariant v1 == v2 == v3 || v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 || v1 == v2 == v3 == 9;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= SIZE*a || sn == 0 is established but not preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= SIZE is neither established nor preserved.\nloop invariant v1 >= 0 is neither established nor preserved.\nloop invariant v2 >= 0 is neither established nor preserved.\nloop invariant v3 >= 0 is neither established nor preserved.\nloop invariant v1 <= -1 || v1 >= 1 is neither established nor preserved.\nloop invariant v2 <= -1 || v2 >= 1 is neither established nor preserved.\nloop invariant v3 <= -1 || v3 >= 1 is neither established nor preserved.\nloop invariant v1 == v2 || v2 == v3 || v1 == v3 is neither established nor preserved.\nloop invariant v1 == v2 == v3 || v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 is neither established nor preserved.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 is neither established nor preserved.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 || v1 == v2 == v3 == 9 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 19,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i*a;\nloop invariant v1, v2, v3 are non-deterministic;\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant SIZE is non-deterministic;\nloop invariant SIZE <= unknown_int();\nloop invariant a == 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (SIZE*(SIZE+1))/2 if a == 1;\nloop invariant sn == (SIZE*(SIZE+1))/2;\nloop invariant sn == 0 if SIZE == 0;\nloop invariant sn == 0 if SIZE == 1;\nloop invariant sn == a if i == 1;\nloop invariant sn == i*a if i > 1;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unexpected token ','",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: a == 1;\nloop invariant i10: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == a * i - a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant v1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant SIZE >= 1;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= 1;\nloop invariant SIZE <= 2147483647;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is neither established nor preserved.\nloop invariant sn == a * i - a is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is partially proven to be inductive.\nloop invariant v1 <= 2147483647 is partially proven to be inductive.\nloop invariant v1 >= -2147483648 is partially proven to be inductive.\nloop invariant v2 <= 2147483647 is partially proven to be inductive.\nloop invariant v2 >= -2147483648 is partially proven to be inductive.\nloop invariant v3 <= 2147483647 is partially proven to be inductive.\nloop invariant v3 >= -2147483648 is partially proven to be inductive.\nloop invariant SIZE >= 1 is partially proven to be inductive.\nloop invariant SIZE <= 2147483647 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == a * i - a;\nloop invariant i3: sn >= 0;\n\nloop invariant i5: v1 <= 2147483647;\nloop invariant i6: v1 >= -2147483648;\nloop invariant i7: v2 <= 2147483647;\nloop invariant i8: v2 >= -2147483648;\nloop invariant i9: v3 <= 2147483647;\nloop invariant i10: v3 >= -2147483648;\n\nloop invariant i12: SIZE <= 2147483647;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= SIZE <= (2147483647 / a);\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant a == 1;\nloop invariant sn == i * a;\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant i == SIZE + 1 || sn == SIZE * a || sn == 0;\nloop invariant (i == SIZE + 1 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a);\nloop invariant (i > SIZE ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= SIZE <= (2147483647 / a) is preserved but not established.\nloop invariant 0 <= i <= SIZE + 1 is partially proven to be inductive.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant a == 1 is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant sn == SIZE * a || sn == 0 is partially proven to be inductive.\nloop invariant i == SIZE + 1 || sn == SIZE * a || sn == 0 is partially proven to be inductive.\nloop invariant (i == SIZE + 1 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a) is partially proven to be inductive.\nloop invariant (i > SIZE ==> sn == SIZE * a) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\nloop invariant i4: a == 1;\n\n\n\n\n\n\nloop invariant i11: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant i12: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant i13: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i14: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i15: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i16: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant i17: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i18: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i19: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i20: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i21: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE; loop invariant sn == ((a * i) + ((1 - a) * i * (i - 1) / 2)); loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE; loop invariant sn == ((a * i) + ((1 - a) * i * (i - 1) / 2)); loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= i * a;\nloop invariant v1 = \\at(v1, Pre);\nloop invariant v2 = \\at(v2, Pre);\nloop invariant v3 = \\at(v3, Pre);\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 != SIZE;\nloop invariant v2 != SIZE;\nloop invariant v3 != SIZE;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: 0 <= sn <= i * a;\n\n\n\nloop invariant i6: v1 <= 2147483647;\nloop invariant i7: v2 <= 2147483647;\nloop invariant i8: v3 <= 2147483647;\nloop invariant i9: v1 >= -2147483648;\nloop invariant i10: v2 >= -2147483648;\nloop invariant i11: v3 >= -2147483648;\n\n\n\nloop invariant i15: SIZE <= 2147483647;\nloop invariant i16: SIZE >= -2147483648;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant v1 == v1 is partially proven to be inductive.\nloop invariant v2 == v2 is partially proven to be inductive.\nloop invariant v3 == v3 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: v1 == v1;\nloop invariant i5: v2 == v2;\nloop invariant i6: v3 == v3;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i * a);\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == (i * a) is preserved but not established.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: sn == (i - 1) * a;\nloop invariant i3: 0 <= v1 <= unknown_int();\nloop invariant i4: 0 <= v2 <= unknown_int();\nloop invariant i5: 0 <= v3 <= unknown_int();\nloop invariant i6: i > 0 && i <= SIZE;\nloop invariant i7: v1 == unknown_int();\nloop invariant i8: v2 == unknown_int();\nloop invariant i9: v3 == unknown_int();\nloop invariant i10: sn + a <= SIZE * a;\nloop invariant i11: sn + a > i * a;\nloop invariant i12: `v1 == unknown_int(); v2 == unknown_int(); v3 == unknown_int();\nloop invariant i13: i1;\nloop invariant i14: i2;\nloop invariant i15: i3;\nloop invariant i16: i4;\nloop invariant i17: i5;\nloop invariant i18: i6;\nloop invariant i19: i7;\nloop invariant i20: i8;\nloop invariant i21: i9;\nloop invariant i22: i10;\nloop invariant i23: i11;\nloop invariant i24: i12;\nloop invariant i25: i13;\nloop invariant i26: i14;\nloop invariant i27: i15;\nloop invariant i28: i16;\nloop invariant i29: i17;\nloop invariant i30: i18;\nloop invariant i31: i19;\nloop invariant i32: i20;\nloop invariant i33: i21;\nloop invariant i34: i22;\nloop invariant i35: i23;\nloop invariant i36: i24;\nloop invariant i37: i25;\nloop invariant i38: i26;\nloop invariant i39: i27;\nloop invariant i40: i28;\nloop invariant i41: i29;\nloop invariant i42: i30;\nloop invariant i43: i31;\nloop invariant i44: i32;\nloop invariant i45: i33;\nloop invariant i46: i34;\nloop invariant i47: i35;\nloop invariant i48: i36;\nloop invariant i49: i37;\nloop invariant i50: i38;\nloop invariant i51: i39;\nloop invariant i52: i40;\nloop invariant i53: i41;\nloop invariant i54: i42;\nloop invariant i55: i43;\nloop invariant i56: i44;\nloop invariant i57: i45;\nloop invariant i58: i46;\nloop invariant i59: i47;\nloop invariant i60: i48;\nloop invariant i61: i49;\nloop invariant i62: i50;\nloop invariant i63: i51;\nloop invariant i64: i52;\nloop invariant i65: i53;\nloop invariant i66: i54;\nloop invariant i67: i55;\nloop invariant i68: i56;\nloop invariant i69: i57;\nloop invariant i70: i58;\nloop invariant i71: i59;\nloop invariant i72: i60;\nloop invariant i73: i61;\nloop invariant i74: i62;\nloop invariant i75: i63;\nloop invariant i76: i64;\nloop invariant i77: i65;\nloop invariant i78: i66;\nloop invariant i79: i67;\nloop invariant i80: i68;\nloop invariant i81: i69;\nloop invariant i82: i70;\nloop invariant i83: i71;\nloop invariant i84: i72;\nloop invariant i85: i73;\nloop invariant i86: i74;\nloop invariant i87: i75;\nloop invariant i88: i76;\nloop invariant i89: i77;\nloop invariant i90: i78;\nloop invariant i91: i79;\nloop invariant i92: i80;\nloop invariant i93: i81;\nloop invariant i94: i82;\nloop invariant i95: i83;\nloop invariant i96: i84;\nloop invariant i97: i85;\nloop invariant i98: i86;\nloop invariant i99: i87;\nloop invariant i100: i88;\nloop invariant i101: i89;\nloop invariant i102: i90;\nloop invariant i103: i91;\nloop invariant i104: i92;\nloop invariant i105: i93;\nloop invariant i106: i94;\nloop invariant i107: i95;\nloop invariant i108: i96;\nloop invariant i109: i97;\nloop invariant i110: i98;\nloop invariant i111: i99;\nloop invariant i112: i100;\nloop invariant i113: i101;\nloop invariant i114: i102;\nloop invariant i115: i103;\nloop invariant i116: i104;\nloop invariant i117: i105;\nloop invariant i118: i106;\nloop invariant i119: i107;\nloop invariant i120: i108;\nloop invariant i121: i109;\nloop invariant i122: i110;\nloop invariant i123: i111;\nloop invariant i124: i112;\nloop invariant i125: i113;\nloop invariant i126: i114;\nloop invariant i127: i115;\nloop invariant i128: i116;\nloop invariant i129: i117;\nloop invariant i130: i118;\nloop invariant i131: i119;\nloop invariant i132: i120;\nloop invariant i133: i121;\nloop invariant i134: i122;\nloop invariant i135: i123;\nloop invariant i136: i124;\nloop invariant i137: i125;\nloop invariant i138: i126;\nloop invariant i139: i127;\nloop invariant i140: i128;\nloop invariant i141: i129;\nloop invariant i142: i130;\nloop invariant i143: i131;\nloop invariant i144: i132;\nloop invariant i145: i133;\nloop invariant i146: i134;\nloop invariant i147: i135;\nloop invariant i148: i136;\nloop invariant i149: i137;\nloop invariant i150: i138;\nloop invariant i151: i139;\nloop invariant i152: i140;\nloop invariant i153: i141;\nloop invariant i154: i142;\nloop invariant i155: i143;\nloop invariant i156: i144;\nloop invariant i157: i145;\nloop invariant i158: i146;\nloop invariant i159: i147;\nloop invariant i160: i148;\nloop invariant i161: i149;\nloop invariant i162: i150;\nloop invariant i163: i151;\nloop invariant i164: i152;\nloop invariant i165: i153;\nloop invariant i166: i154;\nloop invariant i167: i155;\nloop invariant i168: i156;\nloop invariant i169: i157;\nloop invariant i170: i158;\nloop invariant i171: 0 <= sn <= SIZE;\nloop invariant i172: 0 <= v1 <= 1;\nloop invariant i173: 0 <= v2 <= 1;\nloop invariant i174: 0 <= v3 <= 1;\nloop invariant i175: SIZE >= 1;\nloop invariant i176: SIZE >= 0;\nloop invariant i177: SIZE >= i;\nloop invariant i178: SIZE >= sn;\nloop invariant i179: SIZE >= a;\nloop invariant i180: SIZE >= v1;\nloop invariant i181: SIZE >= v2;\nloop invariant i182: SIZE >= v3;\nloop invariant i183: 1 <= i <= SIZE;\nloop invariant i184: -SIZE * a <= sn <= SIZE * a;\nloop invariant i185: -SIZE * a <= v1 <= SIZE * a;\nloop invariant i186: -SIZE * a <= v2 <= SIZE * a;\nloop invariant i187: -SIZE * a <= v3 <= SIZE * a;\nloop invariant i188: sn == SIZE * a + (SIZE - i) * a;\nloop invariant i189: sn == a * i;\nloop invariant i190: v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant i191: v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant i192: v3 <= 2147483647 && v3 >= -2147483648;\nloop invariant i193: 0 <= sn <= SIZE*a || sn == 0;\nloop invariant i194: i >= 1;\nloop invariant i195: i <= SIZE;\nloop invariant i196: v1 >= 0;\nloop invariant i197: v2 >= 0;\nloop invariant i198: v3 >= 0;\nloop invariant i199: v1 <= -1 || v1 >= 1;\nloop invariant i200: v2 <= -1 || v2 >= 1;\nloop invariant i201: v3 <= -1 || v3 >= 1;\nloop invariant i202: v1 == v2 || v2 == v3 || v1 == v3;\nloop invariant i203: v1 == v2 == v3 || v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1;\nloop invariant i204: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1;\nloop invariant i205: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2;\nloop invariant i206: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3;\nloop invariant i207: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4;\nloop invariant i208: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5;\nloop invariant i209: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6;\nloop invariant i210: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7;\nloop invariant i211: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8;\nloop invariant i212: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 || v1 == v2 == v3 == 9;\nloop invariant i213: sn == i*a;\nloop invariant i214: v1, v2, v3 are non-deterministic;\nloop invariant i215: v1 <= unknown_int();\nloop invariant i216: v2 <= unknown_int();\nloop invariant i217: v3 <= unknown_int();\nloop invariant i218: SIZE is non-deterministic;\nloop invariant i219: SIZE <= unknown_int();\nloop invariant i220: a == 1;\nloop invariant i221: sn >= 0;\nloop invariant i222: sn <= SIZE*a;\nloop invariant i223: sn == (SIZE*(SIZE+1))/2 if a == 1;\nloop invariant i224: sn == (SIZE*(SIZE+1))/2;\nloop invariant i225: sn == 0 if SIZE == 0;\nloop invariant i226: sn == 0 if SIZE == 1;\nloop invariant i227: sn == a if i == 1;\nloop invariant i228: sn == i*a if i > 1;\nloop invariant i229: sn == i*a if i <= SIZE;\nloop invariant i230: sn == i*a if i >= 1;\nloop invariant i231: sn == i*a if i > 0;\nloop invariant i232: sn == i*a if i >= 0;\nloop invariant i233: sn == a * i - a;\nloop invariant i234: sn <= SIZE * a;\nloop invariant i235: v1 <= 2147483647;\nloop invariant i236: v1 >= -2147483648;\nloop invariant i237: v2 <= 2147483647;\nloop invariant i238: v2 >= -2147483648;\nloop invariant i239: v3 <= 2147483647;\nloop invariant i240: v3 >= -2147483648;\nloop invariant i241: SIZE <= 2147483647;\nloop invariant i242: 0 <= SIZE <= (2147483647 / a);\nloop invariant i243: 0 <= i <= SIZE + 1;\nloop invariant i244: 0 <= sn <= SIZE * a;\nloop invariant i245: sn == i * a;\nloop invariant i246: sn == SIZE * a || sn == 0;\nloop invariant i247: i == SIZE + 1 || sn == SIZE * a || sn == 0;\nloop invariant i248: (i == SIZE + 1 ==> sn == SIZE * a || sn == 0);\nloop invariant i249: (i <= SIZE ==> sn == i * a);\nloop invariant i250: (i > SIZE ==> sn == SIZE * a);\nloop invariant i251: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant i252: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant i253: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i254: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i255: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i256: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant i257: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i258: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i259: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i260: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i261: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i262: 0 <= i <= SIZE; loop invariant sn == ((a * i) + ((1 - a) * i * (i - 1) / 2)); loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0;\nloop invariant i263: 0 <= sn <= i * a;\nloop invariant i264: v1 = \\at(v1, Pre);\nloop invariant i265: v2 = \\at(v2, Pre);\nloop invariant i266: v3 = \\at(v3, Pre);\nloop invariant i267: v1 != SIZE;\nloop invariant i268: v2 != SIZE;\nloop invariant i269: v3 != SIZE;\nloop invariant i270: SIZE >= -2147483648;\nloop invariant i271: v1 == v1;\nloop invariant i272: v2 == v2;\nloop invariant i273: v3 == v3;\nloop invariant i274: sn == (i * a);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 198,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == (i - 1) * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i190: v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant i191: v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant i192: v3 <= 2147483647 && v3 >= -2147483648;\nloop invariant i193: 0 <= sn <= SIZE*a || sn == 0;\nloop invariant i194: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i220: a == 1;\nloop invariant i221: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i233: sn == a * i - a;\n\nloop invariant i235: v1 <= 2147483647;\nloop invariant i236: v1 >= -2147483648;\nloop invariant i237: v2 <= 2147483647;\nloop invariant i238: v2 >= -2147483648;\nloop invariant i239: v3 <= 2147483647;\nloop invariant i240: v3 >= -2147483648;\nloop invariant i241: SIZE <= 2147483647;\n\n\n\n\n\n\nloop invariant i248: (i == SIZE + 1 ==> sn == SIZE * a || sn == 0);\n\n\nloop invariant i251: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant i252: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant i253: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i254: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i255: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i256: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant i257: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i258: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i259: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i260: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i261: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\n\nloop invariant i263: 0 <= sn <= i * a;\n\n\n\n\n\n\nloop invariant i270: SIZE >= -2147483648;\nloop invariant i271: v1 == v1;\nloop invariant i272: v2 == v2;\nloop invariant i273: v3 == v3;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/code2inv/101.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant x >= n ==> (n < 0);\n*/\n```",
                "```\n/*@\nloop invariant ( ( x <= n ) ==> (x >= 0) );\nloop invariant ( ( x <= n ) ==> (x <= n) );\nloop invariant ( ( x <= n ) ==> (n >= 0) );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant (x >= 0) ==> (x <= n);\nloop invariant (x >= 0) ==> (x < n);\nloop invariant (x < n) ==> (x >= 0);\nloop invariant (x < n) ==> (x <= n);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n);\nloop invariant (x >= 0) ==> (x <= n) ==> (x < n);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> (x >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n - 1;\nloop invariant x < n;\nloop invariant x <= n - 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant y >= -1;\nloop invariant x >= 0 && x <= n;\nloop invariant y >= x;\nloop invariant y >= -1 ==> (n >= 0);\nloop invariant y >= x ==> (n >= 0);\nloop invariant x <= n ==> (n >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant n <= x;\nloop invariant x <= n;\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x == n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x == n ==> n >= 0;\nloop invariant x < n ==> n < 0 ==> n == x - 1 ==> n < 0 ==> n == x - 1 ==> n != x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant x == n ==> n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x + 1) == n ==> n >= 0;\nloop invariant x == n ==> n >= 0;\nloop invariant x == n ==> n < 0 ==> false;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\n\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x < n;\nloop invariant x >= n ==> (n < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < n is neither established nor preserved.\nloop invariant x >= n ==> (n < 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant ( ( x <= n ) ==> (x >= 0) );\nloop invariant ( ( x <= n ) ==> (x <= n) );\nloop invariant ( ( x <= n ) ==> (n >= 0) );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( ( x <= n ) ==> (x >= 0) ) is inductive.\nloop invariant ( ( x <= n ) ==> (x <= n) ) is inductive.\nloop invariant ( ( x <= n ) ==> (n >= 0) ) is inductive.\nAssertion n < 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: ( ( x <= n ) ==> (x >= 0) );\nloop invariant i2: ( ( x <= n ) ==> (x <= n) );\nloop invariant i3: ( ( x <= n ) ==> (n >= 0) );\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant (x >= 0) ==> (x <= n);\nloop invariant (x >= 0) ==> (x < n);\nloop invariant (x < n) ==> (x >= 0);\nloop invariant (x < n) ==> (x <= n);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n);\nloop invariant (x >= 0) ==> (x <= n) ==> (x < n);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x <= n) is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x < n) is neither established nor preserved.\nloop invariant (x < n) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (x < n) ==> (x <= n) is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) is partially proven to be inductive.\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x <= n) ==> (x < n) is partially proven to be inductive.\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) is partially proven to be inductive.\nloop invariant (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0) is partially proven to be inductive.\nloop invariant (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0) is partially proven to be inductive.\nloop invariant (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\nloop invariant i6: (x < n) ==> (x >= 0);\nloop invariant i7: (x < n) ==> (x <= n);\nloop invariant i8: (x >= 0) ==> (x < n) ==> (x <= n);\nloop invariant i9: (x < n) ==> (x >= 0) ==> (x <= n);\n\n\nloop invariant i12: (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant i13: (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant i14: (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> (x >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x < n ==> (x >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x < n ==> (x >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n - 1;\nloop invariant x < n;\nloop invariant x <= n - 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n - 1 is preserved but not established.\nloop invariant x < n is partially proven to be inductive.\nloop invariant x <= n - 2 is neither established nor preserved.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2 is neither established nor preserved.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant y >= -1;\nloop invariant x >= 0 && x <= n;\nloop invariant y >= x;\nloop invariant y >= -1 ==> (n >= 0);\nloop invariant y >= x ==> (n >= 0);\nloop invariant x <= n ==> (n >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x <= n ==> (n >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant n <= x;\nloop invariant x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant n <= x is preserved but not established.\nloop invariant x <= n is preserved but not established.\nloop invariant x == n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant (x == n) ==> (x == n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: (x == n) ==> (x == n);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x == n ==> n >= 0;\nloop invariant x < n ==> n < 0 ==> n == x - 1 ==> n < 0 ==> n == x - 1 ==> n != x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x == n ==> n >= 0 is partially proven to be inductive.\nloop invariant x < n ==> n < 0 ==> n == x - 1 ==> n < 0 ==> n == x - 1 ==> n != x is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: x == n ==> n >= 0;\nloop invariant i5: x < n ==> n < 0 ==> n == x - 1 ==> n < 0 ==> n == x - 1 ==> n != x;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant x == n ==> n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x < n is neither established nor preserved.\nloop invariant x == n ==> n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x + 1) == n ==> n >= 0;\nloop invariant x == n ==> n >= 0;\nloop invariant x == n ==> n < 0 ==> false;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable false. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 39: unbound logic variable y. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x >= 0;\nloop invariant i3: x < n;\nloop invariant i4: x >= n ==> (n < 0);\nloop invariant i5: ( ( x <= n ) ==> (x >= 0) );\nloop invariant i6: ( ( x <= n ) ==> (x <= n) );\nloop invariant i7: ( ( x <= n ) ==> (n >= 0) );\nloop invariant i8: x <= n;\nloop invariant i9: (x >= 0) ==> (x <= n);\nloop invariant i10: (x >= 0) ==> (x < n);\nloop invariant i11: (x < n) ==> (x >= 0);\nloop invariant i12: (x < n) ==> (x <= n);\nloop invariant i13: (x >= 0) ==> (x < n) ==> (x <= n);\nloop invariant i14: (x < n) ==> (x >= 0) ==> (x <= n);\nloop invariant i15: (x >= 0) ==> (x <= n) ==> (x < n);\nloop invariant i16: (x <= n) ==> (x >= 0) ==> (x < n);\nloop invariant i17: (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant i18: (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant i19: (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant i20: x < n ==> (x >= 0);\nloop invariant i21: x <= n - 1;\nloop invariant i22: x <= n - 2;\nloop invariant i23: x == (x + 1) * (x + 2) / 2 - (n - x) * (n - x + 1) / 2;\nloop invariant i24: n >= 0;\nloop invariant i25: y >= -1;\nloop invariant i26: x >= 0 && x <= n;\nloop invariant i27: y >= x;\nloop invariant i28: y >= -1 ==> (n >= 0);\nloop invariant i29: y >= x ==> (n >= 0);\nloop invariant i30: x <= n ==> (n >= 0);\nloop invariant i31: 0 <= x;\nloop invariant i32: n <= x;\nloop invariant i33: x == n;\nloop invariant i34: 0 <= n;\nloop invariant i35: (x == n) ==> (x == n);\nloop invariant i36: x == n ==> n >= 0;\nloop invariant i37: x < n ==> n < 0 ==> n == x - 1 ==> n < 0 ==> n == x - 1 ==> n != x;\nloop invariant i38: 0 <= x < n;\nloop invariant i39: (x + 1) == n ==> n >= 0;\nloop invariant i40: x == n ==> n < 0 ==> false;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 14,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n\nloop invariant i5: ( ( x <= n ) ==> (x >= 0) );\nloop invariant i6: ( ( x <= n ) ==> (x <= n) );\nloop invariant i7: ( ( x <= n ) ==> (n >= 0) );\n\n\n\nloop invariant i11: (x < n) ==> (x >= 0);\nloop invariant i12: (x < n) ==> (x <= n);\nloop invariant i13: (x >= 0) ==> (x < n) ==> (x <= n);\nloop invariant i14: (x < n) ==> (x >= 0) ==> (x <= n);\n\n\nloop invariant i17: (x >= 0) ==> (x < n) ==> (x <= n) ==> (n >= 0);\nloop invariant i18: (x < n) ==> (x >= 0) ==> (x <= n) ==> (n >= 0);\nloop invariant i19: (x <= n) ==> (x >= 0) ==> (x < n) ==> (n >= 0);\nloop invariant i20: x < n ==> (x >= 0);\n\n\n\n\n\n\n\n\n\nloop invariant i30: x <= n ==> (n >= 0);\nloop invariant i31: 0 <= x;\n\n\n\nloop invariant i35: (x == n) ==> (x == n);\nloop invariant i36: x == n ==> n >= 0;\nloop invariant i37: x < n ==> n < 0 ==> n == x - 1 ==> n < 0 ==> n == x - 1 ==> n != x;\n\nloop invariant i39: (x + 1) == n ==> n >= 0;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == i * a;\nloop invariant a == 1;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == i * a;\nloop invariant a == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i - 1) * a;\nloop invariant a >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant a == 1;\nloop invariant i <= SIZE;\nloop invariant sn <= SIZE*a;\nloop invariant SIZE >= 0;\nloop invariant sn == (i-1)*a;\nloop invariant i == SIZE+1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == i * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn = (a * i) - a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn <= SIZE * a;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant sn == i * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == (a*i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\nloop invariant sn == i * a ==> 0 <= i <= SIZE;\nloop invariant sn == i * a ==> 0 <= i * a <= SIZE * a;\nloop invariant sn == i * a ==> i * a == i * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= sn <= SIZE;\nloop invariant SIZE*a >= sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= a * i;\nloop invariant sn <= a * (i - 1);\nloop invariant sn == (a * i) ==> (i == 0);\nloop invariant sn == (a * i) ==> (i == SIZE + 1);\nloop invariant sn == (a * i) ==> (i == SIZE);\nloop invariant sn == (a * i) ==> (i == 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == i * a;\nloop invariant a == 1;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == i * a;\nloop invariant a == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= a * SIZE is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant a == 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\nloop invariant i5: a == 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i - 1) * a;\nloop invariant a >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn == (i - 1) * a;\nloop invariant i3: a >= 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant a == 1;\nloop invariant i <= SIZE;\nloop invariant sn <= SIZE*a;\nloop invariant SIZE >= 0;\nloop invariant sn == (i-1)*a;\nloop invariant i == SIZE+1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE*a is partially proven to be inductive.\nloop invariant a == 1 is partially proven to be inductive.\nloop invariant i <= SIZE is partially proven to be inductive.\nloop invariant sn <= SIZE*a is partially proven to be inductive.\nloop invariant SIZE >= 0 is partially proven to be inductive.\nloop invariant sn == (i-1)*a is partially proven to be inductive.\nloop invariant i == SIZE+1 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: a == 1;\n\n\n\nloop invariant i7: sn == (i-1)*a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn = (a * i) - a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn <= SIZE * a;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant sn <= SIZE * a is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: sn >= 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant sn == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 1 <= sn <= SIZE * a is preserved but not established.\nloop invariant sn == i * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == (a*i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE*a is partially proven to be inductive.\nloop invariant sn == (a*i) is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn >= 0;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\nloop invariant sn == i * a ==> 0 <= i <= SIZE;\nloop invariant sn == i * a ==> 0 <= i * a <= SIZE * a;\nloop invariant sn == i * a ==> i * a == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant sn == i * a ==> 0 <= i <= SIZE is partially proven to be inductive.\nloop invariant sn == i * a ==> 0 <= i * a <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a ==> i * a == i * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\nloop invariant i6: sn == i * a ==> i * a == i * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= sn <= SIZE;\nloop invariant SIZE*a >= sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 1 <= sn <= SIZE is preserved but not established.\nloop invariant SIZE*a >= sn >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= a * i;\nloop invariant sn <= a * (i - 1);\nloop invariant sn == (a * i) ==> (i == 0);\nloop invariant sn == (a * i) ==> (i == SIZE + 1);\nloop invariant sn == (a * i) ==> (i == SIZE);\nloop invariant sn == (a * i) ==> (i == 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn >= a * i is preserved but not established.\nloop invariant sn <= a * (i - 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == 0) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE + 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 2) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 2) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 3) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 4) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 5) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 6) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 7) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 8) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 9) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 10) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 11) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 12) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 13) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 14) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 15) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 16) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 17) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 18) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 19) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 20) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 21) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 22) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 23) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 24) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 25) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 26) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 27) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 28) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 29) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 30) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 31) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 32) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 33) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 34) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 35) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 36) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 37) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 38) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 39) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 40) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: sn <= a * (i - 1);\nloop invariant i4: sn == (a * i) ==> (i == 0);\nloop invariant i5: sn == (a * i) ==> (i == SIZE + 1);\nloop invariant i6: sn == (a * i) ==> (i == SIZE);\nloop invariant i7: sn == (a * i) ==> (i == 1);\nloop invariant i8: sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant i9: sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant i10: sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant i11: sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant i12: sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant i13: sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant i14: sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant i15: sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant i16: sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant i17: sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant i18: sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant i19: sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant i20: sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant i21: sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant i22: sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant i23: sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant i24: sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant i25: sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant i26: sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant i27: sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant i28: sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant i29: sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant i30: sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant i31: sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant i32: sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant i33: sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant i34: sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant i35: sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant i36: sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant i37: sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant i38: sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant i39: sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant i40: sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant i41: sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant i42: sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant i43: sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant i44: sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant i45: sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant i46: sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant i47: sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant i48: sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant i49: sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant i50: sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 30: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: 1 <= i <= SIZE;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= a * SIZE;\nloop invariant i4: sn == i * a;\nloop invariant i5: a == 1;\nloop invariant i6: 0 <= i <= SIZE;\nloop invariant i7: sn == (i - 1) * a;\nloop invariant i8: a >= 0;\nloop invariant i9: 0 <= sn <= SIZE*a;\nloop invariant i10: i <= SIZE;\nloop invariant i11: sn <= SIZE*a;\nloop invariant i12: SIZE >= 0;\nloop invariant i13: sn == (i-1)*a;\nloop invariant i14: i == SIZE+1;\nloop invariant i15: 0 <= i <= SIZE + 1;\nloop invariant i16: sn = (a * i) - a;\nloop invariant i17: sn <= SIZE * a;\nloop invariant i18: 1 <= sn <= SIZE * a;\nloop invariant i19: sn == (a*i);\nloop invariant i20: sn = a * i;\nloop invariant i21: 1 <= i <= SIZE + 1;\nloop invariant i22: 0 <= sn <= SIZE * a;\nloop invariant i23: sn == i * a ==> 0 <= i <= SIZE;\nloop invariant i24: sn == i * a ==> 0 <= i * a <= SIZE * a;\nloop invariant i25: sn == i * a ==> i * a == i * a;\nloop invariant i26: 1 <= sn <= SIZE;\nloop invariant i27: SIZE*a >= sn >= 0;\nloop invariant i28: sn >= a * i;\nloop invariant i29: sn <= a * (i - 1);\nloop invariant i30: sn == (a * i) ==> (i == 0);\nloop invariant i31: sn == (a * i) ==> (i == SIZE + 1);\nloop invariant i32: sn == (a * i) ==> (i == SIZE);\nloop invariant i33: sn == (a * i) ==> (i == 1);\nloop invariant i34: sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant i35: sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant i36: sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant i37: sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant i38: sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant i39: sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant i40: sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant i41: sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant i42: sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant i43: sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant i44: sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant i45: sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant i46: sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant i47: sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant i48: sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant i49: sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant i50: sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant i51: sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant i52: sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant i53: sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant i54: sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant i55: sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant i56: sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant i57: sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant i58: sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant i59: sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant i60: sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant i61: sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant i62: sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant i63: sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant i64: sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant i65: sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant i66: sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant i67: sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant i68: sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant i69: sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant i70: sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant i71: sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant i72: sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant i73: sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant i74: sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant i75: sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant i76: sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 14,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\nloop invariant i5: a == 1;\n\nloop invariant i7: sn == (i - 1) * a;\nloop invariant i8: a >= 0;\n\n\n\n\nloop invariant i13: sn == (i-1)*a;\n\n\n\n\n\n\n\n\n\nloop invariant i23: sn == i * a ==> 0 <= i <= SIZE;\nloop invariant i24: sn == i * a ==> 0 <= i * a <= SIZE * a;\nloop invariant i25: sn == i * a ==> i * a == i * a;\n\n\n\nloop invariant i29: sn <= a * (i - 1);\nloop invariant i30: sn == (a * i) ==> (i == 0);\nloop invariant i31: sn == (a * i) ==> (i == SIZE + 1);\nloop invariant i32: sn == (a * i) ==> (i == SIZE);\nloop invariant i33: sn == (a * i) ==> (i == 1);\nloop invariant i34: sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant i35: sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant i36: sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant i37: sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant i38: sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant i39: sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant i40: sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant i41: sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant i42: sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant i43: sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant i44: sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant i45: sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant i46: sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant i47: sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant i48: sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant i49: sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant i50: sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant i51: sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant i52: sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant i53: sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant i54: sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant i55: sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant i56: sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant i57: sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant i58: sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant i59: sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant i60: sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant i61: sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant i62: sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant i63: sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant i64: sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant i65: sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant i66: sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant i67: sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant i68: sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant i69: sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant i70: sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant i71: sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant i72: sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant i73: sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant i74: sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant i75: sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant i76: sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/86.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= y <= 50;\nloop invariant x >= (1 - (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant x <= y + 1;\nloop invariant x >= y - 100000;\nloop invariant x <= y + 100000;\nloop invariant x >= y - y * y / 2;\nloop invariant x <= y + y * y / 2;\nloop invariant x >= y - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2;\nloop invariant x >= y - y * y / 2 - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= x + 50;\nloop invariant -50 <= x <= y - 1;\nloop invariant -50 <= z1 <= x + 50;\nloop invariant -50 <= z2 <= y - 1;\nloop invariant -50 <= z3 <= y - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y >= 0;\nloop invariant x <= z1;\nloop invariant y <= z2;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z2 <= z3;\nloop invariant x + y <= z3;\nloop invariant x + y >= z1;\nloop invariant x + y >= z2;\nloop invariant x + y >= z3;\nloop invariant x + y <= x;\nloop invariant y <= x;\nloop invariant x + y <= y;\nloop invariant x + y <= z1;\nloop invariant x + y <= z2;\nloop invariant x + y <= z3;\nloop invariant x + y <= 0;\nloop invariant x + y <= 50;\nloop invariant x + y <= 100;\nloop invariant x + y <= 200;\nloop invariant x + y <= 500;\nloop invariant x + y <= 1000;\nloop invariant x + y <= 5000;\nloop invariant x + y <= 50000;\nloop invariant x + y <= 100000;\nloop invariant x + y <= 200000;\nloop invariant x + y <= 500000;\nloop invariant x + y <= 1000000;\nloop invariant x + y <= 5000000;\nloop invariant x + y <= 10000000;\nloop invariant x + y <= 50000000;\nloop invariant x + y <= 100000000;\nloop invariant x + y <= 500000000;\nloop invariant x + y <= 1000000000;\nloop invariant x + y <= 5000000000;\nloop invariant x + y <= 10000000000;\nloop invariant x + y <= 50000000000;\nloop invariant x + y <= 100000000000;\nloop invariant x + y <= 500000000000;\nloop invariant x + y <= 1000000000000;\nloop invariant x + y <= 5000000000000;\nloop invariant x + y <= 10000000000000;\nloop invariant x + y <= 50000000000000;\nloop invariant x + y <= 100000000000000;\nloop invariant x + y <= 500000000000000;\nloop invariant x + y <= 1000000000000000;\nloop invariant x + y <= 5000000000000000;\nloop invariant x + y <= 10000000000000000;\nloop invariant x + y <= 50000000000000000;\nloop invariant x + y <= 100000000000000000;\nloop invariant x + y <= 500000000000000000;\nloop invariant x + y <= 1000000000000000000;\nloop invariant x + y <= 5000000000000000000;\nloop invariant x + y <= 10000000000000000000;\nloop invariant x + y <= 50000000000000000000;\nloop invariant x + y <= 100000000000000000000;\nloop invariant x + y <= 500000000000000000000;\nloop invariant x + y <= 1000000000000000000000;\nloop invariant x + y <= 5000000000000000000000;\n*/\n```",
                "```\n/*@\nloop invariant x >= -50;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x + y > 0;\nloop invariant x + y <= 100000;\nloop invariant x + y > x;\nloop invariant x + y <= x;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0;\nloop invariant y > 0;\nloop invariant 0 <= y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0;\nloop invariant y > 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i7: y >= 1 ==> y >= 1;\nloop invariant i8: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i9: y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i10: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i11: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i12: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i13: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i14: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i15: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i16: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i17: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i18: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i19: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i20: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i21: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= y <= 50;\nloop invariant x >= (1 - (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= y <= 50 is neither established nor preserved.\nloop invariant x >= (1 - (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= -50 is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= (y * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant x <= y + 1;\nloop invariant x >= y - 100000;\nloop invariant x <= y + 100000;\nloop invariant x >= y - y * y / 2;\nloop invariant x <= y + y * y / 2;\nloop invariant x >= y - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2;\nloop invariant x >= y - y * y / 2 - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= y - 1 is partially proven to be inductive.\nloop invariant x <= y + 1 is partially proven to be inductive.\nloop invariant x >= y - 100000 is partially proven to be inductive.\nloop invariant x <= y + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x <= y + y * y / 2;\n\nloop invariant i13: x <= y + y * y / 2 + 100000;\n\nloop invariant i15: x <= y + y * y / 2 + y * y / 2;\n\nloop invariant i17: x <= y + y * y / 2 + y * y / 2 + 100000;\n\nloop invariant i19: x <= y + y * y / 2 + y * y / 2 + y * y / 2;\n\nloop invariant i21: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\n\nloop invariant i23: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= x + 50;\nloop invariant -50 <= x <= y - 1;\nloop invariant -50 <= z1 <= x + 50;\nloop invariant -50 <= z2 <= y - 1;\nloop invariant -50 <= z3 <= y - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= x + 50 is neither established nor preserved.\nloop invariant -50 <= x <= y - 1 is partially proven to be inductive.\nloop invariant -50 <= z1 <= x + 50 is preserved but not established.\nloop invariant -50 <= z2 <= y - 1 is preserved but not established.\nloop invariant -50 <= z3 <= y - 1 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 22,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y >= 0;\nloop invariant x <= z1;\nloop invariant y <= z2;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z2 <= z3;\nloop invariant x + y <= z3;\nloop invariant x + y >= z1;\nloop invariant x + y >= z2;\nloop invariant x + y >= z3;\nloop invariant x + y <= x;\nloop invariant y <= x;\nloop invariant x + y <= y;\nloop invariant x + y <= z1;\nloop invariant x + y <= z2;\nloop invariant x + y <= z3;\nloop invariant x + y <= 0;\nloop invariant x + y <= 50;\nloop invariant x + y <= 100;\nloop invariant x + y <= 200;\nloop invariant x + y <= 500;\nloop invariant x + y <= 1000;\nloop invariant x + y <= 5000;\nloop invariant x + y <= 50000;\nloop invariant x + y <= 100000;\nloop invariant x + y <= 200000;\nloop invariant x + y <= 500000;\nloop invariant x + y <= 1000000;\nloop invariant x + y <= 5000000;\nloop invariant x + y <= 10000000;\nloop invariant x + y <= 50000000;\nloop invariant x + y <= 100000000;\nloop invariant x + y <= 500000000;\nloop invariant x + y <= 1000000000;\nloop invariant x + y <= 5000000000;\nloop invariant x + y <= 10000000000;\nloop invariant x + y <= 50000000000;\nloop invariant x + y <= 100000000000;\nloop invariant x + y <= 500000000000;\nloop invariant x + y <= 1000000000000;\nloop invariant x + y <= 5000000000000;\nloop invariant x + y <= 10000000000000;\nloop invariant x + y <= 50000000000000;\nloop invariant x + y <= 100000000000000;\nloop invariant x + y <= 500000000000000;\nloop invariant x + y <= 1000000000000000;\nloop invariant x + y <= 5000000000000000;\nloop invariant x + y <= 10000000000000000;\nloop invariant x + y <= 50000000000000000;\nloop invariant x + y <= 100000000000000000;\nloop invariant x + y <= 500000000000000000;\nloop invariant x + y <= 1000000000000000000;\nloop invariant x + y <= 5000000000000000000;\nloop invariant x + y <= 10000000000000000000;\nloop invariant x + y <= 50000000000000000000;\nloop invariant x + y <= 100000000000000000000;\nloop invariant x + y <= 500000000000000000000;\nloop invariant x + y <= 1000000000000000000000;\nloop invariant x + y <= 5000000000000000000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x + y >= 0 is preserved but not established.\nloop invariant x <= z1 is preserved but not established.\nloop invariant y <= z2 is preserved but not established.\nloop invariant z1 <= z2 is preserved but not established.\nloop invariant z1 <= z3 is preserved but not established.\nloop invariant z2 <= z3 is preserved but not established.\nloop invariant x + y <= z3 is partially proven to be inductive.\nloop invariant x + y >= z1 is preserved but not established.\nloop invariant x + y >= z2 is preserved but not established.\nloop invariant x + y >= z3 is partially proven to be inductive.\nloop invariant x + y <= x is partially proven to be inductive.\nloop invariant y <= x is partially proven to be inductive.\nloop invariant x + y <= y is partially proven to be inductive.\nloop invariant x + y <= z1 is partially proven to be inductive.\nloop invariant x + y <= z2 is partially proven to be inductive.\nloop invariant x + y <= 0 is partially proven to be inductive.\nloop invariant x + y <= 50 is partially proven to be inductive.\nloop invariant x + y <= 100 is partially proven to be inductive.\nloop invariant x + y <= 200 is partially proven to be inductive.\nloop invariant x + y <= 500 is partially proven to be inductive.\nloop invariant x + y <= 1000 is partially proven to be inductive.\nloop invariant x + y <= 5000 is partially proven to be inductive.\nloop invariant x + y <= 50000 is partially proven to be inductive.\nloop invariant x + y <= 100000 is partially proven to be inductive.\nloop invariant x + y <= 200000 is partially proven to be inductive.\nloop invariant x + y <= 500000 is partially proven to be inductive.\nloop invariant x + y <= 1000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000000000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: x + y <= 5000000000;\nloop invariant i36: x + y <= 10000000000;\nloop invariant i37: x + y <= 50000000000;\nloop invariant i38: x + y <= 100000000000;\nloop invariant i39: x + y <= 500000000000;\nloop invariant i40: x + y <= 1000000000000;\nloop invariant i41: x + y <= 5000000000000;\nloop invariant i42: x + y <= 10000000000000;\nloop invariant i43: x + y <= 50000000000000;\nloop invariant i44: x + y <= 100000000000000;\nloop invariant i45: x + y <= 500000000000000;\nloop invariant i46: x + y <= 1000000000000000;\nloop invariant i47: x + y <= 5000000000000000;\nloop invariant i48: x + y <= 10000000000000000;\nloop invariant i49: x + y <= 50000000000000000;\nloop invariant i50: x + y <= 100000000000000000;\nloop invariant i51: x + y <= 500000000000000000;\nloop invariant i52: x + y <= 1000000000000000000;\nloop invariant i53: x + y <= 5000000000000000000;\nloop invariant i54: x + y <= 10000000000000000000;\nloop invariant i55: x + y <= 50000000000000000000;\nloop invariant i56: x + y <= 100000000000000000000;\nloop invariant i57: x + y <= 500000000000000000000;\nloop invariant i58: x + y <= 1000000000000000000000;\nloop invariant i59: x + y <= 5000000000000000000000;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= -50;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x + y > 0;\nloop invariant x + y <= 100000;\nloop invariant x + y > x;\nloop invariant x + y <= x;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x + y > 0 is partially proven to be inductive.\nloop invariant x + y <= 100000 is partially proven to be inductive.\nloop invariant x + y > x is partially proven to be inductive.\nloop invariant x + y <= x is partially proven to be inductive.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant x + y <= -50 is partially proven to be inductive.\nloop invariant x + y > -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0;\nloop invariant y > 0;\nloop invariant 0 <= y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= x is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant 1 <= y <= 50 is partially proven to be inductive.\nloop invariant x >= (1 - (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant 0 <= y <= -50 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= (y * y / 2) is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= y - 1 is partially proven to be inductive.\nloop invariant x <= y + 1 is partially proven to be inductive.\nloop invariant x >= y - 100000 is partially proven to be inductive.\nloop invariant x <= y + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant 0 <= y <= x + 50 is partially proven to be inductive.\nloop invariant -50 <= x <= y - 1 is partially proven to be inductive.\nloop invariant -50 <= z1 <= x + 50 is partially proven to be inductive.\nloop invariant -50 <= z2 <= y - 1 is partially proven to be inductive.\nloop invariant -50 <= z3 <= y - 1 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x <= z1 is partially proven to be inductive.\nloop invariant y <= z2 is partially proven to be inductive.\nloop invariant z1 <= z2 is partially proven to be inductive.\nloop invariant z1 <= z3 is partially proven to be inductive.\nloop invariant z2 <= z3 is partially proven to be inductive.\nloop invariant x + y <= z3 is partially proven to be inductive.\nloop invariant x + y >= z1 is partially proven to be inductive.\nloop invariant x + y >= z2 is partially proven to be inductive.\nloop invariant x + y >= z3 is partially proven to be inductive.\nloop invariant x + y <= x is partially proven to be inductive.\nloop invariant y <= x is partially proven to be inductive.\nloop invariant x + y <= y is partially proven to be inductive.\nloop invariant x + y <= z1 is partially proven to be inductive.\nloop invariant x + y <= z2 is partially proven to be inductive.\nloop invariant x + y <= 0 is partially proven to be inductive.\nloop invariant x + y <= 50 is partially proven to be inductive.\nloop invariant x + y <= 100 is partially proven to be inductive.\nloop invariant x + y <= 200 is partially proven to be inductive.\nloop invariant x + y <= 500 is partially proven to be inductive.\nloop invariant x + y <= 1000 is partially proven to be inductive.\nloop invariant x + y <= 5000 is partially proven to be inductive.\nloop invariant x + y <= 50000 is partially proven to be inductive.\nloop invariant x + y <= 100000 is partially proven to be inductive.\nloop invariant x + y <= 200000 is partially proven to be inductive.\nloop invariant x + y <= 500000 is partially proven to be inductive.\nloop invariant x + y <= 1000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000000000 is partially proven to be inductive.\nloop invariant 1 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= x <= -50 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x + y > 0 is partially proven to be inductive.\nloop invariant x + y > x is partially proven to be inductive.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant x + y <= -50 is partially proven to be inductive.\nloop invariant x + y > -50 is partially proven to be inductive.\nloop invariant 0 <= y <= x is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x >= -50;\nloop invariant i4: y >= 1;\nloop invariant i5: x >= (y - 1) * y / 2;\nloop invariant i6: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i7: y >= 1 ==> y >= 1;\nloop invariant i8: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i9: y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i10: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i11: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i12: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i13: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i14: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i15: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i16: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i17: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i18: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i19: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i20: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i21: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i22: 1 <= y <= 50;\nloop invariant i23: x >= (1 - (y - 1) * y / 2);\nloop invariant i24: 0 <= y <= -50;\nloop invariant i25: x >= y;\nloop invariant i26: 0 <= y;\nloop invariant i27: x >= (y * y / 2);\nloop invariant i28: y >= 0;\nloop invariant i29: x <= y;\nloop invariant i30: x >= y - 1;\nloop invariant i31: x <= y + 1;\nloop invariant i32: x >= y - 100000;\nloop invariant i33: x <= y + 100000;\nloop invariant i34: x >= y - y * y / 2;\nloop invariant i35: x <= y + y * y / 2;\nloop invariant i36: x >= y - y * y / 2 - 100000;\nloop invariant i37: x <= y + y * y / 2 + 100000;\nloop invariant i38: x >= y - y * y / 2 - y * y / 2;\nloop invariant i39: x <= y + y * y / 2 + y * y / 2;\nloop invariant i40: x >= y - y * y / 2 - y * y / 2 - 100000;\nloop invariant i41: x <= y + y * y / 2 + y * y / 2 + 100000;\nloop invariant i42: x >= y - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant i43: x <= y + y * y / 2 + y * y / 2 + y * y / 2;\nloop invariant i44: x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000;\nloop invariant i45: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\nloop invariant i46: x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant i47: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\nloop invariant i48: 0 <= y <= x + 50;\nloop invariant i49: -50 <= x <= y - 1;\nloop invariant i50: -50 <= z1 <= x + 50;\nloop invariant i51: -50 <= z2 <= y - 1;\nloop invariant i52: -50 <= z3 <= y - 1;\nloop invariant i53: x + y >= 0;\nloop invariant i54: x <= z1;\nloop invariant i55: y <= z2;\nloop invariant i56: z1 <= z2;\nloop invariant i57: z1 <= z3;\nloop invariant i58: z2 <= z3;\nloop invariant i59: x + y <= z3;\nloop invariant i60: x + y >= z1;\nloop invariant i61: x + y >= z2;\nloop invariant i62: x + y >= z3;\nloop invariant i63: x + y <= x;\nloop invariant i64: y <= x;\nloop invariant i65: x + y <= y;\nloop invariant i66: x + y <= z1;\nloop invariant i67: x + y <= z2;\nloop invariant i68: x + y <= 0;\nloop invariant i69: x + y <= 50;\nloop invariant i70: x + y <= 100;\nloop invariant i71: x + y <= 200;\nloop invariant i72: x + y <= 500;\nloop invariant i73: x + y <= 1000;\nloop invariant i74: x + y <= 5000;\nloop invariant i75: x + y <= 50000;\nloop invariant i76: x + y <= 100000;\nloop invariant i77: x + y <= 200000;\nloop invariant i78: x + y <= 500000;\nloop invariant i79: x + y <= 1000000;\nloop invariant i80: x + y <= 5000000;\nloop invariant i81: x + y <= 10000000;\nloop invariant i82: x + y <= 50000000;\nloop invariant i83: x + y <= 100000000;\nloop invariant i84: x + y <= 500000000;\nloop invariant i85: x + y <= 1000000000;\nloop invariant i86: x + y <= 5000000000;\nloop invariant i87: x + y <= 10000000000;\nloop invariant i88: x + y <= 50000000000;\nloop invariant i89: x + y <= 100000000000;\nloop invariant i90: x + y <= 500000000000;\nloop invariant i91: x + y <= 1000000000000;\nloop invariant i92: x + y <= 5000000000000;\nloop invariant i93: x + y <= 10000000000000;\nloop invariant i94: x + y <= 50000000000000;\nloop invariant i95: x + y <= 100000000000000;\nloop invariant i96: x + y <= 500000000000000;\nloop invariant i97: x + y <= 1000000000000000;\nloop invariant i98: x + y <= 5000000000000000;\nloop invariant i99: x + y <= 10000000000000000;\nloop invariant i100: x + y <= 50000000000000000;\nloop invariant i101: x + y <= 100000000000000000;\nloop invariant i102: x + y <= 500000000000000000;\nloop invariant i103: x + y <= 1000000000000000000;\nloop invariant i104: x + y <= 5000000000000000000;\nloop invariant i105: x + y <= 10000000000000000000;\nloop invariant i106: x + y <= 50000000000000000000;\nloop invariant i107: x + y <= 100000000000000000000;\nloop invariant i108: x + y <= 500000000000000000000;\nloop invariant i109: x + y <= 1000000000000000000000;\nloop invariant i110: x + y <= 5000000000000000000000;\nloop invariant i111: 1 <= y <= 100000;\nloop invariant i112: 0 <= x <= -50;\nloop invariant i113: x < 0;\nloop invariant i114: y <= 100000;\nloop invariant i115: x + y > 0;\nloop invariant i116: x + y > x;\nloop invariant i117: x + y >= -50;\nloop invariant i118: x + y <= -50;\nloop invariant i119: x + y > -50;\nloop invariant i120: 0 <= y <= x;\nloop invariant i121: y > 0;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 30,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i7: y >= 1 ==> y >= 1;\nloop invariant i8: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i9: y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i10: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i11: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i12: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i13: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i14: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i15: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i16: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i17: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i18: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i19: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i20: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i21: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: x <= y + y * y / 2;\n\nloop invariant i37: x <= y + y * y / 2 + 100000;\n\nloop invariant i39: x <= y + y * y / 2 + y * y / 2;\n\nloop invariant i41: x <= y + y * y / 2 + y * y / 2 + 100000;\n\nloop invariant i43: x <= y + y * y / 2 + y * y / 2 + y * y / 2;\n\nloop invariant i45: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\n\nloop invariant i47: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i86: x + y <= 5000000000;\nloop invariant i87: x + y <= 10000000000;\nloop invariant i88: x + y <= 50000000000;\nloop invariant i89: x + y <= 100000000000;\nloop invariant i90: x + y <= 500000000000;\nloop invariant i91: x + y <= 1000000000000;\nloop invariant i92: x + y <= 5000000000000;\nloop invariant i93: x + y <= 10000000000000;\nloop invariant i94: x + y <= 50000000000000;\nloop invariant i95: x + y <= 100000000000000;\nloop invariant i96: x + y <= 500000000000000;\nloop invariant i97: x + y <= 1000000000000000;\nloop invariant i98: x + y <= 5000000000000000;\nloop invariant i99: x + y <= 10000000000000000;\nloop invariant i100: x + y <= 50000000000000000;\nloop invariant i101: x + y <= 100000000000000000;\nloop invariant i102: x + y <= 500000000000000000;\nloop invariant i103: x + y <= 1000000000000000000;\nloop invariant i104: x + y <= 5000000000000000000;\nloop invariant i105: x + y <= 10000000000000000000;\nloop invariant i106: x + y <= 50000000000000000000;\nloop invariant i107: x + y <= 100000000000000000000;\nloop invariant i108: x + y <= 500000000000000000000;\nloop invariant i109: x + y <= 1000000000000000000000;\nloop invariant i110: x + y <= 5000000000000000000000;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/119.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn = i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= size - 1;\nloop invariant i >= 1;\nloop invariant i <= size;\nloop invariant sn + i = size;\nloop invariant sn + i + 1 = size + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= size; 0 <= i <= size + 1; i <= size ==> sn == size; i <= size ==> sn <= size; i <= size ==> sn >= size; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 1 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant size >= 0;\nloop invariant i <= size + 1 ==> sn <= size;\nloop invariant sn >= 1 ==> sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i + sn == size;\nloop invariant i + sn == size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= size + 1;\nloop invariant i <= size ==> sn <= size - 1;\nloop invariant i <= size ==> sn + 1 == i;\nloop invariant i <= size ==> sn == size;\nloop invariant sn <= size;\nloop invariant sn <= size ==> sn + 1 == i;\nloop invariant sn <= size ==> sn == size - 1;\nloop invariant sn <= size ==> sn == size - 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 < i <= size;\nloop invariant sn == (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant i == 0;\nloop invariant sn == 0;\nloop invariant size >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant size >= sn;\nloop invariant size >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant size >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i == (sn + 1);\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= i;\nloop invariant sn == (i - 1);\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant i >= 1;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i == sn + 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn = i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= size - 1;\nloop invariant i >= 1;\nloop invariant i <= size;\nloop invariant sn + i = size;\nloop invariant sn + i + 1 = size + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: i >= 1;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= size; 0 <= i <= size + 1; i <= size ==> sn == size; i <= size ==> sn <= size; i <= size ==> sn >= size; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token '0'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 1 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant size >= 0;\nloop invariant i <= size + 1 ==> sn <= size;\nloop invariant sn >= 1 ==> sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 1 <= sn <= size is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant size >= 0 is partially proven to be inductive.\nloop invariant i <= size + 1 ==> sn <= size is partially proven to be inductive.\nloop invariant sn >= 1 ==> sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\nloop invariant i5: i <= size + 1 ==> sn <= size;\nloop invariant i6: sn >= 1 ==> sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i + sn == size;\nloop invariant i + sn == size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i + sn == size is neither established nor preserved.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= size + 1;\nloop invariant i <= size ==> sn <= size - 1;\nloop invariant i <= size ==> sn + 1 == i;\nloop invariant i <= size ==> sn == size;\nloop invariant sn <= size;\nloop invariant sn <= size ==> sn + 1 == i;\nloop invariant sn <= size ==> sn == size - 1;\nloop invariant sn <= size ==> sn == size - 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= size + 1 is preserved but not established.\nloop invariant i <= size ==> sn <= size - 1 is partially proven to be inductive.\nloop invariant i <= size ==> sn + 1 == i is partially proven to be inductive.\nloop invariant i <= size ==> sn == size is preserved but not established.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn <= size ==> sn + 1 == i is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 is preserved but not established.\nloop invariant sn <= size ==> sn == size - 1 ==> size >= 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i <= size ==> sn <= size - 1;\nloop invariant i5: i <= size ==> sn + 1 == i;\n\n\nloop invariant i8: sn <= size ==> sn + 1 == i;\n\nloop invariant i10: sn <= size ==> sn == size - 1 ==> size >= 1;\n\nloop invariant i12: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant i13: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant i14: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant i15: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 < i <= size;\nloop invariant sn == (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < i <= size is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant sn == 0;\nloop invariant size >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant size >= sn;\nloop invariant size >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i == 0 is preserved but not established.\nloop invariant sn == 0 is partially proven to be inductive.\nloop invariant size >= 0 is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant size >= sn is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: sn >= 0;\nloop invariant i7: i >= 0;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= i - 1;\nloop invariant i3: sn <= i;\nloop invariant i4: sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant size >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i == (sn + 1);\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant size >= 0 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (sn + 1) is partially proven to be inductive.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn == (size - (size - i)) is preserved but not established.\nloop invariant sn == (size - (i - 1)) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn == (i - 1);\nloop invariant i6: i == (sn + 1);\n\nloop invariant i8: sn <= i;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= i;\nloop invariant sn == (i - 1);\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant size >= 1 is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: 0 <= sn <= i;\nloop invariant i3: sn == (i - 1);\nloop invariant i4: i >= 1;\nloop invariant i5: sn >= 0;\n\n\n\nloop invariant i9: i == sn + 1;\nloop invariant i10: sn == i - 1;\nloop invariant i11: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant i >= 1;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= i - 1;\nloop invariant i3: sn <= i;\nloop invariant i4: i >= 1;\nloop invariant i5: sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i == sn + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= size;\nloop invariant i2: sn = i - 1;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= size - 1;\nloop invariant i5: i >= 1;\nloop invariant i6: i <= size;\nloop invariant i7: sn + i = size;\nloop invariant i8: sn + i + 1 = size + 1;\nloop invariant i9: 0 <= sn <= size; 0 <= i <= size + 1; i <= size ==> sn == size; i <= size ==> sn <= size; i <= size ==> sn >= size; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0;\nloop invariant i10: sn <= size;\nloop invariant i11: sn <= i;\nloop invariant i12: 0 <= i <= size + 1;\nloop invariant i13: 1 <= sn <= size;\nloop invariant i14: sn == i - 1;\nloop invariant i15: size >= 0;\nloop invariant i16: i <= size + 1 ==> sn <= size;\nloop invariant i17: sn >= 1 ==> sn == i - 1;\nloop invariant i18: 0 <= i <= size;\nloop invariant i19: 0 <= sn <= size;\nloop invariant i20: i + sn == size;\nloop invariant i21: i <= size + 1;\nloop invariant i22: i <= size ==> sn <= size - 1;\nloop invariant i23: i <= size ==> sn + 1 == i;\nloop invariant i24: i <= size ==> sn == size;\nloop invariant i25: sn <= size ==> sn + 1 == i;\nloop invariant i26: sn <= size ==> sn == size - 1;\nloop invariant i27: sn <= size ==> sn == size - 1 ==> size >= 1;\nloop invariant i28: sn <= size ==> sn == size - 1 ==> i == size + 1;\nloop invariant i29: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant i30: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant i31: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant i32: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant i33: 0 < i <= size;\nloop invariant i34: sn == (i - 1);\nloop invariant i35: i == 0;\nloop invariant i36: sn == 0;\nloop invariant i37: i >= 0;\nloop invariant i38: size >= sn;\nloop invariant i39: sn >= i - 1;\nloop invariant i40: i == (sn + 1);\nloop invariant i41: sn == (size - (size - i));\nloop invariant i42: sn == (size - (i - 1));\nloop invariant i43: 0 <= sn <= i;\nloop invariant i44: size >= 1;\nloop invariant i45: i == sn + 1;\nloop invariant i46: 1 <= i <= size + 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 16,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: i >= 1;\n\n\n\n\n\nloop invariant i11: sn <= i;\n\n\nloop invariant i14: sn == i - 1;\n\nloop invariant i16: i <= size + 1 ==> sn <= size;\nloop invariant i17: sn >= 1 ==> sn == i - 1;\n\n\n\n\nloop invariant i22: i <= size ==> sn <= size - 1;\nloop invariant i23: i <= size ==> sn + 1 == i;\n\nloop invariant i25: sn <= size ==> sn + 1 == i;\n\nloop invariant i27: sn <= size ==> sn == size - 1 ==> size >= 1;\n\nloop invariant i29: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant i30: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant i31: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant i32: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\n\nloop invariant i34: sn == (i - 1);\n\n\nloop invariant i37: i >= 0;\n\nloop invariant i39: sn >= i - 1;\nloop invariant i40: i == (sn + 1);\n\n\nloop invariant i43: 0 <= sn <= i;\n\nloop invariant i45: i == sn + 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i <= N;\nloop invariant i == j;\nloop invariant k == 0;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == (i < 1 ? 1 : 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i <= N;\nloop invariant (i == 0 ==> k == 1);\nloop invariant (i > 0 ==> k == 0);\nloop invariant (j == i);\nloop invariant (i >= 1 ==> j == i);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i > 0 ==> j > 0);\nloop invariant (i < N ==> j < N);\nloop invariant (i == 0 ==> j == 0);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == 0 ==> j == 0);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\n*/\n```",
                "```\n/*@\nloop invariant i >= 0 && i <= N;\nloop invariant j >= 0 && j <= N;\nloop invariant k = (i == 0);\nloop invariant i < N ==> k = 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i <= N;\nloop invariant i == j;\nloop invariant k == (i == 0);\nloop invariant k == (!(i >= 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i + j <= 2N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant k == (0 && i >= 1);\nloop invariant k == (1 && i == 0);\n*/\n```",
                "```\n/*@\nloop invariant i <= N;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == (i < 1 ? 1 : 0);\nloop invariant j == i;\nloop invariant N > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant k ==> j == 1;\nloop invariant !k ==> j == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant k == (i < 1 ? 1 : 0);\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i < N;\nloop invariant j == i;\nloop invariant k == (i < 1 ? 1 : 0);\nloop invariant k > 0 ==> i == N;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i < N;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= k*(N-1) + j == i;\nloop invariant (i < 1 ==> k == 1) && (i >= 1 ==> k == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= i + j <= N;\nloop invariant k = (i<1 ? 1 : 0);\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= j <= N;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= N;\nloop invariant j <= N;\nloop invariant k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i >= N ==> k == 1;\nloop invariant i >= N ==> j == N;\nloop invariant i < N ==> j < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i <= j <= 2N;\nloop invariant k == (i == 0 ? 1 : 0);\nloop invariant k <= i <= N;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i == j;\nloop invariant k == i % 2;\nloop invariant k == (i - 1) % 2;\nloop invariant k == (i - 2) % 2;\nloop invariant k == (i - 3) % 2;\nloop invariant k == (i - 4) % 2;\nloop invariant k == (i - 5) % 2;\nloop invariant k == (i - 6) % 2;\nloop invariant k == (i - 7) % 2;\nloop invariant k == (i - 8) % 2;\nloop invariant k == (i - 9) % 2;\nloop invariant k == (i - 10) % 2;\nloop invariant k == (i - 11) % 2;\nloop invariant k == (i - 12) % 2;\nloop invariant k == (i - 13) % 2;\nloop invariant k == (i - 14) % 2;\nloop invariant k == (i - 15) % 2;\nloop invariant k == (i - 16) % 2;\nloop invariant k == (i - 17) % 2;\nloop invariant k == (i - 18) % 2;\nloop invariant k == (i - 19) % 2;\nloop invariant k == (i - 20) % 2;\nloop invariant k == (i - 21) % 2;\nloop invariant k == (i - 22) % 2;\nloop invariant k == (i - 23) % 2;\nloop invariant k == (i - 24) % 2;\nloop invariant k == (i - 25) % 2;\nloop invariant k == (i - 26) % 2;\nloop invariant k == (i - 27) % 2;\nloop invariant k == (i - 28) % 2;\nloop invariant k == (i - 29) % 2;\nloop invariant k == (i - 30) % 2;\nloop invariant k == (i - 31) % 2;\nloop invariant k == (i - 32) % 2;\nloop invariant k == (i - 33) % 2;\nloop invariant k == (i - 34) % 2;\nloop invariant k == (i - 35) % 2;\nloop invariant k == (i - 36) % 2;\nloop invariant k == (i - 37) % 2;\nloop invariant k == (i - 38) % 2;\nloop invariant k == (i - 39) % 2;\nloop invariant k == (i - 40) % 2;\nloop invariant k == (i - 41) % 2;\nloop invariant k == (i - 42) % 2;\nloop invariant k == (i - 43) % 2;\nloop invariant k == (i - 44) % 2;\nloop invariant k == (i - 45) % 2;\nloop invariant k == (i - 46) % 2;\nloop invariant k == (i - 47) % 2;\nloop invariant k == (i - 48) % 2;\nloop invariant k == (i - 49) % 2;\nloop invariant k == (i - 50) % 2;\nloop invariant k == (i - 51) % 2;\nloop invariant k == (i - 52) % 2;\nloop invariant k == (i - 53) % 2;\nloop invariant k == (i - 54) % 2;\nloop invariant k == (i - 55) % 2;\nloop invariant k == (i - 56) % 2;\nloop invariant k == (i - 57) % 2;\nloop invariant k == (i - 58) % 2;\nloop invariant k == (i - 59) % 2;\nloop invariant k == (i - 60) % 2;\nloop invariant k == (i - 61) % 2;\nloop invariant k == (i - 62) % 2;\nloop invariant k == (i - 63) % 2;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i <= N;\nloop invariant i == j;\nloop invariant k == 0;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == (i < 1 ? 1 : 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant k == (i < 1 ? 1 : 0) is preserved but not established.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= j <= N;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: i == j;\n\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i <= N;\nloop invariant (i == 0 ==> k == 1);\nloop invariant (i > 0 ==> k == 0);\nloop invariant (j == i);\nloop invariant (i >= 1 ==> j == i);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i > 0 ==> j > 0);\nloop invariant (i < N ==> j < N);\nloop invariant (i == 0 ==> j == 0);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == 0 ==> j == 0);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= j <= N is preserved but not established.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant (i == 0 ==> k == 1) is partially proven to be inductive.\nloop invariant (i > 0 ==> k == 0) is partially proven to be inductive.\nloop invariant (j == i) is partially proven to be inductive.\nloop invariant (i >= 1 ==> j == i) is partially proven to be inductive.\nloop invariant (i < N ==> j < N) is partially proven to be inductive.\nloop invariant (i == N ==> j == N) is partially proven to be inductive.\nloop invariant (i > 0 ==> j > 0) is partially proven to be inductive.\nloop invariant (i == 0 ==> j == 0) is partially proven to be inductive.\nloop invariant (i >= 1 ==> j >= 1) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\nloop invariant i2: 0 <= k <= 1;\nloop invariant i3: 0 <= i <= N;\n\n\nloop invariant i6: (j == i);\nloop invariant i7: (i >= 1 ==> j == i);\nloop invariant i8: (i < N ==> j < N);\nloop invariant i9: (i == N ==> j == N);\nloop invariant i10: (i > 0 ==> j > 0);\nloop invariant i11: (i == 0 ==> j == 0);\nloop invariant i12: (i >= 1 ==> j >= 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i >= 0 && i <= N;\nloop invariant j >= 0 && j <= N;\nloop invariant k = (i == 0);\nloop invariant i < N ==> k = 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0 && i <= N;\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i <= N;\nloop invariant i == j;\nloop invariant k == (i == 0);\nloop invariant k == (!(i >= 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == (i == 0) is preserved but not established.\nloop invariant k == (!(i >= 1)) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= j <= N;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: i == j;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i + j <= 2N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 26: unexpected token 'N'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\n\nloop invariant i4: 0 <= k <= 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant k == (0 && i >= 1);\nloop invariant k == (1 && i == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i + j == N is preserved but not established.\nloop invariant k == (0 && i >= 1) is partially proven to be inductive.\nloop invariant k == (1 && i == 0) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i <= N;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == (i < 1 ? 1 : 0);\nloop invariant j == i;\nloop invariant N > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i <= N is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant k == (i < 1 ? 1 : 0) is preserved but not established.\nloop invariant j == i is partially proven to be inductive.\nloop invariant N > 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i <= N;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: k >= 0;\nloop invariant i5: k <= 1;\n\nloop invariant i7: j == i;\nloop invariant i8: N > 0;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant k ==> j == 1;\nloop invariant !k ==> j == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= i is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i + j == N is preserved but not established.\nloop invariant k ==> j == 1 is partially proven to be inductive.\nloop invariant !k ==> j == 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: 0 <= k <= 1;\n\nloop invariant i5: k ==> j == 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant k == (i < 1 ? 1 : 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant k == (i < 1 ? 1 : 0) is preserved but not established.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i < N;\nloop invariant j == i;\nloop invariant k == (i < 1 ? 1 : 0);\nloop invariant k > 0 ==> i == N;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i < N is partially proven to be inductive.\nloop invariant j == i is partially proven to be inductive.\nloop invariant k == (i < 1 ? 1 : 0) is preserved but not established.\nloop invariant k > 0 ==> i == N is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\n\nloop invariant i5: j == i;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i < N;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= k*(N-1) + j == i;\nloop invariant (i < 1 ==> k == 1) && (i >= 1 ==> k == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i < N is partially proven to be inductive.\nloop invariant 0 <= j <= i is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant 0 <= k*(N-1) + j == i is partially proven to be inductive.\nloop invariant (i < 1 ==> k == 1) && (i >= 1 ==> k == 0) is preserved but not established.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: 0 <= k <= 1;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= i + j <= N;\nloop invariant k = (i<1 ? 1 : 0);\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= j <= N;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= N;\nloop invariant j <= N;\nloop invariant k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i >= N ==> k == 1;\nloop invariant i >= N ==> j == N;\nloop invariant i < N ==> j < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\n\nloop invariant i4: 0 <= k <= 1;\n\nloop invariant i6: i >= 0;\nloop invariant i7: j >= 0;\nloop invariant i8: k >= 0;\nloop invariant i9: i <= N;\n\nloop invariant i11: k <= 1;\n\n\n\n\nloop invariant i16: j >= i;\n\n\n\n\nloop invariant i21: j < N ==> i < N;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i <= j <= 2N;\nloop invariant k == (i == 0 ? 1 : 0);\nloop invariant k <= i <= N;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: unexpected token 'N'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\n\nloop invariant i4: k <= i <= N;\nloop invariant i5: k >= 0;\nloop invariant i6: j >= 0;\n\n\nloop invariant i9: i <= j;\n\nloop invariant i11: k <= j;\nloop invariant i12: j >= i;\n\nloop invariant i14: i >= 0;\n\n\nloop invariant i17: k <= i;\n\n\nloop invariant i20: k <= i + k;\nloop invariant i21: i >= k;\nloop invariant i22: j >= k;\nloop invariant i23: k <= N;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 65,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i == j;\nloop invariant k == i % 2;\nloop invariant k == (i - 1) % 2;\nloop invariant k == (i - 2) % 2;\nloop invariant k == (i - 3) % 2;\nloop invariant k == (i - 4) % 2;\nloop invariant k == (i - 5) % 2;\nloop invariant k == (i - 6) % 2;\nloop invariant k == (i - 7) % 2;\nloop invariant k == (i - 8) % 2;\nloop invariant k == (i - 9) % 2;\nloop invariant k == (i - 10) % 2;\nloop invariant k == (i - 11) % 2;\nloop invariant k == (i - 12) % 2;\nloop invariant k == (i - 13) % 2;\nloop invariant k == (i - 14) % 2;\nloop invariant k == (i - 15) % 2;\nloop invariant k == (i - 16) % 2;\nloop invariant k == (i - 17) % 2;\nloop invariant k == (i - 18) % 2;\nloop invariant k == (i - 19) % 2;\nloop invariant k == (i - 20) % 2;\nloop invariant k == (i - 21) % 2;\nloop invariant k == (i - 22) % 2;\nloop invariant k == (i - 23) % 2;\nloop invariant k == (i - 24) % 2;\nloop invariant k == (i - 25) % 2;\nloop invariant k == (i - 26) % 2;\nloop invariant k == (i - 27) % 2;\nloop invariant k == (i - 28) % 2;\nloop invariant k == (i - 29) % 2;\nloop invariant k == (i - 30) % 2;\nloop invariant k == (i - 31) % 2;\nloop invariant k == (i - 32) % 2;\nloop invariant k == (i - 33) % 2;\nloop invariant k == (i - 34) % 2;\nloop invariant k == (i - 35) % 2;\nloop invariant k == (i - 36) % 2;\nloop invariant k == (i - 37) % 2;\nloop invariant k == (i - 38) % 2;\nloop invariant k == (i - 39) % 2;\nloop invariant k == (i - 40) % 2;\nloop invariant k == (i - 41) % 2;\nloop invariant k == (i - 42) % 2;\nloop invariant k == (i - 43) % 2;\nloop invariant k == (i - 44) % 2;\nloop invariant k == (i - 45) % 2;\nloop invariant k == (i - 46) % 2;\nloop invariant k == (i - 47) % 2;\nloop invariant k == (i - 48) % 2;\nloop invariant k == (i - 49) % 2;\nloop invariant k == (i - 50) % 2;\nloop invariant k == (i - 51) % 2;\nloop invariant k == (i - 52) % 2;\nloop invariant k == (i - 53) % 2;\nloop invariant k == (i - 54) % 2;\nloop invariant k == (i - 55) % 2;\nloop invariant k == (i - 56) % 2;\nloop invariant k == (i - 57) % 2;\nloop invariant k == (i - 58) % 2;\nloop invariant k == (i - 59) % 2;\nloop invariant k == (i - 60) % 2;\nloop invariant k == (i - 61) % 2;\nloop invariant k == (i - 62) % 2;\nloop invariant k == (i - 63) % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant j <= N is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == i % 2 is partially proven to be inductive.\nloop invariant k == (i - 1) % 2 is preserved but not established.\nloop invariant k == (i - 2) % 2 is partially proven to be inductive.\nloop invariant k == (i - 3) % 2 is partially proven to be inductive.\nloop invariant k == (i - 4) % 2 is partially proven to be inductive.\nloop invariant k == (i - 5) % 2 is partially proven to be inductive.\nloop invariant k == (i - 6) % 2 is partially proven to be inductive.\nloop invariant k == (i - 7) % 2 is partially proven to be inductive.\nloop invariant k == (i - 8) % 2 is partially proven to be inductive.\nloop invariant k == (i - 9) % 2 is partially proven to be inductive.\nloop invariant k == (i - 10) % 2 is partially proven to be inductive.\nloop invariant k == (i - 11) % 2 is partially proven to be inductive.\nloop invariant k == (i - 12) % 2 is partially proven to be inductive.\nloop invariant k == (i - 13) % 2 is partially proven to be inductive.\nloop invariant k == (i - 14) % 2 is partially proven to be inductive.\nloop invariant k == (i - 15) % 2 is partially proven to be inductive.\nloop invariant k == (i - 16) % 2 is partially proven to be inductive.\nloop invariant k == (i - 17) % 2 is partially proven to be inductive.\nloop invariant k == (i - 18) % 2 is partially proven to be inductive.\nloop invariant k == (i - 19) % 2 is partially proven to be inductive.\nloop invariant k == (i - 20) % 2 is partially proven to be inductive.\nloop invariant k == (i - 21) % 2 is partially proven to be inductive.\nloop invariant k == (i - 22) % 2 is partially proven to be inductive.\nloop invariant k == (i - 23) % 2 is partially proven to be inductive.\nloop invariant k == (i - 24) % 2 is partially proven to be inductive.\nloop invariant k == (i - 25) % 2 is partially proven to be inductive.\nloop invariant k == (i - 26) % 2 is partially proven to be inductive.\nloop invariant k == (i - 27) % 2 is partially proven to be inductive.\nloop invariant k == (i - 28) % 2 is partially proven to be inductive.\nloop invariant k == (i - 29) % 2 is partially proven to be inductive.\nloop invariant k == (i - 30) % 2 is partially proven to be inductive.\nloop invariant k == (i - 31) % 2 is partially proven to be inductive.\nloop invariant k == (i - 32) % 2 is partially proven to be inductive.\nloop invariant k == (i - 33) % 2 is partially proven to be inductive.\nloop invariant k == (i - 34) % 2 is partially proven to be inductive.\nloop invariant k == (i - 35) % 2 is partially proven to be inductive.\nloop invariant k == (i - 36) % 2 is partially proven to be inductive.\nloop invariant k == (i - 37) % 2 is partially proven to be inductive.\nloop invariant k == (i - 38) % 2 is partially proven to be inductive.\nloop invariant k == (i - 39) % 2 is partially proven to be inductive.\nloop invariant k == (i - 40) % 2 is partially proven to be inductive.\nloop invariant k == (i - 41) % 2 is partially proven to be inductive.\nloop invariant k == (i - 42) % 2 is partially proven to be inductive.\nloop invariant k == (i - 43) % 2 is partially proven to be inductive.\nloop invariant k == (i - 44) % 2 is partially proven to be inductive.\nloop invariant k == (i - 45) % 2 is partially proven to be inductive.\nloop invariant k == (i - 46) % 2 is partially proven to be inductive.\nloop invariant k == (i - 47) % 2 is partially proven to be inductive.\nloop invariant k == (i - 48) % 2 is partially proven to be inductive.\nloop invariant k == (i - 49) % 2 is partially proven to be inductive.\nloop invariant k == (i - 50) % 2 is partially proven to be inductive.\nloop invariant k == (i - 51) % 2 is partially proven to be inductive.\nloop invariant k == (i - 52) % 2 is partially proven to be inductive.\nloop invariant k == (i - 53) % 2 is partially proven to be inductive.\nloop invariant k == (i - 54) % 2 is partially proven to be inductive.\nloop invariant k == (i - 55) % 2 is partially proven to be inductive.\nloop invariant k == (i - 56) % 2 is partially proven to be inductive.\nloop invariant k == (i - 57) % 2 is partially proven to be inductive.\nloop invariant k == (i - 58) % 2 is partially proven to be inductive.\nloop invariant k == (i - 59) % 2 is partially proven to be inductive.\nloop invariant k == (i - 60) % 2 is partially proven to be inductive.\nloop invariant k == (i - 61) % 2 is partially proven to be inductive.\nloop invariant k == (i - 62) % 2 is partially proven to be inductive.\nloop invariant k == (i - 63) % 2 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= N;\nloop invariant i3: j >= 0;\nloop invariant i4: j <= N;\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\nloop invariant i7: i == j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 44: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= j <= N;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: i == j;\nloop invariant i4: k == 0;\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\nloop invariant i7: k == (i < 1 ? 1 : 0);\nloop invariant i8: 1 <= j <= N;\nloop invariant i9: 0 <= k <= 1;\nloop invariant i10: (i == 0 ==> k == 1);\nloop invariant i11: (i > 0 ==> k == 0);\nloop invariant i12: (j == i);\nloop invariant i13: (i >= 1 ==> j == i);\nloop invariant i14: (i < N ==> j < N);\nloop invariant i15: (i == N ==> j == N);\nloop invariant i16: (i > 0 ==> j > 0);\nloop invariant i17: (i == 0 ==> j == 0);\nloop invariant i18: (i >= 1 ==> j >= 1);\nloop invariant i19: i >= 0 && i <= N;\nloop invariant i20: j >= 0 && j <= N;\nloop invariant i21: k = (i == 0);\nloop invariant i22: i < N ==> k = 0;\nloop invariant i23: k == (i == 0);\nloop invariant i24: k == (!(i >= 1));\nloop invariant i25: 0 <= i + j <= 2N;\nloop invariant i26: i + j == N;\nloop invariant i27: k == (0 && i >= 1);\nloop invariant i28: k == (1 && i == 0);\nloop invariant i29: i <= N;\nloop invariant i30: i >= 0;\nloop invariant i31: j >= 0;\nloop invariant i32: j == i;\nloop invariant i33: N > 0;\nloop invariant i34: 0 <= j <= i;\nloop invariant i35: k ==> j == 1;\nloop invariant i36: !k ==> j == 0;\nloop invariant i37: i < N;\nloop invariant i38: k > 0 ==> i == N;\nloop invariant i39: 0 <= i < N;\nloop invariant i40: 0 <= k*(N-1) + j == i;\nloop invariant i41: (i < 1 ==> k == 1) && (i >= 1 ==> k == 0);\nloop invariant i42: 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\nloop invariant i43: 0 <= i + j <= N;\nloop invariant i44: k = (i<1 ? 1 : 0);\nloop invariant i45: j <= N;\nloop invariant i46: i < N ==> k == 0;\nloop invariant i47: i >= N ==> k == 1;\nloop invariant i48: i >= N ==> j == N;\nloop invariant i49: i < N ==> j < N;\nloop invariant i50: j >= i;\nloop invariant i51: k == (i<1 ? 1 : 0);\nloop invariant i52: k == 0 ==> i < N;\nloop invariant i53: k == 1 ==> i >= N;\nloop invariant i54: j == N ==> i >= N;\nloop invariant i55: j < N ==> i < N;\nloop invariant i56: i <= j <= 2N;\nloop invariant i57: k == (i == 0 ? 1 : 0);\nloop invariant i58: k <= i <= N;\nloop invariant i59: j <= 2N;\nloop invariant i60: k >= i;\nloop invariant i61: i <= j;\nloop invariant i62: k <= j;\nloop invariant i63: k >= j;\nloop invariant i64: k <= j - i;\nloop invariant i65: j >= i + k;\nloop invariant i66: k <= i;\nloop invariant i67: i <= j - k;\nloop invariant i68: j >= k + i;\nloop invariant i69: k <= i + k;\nloop invariant i70: i >= k;\nloop invariant i71: j >= k;\nloop invariant i72: k <= N;\nloop invariant i73: k == i % 2;\nloop invariant i74: k == (i - 1) % 2;\nloop invariant i75: k == (i - 2) % 2;\nloop invariant i76: k == (i - 3) % 2;\nloop invariant i77: k == (i - 4) % 2;\nloop invariant i78: k == (i - 5) % 2;\nloop invariant i79: k == (i - 6) % 2;\nloop invariant i80: k == (i - 7) % 2;\nloop invariant i81: k == (i - 8) % 2;\nloop invariant i82: k == (i - 9) % 2;\nloop invariant i83: k == (i - 10) % 2;\nloop invariant i84: k == (i - 11) % 2;\nloop invariant i85: k == (i - 12) % 2;\nloop invariant i86: k == (i - 13) % 2;\nloop invariant i87: k == (i - 14) % 2;\nloop invariant i88: k == (i - 15) % 2;\nloop invariant i89: k == (i - 16) % 2;\nloop invariant i90: k == (i - 17) % 2;\nloop invariant i91: k == (i - 18) % 2;\nloop invariant i92: k == (i - 19) % 2;\nloop invariant i93: k == (i - 20) % 2;\nloop invariant i94: k == (i - 21) % 2;\nloop invariant i95: k == (i - 22) % 2;\nloop invariant i96: k == (i - 23) % 2;\nloop invariant i97: k == (i - 24) % 2;\nloop invariant i98: k == (i - 25) % 2;\nloop invariant i99: k == (i - 26) % 2;\nloop invariant i100: k == (i - 27) % 2;\nloop invariant i101: k == (i - 28) % 2;\nloop invariant i102: k == (i - 29) % 2;\nloop invariant i103: k == (i - 30) % 2;\nloop invariant i104: k == (i - 31) % 2;\nloop invariant i105: k == (i - 32) % 2;\nloop invariant i106: k == (i - 33) % 2;\nloop invariant i107: k == (i - 34) % 2;\nloop invariant i108: k == (i - 35) % 2;\nloop invariant i109: k == (i - 36) % 2;\nloop invariant i110: k == (i - 37) % 2;\nloop invariant i111: k == (i - 38) % 2;\nloop invariant i112: k == (i - 39) % 2;\nloop invariant i113: k == (i - 40) % 2;\nloop invariant i114: k == (i - 41) % 2;\nloop invariant i115: k == (i - 42) % 2;\nloop invariant i116: k == (i - 43) % 2;\nloop invariant i117: k == (i - 44) % 2;\nloop invariant i118: k == (i - 45) % 2;\nloop invariant i119: k == (i - 46) % 2;\nloop invariant i120: k == (i - 47) % 2;\nloop invariant i121: k == (i - 48) % 2;\nloop invariant i122: k == (i - 49) % 2;\nloop invariant i123: k == (i - 50) % 2;\nloop invariant i124: k == (i - 51) % 2;\nloop invariant i125: k == (i - 52) % 2;\nloop invariant i126: k == (i - 53) % 2;\nloop invariant i127: k == (i - 54) % 2;\nloop invariant i128: k == (i - 55) % 2;\nloop invariant i129: k == (i - 56) % 2;\nloop invariant i130: k == (i - 57) % 2;\nloop invariant i131: k == (i - 58) % 2;\nloop invariant i132: k == (i - 59) % 2;\nloop invariant i133: k == (i - 60) % 2;\nloop invariant i134: k == (i - 61) % 2;\nloop invariant i135: k == (i - 62) % 2;\nloop invariant i136: k == (i - 63) % 2;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 16,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= j <= N;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: i == j;\nloop invariant i4: k == 0;\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\n\n\nloop invariant i9: 0 <= k <= 1;\n\nloop invariant i11: (i > 0 ==> k == 0);\nloop invariant i12: (j == i);\nloop invariant i13: (i >= 1 ==> j == i);\nloop invariant i14: (i < N ==> j < N);\nloop invariant i15: (i == N ==> j == N);\nloop invariant i16: (i > 0 ==> j > 0);\nloop invariant i17: (i == 0 ==> j == 0);\nloop invariant i18: (i >= 1 ==> j >= 1);\nloop invariant i19: i >= 0 && i <= N;\nloop invariant i20: j >= 0 && j <= N;\n\n\n\n\n\n\nloop invariant i27: k == (0 && i >= 1);\n\nloop invariant i29: i <= N;\nloop invariant i30: i >= 0;\nloop invariant i31: j >= 0;\nloop invariant i32: j == i;\nloop invariant i33: N > 0;\nloop invariant i34: 0 <= j <= i;\nloop invariant i35: k ==> j == 1;\nloop invariant i36: !k ==> j == 0;\nloop invariant i37: i < N;\nloop invariant i38: k > 0 ==> i == N;\nloop invariant i39: 0 <= i < N;\nloop invariant i40: 0 <= k*(N-1) + j == i;\n\nloop invariant i42: 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\nloop invariant i43: 0 <= i + j <= N;\n\nloop invariant i45: j <= N;\nloop invariant i46: i < N ==> k == 0;\nloop invariant i47: i >= N ==> k == 1;\nloop invariant i48: i >= N ==> j == N;\nloop invariant i49: i < N ==> j < N;\nloop invariant i50: j >= i;\nloop invariant i51: k == (i<1 ? 1 : 0);\nloop invariant i52: k == 0 ==> i < N;\nloop invariant i53: k == 1 ==> i >= N;\nloop invariant i54: j == N ==> i >= N;\nloop invariant i55: j < N ==> i < N;\n\nloop invariant i57: k == (i == 0 ? 1 : 0);\nloop invariant i58: k <= i <= N;\n\nloop invariant i60: k >= i;\nloop invariant i61: i <= j;\nloop invariant i62: k <= j;\nloop invariant i63: k >= j;\nloop invariant i64: k <= j - i;\nloop invariant i65: j >= i + k;\nloop invariant i66: k <= i;\nloop invariant i67: i <= j - k;\nloop invariant i68: j >= k + i;\nloop invariant i69: k <= i + k;\nloop invariant i70: i >= k;\nloop invariant i71: j >= k;\nloop invariant i72: k <= N;\nloop invariant i73: k == i % 2;\nloop invariant i74: k == (i - 1) % 2;\nloop invariant i75: k == (i - 2) % 2;\nloop invariant i76: k == (i - 3) % 2;\nloop invariant i77: k == (i - 4) % 2;\nloop invariant i78: k == (i - 5) % 2;\nloop invariant i79: k == (i - 6) % 2;\nloop invariant i80: k == (i - 7) % 2;\nloop invariant i81: k == (i - 8) % 2;\nloop invariant i82: k == (i - 9) % 2;\nloop invariant i83: k == (i - 10) % 2;\nloop invariant i84: k == (i - 11) % 2;\nloop invariant i85: k == (i - 12) % 2;\nloop invariant i86: k == (i - 13) % 2;\nloop invariant i87: k == (i - 14) % 2;\nloop invariant i88: k == (i - 15) % 2;\nloop invariant i89: k == (i - 16) % 2;\nloop invariant i90: k == (i - 17) % 2;\nloop invariant i91: k == (i - 18) % 2;\nloop invariant i92: k == (i - 19) % 2;\nloop invariant i93: k == (i - 20) % 2;\nloop invariant i94: k == (i - 21) % 2;\nloop invariant i95: k == (i - 22) % 2;\nloop invariant i96: k == (i - 23) % 2;\nloop invariant i97: k == (i - 24) % 2;\nloop invariant i98: k == (i - 25) % 2;\nloop invariant i99: k == (i - 26) % 2;\nloop invariant i100: k == (i - 27) % 2;\nloop invariant i101: k == (i - 28) % 2;\nloop invariant i102: k == (i - 29) % 2;\nloop invariant i103: k == (i - 30) % 2;\nloop invariant i104: k == (i - 31) % 2;\nloop invariant i105: k == (i - 32) % 2;\nloop invariant i106: k == (i - 33) % 2;\nloop invariant i107: k == (i - 34) % 2;\nloop invariant i108: k == (i - 35) % 2;\nloop invariant i109: k == (i - 36) % 2;\nloop invariant i110: k == (i - 37) % 2;\nloop invariant i111: k == (i - 38) % 2;\nloop invariant i112: k == (i - 39) % 2;\nloop invariant i113: k == (i - 40) % 2;\nloop invariant i114: k == (i - 41) % 2;\nloop invariant i115: k == (i - 42) % 2;\nloop invariant i116: k == (i - 43) % 2;\nloop invariant i117: k == (i - 44) % 2;\nloop invariant i118: k == (i - 45) % 2;\nloop invariant i119: k == (i - 46) % 2;\nloop invariant i120: k == (i - 47) % 2;\nloop invariant i121: k == (i - 48) % 2;\nloop invariant i122: k == (i - 49) % 2;\nloop invariant i123: k == (i - 50) % 2;\nloop invariant i124: k == (i - 51) % 2;\nloop invariant i125: k == (i - 52) % 2;\nloop invariant i126: k == (i - 53) % 2;\nloop invariant i127: k == (i - 54) % 2;\nloop invariant i128: k == (i - 55) % 2;\nloop invariant i129: k == (i - 56) % 2;\nloop invariant i130: k == (i - 57) % 2;\nloop invariant i131: k == (i - 58) % 2;\nloop invariant i132: k == (i - 59) % 2;\nloop invariant i133: k == (i - 60) % 2;\nloop invariant i134: k == (i - 61) % 2;\nloop invariant i135: k == (i - 62) % 2;\nloop invariant i136: k == (i - 63) % 2;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/123.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn == (i - 1);\nloop invariant sn + 1 == i;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= size;\nloop invariant sn <= size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant size >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn == size - (size - i);\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i1: 0 <= i <= size;\nloop invariant i2: size > 0;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i;\n*/\n```",
                "```\n/*@\nloop invariant i <= size;\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant i == size - sn + 1;\nloop invariant size >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn + 1 = i;\nloop invariant 1 <= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i - 1 ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= size;\nloop invariant 1 <= i;\nloop invariant size <= sn;\nloop invariant i <= sn;\nloop invariant size <= sn - (sn - i);\nloop invariant i <= sn - (sn - i);\nloop invariant i == size;\nloop invariant i <= size;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn == i;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn == (i - 1);\nloop invariant sn + 1 == i;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\nloop invariant sn + i == size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn + 1 == i is partially proven to be inductive.\nloop invariant sn + i == size is neither established nor preserved.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\n\nloop invariant i5: sn == (i - 1);\nloop invariant i6: sn + 1 == i;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= size;\nloop invariant sn <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn >= size is preserved but not established.\nloop invariant sn <= size is established but not preserved.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\nloop invariant i4: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant size >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant size >= 0 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant i == size + 1 ==> sn == size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i == size + 1 ==> sn == size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i == size + 1 ==> sn == size;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= i - 1;\nloop invariant sn <= size;\nloop invariant sn == size - (size - i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= i - 1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == size - (size - i) is preserved but not established.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: 0 <= sn <= i - 1;\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i1: 0 <= i <= size;\nloop invariant i2: size > 0;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: sn >= 0;\nloop invariant i8: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i <= size;\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant i == size - sn + 1;\nloop invariant size >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i <= size is preserved but not established.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i == size - sn + 1 is partially proven to be inductive.\nloop invariant size >= 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn + 1 = i;\nloop invariant 1 <= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: 1 <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i - 1 ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is established but not preserved.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i - 1 ==> (sn == size) is preserved but not established.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nloop invariant sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= i - 1;\n\nloop invariant i5: sn >= i - 1 ==> (sn == size) ==> (sn == size);\nloop invariant i6: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i7: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i8: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i9: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i10: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i11: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i12: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i13: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i14: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i15: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i16: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i17: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i18: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i19: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= size;\nloop invariant 1 <= i;\nloop invariant size <= sn;\nloop invariant i <= sn;\nloop invariant size <= sn - (sn - i);\nloop invariant i <= sn - (sn - i);\nloop invariant i == size;\nloop invariant i <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= size is preserved but not established.\nloop invariant 1 <= i is partially proven to be inductive.\nloop invariant size <= sn is preserved but not established.\nloop invariant i <= sn is partially proven to be inductive.\nloop invariant size <= sn - (sn - i) is partially proven to be inductive.\nloop invariant i <= sn - (sn - i) is partially proven to be inductive.\nloop invariant i == size is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: 1 <= i;\n\n\n\nloop invariant i6: i <= sn - (sn - i);\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn == i;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn <= i;\nloop invariant i6: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 46: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= size;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\nloop invariant i4: i <= size;\nloop invariant i5: sn == (i - 1);\nloop invariant i6: sn + 1 == i;\nloop invariant i7: sn + i == size;\nloop invariant i8: 1 <= i <= size + 1;\nloop invariant i9: 0 <= sn <= size;\nloop invariant i10: sn == i - 1;\nloop invariant i11: sn <= size;\nloop invariant i12: 0 <= i <= size + 1;\nloop invariant i13: sn >= size;\nloop invariant i14: size >= 0;\nloop invariant i15: 1 <= i <= size;\nloop invariant i16: i == size + 1 ==> sn == size;\nloop invariant i17: 0 <= sn <= i - 1;\nloop invariant i18: sn == size - (size - i);\nloop invariant i19: i1;\nloop invariant i20: i2;\nloop invariant i21: i3;\nloop invariant i22: i4;\nloop invariant i23: size > 0;\nloop invariant i24: sn >= 1;\nloop invariant i25: i == size - sn + 1;\nloop invariant i26: size >= 1;\nloop invariant i27: sn + 1 = i;\nloop invariant i28: 1 <= i;\nloop invariant i29: sn >= i - 1;\nloop invariant i30: sn <= i - 1 ==> (sn == size);\nloop invariant i31: sn >= i - 1 ==> (sn == size) ==> (sn == size);\nloop invariant i32: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i33: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i34: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i35: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i36: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i37: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i38: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i39: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i40: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i41: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i42: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i43: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i44: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i45: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i46: 1 <= size;\nloop invariant i47: size <= sn;\nloop invariant i48: i <= sn;\nloop invariant i49: size <= sn - (sn - i);\nloop invariant i50: i <= sn - (sn - i);\nloop invariant i51: i == size;\nloop invariant i52: sn == i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 15,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\n\nloop invariant i5: sn == (i - 1);\nloop invariant i6: sn + 1 == i;\n\n\n\nloop invariant i10: sn == i - 1;\n\n\n\n\n\nloop invariant i16: i == size + 1 ==> sn == size;\nloop invariant i17: 0 <= sn <= i - 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i28: 1 <= i;\nloop invariant i29: sn >= i - 1;\n\nloop invariant i31: sn >= i - 1 ==> (sn == size) ==> (sn == size);\nloop invariant i32: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i33: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i34: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i35: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i36: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i37: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i38: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i39: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i40: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i41: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i42: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i43: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i44: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\nloop invariant i45: sn >= i - 1 ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size) ==> (sn == size);\n\n\n\n\nloop invariant i50: i <= sn - (sn - i);\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/105.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0 ==> (x == n);\nloop invariant n < 0 ==> (x == n);\nloop invariant n >= 0 ==> (x <= n);\nloop invariant n < 0 ==> (x <= n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == (x + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> (x == n);\nloop invariant n < 0 ==> (x == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= x <= n ==> n >= 0;\nloop invariant x >= n ==> n >= 0;\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n;\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant n == x;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= x - 1 <= n - 1;\nloop invariant x == x - 1 + 1;\nloop invariant x == n - (n - x);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n ==> n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x + 1) == n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0 ==> (x == n);\nloop invariant n < 0 ==> (x == n);\nloop invariant n >= 0 ==> (x <= n);\nloop invariant n < 0 ==> (x <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant n >= 0 ==> (x == n) is preserved but not established.\nloop invariant n < 0 ==> (x == n) is partially proven to be inductive.\nloop invariant n >= 0 ==> (x <= n) is partially proven to be inductive.\nloop invariant n < 0 ==> (x <= n) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\nloop invariant i6: n >= 0 ==> (x <= n);\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == (x + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == (x + 1) is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> (x == n);\nloop invariant n < 0 ==> (x == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> (x == n) is preserved but not established.\nloop invariant n < 0 ==> (x == 0) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: n < 0 ==> (x == 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> x == n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == x is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: x == x;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= x <= n ==> n >= 0;\nloop invariant x >= n ==> n >= 0;\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n;\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= x <= n ==> n >= 0 is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n is preserved but not established.\nloop invariant x >= n ==> n >= 0 ==> x >= n is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: 0 <= x <= n ==> n >= 0;\n\n\nloop invariant i5: x >= n ==> n >= 0 ==> x >= n;\nloop invariant i6: 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant i7: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i8: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i9: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i10: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i11: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i12: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i13: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i14: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i15: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i16: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i17: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i18: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i19: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i20: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i21: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i22: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant n == x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant n == x is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= x - 1 <= n - 1;\nloop invariant x == x - 1 + 1;\nloop invariant x == n - (n - x);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 0 <= x - 1 <= n - 1 is partially proven to be inductive.\nloop invariant x == x - 1 + 1 is partially proven to be inductive.\nloop invariant x == n - (n - x) is partially proven to be inductive.\nloop invariant x == n - (x - 1) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x == x - 1 + 1;\nloop invariant i4: x == n - (n - x);\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n ==> n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> n >= 0 is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n ==> n >= 0;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x + 1) == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x + 1) == n is neither established nor preserved.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 0 <= n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion x == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant n >= 0 ==> (x == n) is preserved but not established.\nloop invariant n < 0 ==> (x == n) is partially proven to be inductive.\nloop invariant n >= 0 ==> (x <= n) is partially proven to be inductive.\nloop invariant n < 0 ==> (x <= n) is partially proven to be inductive.\nloop invariant x == (x + 1) is preserved but not established.\nloop invariant n < 0 ==> (x == 0) is partially proven to be inductive.\nloop invariant n >= 0 ==> x == n is partially proven to be inductive.\nloop invariant x == x is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant 0 <= n is partially proven to be inductive.\nloop invariant n == x is partially proven to be inductive.\nloop invariant 1 <= x <= n is partially proven to be inductive.\nloop invariant 0 <= x - 1 <= n - 1 is partially proven to be inductive.\nloop invariant x == x - 1 + 1 is partially proven to be inductive.\nloop invariant x == n - (n - x) is partially proven to be inductive.\nloop invariant x == n - (x - 1) is partially proven to be inductive.\nloop invariant x <= n ==> n >= 0 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant (x + 1) == n is partially proven to be inductive.\nAssertion x == n: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= n;\nloop invariant i3: x >= 0;\nloop invariant i4: n >= 0 ==> (x == n);\nloop invariant i5: n < 0 ==> (x == n);\nloop invariant i6: n >= 0 ==> (x <= n);\nloop invariant i7: n < 0 ==> (x <= n);\nloop invariant i8: x == (x + 1);\nloop invariant i9: n < 0 ==> (x == 0);\nloop invariant i10: n >= 0 ==> x == n;\nloop invariant i11: x == x;\nloop invariant i12: 0 <= x <= n ==> n >= 0;\nloop invariant i13: x >= n ==> n >= 0;\nloop invariant i14: 0 <= x <= n ==> n >= 0 ==> x >= n;\nloop invariant i15: x >= n ==> n >= 0 ==> x >= n;\nloop invariant i16: 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant i17: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i18: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i19: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i20: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i21: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i22: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i23: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i24: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i25: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i26: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i27: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i28: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i29: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i30: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i31: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i32: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i33: 0 <= n;\nloop invariant i34: n == x;\nloop invariant i35: 1 <= x <= n;\nloop invariant i36: 0 <= x - 1 <= n - 1;\nloop invariant i37: x == x - 1 + 1;\nloop invariant i38: x == n - (n - x);\nloop invariant i39: x == n - (x - 1);\nloop invariant i40: x <= n ==> n >= 0;\nloop invariant i41: n >= 0;\nloop invariant i42: (x + 1) == n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 8,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\nloop invariant i6: n >= 0 ==> (x <= n);\n\n\nloop invariant i9: n < 0 ==> (x == 0);\n\nloop invariant i11: x == x;\nloop invariant i12: 0 <= x <= n ==> n >= 0;\n\n\nloop invariant i15: x >= n ==> n >= 0 ==> x >= n;\nloop invariant i16: 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant i17: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i18: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i19: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i20: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i21: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i22: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i23: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i24: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i25: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i26: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i27: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i28: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i29: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i30: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i31: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i32: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\n\n\n\n\nloop invariant i37: x == x - 1 + 1;\nloop invariant i38: x == n - (n - x);\n\nloop invariant i40: x <= n ==> n >= 0;\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= a <= 100000;\nloop invariant 0 <= b <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant 0 <= i <= 100000;\nloop invariant a >= b;\nloop invariant i >= j;\nloop invariant i%2 == j%2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= a <= 1;\nloop invariant 0 <= b <= 3;\nloop invariant a == (b - j + i);\nloop invariant (i%2 == 0 ==> j == i + 1) && (i%2 != 0 ==> j == i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= 3;\nloop invariant 0 <= b <= 3;\nloop invariant (if flag then a == b else a > b);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= j <= 100000;\nloop invariant i >= 0;\nloop invariant i%2 == 0;\nloop invariant j%2 == 0;\nloop invariant j >= i;\nloop invariant a >= (b - (j - i));\n*/\n```",
                "```\n/*@\nloop invariant i == 0;\nloop invariant a == b;\nloop invariant 0 <= i <= j;\nloop invariant 1 <= j;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j < 100000;\nloop invariant a >= b;\nloop invariant (if flag then i = 0 else i = 1);\nloop invariant (if flag then j = 1 else j = 2);\nloop invariant (if flag then b >= 0 else b >= 1);\nloop invariant (if flag then a >= 0 else a >= 1);\nloop invariant (if flag then i%2 == 0 else i%2 == 1);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant j >= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) <= b <= a + i * (2*i + j-1);\nloop invariant i + j - 2 >= 0;\nloop invariant j - i >= 0;\nloop invariant i % 2 == 0 ==> j % 2 == 0;\nloop invariant i % 2 == 1 ==> j % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant b == a + (j - i);\nloop invariant j == i + 1;\nloop invariant flag == (i % 2 == 0);\nloop invariant i == (2 * j - 1);\nloop invariant j == (i + 1) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant a <= b <= 2147483647;\nloop invariant b - a >= -1;\nloop invariant b - a <= 1;\nloop invariant j >= 2;\nloop invariant j - i >= 2;\nloop invariant j - i <= 3;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 3;\nloop invariant 0 <= a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant (a == b ==> i == 0);\nloop invariant (a == b ==> j == 1);\nloop invariant (a == b ==> flag == 1);\nloop invariant (a == b ==> flag == 0);\nloop invariant (a == b ==> i == 1);\nloop invariant (a == b ==> j == 2);\nloop invariant (a == b ==> flag == 1);\nloop invariant (a == b ==> flag == 0);\nloop invariant (i == 0 ==> j == 1);\nloop invariant (i == 0 ==> j == 2);\nloop invariant (i == 0 ==> j == 3);\nloop invariant (i == 1 ==> j == 1);\nloop invariant (i == 1 ==> j == 2);\nloop invariant (i == 1 ==> j == 3);\nloop invariant (i == 2 ==> j == 1);\nloop invariant (i == 2 ==> j == 2);\nloop invariant (i == 2 ==> j == 3);\nloop invariant (i == 0 ==> a == 0);\nloop invariant (i == 0 ==> b == 0);\nloop invariant (i == 1 ==> a == 1);\nloop invariant (i == 1 ==> b == 1);\nloop invariant (i == 2 ==> a == 2);\nloop invariant (i == 2 ==> b == 2);\nloop invariant (i == 0 ==> flag == 1);\nloop invariant (i == 0 ==> flag == 0);\nloop invariant (i == 1 ==> flag == 1);\nloop invariant (i == 1 ==> flag == 0);\nloop invariant (i == 2 ==> flag == 1);\nloop invariant (i == 2 ==> flag == 0);\nloop invariant (flag == 1 ==> i == 0);\nloop invariant (flag == 1 ==> i == 1);\nloop invariant (flag == 1 ==> i == 2);\nloop invariant (flag == 0 ==> i == 0);\nloop invariant (flag == 0 ==> i == 1);\nloop invariant (flag == 0 ==> i == 2);\nloop invariant (flag == 1 ==> j == 1);\nloop invariant (flag == 1 ==> j == 2);\nloop invariant (flag == 1 ==> j == 3);\nloop invariant (flag == 0 ==> j == 1);\nloop invariant (flag == 0 ==> j == 2);\nloop invariant (flag == 0 ==> j == 3);\nloop invariant (flag == 1 ==> flag == 0);\nloop invariant (flag == 1 ==> flag == 1);\nloop invariant (flag == 0 ==> flag == 0);\nloop invariant (flag == 0 ==> flag == 1);\nloop invariant (flag == 1 ==> i == 0 ==> j == 1);\nloop invariant (flag == 1 ==> i == 0 ==> j == 2);\nloop invariant (flag == 1 ==> i == 0 ==> j == 3);\nloop invariant (flag == 1 ==> i == 1 ==> j == 1);\nloop invariant (flag == 1 ==> i == 1 ==> j == 2);\nloop invariant (flag == 1 ==> i == 1 ==> j == 3);\nloop invariant (flag == 1 ==> i == 2 ==> j == 1);\nloop invariant (flag == 1 ==> i == 2 ==> j == 2);\nloop invariant (flag == 1 ==> i == 2 ==> j == 3);\nloop invariant (flag == 0 ==> i == 0 ==> j == 1);\nloop invariant (flag == 0 ==> i == 0 ==> j == 2);\nloop invariant (flag == 0 ==> i == 0 ==> j == 3);\nloop invariant (flag == 0 ==> i == 1 ==> j == 1);\nloop invariant (flag == 0 ==> i == 1 ==> j == 2);\nloop invariant (flag == 0 ==> i == 1 ==> j == 3);\nloop invariant (flag == 0 ==> i == 2 ==> j == 1);\nloop invariant (flag == 0 ==> i == 2 ==> j == 2);\nloop invariant (flag == 0 ==> i == 2 ==> j == 3);\nloop invariant (flag == 1 ==> a == 0 ==> b == 0);\nloop invariant (flag == 1 ==> a == 1 ==> b == 1);\nloop invariant (flag == 1 ==> a == 2 ==> b == 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i;\nloop invariant if (flag) then i == 0 else i == 1;\nloop invariant j > i;\nloop invariant a == b + (j - i);\nloop invariant j%2 == 1 ==> i%2 == 0;\nloop invariant i%2 == 0 ==> j%2 == 1;\nloop invariant if (flag) then i%2 == 0 else i%2 == 1;\nloop invariant if (flag) then j%2 == 1 else j%2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant a >= b;\nloop invariant i%2 == 0 && j%2 == 1;\nloop invariant b == (i + 1)*(j - 1)/2;\nloop invariant a >= b + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + 2*(j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= 2;\nloop invariant flag ==> a = 1;\nloop invariant !flag ==> a = 0;\nloop invariant b = (i*a);\nloop invariant i%2 == 0 ==> j = (2*i + 1);\nloop invariant i%2 == 1 ==> j = (2*i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 1 <= j <= 3;\nloop invariant i == 0 || i == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= unknown_int();\nloop invariant 0 <= a <= unknown_int();\nloop invariant 0 <= b <= unknown_int();\nloop invariant a == b ==> flag == 1;\nloop invariant a != b ==> flag == 0;\nloop invariant i%2 == 0 ==> j%2 == 0;\nloop invariant i%2 == 1 ==> j%2 == 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant j >= 0;\nloop invariant a <= unknown_int();\nloop invariant b <= unknown_int();\nloop invariant i <= 1;\nloop invariant j <= unknown_int();\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant a <= b;\nloop invariant b <= a;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> i%2 == 0;\nloop invariant b <= a ==> i%2 == 0;\nloop invariant a == b ==> i >= 0;\nloop invariant b <= a ==> i >= 0;\nloop invariant a == b ==> i <= 1;\nloop invariant b <= a ==> i <= 1;\nloop invariant a == b ==> j%2 == 0;\nloop invariant b <= a ==> j%2 == 0;\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= 100000;\nloop invariant 0 <= b <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant 0 <= i <= 100000;\nloop invariant a >= b;\nloop invariant i >= j;\nloop invariant i%2 == j%2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a <= 100000 is established but not preserved.\nloop invariant 0 <= b <= 100000 is established but not preserved.\nloop invariant 0 <= j <= 100000 is established but not preserved.\nloop invariant 0 <= i <= 100000 is established but not preserved.\nloop invariant a >= b is established but not preserved.\nloop invariant i >= j is preserved but not established.\nloop invariant i%2 == j%2 is established but not preserved.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= a <= 1;\nloop invariant 0 <= b <= 3;\nloop invariant a == (b - j + i);\nloop invariant (i%2 == 0 ==> j == i + 1) && (i%2 != 0 ==> j == i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 0 <= j <= 2 is established but not preserved.\nloop invariant 0 <= a <= 1 is partially proven to be inductive.\nloop invariant 0 <= b <= 3 is partially proven to be inductive.\nloop invariant a == (b - j + i) is preserved but not established.\nloop invariant (i%2 == 0 ==> j == i + 1) && (i%2 != 0 ==> j == i) is partially proven to be inductive.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= 3;\nloop invariant 0 <= b <= 3;\nloop invariant (if flag then a == b else a > b);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: unexpected token 'flag'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= j <= 100000;\nloop invariant i >= 0;\nloop invariant i%2 == 0;\nloop invariant j%2 == 0;\nloop invariant j >= i;\nloop invariant a >= (b - (j - i));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a <= b is partially proven to be inductive.\nloop invariant 0 <= j <= 100000 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i%2 == 0 is preserved but not established.\nloop invariant j%2 == 0 is preserved but not established.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant a >= (b - (j - i)) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: i >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant a == b;\nloop invariant 0 <= i <= j;\nloop invariant 1 <= j;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i == 0 is neither established nor preserved.\nloop invariant a == b is partially proven to be inductive.\nloop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant 1 <= j is partially proven to be inductive.\nloop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\nloop invariant i5: 0 <= a;\nloop invariant i6: 0 <= b;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j < 100000;\nloop invariant a >= b;\nloop invariant (if flag then i = 0 else i = 1);\nloop invariant (if flag then j = 1 else j = 2);\nloop invariant (if flag then b >= 0 else b >= 1);\nloop invariant (if flag then a >= 0 else a >= 1);\nloop invariant (if flag then i%2 == 0 else i%2 == 1);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: unexpected token 'flag'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant j >= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) <= b <= a + i * (2*i + j-1);\nloop invariant i + j - 2 >= 0;\nloop invariant j - i >= 0;\nloop invariant i % 2 == 0 ==> j % 2 == 0;\nloop invariant i % 2 == 1 ==> j % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant j >= 2 is preserved but not established.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) <= b <= a + i * (2*i + j-1) is partially proven to be inductive.\nloop invariant i + j - 2 >= 0 is partially proven to be inductive.\nloop invariant j - i >= 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> j % 2 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> j % 2 == 1 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> j % 2 == 0 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> j % 2 == 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 1 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 0 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 1 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant b == a + (j - i);\nloop invariant j == i + 1;\nloop invariant flag == (i % 2 == 0);\nloop invariant i == (2 * j - 1);\nloop invariant j == (i + 1) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a <= b is partially proven to be inductive.\nloop invariant b == a + (j - i) is preserved but not established.\nloop invariant j == i + 1 is preserved but not established.\nloop invariant flag == (i % 2 == 0) is partially proven to be inductive.\nloop invariant i == (2 * j - 1) is partially proven to be inductive.\nloop invariant j == (i + 1) / 2 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant a <= b <= 2147483647;\nloop invariant b - a >= -1;\nloop invariant b - a <= 1;\nloop invariant j >= 2;\nloop invariant j - i >= 2;\nloop invariant j - i <= 3;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a <= 2147483647 is partially proven to be inductive.\nloop invariant a <= b <= 2147483647 is partially proven to be inductive.\nloop invariant b - a >= -1 is partially proven to be inductive.\nloop invariant b - a <= 1 is partially proven to be inductive.\nloop invariant j >= 2 is preserved but not established.\nloop invariant j - i >= 2 is partially proven to be inductive.\nloop invariant j - i <= 3 is partially proven to be inductive.\nloop invariant j - i == 2 ==> i == 0 is partially proven to be inductive.\nloop invariant j - i == 3 ==> i == 1 is partially proven to be inductive.\nloop invariant j - i == 2 ==> j == 2 is partially proven to be inductive.\nloop invariant j - i == 3 ==> j == 3 is partially proven to be inductive.\nloop invariant j - i == 2 ==> flag == 1 is partially proven to be inductive.\nloop invariant j - i == 3 ==> flag == 0 is partially proven to be inductive.\nloop invariant j - i == 2 ==> a == 0 is partially proven to be inductive.\nloop invariant j - i == 3 ==> a == 0 is partially proven to be inductive.\nloop invariant j - i == 2 ==> b == 0 is partially proven to be inductive.\nloop invariant j - i == 3 ==> b == 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 20,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 3;\nloop invariant 0 <= a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant (a == b ==> i == 0);\nloop invariant (a == b ==> j == 1);\nloop invariant (a == b ==> flag == 1);\nloop invariant (a == b ==> flag == 0);\nloop invariant (a == b ==> i == 1);\nloop invariant (a == b ==> j == 2);\nloop invariant (a == b ==> flag == 1);\nloop invariant (a == b ==> flag == 0);\nloop invariant (i == 0 ==> j == 1);\nloop invariant (i == 0 ==> j == 2);\nloop invariant (i == 0 ==> j == 3);\nloop invariant (i == 1 ==> j == 1);\nloop invariant (i == 1 ==> j == 2);\nloop invariant (i == 1 ==> j == 3);\nloop invariant (i == 2 ==> j == 1);\nloop invariant (i == 2 ==> j == 2);\nloop invariant (i == 2 ==> j == 3);\nloop invariant (i == 0 ==> a == 0);\nloop invariant (i == 0 ==> b == 0);\nloop invariant (i == 1 ==> a == 1);\nloop invariant (i == 1 ==> b == 1);\nloop invariant (i == 2 ==> a == 2);\nloop invariant (i == 2 ==> b == 2);\nloop invariant (i == 0 ==> flag == 1);\nloop invariant (i == 0 ==> flag == 0);\nloop invariant (i == 1 ==> flag == 1);\nloop invariant (i == 1 ==> flag == 0);\nloop invariant (i == 2 ==> flag == 1);\nloop invariant (i == 2 ==> flag == 0);\nloop invariant (flag == 1 ==> i == 0);\nloop invariant (flag == 1 ==> i == 1);\nloop invariant (flag == 1 ==> i == 2);\nloop invariant (flag == 0 ==> i == 0);\nloop invariant (flag == 0 ==> i == 1);\nloop invariant (flag == 0 ==> i == 2);\nloop invariant (flag == 1 ==> j == 1);\nloop invariant (flag == 1 ==> j == 2);\nloop invariant (flag == 1 ==> j == 3);\nloop invariant (flag == 0 ==> j == 1);\nloop invariant (flag == 0 ==> j == 2);\nloop invariant (flag == 0 ==> j == 3);\nloop invariant (flag == 1 ==> flag == 0);\nloop invariant (flag == 1 ==> flag == 1);\nloop invariant (flag == 0 ==> flag == 0);\nloop invariant (flag == 0 ==> flag == 1);\nloop invariant (flag == 1 ==> i == 0 ==> j == 1);\nloop invariant (flag == 1 ==> i == 0 ==> j == 2);\nloop invariant (flag == 1 ==> i == 0 ==> j == 3);\nloop invariant (flag == 1 ==> i == 1 ==> j == 1);\nloop invariant (flag == 1 ==> i == 1 ==> j == 2);\nloop invariant (flag == 1 ==> i == 1 ==> j == 3);\nloop invariant (flag == 1 ==> i == 2 ==> j == 1);\nloop invariant (flag == 1 ==> i == 2 ==> j == 2);\nloop invariant (flag == 1 ==> i == 2 ==> j == 3);\nloop invariant (flag == 0 ==> i == 0 ==> j == 1);\nloop invariant (flag == 0 ==> i == 0 ==> j == 2);\nloop invariant (flag == 0 ==> i == 0 ==> j == 3);\nloop invariant (flag == 0 ==> i == 1 ==> j == 1);\nloop invariant (flag == 0 ==> i == 1 ==> j == 2);\nloop invariant (flag == 0 ==> i == 1 ==> j == 3);\nloop invariant (flag == 0 ==> i == 2 ==> j == 1);\nloop invariant (flag == 0 ==> i == 2 ==> j == 2);\nloop invariant (flag == 0 ==> i == 2 ==> j == 3);\nloop invariant (flag == 1 ==> a == 0 ==> b == 0);\nloop invariant (flag == 1 ==> a == 1 ==> b == 1);\nloop invariant (flag == 1 ==> a == 2 ==> b == 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is partially proven to be inductive.\nloop invariant 0 <= j <= 3 is partially proven to be inductive.\nloop invariant 0 <= a <= b is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant (a == b ==> i == 0) is preserved but not established.\nloop invariant (a == b ==> j == 1) is partially proven to be inductive.\nloop invariant (a == b ==> flag == 1) is preserved but not established.\nloop invariant (a == b ==> flag == 0) is preserved but not established.\nloop invariant (a == b ==> i == 1) is partially proven to be inductive.\nloop invariant (a == b ==> j == 2) is partially proven to be inductive.\nloop invariant (i == 0 ==> j == 1) is partially proven to be inductive.\nloop invariant (i == 0 ==> j == 2) is partially proven to be inductive.\nloop invariant (i == 0 ==> j == 3) is partially proven to be inductive.\nloop invariant (i == 1 ==> j == 1) is partially proven to be inductive.\nloop invariant (i == 1 ==> j == 2) is partially proven to be inductive.\nloop invariant (i == 1 ==> j == 3) is partially proven to be inductive.\nloop invariant (i == 2 ==> j == 1) is partially proven to be inductive.\nloop invariant (i == 2 ==> j == 2) is partially proven to be inductive.\nloop invariant (i == 2 ==> j == 3) is partially proven to be inductive.\nloop invariant (i == 0 ==> a == 0) is partially proven to be inductive.\nloop invariant (i == 0 ==> b == 0) is partially proven to be inductive.\nloop invariant (i == 1 ==> a == 1) is partially proven to be inductive.\nloop invariant (i == 1 ==> b == 1) is partially proven to be inductive.\nloop invariant (i == 2 ==> a == 2) is partially proven to be inductive.\nloop invariant (i == 2 ==> b == 2) is partially proven to be inductive.\nloop invariant (i == 0 ==> flag == 1) is partially proven to be inductive.\nloop invariant (i == 0 ==> flag == 0) is partially proven to be inductive.\nloop invariant (i == 1 ==> flag == 1) is partially proven to be inductive.\nloop invariant (i == 1 ==> flag == 0) is partially proven to be inductive.\nloop invariant (i == 2 ==> flag == 1) is partially proven to be inductive.\nloop invariant (i == 2 ==> flag == 0) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 0) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 0) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 0 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 1 ==> flag == 0) is partially proven to be inductive.\nloop invariant (flag == 1 ==> flag == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> flag == 0) is partially proven to be inductive.\nloop invariant (flag == 0 ==> flag == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 0 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 0 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 0 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 1 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 1 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 1 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 2 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 2 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 2 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 0 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 0 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 0 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 1 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 1 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 1 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 2 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 2 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 2 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 1 ==> a == 0 ==> b == 0) is partially proven to be inductive.\nloop invariant (flag == 1 ==> a == 1 ==> b == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> a == 2 ==> b == 2) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\nloop invariant i4: a >= 0;\nloop invariant i5: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: (flag == 1 ==> flag == 1);\nloop invariant i47: (flag == 0 ==> flag == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant if (flag) then i == 0 else i == 1;\nloop invariant j > i;\nloop invariant a == b + (j - i);\nloop invariant j%2 == 1 ==> i%2 == 0;\nloop invariant i%2 == 0 ==> j%2 == 1;\nloop invariant if (flag) then i%2 == 0 else i%2 == 1;\nloop invariant if (flag) then j%2 == 1 else j%2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= i;\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant a >= b;\nloop invariant i%2 == 0 && j%2 == 1;\nloop invariant b == (i + 1)*(j - 1)/2;\nloop invariant a >= b + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + 2*(j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 100000 is partially proven to be inductive.\nloop invariant 0 <= j <= 100000 is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nloop invariant i%2 == 0 && j%2 == 1 is preserved but not established.\nloop invariant b == (i + 1)*(j - 1)/2 is partially proven to be inductive.\nloop invariant a >= b + (j - i)*(j - i + 1)/2 is preserved but not established.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + 2*(j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= 2;\nloop invariant flag ==> a = 1;\nloop invariant !flag ==> a = 0;\nloop invariant b = (i*a);\nloop invariant i%2 == 0 ==> j = (2*i + 1);\nloop invariant i%2 == 1 ==> j = (2*i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 1 <= j <= 3;\nloop invariant i == 0 || i == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant 1 <= j <= 3 is established but not preserved.\nloop invariant i == 0 || i == 1 is established but not preserved.\nAssertion a == b: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 17,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= unknown_int();\nloop invariant 0 <= a <= unknown_int();\nloop invariant 0 <= b <= unknown_int();\nloop invariant a == b ==> flag == 1;\nloop invariant a != b ==> flag == 0;\nloop invariant i%2 == 0 ==> j%2 == 0;\nloop invariant i%2 == 1 ==> j%2 == 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant j >= 0;\nloop invariant a <= unknown_int();\nloop invariant b <= unknown_int();\nloop invariant i <= 1;\nloop invariant j <= unknown_int();\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant a <= b;\nloop invariant b <= a;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> i%2 == 0;\nloop invariant b <= a ==> i%2 == 0;\nloop invariant a == b ==> i >= 0;\nloop invariant b <= a ==> i >= 0;\nloop invariant a == b ==> i <= 1;\nloop invariant b <= a ==> i <= 1;\nloop invariant a == b ==> j%2 == 0;\nloop invariant b <= a ==> j%2 == 0;\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\nloop invariant i9: a >= 0;\nloop invariant i10: b >= 0;\nloop invariant i11: j >= 0;\n\n\n\n\nloop invariant i16: i >= 0;\n\n\n\n\n\nloop invariant i22: a == b ==> j >= 0;\nloop invariant i23: b <= a ==> j >= 0;\n\n\nloop invariant i26: a == b ==> i >= 0;\nloop invariant i27: b <= a ==> i >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 36: unexpected token 'flag'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a <= 100000;\nloop invariant i2: 0 <= b <= 100000;\nloop invariant i3: 0 <= j <= 100000;\nloop invariant i4: 0 <= i <= 100000;\nloop invariant i5: a >= b;\nloop invariant i6: i >= j;\nloop invariant i7: i%2 == j%2;\nloop invariant i8: 0 <= i <= 2;\nloop invariant i9: 0 <= j <= 2;\nloop invariant i10: 0 <= a <= 1;\nloop invariant i11: 0 <= b <= 3;\nloop invariant i12: a == (b - j + i);\nloop invariant i13: (i%2 == 0 ==> j == i + 1) && (i%2 != 0 ==> j == i);\nloop invariant i14: 0 <= a <= 3;\nloop invariant i15: (if flag then a == b else a > b);\nloop invariant i16: 0 <= a <= b;\nloop invariant i17: i >= 0;\nloop invariant i18: i%2 == 0;\nloop invariant i19: j%2 == 0;\nloop invariant i20: j >= i;\nloop invariant i21: a >= (b - (j - i));\nloop invariant i22: i == 0;\nloop invariant i23: a == b;\nloop invariant i24: 0 <= i <= j;\nloop invariant i25: 1 <= j;\nloop invariant i26: 0 <= a;\nloop invariant i27: 0 <= b;\nloop invariant i28: 0 <= j < 100000;\nloop invariant i29: (if flag then i = 0 else i = 1);\nloop invariant i30: (if flag then j = 1 else j = 2);\nloop invariant i31: (if flag then b >= 0 else b >= 1);\nloop invariant i32: (if flag then a >= 0 else a >= 1);\nloop invariant i33: (if flag then i%2 == 0 else i%2 == 1);\nloop invariant i34: (if flag then j%2 == 1 else j%2 == 0);\nloop invariant i35: 0 <= i <= 1;\nloop invariant i36: j >= 2;\nloop invariant i37: a >= 0;\nloop invariant i38: b >= 0;\nloop invariant i39: a + (i-2)/2 * (2*i + j-1) <= b <= a + i * (2*i + j-1);\nloop invariant i40: i + j - 2 >= 0;\nloop invariant i41: j - i >= 0;\nloop invariant i42: i % 2 == 0 ==> j % 2 == 0;\nloop invariant i43: i % 2 == 1 ==> j % 2 == 1;\nloop invariant i44: a + (i-2)/2 * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant i45: a + (i-2)/2 * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant i46: a + i * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant i47: a + i * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant i48: a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant i49: a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant i50: a + i * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant i51: a + i * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant i52: a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant i53: a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant i54: a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant i55: a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant i56: b == a + (j - i);\nloop invariant i57: j == i + 1;\nloop invariant i58: flag == (i % 2 == 0);\nloop invariant i59: i == (2 * j - 1);\nloop invariant i60: j == (i + 1) / 2;\nloop invariant i61: 0 <= a <= 2147483647;\nloop invariant i62: a <= b <= 2147483647;\nloop invariant i63: b - a >= -1;\nloop invariant i64: b - a <= 1;\nloop invariant i65: j - i >= 2;\nloop invariant i66: j - i <= 3;\nloop invariant i67: j - i == 2 ==> i == 0;\nloop invariant i68: j - i == 3 ==> i == 1;\nloop invariant i69: j - i == 2 ==> j == 2;\nloop invariant i70: j - i == 3 ==> j == 3;\nloop invariant i71: j - i == 2 ==> flag == 1;\nloop invariant i72: j - i == 3 ==> flag == 0;\nloop invariant i73: j - i == 2 ==> a == 0;\nloop invariant i74: j - i == 3 ==> a == 0;\nloop invariant i75: j - i == 2 ==> b == 0;\nloop invariant i76: j - i == 3 ==> b == 1;\nloop invariant i77: 0 <= j <= 3;\nloop invariant i78: (a == b ==> i == 0);\nloop invariant i79: (a == b ==> j == 1);\nloop invariant i80: (a == b ==> flag == 1);\nloop invariant i81: (a == b ==> flag == 0);\nloop invariant i82: (a == b ==> i == 1);\nloop invariant i83: (a == b ==> j == 2);\nloop invariant i84: (i == 0 ==> j == 1);\nloop invariant i85: (i == 0 ==> j == 2);\nloop invariant i86: (i == 0 ==> j == 3);\nloop invariant i87: (i == 1 ==> j == 1);\nloop invariant i88: (i == 1 ==> j == 2);\nloop invariant i89: (i == 1 ==> j == 3);\nloop invariant i90: (i == 2 ==> j == 1);\nloop invariant i91: (i == 2 ==> j == 2);\nloop invariant i92: (i == 2 ==> j == 3);\nloop invariant i93: (i == 0 ==> a == 0);\nloop invariant i94: (i == 0 ==> b == 0);\nloop invariant i95: (i == 1 ==> a == 1);\nloop invariant i96: (i == 1 ==> b == 1);\nloop invariant i97: (i == 2 ==> a == 2);\nloop invariant i98: (i == 2 ==> b == 2);\nloop invariant i99: (i == 0 ==> flag == 1);\nloop invariant i100: (i == 0 ==> flag == 0);\nloop invariant i101: (i == 1 ==> flag == 1);\nloop invariant i102: (i == 1 ==> flag == 0);\nloop invariant i103: (i == 2 ==> flag == 1);\nloop invariant i104: (i == 2 ==> flag == 0);\nloop invariant i105: (flag == 1 ==> i == 0);\nloop invariant i106: (flag == 1 ==> i == 1);\nloop invariant i107: (flag == 1 ==> i == 2);\nloop invariant i108: (flag == 0 ==> i == 0);\nloop invariant i109: (flag == 0 ==> i == 1);\nloop invariant i110: (flag == 0 ==> i == 2);\nloop invariant i111: (flag == 1 ==> j == 1);\nloop invariant i112: (flag == 1 ==> j == 2);\nloop invariant i113: (flag == 1 ==> j == 3);\nloop invariant i114: (flag == 0 ==> j == 1);\nloop invariant i115: (flag == 0 ==> j == 2);\nloop invariant i116: (flag == 0 ==> j == 3);\nloop invariant i117: (flag == 1 ==> flag == 0);\nloop invariant i118: (flag == 1 ==> flag == 1);\nloop invariant i119: (flag == 0 ==> flag == 0);\nloop invariant i120: (flag == 0 ==> flag == 1);\nloop invariant i121: (flag == 1 ==> i == 0 ==> j == 1);\nloop invariant i122: (flag == 1 ==> i == 0 ==> j == 2);\nloop invariant i123: (flag == 1 ==> i == 0 ==> j == 3);\nloop invariant i124: (flag == 1 ==> i == 1 ==> j == 1);\nloop invariant i125: (flag == 1 ==> i == 1 ==> j == 2);\nloop invariant i126: (flag == 1 ==> i == 1 ==> j == 3);\nloop invariant i127: (flag == 1 ==> i == 2 ==> j == 1);\nloop invariant i128: (flag == 1 ==> i == 2 ==> j == 2);\nloop invariant i129: (flag == 1 ==> i == 2 ==> j == 3);\nloop invariant i130: (flag == 0 ==> i == 0 ==> j == 1);\nloop invariant i131: (flag == 0 ==> i == 0 ==> j == 2);\nloop invariant i132: (flag == 0 ==> i == 0 ==> j == 3);\nloop invariant i133: (flag == 0 ==> i == 1 ==> j == 1);\nloop invariant i134: (flag == 0 ==> i == 1 ==> j == 2);\nloop invariant i135: (flag == 0 ==> i == 1 ==> j == 3);\nloop invariant i136: (flag == 0 ==> i == 2 ==> j == 1);\nloop invariant i137: (flag == 0 ==> i == 2 ==> j == 2);\nloop invariant i138: (flag == 0 ==> i == 2 ==> j == 3);\nloop invariant i139: (flag == 1 ==> a == 0 ==> b == 0);\nloop invariant i140: (flag == 1 ==> a == 1 ==> b == 1);\nloop invariant i141: (flag == 1 ==> a == 2 ==> b == 2);\nloop invariant i142: 0 <= i;\nloop invariant i143: if (flag) then i == 0 else i == 1;\nloop invariant i144: j > i;\nloop invariant i145: a == b + (j - i);\nloop invariant i146: j%2 == 1 ==> i%2 == 0;\nloop invariant i147: i%2 == 0 ==> j%2 == 1;\nloop invariant i148: if (flag) then i%2 == 0 else i%2 == 1;\nloop invariant i149: if (flag) then j%2 == 1 else j%2 == 0;\nloop invariant i150: i%2 == 0 && j%2 == 1;\nloop invariant i151: b == (i + 1)*(j - 1)/2;\nloop invariant i152: a >= b + (j - i)*(j - i + 1)/2;\nloop invariant i153: a <= b + (j - i - 1)*(j - i - 2)/2 + 2*(j - i);\nloop invariant i154: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2;\nloop invariant i155: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i156: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2;\nloop invariant i157: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i158: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i159: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i160: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i161: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i162: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i163: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i164: 1 <= j <= 2;\nloop invariant i165: flag ==> a = 1;\nloop invariant i166: !flag ==> a = 0;\nloop invariant i167: b = (i*a);\nloop invariant i168: i%2 == 0 ==> j = (2*i + 1);\nloop invariant i169: i%2 == 1 ==> j = (2*i);\nloop invariant i170: 1 <= j <= 3;\nloop invariant i171: i == 0 || i == 1;\nloop invariant i172: 0 <= j <= unknown_int();\nloop invariant i173: 0 <= a <= unknown_int();\nloop invariant i174: 0 <= b <= unknown_int();\nloop invariant i175: a == b ==> flag == 1;\nloop invariant i176: a != b ==> flag == 0;\nloop invariant i177: i%2 == 0 ==> j%2 == 0;\nloop invariant i178: i%2 == 1 ==> j%2 == 1;\nloop invariant i179: j >= 0;\nloop invariant i180: a <= unknown_int();\nloop invariant i181: b <= unknown_int();\nloop invariant i182: i <= 1;\nloop invariant i183: j <= unknown_int();\nloop invariant i184: j >= 1;\nloop invariant i185: a <= b;\nloop invariant i186: b <= a;\nloop invariant i187: a == b ==> j <= unknown_int();\nloop invariant i188: b <= a ==> j <= unknown_int();\nloop invariant i189: a == b ==> j >= 0;\nloop invariant i190: b <= a ==> j >= 0;\nloop invariant i191: a == b ==> i%2 == 0;\nloop invariant i192: b <= a ==> i%2 == 0;\nloop invariant i193: a == b ==> i >= 0;\nloop invariant i194: b <= a ==> i >= 0;\nloop invariant i195: a == b ==> i <= 1;\nloop invariant i196: b <= a ==> i <= 1;\nloop invariant i197: a == b ==> j%2 == 0;\nloop invariant i198: b <= a ==> j%2 == 0;\nloop invariant i199: a == b ==> j >= 1;\nloop invariant i200: b <= a ==> j >= 1;\nloop invariant i201: a == b ==> j%2 == 1;\nloop invariant i202: b <= a ==> j%2 == 1;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 72,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: i >= 0;\n\n\n\n\n\n\n\n\nloop invariant i26: 0 <= a;\nloop invariant i27: 0 <= b;\n\n\n\n\n\n\n\n\n\nloop invariant i37: a >= 0;\nloop invariant i38: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i118: (flag == 1 ==> flag == 1);\nloop invariant i119: (flag == 0 ==> flag == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i142: 0 <= i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i179: j >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i189: a == b ==> j >= 0;\nloop invariant i190: b <= a ==> j >= 0;\n\n\nloop invariant i193: a == b ==> i >= 0;\nloop invariant i194: b <= a ==> i >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/split.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i + j) == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i - j == n % 2 * k;\nloop invariant j - i == (n + 1) % 2 * k;\nloop invariant i + j + n == k * 2;\nloop invariant i - j + n == (n + 1) % 2 * k;\nloop invariant j - i + n == n % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant j + i == n;\nloop invariant j + i == 2*k;\nloop invariant b == (n % 2 == 0);\nloop invariant j == i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= k;\nloop invariant i + n <= k;\nloop invariant i + j + n <= k;\nloop invariant i - j <= k;\nloop invariant i - j + n <= k;\nloop invariant i + j - n <= k;\nloop invariant i + j + n - k <= k;\nloop invariant i - j - n <= k;\nloop invariant i - j - n + k <= k;\nloop invariant i + j - n + k <= k;\nloop invariant i + j + n - k + k <= k;\nloop invariant i - j - n + k - k <= k;\nloop invariant i - j - n - k <= k;\nloop invariant i + j - n - k <= k;\nloop invariant i + j + n - k - k <= k;\nloop invariant i - j - n - k + k <= k;\nloop invariant i + j - n - k + k <= k;\nloop invariant i + j + n - k - k + k <= k;\nloop invariant i - j - n - k + k - k <= k;\nloop invariant i - j - n - k - k <= k;\nloop invariant i + j - n - k - k <= k;\nloop invariant i + j + n - k - k - k <= k;\nloop invariant i - j - n - k + k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\n*/\n```",
                "```\n/*@\nloop invariant i = j;\nloop invariant k >= 0;\nloop invariant b ∈ {0, 1};\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2*k;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant b == (!b);\nloop invariant i + j == n;\nloop invariant i == j;\nloop invariant n == 2*k;\nloop invariant b == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i == j;\nloop invariant i + j == n;\nloop invariant i == k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant (i + j) == n;\nloop invariant (i == j) ==> (n == 2*i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n % 2 == 1);\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n % 2 == 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j >= n;\nloop invariant i - j <= n;\nloop invariant i + j - n <= k;\nloop invariant i - j + n <= k;\nloop invariant i + j - n + i - j <= k;\nloop invariant i - j + n + i - j <= k;\nloop invariant i + j - n + i - j - i + j <= k;\nloop invariant i - j + n + i - j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= k <= 100;\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant k % 2 == 1 ==> b == (n % 2 == 0);\nloop invariant k % 2 == 0 ==> b == (n % 2 == 1);\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i + j == 2 * k;\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 != 0) ==> (i == j + 1);\nloop invariant (n % 2 == 0) ==> (b == 0);\nloop invariant (n % 2 != 0) ==> (b == 1);\nloop invariant 0 <= n;\nloop invariant n <= 2 * k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 50;\nloop invariant 0 <= j <= 50;\nloop invariant i + j == n;\nloop invariant i == j ==> b == true;\nloop invariant i != j ==> b == false;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j = n;\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i + j) == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant i >= 0 is preserved but not established.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant (i + j) == n is preserved but not established.\nloop invariant b ==> i == j is established but not preserved.\nloop invariant !b ==> i == j is established but not preserved.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i - j == n % 2 * k;\nloop invariant j - i == (n + 1) % 2 * k;\nloop invariant i + j + n == k * 2;\nloop invariant i - j + n == (n + 1) % 2 * k;\nloop invariant j - i + n == n % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 100 is preserved but not established.\nloop invariant 1 <= j <= 100 is partially proven to be inductive.\nloop invariant i + j == k is preserved but not established.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i - j == n % 2 * k is partially proven to be inductive.\nloop invariant j - i == (n + 1) % 2 * k is preserved but not established.\nloop invariant i + j + n == k * 2 is partially proven to be inductive.\nloop invariant i - j + n == (n + 1) % 2 * k is partially proven to be inductive.\nloop invariant j - i + n == n % 2 * k is partially proven to be inductive.\nloop invariant n % 2 * k + i + j == k * 2 is partially proven to be inductive.\nloop invariant (n + 1) % 2 * k + i + j == k * 2 is partially proven to be inductive.\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k is partially proven to be inductive.\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k is partially proven to be inductive.\nloop invariant n % 2 * k + j - i == n % 2 * k is partially proven to be inductive.\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= k is preserved but not established.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant b == (n % 2 == 0) is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n < 2*k is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i == k - j is preserved but not established.\nloop invariant j == k - i is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\nloop invariant i5: n >= 0;\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant j + i == n;\nloop invariant j + i == 2*k;\nloop invariant b == (n % 2 == 0);\nloop invariant j == i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= k is preserved but not established.\nloop invariant 0 <= i <= k is partially proven to be inductive.\nloop invariant j + i == n is preserved but not established.\nloop invariant j + i == 2*k is preserved but not established.\nloop invariant b == (n % 2 == 0) is partially proven to be inductive.\nloop invariant j == i is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= k;\nloop invariant i + n <= k;\nloop invariant i + j + n <= k;\nloop invariant i - j <= k;\nloop invariant i - j + n <= k;\nloop invariant i + j - n <= k;\nloop invariant i + j + n - k <= k;\nloop invariant i - j - n <= k;\nloop invariant i - j - n + k <= k;\nloop invariant i + j - n + k <= k;\nloop invariant i + j + n - k + k <= k;\nloop invariant i - j - n + k - k <= k;\nloop invariant i - j - n - k <= k;\nloop invariant i + j - n - k <= k;\nloop invariant i + j + n - k - k <= k;\nloop invariant i - j - n - k + k <= k;\nloop invariant i + j - n - k + k <= k;\nloop invariant i + j + n - k - k + k <= k;\nloop invariant i - j - n - k + k - k <= k;\nloop invariant i - j - n - k - k <= k;\nloop invariant i + j - n - k - k <= k;\nloop invariant i + j + n - k - k - k <= k;\nloop invariant i - j - n - k + k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= k is preserved but not established.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant i + j <= k is preserved but not established.\nloop invariant i + n <= k is established but not preserved.\nloop invariant i + j + n <= k is established but not preserved.\nloop invariant i - j <= k is partially proven to be inductive.\nloop invariant i - j + n <= k is partially proven to be inductive.\nloop invariant i + j - n <= k is partially proven to be inductive.\nloop invariant i + j + n - k <= k is partially proven to be inductive.\nloop invariant i - j - n <= k is partially proven to be inductive.\nloop invariant i - j - n + k <= k is partially proven to be inductive.\nloop invariant i + j - n + k <= k is preserved but not established.\nloop invariant i + j + n - k + k <= k is partially proven to be inductive.\nloop invariant i - j - n + k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k <= k is partially proven to be inductive.\nloop invariant i + j - n - k <= k is partially proven to be inductive.\nloop invariant i + j + n - k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k <= k is partially proven to be inductive.\nloop invariant i + j - n - k + k <= k is partially proven to be inductive.\nloop invariant i + j + n - k - k + k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k - k <= k is partially proven to be inductive.\nloop invariant i + j - n - k - k <= k is partially proven to be inductive.\nloop invariant i + j + n - k - k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k - k + k <= k is partially proven to be inductive.\nloop invariant i - j - n - k - k + k <= k is partially proven to be inductive.\nloop invariant i + j - n - k - k + k <= k is partially proven to be inductive.\nloop invariant i + j + n - k - k - k + k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k - k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k - k - k + k <= k is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: i - j - n <= k;\nloop invariant i11: i - j - n + k <= k;\n\n\nloop invariant i14: i - j - n + k - k <= k;\nloop invariant i15: i - j - n - k <= k;\n\n\nloop invariant i18: i - j - n - k + k <= k;\n\n\nloop invariant i21: i - j - n - k + k - k <= k;\nloop invariant i22: i - j - n - k - k <= k;\n\n\nloop invariant i25: i - j - n - k + k - k + k <= k;\nloop invariant i26: i - j - n - k - k + k <= k;\n\n\nloop invariant i29: i - j - n - k + k - k - k <= k;\nloop invariant i30: i - j - n - k + k - k - k + k <= k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant i = j;\nloop invariant k >= 0;\nloop invariant b ∈ {0, 1};\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2*k;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant b == (!b);\nloop invariant i + j == n;\nloop invariant i == j;\nloop invariant n == 2*k;\nloop invariant b == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\nloop invariant i2: k >= 0;\n\nloop invariant i4: n >= 0;\n\n\nloop invariant i7: n <= 2*k;\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i == j;\nloop invariant i + j == n;\nloop invariant i == k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= k is preserved but not established.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant i == k is preserved but not established.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant (i + j) == n;\nloop invariant (i == j) ==> (n == 2*i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is neither established nor preserved.\nloop invariant 0 <= j <= 100 is established but not preserved.\nloop invariant (i + j) == n is preserved but not established.\nloop invariant (i == j) ==> (n == 2*i) is partially proven to be inductive.\nAssertion i == j: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n % 2 == 1);\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n % 2 == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= k is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant (i == j) ==> (n % 2 == 0) is partially proven to be inductive.\nloop invariant (i == j) ==> (n % 2 == 1) is preserved but not established.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j >= n;\nloop invariant i - j <= n;\nloop invariant i + j - n <= k;\nloop invariant i - j + n <= k;\nloop invariant i + j - n + i - j <= k;\nloop invariant i - j + n + i - j <= k;\nloop invariant i + j - n + i - j - i + j <= k;\nloop invariant i - j + n + i - j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant i >= 0 is preserved but not established.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i <= k is neither established nor preserved.\nloop invariant j <= k is established but not preserved.\nloop invariant i + j >= n is partially proven to be inductive.\nloop invariant i - j <= n is partially proven to be inductive.\nloop invariant i + j - n <= k is preserved but not established.\nloop invariant i - j + n <= k is established but not preserved.\nloop invariant i + j - n + i - j <= k is established but not preserved.\nloop invariant i - j + n + i - j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j <= k is partially proven to be inductive.\nloop invariant i - j + n + i - j - i + j <= k is partially proven to be inductive.\nloop invariant i + j - n + i - j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n\n\nloop invariant i7: i - j <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= k <= 100;\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant k % 2 == 1 ==> b == (n % 2 == 0);\nloop invariant k % 2 == 0 ==> b == (n % 2 == 1);\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= k <= 100 is partially proven to be inductive.\nloop invariant 0 <= i <= 100 is preserved but not established.\nloop invariant 0 <= j <= 100 is partially proven to be inductive.\nloop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant k % 2 == 1 ==> b == (n % 2 == 0) is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> b == (n % 2 == 1) is preserved but not established.\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1) is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1) is preserved but not established.\nloop invariant k % 2 == 1 ==> j == (n / 2) is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> i == (n / 2) is partially proven to be inductive.\nloop invariant k % 2 == 1 ==> i >= j is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> j >= i is partially proven to be inductive.\nloop invariant k % 2 == 1 ==> i == j is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> i != j is partially proven to be inductive.\nloop invariant k % 2 == 1 ==> i != j is partially proven to be inductive.\nloop invariant k % 2 == 1 ==> i + j == n is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> i + j == n is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 1 <= k <= 100;\n\n\nloop invariant i4: 0 <= n <= 2*k;\n\nloop invariant i6: k % 2 == 1 ==> b == (n % 2 == 0);\n\nloop invariant i8: k % 2 == 1 ==> i == (n / 2 + 1);\n\nloop invariant i10: k % 2 == 1 ==> j == (n / 2);\n\nloop invariant i12: k % 2 == 1 ==> i >= j;\n\nloop invariant i14: k % 2 == 1 ==> i == j;\n\nloop invariant i16: k % 2 == 1 ==> i != j;\nloop invariant i17: k % 2 == 1 ==> i + j == n;\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= k is preserved but not established.\nloop invariant 0 <= j <= k is established but not preserved.\nloop invariant i + j == n is preserved but not established.\nloop invariant i <= j is established but not preserved.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i + j == 2 * k;\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 != 0) ==> (i == j + 1);\nloop invariant (n % 2 == 0) ==> (b == 0);\nloop invariant (n % 2 != 0) ==> (b == 1);\nloop invariant 0 <= n;\nloop invariant n <= 2 * k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i is preserved but not established.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant i + j == 2 * k is neither established nor preserved.\nloop invariant (n % 2 == 0) ==> (i == j) is partially proven to be inductive.\nloop invariant (n % 2 != 0) ==> (i == j + 1) is partially proven to be inductive.\nloop invariant (n % 2 == 0) ==> (b == 0) is preserved but not established.\nloop invariant (n % 2 != 0) ==> (b == 1) is partially proven to be inductive.\nloop invariant 0 <= n is partially proven to be inductive.\nloop invariant n <= 2 * k is partially proven to be inductive.\nAssertion i == j: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: 0 <= n;\nloop invariant i9: n <= 2 * k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 50;\nloop invariant 0 <= j <= 50;\nloop invariant i + j == n;\nloop invariant i == j ==> b == true;\nloop invariant i != j ==> b == false;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable true. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j = n;\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\nloop invariant i4: (i > j) ==> ((i + k) >= j);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 77: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: (i + j) == n;\nloop invariant i5: b ==> i == j;\nloop invariant i6: !b ==> i == j;\nloop invariant i7: 1 <= i <= 100;\nloop invariant i8: 1 <= j <= 100;\nloop invariant i9: i + j == k;\nloop invariant i10: i >= j;\nloop invariant i11: j >= i;\nloop invariant i12: i - j == n % 2 * k;\nloop invariant i13: j - i == (n + 1) % 2 * k;\nloop invariant i14: i + j + n == k * 2;\nloop invariant i15: i - j + n == (n + 1) % 2 * k;\nloop invariant i16: j - i + n == n % 2 * k;\nloop invariant i17: n % 2 * k + i + j == k * 2;\nloop invariant i18: (n + 1) % 2 * k + i + j == k * 2;\nloop invariant i19: n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant i20: (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant i21: n % 2 * k + j - i == n % 2 * k;\nloop invariant i22: (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant i23: 0 <= i <= k;\nloop invariant i24: 0 <= j <= k;\nloop invariant i25: i + j == n;\nloop invariant i26: b == (n % 2 == 0);\nloop invariant i27: n >= 0;\nloop invariant i28: n < 2*k;\nloop invariant i29: i == j;\nloop invariant i30: i == k - j;\nloop invariant i31: j == k - i;\nloop invariant i32: j + i == n;\nloop invariant i33: j + i == 2*k;\nloop invariant i34: j == i;\nloop invariant i35: i + j <= k;\nloop invariant i36: i + n <= k;\nloop invariant i37: i + j + n <= k;\nloop invariant i38: i - j <= k;\nloop invariant i39: i - j + n <= k;\nloop invariant i40: i + j - n <= k;\nloop invariant i41: i + j + n - k <= k;\nloop invariant i42: i - j - n <= k;\nloop invariant i43: i - j - n + k <= k;\nloop invariant i44: i + j - n + k <= k;\nloop invariant i45: i + j + n - k + k <= k;\nloop invariant i46: i - j - n + k - k <= k;\nloop invariant i47: i - j - n - k <= k;\nloop invariant i48: i + j - n - k <= k;\nloop invariant i49: i + j + n - k - k <= k;\nloop invariant i50: i - j - n - k + k <= k;\nloop invariant i51: i + j - n - k + k <= k;\nloop invariant i52: i + j + n - k - k + k <= k;\nloop invariant i53: i - j - n - k + k - k <= k;\nloop invariant i54: i - j - n - k - k <= k;\nloop invariant i55: i + j - n - k - k <= k;\nloop invariant i56: i + j + n - k - k - k <= k;\nloop invariant i57: i - j - n - k + k - k + k <= k;\nloop invariant i58: i - j - n - k - k + k <= k;\nloop invariant i59: i + j - n - k - k + k <= k;\nloop invariant i60: i + j + n - k - k - k + k <= k;\nloop invariant i61: i - j - n - k + k - k - k <= k;\nloop invariant i62: i - j - n - k + k - k - k + k <= k;\nloop invariant i63: i = j;\nloop invariant i64: k >= 0;\nloop invariant i65: b ∈ {0, 1};\nloop invariant i66: n <= 2*k;\nloop invariant i67: i <= n;\nloop invariant i68: j <= n;\nloop invariant i69: b == (!b);\nloop invariant i70: n == 2*k;\nloop invariant i71: b == 1;\nloop invariant i72: i == k;\nloop invariant i73: 0 <= i <= 100;\nloop invariant i74: 0 <= j <= 100;\nloop invariant i75: (i == j) ==> (n == 2*i);\nloop invariant i76: (i == j) ==> (n % 2 == 0);\nloop invariant i77: (i == j) ==> (n % 2 == 1);\nloop invariant i78: i <= k;\nloop invariant i79: j <= k;\nloop invariant i80: i + j >= n;\nloop invariant i81: i - j <= n;\nloop invariant i82: i + j - n + i - j <= k;\nloop invariant i83: i - j + n + i - j <= k;\nloop invariant i84: i + j - n + i - j - i + j <= k;\nloop invariant i85: i - j + n + i - j - i + j <= k;\nloop invariant i86: i + j - n + i - j - i + j - i + j <= k;\nloop invariant i87: i - j + n + i - j - i + j - i + j <= k;\nloop invariant i88: i + j - n + i - j - i + j - i + j - i + j <= k;\nloop invariant i89: i - j + n + i - j - i + j - i + j - i + j <= k;\nloop invariant i90: i + j - n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i91: i - j + n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i92: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i93: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i94: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i95: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i96: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i97: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i98: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i99: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i100: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i101: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i102: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i103: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i104: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i105: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i106: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i107: 1 <= k <= 100;\nloop invariant i108: k % 2 == 1 ==> b == (n % 2 == 0);\nloop invariant i109: k % 2 == 0 ==> b == (n % 2 == 1);\nloop invariant i110: k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant i111: k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant i112: k % 2 == 1 ==> j == (n / 2);\nloop invariant i113: k % 2 == 0 ==> i == (n / 2);\nloop invariant i114: k % 2 == 1 ==> i >= j;\nloop invariant i115: k % 2 == 0 ==> j >= i;\nloop invariant i116: k % 2 == 1 ==> i == j;\nloop invariant i117: k % 2 == 0 ==> i != j;\nloop invariant i118: k % 2 == 1 ==> i != j;\nloop invariant i119: k % 2 == 1 ==> i + j == n;\nloop invariant i120: k % 2 == 0 ==> i + j == n;\nloop invariant i121: i <= j;\nloop invariant i122: 0 <= i;\nloop invariant i123: 0 <= j;\nloop invariant i124: i + j == 2 * k;\nloop invariant i125: (n % 2 == 0) ==> (i == j);\nloop invariant i126: (n % 2 != 0) ==> (i == j + 1);\nloop invariant i127: (n % 2 == 0) ==> (b == 0);\nloop invariant i128: (n % 2 != 0) ==> (b == 1);\nloop invariant i129: 0 <= n;\nloop invariant i130: n <= 2 * k;\nloop invariant i131: 0 <= i <= 50;\nloop invariant i132: 0 <= j <= 50;\nloop invariant i133: i == j ==> b == true;\nloop invariant i134: i != j ==> b == false;\nloop invariant i135: i + j = n;\nloop invariant i136: (i <= j) ==> ((i + k) < j);\nloop invariant i137: (i > j) ==> ((i + k) >= j);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
            "combined_annotation_num_solver_calls": 33,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i27: n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i42: i - j - n <= k;\nloop invariant i43: i - j - n + k <= k;\n\n\nloop invariant i46: i - j - n + k - k <= k;\nloop invariant i47: i - j - n - k <= k;\n\n\nloop invariant i50: i - j - n - k + k <= k;\n\n\nloop invariant i53: i - j - n - k + k - k <= k;\nloop invariant i54: i - j - n - k - k <= k;\n\n\nloop invariant i57: i - j - n - k + k - k + k <= k;\nloop invariant i58: i - j - n - k - k + k <= k;\n\n\nloop invariant i61: i - j - n - k + k - k - k <= k;\nloop invariant i62: i - j - n - k + k - k - k + k <= k;\n\nloop invariant i64: k >= 0;\n\nloop invariant i66: n <= 2*k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i81: i - j <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i107: 1 <= k <= 100;\nloop invariant i108: k % 2 == 1 ==> b == (n % 2 == 0);\n\nloop invariant i110: k % 2 == 1 ==> i == (n / 2 + 1);\n\nloop invariant i112: k % 2 == 1 ==> j == (n / 2);\n\nloop invariant i114: k % 2 == 1 ==> i >= j;\n\nloop invariant i116: k % 2 == 1 ==> i == j;\n\nloop invariant i118: k % 2 == 1 ==> i != j;\nloop invariant i119: k % 2 == 1 ==> i + j == n;\n\n\n\n\n\n\n\n\n\nloop invariant i129: 0 <= n;\nloop invariant i130: n <= 2 * k;\n\n\n\n\n\n\nloop invariant i137: (i > j) ==> ((i + k) >= j);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
            "checker_output_after_prune": false
        }
    ],
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/105.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/123.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/split.c"
        ],
        "skipped": [],
        "total": 28,
        "success_count": 5,
        "failure_count": 23,
        "success_rate": 0.17857142857142858
    }
}