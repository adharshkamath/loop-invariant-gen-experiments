{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= a <= 100000;\nloop invariant 0 <= b <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant 0 <= i <= 100000;\nloop invariant a >= b;\nloop invariant i >= j;\nloop invariant i%2 == j%2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= a <= 1;\nloop invariant 0 <= b <= 3;\nloop invariant a == (b - j + i);\nloop invariant (i%2 == 0 ==> j == i + 1) && (i%2 != 0 ==> j == i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 3;\nloop invariant 0 <= b <= 3;\nloop invariant (if flag then a == b else a > b);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= j <= 100000;\nloop invariant i >= 0;\nloop invariant i%2 == 0;\nloop invariant j%2 == 0;\nloop invariant j >= i;\nloop invariant a >= (b - (j - i));\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant a == b;\nloop invariant 0 <= i <= j;\nloop invariant 1 <= j;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j < 100000;\nloop invariant a >= b;\nloop invariant (if flag then i = 0 else i = 1);\nloop invariant (if flag then j = 1 else j = 2);\nloop invariant (if flag then b >= 0 else b >= 1);\nloop invariant (if flag then a >= 0 else a >= 1);\nloop invariant (if flag then i%2 == 0 else i%2 == 1);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant j >= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) <= b <= a + i * (2*i + j-1);\nloop invariant i + j - 2 >= 0;\nloop invariant j - i >= 0;\nloop invariant i % 2 == 0 ==> j % 2 == 0;\nloop invariant i % 2 == 1 ==> j % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant b == a + (j - i);\nloop invariant j == i + 1;\nloop invariant flag == (i % 2 == 0);\nloop invariant i == (2 * j - 1);\nloop invariant j == (i + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant a <= b <= 2147483647;\nloop invariant b - a >= -1;\nloop invariant b - a <= 1;\nloop invariant j >= 2;\nloop invariant j - i >= 2;\nloop invariant j - i <= 3;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 3;\nloop invariant 0 <= a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant (a == b ==> i == 0);\nloop invariant (a == b ==> j == 1);\nloop invariant (a == b ==> flag == 1);\nloop invariant (a == b ==> flag == 0);\nloop invariant (a == b ==> i == 1);\nloop invariant (a == b ==> j == 2);\nloop invariant (a == b ==> flag == 1);\nloop invariant (a == b ==> flag == 0);\nloop invariant (i == 0 ==> j == 1);\nloop invariant (i == 0 ==> j == 2);\nloop invariant (i == 0 ==> j == 3);\nloop invariant (i == 1 ==> j == 1);\nloop invariant (i == 1 ==> j == 2);\nloop invariant (i == 1 ==> j == 3);\nloop invariant (i == 2 ==> j == 1);\nloop invariant (i == 2 ==> j == 2);\nloop invariant (i == 2 ==> j == 3);\nloop invariant (i == 0 ==> a == 0);\nloop invariant (i == 0 ==> b == 0);\nloop invariant (i == 1 ==> a == 1);\nloop invariant (i == 1 ==> b == 1);\nloop invariant (i == 2 ==> a == 2);\nloop invariant (i == 2 ==> b == 2);\nloop invariant (i == 0 ==> flag == 1);\nloop invariant (i == 0 ==> flag == 0);\nloop invariant (i == 1 ==> flag == 1);\nloop invariant (i == 1 ==> flag == 0);\nloop invariant (i == 2 ==> flag == 1);\nloop invariant (i == 2 ==> flag == 0);\nloop invariant (flag == 1 ==> i == 0);\nloop invariant (flag == 1 ==> i == 1);\nloop invariant (flag == 1 ==> i == 2);\nloop invariant (flag == 0 ==> i == 0);\nloop invariant (flag == 0 ==> i == 1);\nloop invariant (flag == 0 ==> i == 2);\nloop invariant (flag == 1 ==> j == 1);\nloop invariant (flag == 1 ==> j == 2);\nloop invariant (flag == 1 ==> j == 3);\nloop invariant (flag == 0 ==> j == 1);\nloop invariant (flag == 0 ==> j == 2);\nloop invariant (flag == 0 ==> j == 3);\nloop invariant (flag == 1 ==> flag == 0);\nloop invariant (flag == 1 ==> flag == 1);\nloop invariant (flag == 0 ==> flag == 0);\nloop invariant (flag == 0 ==> flag == 1);\nloop invariant (flag == 1 ==> i == 0 ==> j == 1);\nloop invariant (flag == 1 ==> i == 0 ==> j == 2);\nloop invariant (flag == 1 ==> i == 0 ==> j == 3);\nloop invariant (flag == 1 ==> i == 1 ==> j == 1);\nloop invariant (flag == 1 ==> i == 1 ==> j == 2);\nloop invariant (flag == 1 ==> i == 1 ==> j == 3);\nloop invariant (flag == 1 ==> i == 2 ==> j == 1);\nloop invariant (flag == 1 ==> i == 2 ==> j == 2);\nloop invariant (flag == 1 ==> i == 2 ==> j == 3);\nloop invariant (flag == 0 ==> i == 0 ==> j == 1);\nloop invariant (flag == 0 ==> i == 0 ==> j == 2);\nloop invariant (flag == 0 ==> i == 0 ==> j == 3);\nloop invariant (flag == 0 ==> i == 1 ==> j == 1);\nloop invariant (flag == 0 ==> i == 1 ==> j == 2);\nloop invariant (flag == 0 ==> i == 1 ==> j == 3);\nloop invariant (flag == 0 ==> i == 2 ==> j == 1);\nloop invariant (flag == 0 ==> i == 2 ==> j == 2);\nloop invariant (flag == 0 ==> i == 2 ==> j == 3);\nloop invariant (flag == 1 ==> a == 0 ==> b == 0);\nloop invariant (flag == 1 ==> a == 1 ==> b == 1);\nloop invariant (flag == 1 ==> a == 2 ==> b == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant if (flag) then i == 0 else i == 1;\nloop invariant j > i;\nloop invariant a == b + (j - i);\nloop invariant j%2 == 1 ==> i%2 == 0;\nloop invariant i%2 == 0 ==> j%2 == 1;\nloop invariant if (flag) then i%2 == 0 else i%2 == 1;\nloop invariant if (flag) then j%2 == 1 else j%2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant a >= b;\nloop invariant i%2 == 0 && j%2 == 1;\nloop invariant b == (i + 1)*(j - 1)/2;\nloop invariant a >= b + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + 2*(j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= 2;\nloop invariant flag ==> a = 1;\nloop invariant !flag ==> a = 0;\nloop invariant b = (i*a);\nloop invariant i%2 == 0 ==> j = (2*i + 1);\nloop invariant i%2 == 1 ==> j = (2*i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 1 <= j <= 3;\nloop invariant i == 0 || i == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= unknown_int();\nloop invariant 0 <= a <= unknown_int();\nloop invariant 0 <= b <= unknown_int();\nloop invariant a == b ==> flag == 1;\nloop invariant a != b ==> flag == 0;\nloop invariant i%2 == 0 ==> j%2 == 0;\nloop invariant i%2 == 1 ==> j%2 == 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant j >= 0;\nloop invariant a <= unknown_int();\nloop invariant b <= unknown_int();\nloop invariant i <= 1;\nloop invariant j <= unknown_int();\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant a <= b;\nloop invariant b <= a;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> i%2 == 0;\nloop invariant b <= a ==> i%2 == 0;\nloop invariant a == b ==> i >= 0;\nloop invariant b <= a ==> i >= 0;\nloop invariant a == b ==> i <= 1;\nloop invariant b <= a ==> i <= 1;\nloop invariant a == b ==> j%2 == 0;\nloop invariant b <= a ==> j%2 == 0;\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 100000;\nloop invariant 0 <= b <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant 0 <= i <= 100000;\nloop invariant a >= b;\nloop invariant i >= j;\nloop invariant i%2 == j%2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a <= 100000 is established but not preserved.\nloop invariant 0 <= b <= 100000 is established but not preserved.\nloop invariant 0 <= j <= 100000 is established but not preserved.\nloop invariant 0 <= i <= 100000 is established but not preserved.\nloop invariant a >= b is established but not preserved.\nloop invariant i >= j is preserved but not established.\nloop invariant i%2 == j%2 is established but not preserved.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 2;\nloop invariant 0 <= a <= 1;\nloop invariant 0 <= b <= 3;\nloop invariant a == (b - j + i);\nloop invariant (i%2 == 0 ==> j == i + 1) && (i%2 != 0 ==> j == i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is established but not preserved.\nloop invariant 0 <= j <= 2 is established but not preserved.\nloop invariant 0 <= a <= 1 is partially proven to be inductive.\nloop invariant 0 <= b <= 3 is partially proven to be inductive.\nloop invariant a == (b - j + i) is preserved but not established.\nloop invariant (i%2 == 0 ==> j == i + 1) && (i%2 != 0 ==> j == i) is partially proven to be inductive.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 3;\nloop invariant 0 <= b <= 3;\nloop invariant (if flag then a == b else a > b);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unexpected token 'flag'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant 0 <= j <= 100000;\nloop invariant i >= 0;\nloop invariant i%2 == 0;\nloop invariant j%2 == 0;\nloop invariant j >= i;\nloop invariant a >= (b - (j - i));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a <= b is partially proven to be inductive.\nloop invariant 0 <= j <= 100000 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i%2 == 0 is preserved but not established.\nloop invariant j%2 == 0 is preserved but not established.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant a >= (b - (j - i)) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: i >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant a == b;\nloop invariant 0 <= i <= j;\nloop invariant 1 <= j;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is neither established nor preserved.\nloop invariant a == b is partially proven to be inductive.\nloop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant 1 <= j is partially proven to be inductive.\nloop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\nloop invariant i5: 0 <= a;\nloop invariant i6: 0 <= b;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j < 100000;\nloop invariant a >= b;\nloop invariant (if flag then i = 0 else i = 1);\nloop invariant (if flag then j = 1 else j = 2);\nloop invariant (if flag then b >= 0 else b >= 1);\nloop invariant (if flag then a >= 0 else a >= 1);\nloop invariant (if flag then i%2 == 0 else i%2 == 1);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\nloop invariant (if flag then j%2 == 1 else j%2 == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 25: unexpected token 'flag'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant j >= 2;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) <= b <= a + i * (2*i + j-1);\nloop invariant i + j - 2 >= 0;\nloop invariant j - i >= 0;\nloop invariant i % 2 == 0 ==> j % 2 == 0;\nloop invariant i % 2 == 1 ==> j % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant j >= 2 is preserved but not established.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) <= b <= a + i * (2*i + j-1) is partially proven to be inductive.\nloop invariant i + j - 2 >= 0 is partially proven to be inductive.\nloop invariant j - i >= 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> j % 2 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> j % 2 == 1 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> j % 2 == 0 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> j % 2 == 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 1 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 0 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> a % 2 == 1 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0 is partially proven to be inductive.\nloop invariant a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0 is partially proven to be inductive.\nloop invariant a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= b;\nloop invariant b == a + (j - i);\nloop invariant j == i + 1;\nloop invariant flag == (i % 2 == 0);\nloop invariant i == (2 * j - 1);\nloop invariant j == (i + 1) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a <= b is partially proven to be inductive.\nloop invariant b == a + (j - i) is preserved but not established.\nloop invariant j == i + 1 is preserved but not established.\nloop invariant flag == (i % 2 == 0) is partially proven to be inductive.\nloop invariant i == (2 * j - 1) is partially proven to be inductive.\nloop invariant j == (i + 1) / 2 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2147483647;\nloop invariant a <= b <= 2147483647;\nloop invariant b - a >= -1;\nloop invariant b - a <= 1;\nloop invariant j >= 2;\nloop invariant j - i >= 2;\nloop invariant j - i <= 3;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\nloop invariant j - i == 3 ==> flag == 0;\nloop invariant j - i == 2 ==> a == 0;\nloop invariant j - i == 3 ==> a == 0;\nloop invariant j - i == 2 ==> b == 0;\nloop invariant j - i == 3 ==> b == 1;\nloop invariant j - i == 2 ==> i == 0;\nloop invariant j - i == 3 ==> i == 1;\nloop invariant j - i == 2 ==> j == 2;\nloop invariant j - i == 3 ==> j == 3;\nloop invariant j - i == 2 ==> flag == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a <= 2147483647 is partially proven to be inductive.\nloop invariant a <= b <= 2147483647 is partially proven to be inductive.\nloop invariant b - a >= -1 is partially proven to be inductive.\nloop invariant b - a <= 1 is partially proven to be inductive.\nloop invariant j >= 2 is preserved but not established.\nloop invariant j - i >= 2 is partially proven to be inductive.\nloop invariant j - i <= 3 is partially proven to be inductive.\nloop invariant j - i == 2 ==> i == 0 is partially proven to be inductive.\nloop invariant j - i == 3 ==> i == 1 is partially proven to be inductive.\nloop invariant j - i == 2 ==> j == 2 is partially proven to be inductive.\nloop invariant j - i == 3 ==> j == 3 is partially proven to be inductive.\nloop invariant j - i == 2 ==> flag == 1 is partially proven to be inductive.\nloop invariant j - i == 3 ==> flag == 0 is partially proven to be inductive.\nloop invariant j - i == 2 ==> a == 0 is partially proven to be inductive.\nloop invariant j - i == 3 ==> a == 0 is partially proven to be inductive.\nloop invariant j - i == 2 ==> b == 0 is partially proven to be inductive.\nloop invariant j - i == 3 ==> b == 1 is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= j <= 3;\nloop invariant 0 <= a <= b;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant (a == b ==> i == 0);\nloop invariant (a == b ==> j == 1);\nloop invariant (a == b ==> flag == 1);\nloop invariant (a == b ==> flag == 0);\nloop invariant (a == b ==> i == 1);\nloop invariant (a == b ==> j == 2);\nloop invariant (a == b ==> flag == 1);\nloop invariant (a == b ==> flag == 0);\nloop invariant (i == 0 ==> j == 1);\nloop invariant (i == 0 ==> j == 2);\nloop invariant (i == 0 ==> j == 3);\nloop invariant (i == 1 ==> j == 1);\nloop invariant (i == 1 ==> j == 2);\nloop invariant (i == 1 ==> j == 3);\nloop invariant (i == 2 ==> j == 1);\nloop invariant (i == 2 ==> j == 2);\nloop invariant (i == 2 ==> j == 3);\nloop invariant (i == 0 ==> a == 0);\nloop invariant (i == 0 ==> b == 0);\nloop invariant (i == 1 ==> a == 1);\nloop invariant (i == 1 ==> b == 1);\nloop invariant (i == 2 ==> a == 2);\nloop invariant (i == 2 ==> b == 2);\nloop invariant (i == 0 ==> flag == 1);\nloop invariant (i == 0 ==> flag == 0);\nloop invariant (i == 1 ==> flag == 1);\nloop invariant (i == 1 ==> flag == 0);\nloop invariant (i == 2 ==> flag == 1);\nloop invariant (i == 2 ==> flag == 0);\nloop invariant (flag == 1 ==> i == 0);\nloop invariant (flag == 1 ==> i == 1);\nloop invariant (flag == 1 ==> i == 2);\nloop invariant (flag == 0 ==> i == 0);\nloop invariant (flag == 0 ==> i == 1);\nloop invariant (flag == 0 ==> i == 2);\nloop invariant (flag == 1 ==> j == 1);\nloop invariant (flag == 1 ==> j == 2);\nloop invariant (flag == 1 ==> j == 3);\nloop invariant (flag == 0 ==> j == 1);\nloop invariant (flag == 0 ==> j == 2);\nloop invariant (flag == 0 ==> j == 3);\nloop invariant (flag == 1 ==> flag == 0);\nloop invariant (flag == 1 ==> flag == 1);\nloop invariant (flag == 0 ==> flag == 0);\nloop invariant (flag == 0 ==> flag == 1);\nloop invariant (flag == 1 ==> i == 0 ==> j == 1);\nloop invariant (flag == 1 ==> i == 0 ==> j == 2);\nloop invariant (flag == 1 ==> i == 0 ==> j == 3);\nloop invariant (flag == 1 ==> i == 1 ==> j == 1);\nloop invariant (flag == 1 ==> i == 1 ==> j == 2);\nloop invariant (flag == 1 ==> i == 1 ==> j == 3);\nloop invariant (flag == 1 ==> i == 2 ==> j == 1);\nloop invariant (flag == 1 ==> i == 2 ==> j == 2);\nloop invariant (flag == 1 ==> i == 2 ==> j == 3);\nloop invariant (flag == 0 ==> i == 0 ==> j == 1);\nloop invariant (flag == 0 ==> i == 0 ==> j == 2);\nloop invariant (flag == 0 ==> i == 0 ==> j == 3);\nloop invariant (flag == 0 ==> i == 1 ==> j == 1);\nloop invariant (flag == 0 ==> i == 1 ==> j == 2);\nloop invariant (flag == 0 ==> i == 1 ==> j == 3);\nloop invariant (flag == 0 ==> i == 2 ==> j == 1);\nloop invariant (flag == 0 ==> i == 2 ==> j == 2);\nloop invariant (flag == 0 ==> i == 2 ==> j == 3);\nloop invariant (flag == 1 ==> a == 0 ==> b == 0);\nloop invariant (flag == 1 ==> a == 1 ==> b == 1);\nloop invariant (flag == 1 ==> a == 2 ==> b == 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 is partially proven to be inductive.\nloop invariant 0 <= j <= 3 is partially proven to be inductive.\nloop invariant 0 <= a <= b is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant b >= 0 is partially proven to be inductive.\nloop invariant (a == b ==> i == 0) is preserved but not established.\nloop invariant (a == b ==> j == 1) is partially proven to be inductive.\nloop invariant (a == b ==> flag == 1) is preserved but not established.\nloop invariant (a == b ==> flag == 0) is preserved but not established.\nloop invariant (a == b ==> i == 1) is partially proven to be inductive.\nloop invariant (a == b ==> j == 2) is partially proven to be inductive.\nloop invariant (i == 0 ==> j == 1) is partially proven to be inductive.\nloop invariant (i == 0 ==> j == 2) is partially proven to be inductive.\nloop invariant (i == 0 ==> j == 3) is partially proven to be inductive.\nloop invariant (i == 1 ==> j == 1) is partially proven to be inductive.\nloop invariant (i == 1 ==> j == 2) is partially proven to be inductive.\nloop invariant (i == 1 ==> j == 3) is partially proven to be inductive.\nloop invariant (i == 2 ==> j == 1) is partially proven to be inductive.\nloop invariant (i == 2 ==> j == 2) is partially proven to be inductive.\nloop invariant (i == 2 ==> j == 3) is partially proven to be inductive.\nloop invariant (i == 0 ==> a == 0) is partially proven to be inductive.\nloop invariant (i == 0 ==> b == 0) is partially proven to be inductive.\nloop invariant (i == 1 ==> a == 1) is partially proven to be inductive.\nloop invariant (i == 1 ==> b == 1) is partially proven to be inductive.\nloop invariant (i == 2 ==> a == 2) is partially proven to be inductive.\nloop invariant (i == 2 ==> b == 2) is partially proven to be inductive.\nloop invariant (i == 0 ==> flag == 1) is partially proven to be inductive.\nloop invariant (i == 0 ==> flag == 0) is partially proven to be inductive.\nloop invariant (i == 1 ==> flag == 1) is partially proven to be inductive.\nloop invariant (i == 1 ==> flag == 0) is partially proven to be inductive.\nloop invariant (i == 2 ==> flag == 1) is partially proven to be inductive.\nloop invariant (i == 2 ==> flag == 0) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 0) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 0) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 0 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 1 ==> flag == 0) is partially proven to be inductive.\nloop invariant (flag == 1 ==> flag == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> flag == 0) is partially proven to be inductive.\nloop invariant (flag == 0 ==> flag == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 0 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 0 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 0 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 1 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 1 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 1 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 2 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 2 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 1 ==> i == 2 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 0 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 0 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 0 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 1 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 1 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 1 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 2 ==> j == 1) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 2 ==> j == 2) is partially proven to be inductive.\nloop invariant (flag == 0 ==> i == 2 ==> j == 3) is partially proven to be inductive.\nloop invariant (flag == 1 ==> a == 0 ==> b == 0) is partially proven to be inductive.\nloop invariant (flag == 1 ==> a == 1 ==> b == 1) is partially proven to be inductive.\nloop invariant (flag == 1 ==> a == 2 ==> b == 2) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\nloop invariant i4: a >= 0;\nloop invariant i5: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: (flag == 1 ==> flag == 1);\nloop invariant i47: (flag == 0 ==> flag == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant if (flag) then i == 0 else i == 1;\nloop invariant j > i;\nloop invariant a == b + (j - i);\nloop invariant j%2 == 1 ==> i%2 == 0;\nloop invariant i%2 == 0 ==> j%2 == 1;\nloop invariant if (flag) then i%2 == 0 else i%2 == 1;\nloop invariant if (flag) then j%2 == 1 else j%2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= i;\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant a >= b;\nloop invariant i%2 == 0 && j%2 == 1;\nloop invariant b == (i + 1)*(j - 1)/2;\nloop invariant a >= b + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + 2*(j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2;\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 100000 is partially proven to be inductive.\nloop invariant 0 <= j <= 100000 is partially proven to be inductive.\nloop invariant a >= b is partially proven to be inductive.\nloop invariant i%2 == 0 && j%2 == 1 is preserved but not established.\nloop invariant b == (i + 1)*(j - 1)/2 is partially proven to be inductive.\nloop invariant a >= b + (j - i)*(j - i + 1)/2 is preserved but not established.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + 2*(j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nloop invariant a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i) is partially proven to be inductive.\nAssertion a == b: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 1 <= j <= 2;\nloop invariant flag ==> a = 1;\nloop invariant !flag ==> a = 0;\nloop invariant b = (i*a);\nloop invariant i%2 == 0 ==> j = (2*i + 1);\nloop invariant i%2 == 1 ==> j = (2*i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 1 <= j <= 3;\nloop invariant i == 0 || i == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant 1 <= j <= 3 is established but not preserved.\nloop invariant i == 0 || i == 1 is established but not preserved.\nAssertion a == b: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= unknown_int();\nloop invariant 0 <= a <= unknown_int();\nloop invariant 0 <= b <= unknown_int();\nloop invariant a == b ==> flag == 1;\nloop invariant a != b ==> flag == 0;\nloop invariant i%2 == 0 ==> j%2 == 0;\nloop invariant i%2 == 1 ==> j%2 == 1;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant j >= 0;\nloop invariant a <= unknown_int();\nloop invariant b <= unknown_int();\nloop invariant i <= 1;\nloop invariant j <= unknown_int();\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant a <= b;\nloop invariant b <= a;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> i%2 == 0;\nloop invariant b <= a ==> i%2 == 0;\nloop invariant a == b ==> i >= 0;\nloop invariant b <= a ==> i >= 0;\nloop invariant a == b ==> i <= 1;\nloop invariant b <= a ==> i <= 1;\nloop invariant a == b ==> j%2 == 0;\nloop invariant b <= a ==> j%2 == 0;\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\nloop invariant a == b ==> j >= 0;\nloop invariant b <= a ==> j >= 0;\nloop invariant a == b ==> j%2 == 1;\nloop invariant b <= a ==> j%2 == 1;\nloop invariant a == b ==> j >= 1;\nloop invariant b <= a ==> j >= 1;\nloop invariant a == b ==> j <= unknown_int();\nloop invariant b <= a ==> j <= unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\nloop invariant i9: a >= 0;\nloop invariant i10: b >= 0;\nloop invariant i11: j >= 0;\n\n\n\n\nloop invariant i16: i >= 0;\n\n\n\n\n\nloop invariant i22: a == b ==> j >= 0;\nloop invariant i23: b <= a ==> j >= 0;\n\n\nloop invariant i26: a == b ==> i >= 0;\nloop invariant i27: b <= a ==> i >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: unexpected token 'flag'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a <= 100000;\nloop invariant i2: 0 <= b <= 100000;\nloop invariant i3: 0 <= j <= 100000;\nloop invariant i4: 0 <= i <= 100000;\nloop invariant i5: a >= b;\nloop invariant i6: i >= j;\nloop invariant i7: i%2 == j%2;\nloop invariant i8: 0 <= i <= 2;\nloop invariant i9: 0 <= j <= 2;\nloop invariant i10: 0 <= a <= 1;\nloop invariant i11: 0 <= b <= 3;\nloop invariant i12: a == (b - j + i);\nloop invariant i13: (i%2 == 0 ==> j == i + 1) && (i%2 != 0 ==> j == i);\nloop invariant i14: 0 <= a <= 3;\nloop invariant i15: (if flag then a == b else a > b);\nloop invariant i16: 0 <= a <= b;\nloop invariant i17: i >= 0;\nloop invariant i18: i%2 == 0;\nloop invariant i19: j%2 == 0;\nloop invariant i20: j >= i;\nloop invariant i21: a >= (b - (j - i));\nloop invariant i22: i == 0;\nloop invariant i23: a == b;\nloop invariant i24: 0 <= i <= j;\nloop invariant i25: 1 <= j;\nloop invariant i26: 0 <= a;\nloop invariant i27: 0 <= b;\nloop invariant i28: 0 <= j < 100000;\nloop invariant i29: (if flag then i = 0 else i = 1);\nloop invariant i30: (if flag then j = 1 else j = 2);\nloop invariant i31: (if flag then b >= 0 else b >= 1);\nloop invariant i32: (if flag then a >= 0 else a >= 1);\nloop invariant i33: (if flag then i%2 == 0 else i%2 == 1);\nloop invariant i34: (if flag then j%2 == 1 else j%2 == 0);\nloop invariant i35: 0 <= i <= 1;\nloop invariant i36: j >= 2;\nloop invariant i37: a >= 0;\nloop invariant i38: b >= 0;\nloop invariant i39: a + (i-2)/2 * (2*i + j-1) <= b <= a + i * (2*i + j-1);\nloop invariant i40: i + j - 2 >= 0;\nloop invariant i41: j - i >= 0;\nloop invariant i42: i % 2 == 0 ==> j % 2 == 0;\nloop invariant i43: i % 2 == 1 ==> j % 2 == 1;\nloop invariant i44: a + (i-2)/2 * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant i45: a + (i-2)/2 * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant i46: a + i * (2*i + j-1) == b ==> i % 2 == 0;\nloop invariant i47: a + i * (2*i + j-1) == b ==> j % 2 == 0;\nloop invariant i48: a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant i49: a + (i-2)/2 * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant i50: a + i * (2*i + j-1) == b ==> a % 2 == 0;\nloop invariant i51: a + i * (2*i + j-1) == b ==> a % 2 == 1;\nloop invariant i52: a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 0;\nloop invariant i53: a + (i-2)/2 * (2*i + j-1) == b ==> a + (i-2)/2 * (2*i + j-1) % 2 == 1;\nloop invariant i54: a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 0;\nloop invariant i55: a + i * (2*i + j-1) == b ==> a + i * (2*i + j-1) % 2 == 1;\nloop invariant i56: b == a + (j - i);\nloop invariant i57: j == i + 1;\nloop invariant i58: flag == (i % 2 == 0);\nloop invariant i59: i == (2 * j - 1);\nloop invariant i60: j == (i + 1) / 2;\nloop invariant i61: 0 <= a <= 2147483647;\nloop invariant i62: a <= b <= 2147483647;\nloop invariant i63: b - a >= -1;\nloop invariant i64: b - a <= 1;\nloop invariant i65: j - i >= 2;\nloop invariant i66: j - i <= 3;\nloop invariant i67: j - i == 2 ==> i == 0;\nloop invariant i68: j - i == 3 ==> i == 1;\nloop invariant i69: j - i == 2 ==> j == 2;\nloop invariant i70: j - i == 3 ==> j == 3;\nloop invariant i71: j - i == 2 ==> flag == 1;\nloop invariant i72: j - i == 3 ==> flag == 0;\nloop invariant i73: j - i == 2 ==> a == 0;\nloop invariant i74: j - i == 3 ==> a == 0;\nloop invariant i75: j - i == 2 ==> b == 0;\nloop invariant i76: j - i == 3 ==> b == 1;\nloop invariant i77: 0 <= j <= 3;\nloop invariant i78: (a == b ==> i == 0);\nloop invariant i79: (a == b ==> j == 1);\nloop invariant i80: (a == b ==> flag == 1);\nloop invariant i81: (a == b ==> flag == 0);\nloop invariant i82: (a == b ==> i == 1);\nloop invariant i83: (a == b ==> j == 2);\nloop invariant i84: (i == 0 ==> j == 1);\nloop invariant i85: (i == 0 ==> j == 2);\nloop invariant i86: (i == 0 ==> j == 3);\nloop invariant i87: (i == 1 ==> j == 1);\nloop invariant i88: (i == 1 ==> j == 2);\nloop invariant i89: (i == 1 ==> j == 3);\nloop invariant i90: (i == 2 ==> j == 1);\nloop invariant i91: (i == 2 ==> j == 2);\nloop invariant i92: (i == 2 ==> j == 3);\nloop invariant i93: (i == 0 ==> a == 0);\nloop invariant i94: (i == 0 ==> b == 0);\nloop invariant i95: (i == 1 ==> a == 1);\nloop invariant i96: (i == 1 ==> b == 1);\nloop invariant i97: (i == 2 ==> a == 2);\nloop invariant i98: (i == 2 ==> b == 2);\nloop invariant i99: (i == 0 ==> flag == 1);\nloop invariant i100: (i == 0 ==> flag == 0);\nloop invariant i101: (i == 1 ==> flag == 1);\nloop invariant i102: (i == 1 ==> flag == 0);\nloop invariant i103: (i == 2 ==> flag == 1);\nloop invariant i104: (i == 2 ==> flag == 0);\nloop invariant i105: (flag == 1 ==> i == 0);\nloop invariant i106: (flag == 1 ==> i == 1);\nloop invariant i107: (flag == 1 ==> i == 2);\nloop invariant i108: (flag == 0 ==> i == 0);\nloop invariant i109: (flag == 0 ==> i == 1);\nloop invariant i110: (flag == 0 ==> i == 2);\nloop invariant i111: (flag == 1 ==> j == 1);\nloop invariant i112: (flag == 1 ==> j == 2);\nloop invariant i113: (flag == 1 ==> j == 3);\nloop invariant i114: (flag == 0 ==> j == 1);\nloop invariant i115: (flag == 0 ==> j == 2);\nloop invariant i116: (flag == 0 ==> j == 3);\nloop invariant i117: (flag == 1 ==> flag == 0);\nloop invariant i118: (flag == 1 ==> flag == 1);\nloop invariant i119: (flag == 0 ==> flag == 0);\nloop invariant i120: (flag == 0 ==> flag == 1);\nloop invariant i121: (flag == 1 ==> i == 0 ==> j == 1);\nloop invariant i122: (flag == 1 ==> i == 0 ==> j == 2);\nloop invariant i123: (flag == 1 ==> i == 0 ==> j == 3);\nloop invariant i124: (flag == 1 ==> i == 1 ==> j == 1);\nloop invariant i125: (flag == 1 ==> i == 1 ==> j == 2);\nloop invariant i126: (flag == 1 ==> i == 1 ==> j == 3);\nloop invariant i127: (flag == 1 ==> i == 2 ==> j == 1);\nloop invariant i128: (flag == 1 ==> i == 2 ==> j == 2);\nloop invariant i129: (flag == 1 ==> i == 2 ==> j == 3);\nloop invariant i130: (flag == 0 ==> i == 0 ==> j == 1);\nloop invariant i131: (flag == 0 ==> i == 0 ==> j == 2);\nloop invariant i132: (flag == 0 ==> i == 0 ==> j == 3);\nloop invariant i133: (flag == 0 ==> i == 1 ==> j == 1);\nloop invariant i134: (flag == 0 ==> i == 1 ==> j == 2);\nloop invariant i135: (flag == 0 ==> i == 1 ==> j == 3);\nloop invariant i136: (flag == 0 ==> i == 2 ==> j == 1);\nloop invariant i137: (flag == 0 ==> i == 2 ==> j == 2);\nloop invariant i138: (flag == 0 ==> i == 2 ==> j == 3);\nloop invariant i139: (flag == 1 ==> a == 0 ==> b == 0);\nloop invariant i140: (flag == 1 ==> a == 1 ==> b == 1);\nloop invariant i141: (flag == 1 ==> a == 2 ==> b == 2);\nloop invariant i142: 0 <= i;\nloop invariant i143: if (flag) then i == 0 else i == 1;\nloop invariant i144: j > i;\nloop invariant i145: a == b + (j - i);\nloop invariant i146: j%2 == 1 ==> i%2 == 0;\nloop invariant i147: i%2 == 0 ==> j%2 == 1;\nloop invariant i148: if (flag) then i%2 == 0 else i%2 == 1;\nloop invariant i149: if (flag) then j%2 == 1 else j%2 == 0;\nloop invariant i150: i%2 == 0 && j%2 == 1;\nloop invariant i151: b == (i + 1)*(j - 1)/2;\nloop invariant i152: a >= b + (j - i)*(j - i + 1)/2;\nloop invariant i153: a <= b + (j - i - 1)*(j - i - 2)/2 + 2*(j - i);\nloop invariant i154: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2;\nloop invariant i155: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i156: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2;\nloop invariant i157: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i158: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i159: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i160: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i161: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i162: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i163: a <= b + (j - i - 1)*(j - i - 2)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i)*(j - i + 1)/2 + (j - i);\nloop invariant i164: 1 <= j <= 2;\nloop invariant i165: flag ==> a = 1;\nloop invariant i166: !flag ==> a = 0;\nloop invariant i167: b = (i*a);\nloop invariant i168: i%2 == 0 ==> j = (2*i + 1);\nloop invariant i169: i%2 == 1 ==> j = (2*i);\nloop invariant i170: 1 <= j <= 3;\nloop invariant i171: i == 0 || i == 1;\nloop invariant i172: 0 <= j <= unknown_int();\nloop invariant i173: 0 <= a <= unknown_int();\nloop invariant i174: 0 <= b <= unknown_int();\nloop invariant i175: a == b ==> flag == 1;\nloop invariant i176: a != b ==> flag == 0;\nloop invariant i177: i%2 == 0 ==> j%2 == 0;\nloop invariant i178: i%2 == 1 ==> j%2 == 1;\nloop invariant i179: j >= 0;\nloop invariant i180: a <= unknown_int();\nloop invariant i181: b <= unknown_int();\nloop invariant i182: i <= 1;\nloop invariant i183: j <= unknown_int();\nloop invariant i184: j >= 1;\nloop invariant i185: a <= b;\nloop invariant i186: b <= a;\nloop invariant i187: a == b ==> j <= unknown_int();\nloop invariant i188: b <= a ==> j <= unknown_int();\nloop invariant i189: a == b ==> j >= 0;\nloop invariant i190: b <= a ==> j >= 0;\nloop invariant i191: a == b ==> i%2 == 0;\nloop invariant i192: b <= a ==> i%2 == 0;\nloop invariant i193: a == b ==> i >= 0;\nloop invariant i194: b <= a ==> i >= 0;\nloop invariant i195: a == b ==> i <= 1;\nloop invariant i196: b <= a ==> i <= 1;\nloop invariant i197: a == b ==> j%2 == 0;\nloop invariant i198: b <= a ==> j%2 == 0;\nloop invariant i199: a == b ==> j >= 1;\nloop invariant i200: b <= a ==> j >= 1;\nloop invariant i201: a == b ==> j%2 == 1;\nloop invariant i202: b <= a ==> j%2 == 1;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 72,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: i >= 0;\n\n\n\n\n\n\n\n\nloop invariant i26: 0 <= a;\nloop invariant i27: 0 <= b;\n\n\n\n\n\n\n\n\n\nloop invariant i37: a >= 0;\nloop invariant i38: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i118: (flag == 1 ==> flag == 1);\nloop invariant i119: (flag == 0 ==> flag == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i142: 0 <= i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i179: j >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i189: a == b ==> j >= 0;\nloop invariant i190: b <= a ==> j >= 0;\n\n\nloop invariant i193: a == b ==> i >= 0;\nloop invariant i194: b <= a ==> i >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/105.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/123.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c"
        ],
        "skipped": [],
        "total": 27,
        "success_count": 5,
        "failure_count": 22,
        "success_rate": 0.18518518518518517
    }
}