{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/105.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0 ==> (x == n);\nloop invariant n < 0 ==> (x == n);\nloop invariant n >= 0 ==> (x <= n);\nloop invariant n < 0 ==> (x <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == (x + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> (x == n);\nloop invariant n < 0 ==> (x == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= x <= n ==> n >= 0;\nloop invariant x >= n ==> n >= 0;\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n;\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant n == x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= x - 1 <= n - 1;\nloop invariant x == x - 1 + 1;\nloop invariant x == n - (n - x);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n ==> n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x + 1) == n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0 ==> (x == n);\nloop invariant n < 0 ==> (x == n);\nloop invariant n >= 0 ==> (x <= n);\nloop invariant n < 0 ==> (x <= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant n >= 0 ==> (x == n) is preserved but not established.\nloop invariant n < 0 ==> (x == n) is partially proven to be inductive.\nloop invariant n >= 0 ==> (x <= n) is partially proven to be inductive.\nloop invariant n < 0 ==> (x <= n) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\nloop invariant i6: n >= 0 ==> (x <= n);\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == (x + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == (x + 1) is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> (x == n);\nloop invariant n < 0 ==> (x == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> (x == n) is preserved but not established.\nloop invariant n < 0 ==> (x == 0) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: n < 0 ==> (x == 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> x == n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == x is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: x == x;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= x <= n ==> n >= 0;\nloop invariant x >= n ==> n >= 0;\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n;\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= x <= n ==> n >= 0 is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n is preserved but not established.\nloop invariant x >= n ==> n >= 0 ==> x >= n is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: 0 <= x <= n ==> n >= 0;\n\n\nloop invariant i5: x >= n ==> n >= 0 ==> x >= n;\nloop invariant i6: 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant i7: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i8: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i9: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i10: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i11: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i12: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i13: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i14: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i15: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i16: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i17: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i18: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i19: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i20: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i21: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i22: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant n == x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant n == x is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= x - 1 <= n - 1;\nloop invariant x == x - 1 + 1;\nloop invariant x == n - (n - x);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\nloop invariant x == n - (x - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 0 <= x - 1 <= n - 1 is partially proven to be inductive.\nloop invariant x == x - 1 + 1 is partially proven to be inductive.\nloop invariant x == n - (n - x) is partially proven to be inductive.\nloop invariant x == n - (x - 1) is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x == x - 1 + 1;\nloop invariant i4: x == n - (n - x);\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n ==> n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> n >= 0 is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n ==> n >= 0;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x + 1) == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x + 1) == n is neither established nor preserved.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 0 <= n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion x == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant n >= 0 ==> (x == n) is preserved but not established.\nloop invariant n < 0 ==> (x == n) is partially proven to be inductive.\nloop invariant n >= 0 ==> (x <= n) is partially proven to be inductive.\nloop invariant n < 0 ==> (x <= n) is partially proven to be inductive.\nloop invariant x == (x + 1) is preserved but not established.\nloop invariant n < 0 ==> (x == 0) is partially proven to be inductive.\nloop invariant n >= 0 ==> x == n is partially proven to be inductive.\nloop invariant x == x is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n is partially proven to be inductive.\nloop invariant 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n is partially proven to be inductive.\nloop invariant 0 <= n is partially proven to be inductive.\nloop invariant n == x is partially proven to be inductive.\nloop invariant 1 <= x <= n is partially proven to be inductive.\nloop invariant 0 <= x - 1 <= n - 1 is partially proven to be inductive.\nloop invariant x == x - 1 + 1 is partially proven to be inductive.\nloop invariant x == n - (n - x) is partially proven to be inductive.\nloop invariant x == n - (x - 1) is partially proven to be inductive.\nloop invariant x <= n ==> n >= 0 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant (x + 1) == n is partially proven to be inductive.\nAssertion x == n: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= n;\nloop invariant i3: x >= 0;\nloop invariant i4: n >= 0 ==> (x == n);\nloop invariant i5: n < 0 ==> (x == n);\nloop invariant i6: n >= 0 ==> (x <= n);\nloop invariant i7: n < 0 ==> (x <= n);\nloop invariant i8: x == (x + 1);\nloop invariant i9: n < 0 ==> (x == 0);\nloop invariant i10: n >= 0 ==> x == n;\nloop invariant i11: x == x;\nloop invariant i12: 0 <= x <= n ==> n >= 0;\nloop invariant i13: x >= n ==> n >= 0;\nloop invariant i14: 0 <= x <= n ==> n >= 0 ==> x >= n;\nloop invariant i15: x >= n ==> n >= 0 ==> x >= n;\nloop invariant i16: 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant i17: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i18: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i19: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i20: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i21: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i22: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i23: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i24: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i25: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i26: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i27: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i28: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i29: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i30: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i31: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i32: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i33: 0 <= n;\nloop invariant i34: n == x;\nloop invariant i35: 1 <= x <= n;\nloop invariant i36: 0 <= x - 1 <= n - 1;\nloop invariant i37: x == x - 1 + 1;\nloop invariant i38: x == n - (n - x);\nloop invariant i39: x == n - (x - 1);\nloop invariant i40: x <= n ==> n >= 0;\nloop invariant i41: n >= 0;\nloop invariant i42: (x + 1) == n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\nloop invariant i6: n >= 0 ==> (x <= n);\n\n\nloop invariant i9: n < 0 ==> (x == 0);\n\nloop invariant i11: x == x;\nloop invariant i12: 0 <= x <= n ==> n >= 0;\n\n\nloop invariant i15: x >= n ==> n >= 0 ==> x >= n;\nloop invariant i16: 0 <= x <= n ==> n >= 0 ==> x >= n ==> x >= n;\nloop invariant i17: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i18: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i19: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i20: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i21: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i22: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i23: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i24: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i25: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i26: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i27: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i28: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i29: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i30: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i31: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\nloop invariant i32: x >= n ==> n >= 0 ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n ==> x >= n;\n\n\n\n\nloop invariant i37: x == x - 1 + 1;\nloop invariant i38: x == n - (n - x);\n\nloop invariant i40: x <= n ==> n >= 0;\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/105.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/123.c"
        ],
        "skipped": [],
        "total": 26,
        "success_count": 5,
        "failure_count": 21,
        "success_rate": 0.19230769230769232
    }
}