{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/86.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 50;\nloop invariant x >= (1 - (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant x <= y + 1;\nloop invariant x >= y - 100000;\nloop invariant x <= y + 100000;\nloop invariant x >= y - y * y / 2;\nloop invariant x <= y + y * y / 2;\nloop invariant x >= y - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2;\nloop invariant x >= y - y * y / 2 - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x + 50;\nloop invariant -50 <= x <= y - 1;\nloop invariant -50 <= z1 <= x + 50;\nloop invariant -50 <= z2 <= y - 1;\nloop invariant -50 <= z3 <= y - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y >= 0;\nloop invariant x <= z1;\nloop invariant y <= z2;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z2 <= z3;\nloop invariant x + y <= z3;\nloop invariant x + y >= z1;\nloop invariant x + y >= z2;\nloop invariant x + y >= z3;\nloop invariant x + y <= x;\nloop invariant y <= x;\nloop invariant x + y <= y;\nloop invariant x + y <= z1;\nloop invariant x + y <= z2;\nloop invariant x + y <= z3;\nloop invariant x + y <= 0;\nloop invariant x + y <= 50;\nloop invariant x + y <= 100;\nloop invariant x + y <= 200;\nloop invariant x + y <= 500;\nloop invariant x + y <= 1000;\nloop invariant x + y <= 5000;\nloop invariant x + y <= 50000;\nloop invariant x + y <= 100000;\nloop invariant x + y <= 200000;\nloop invariant x + y <= 500000;\nloop invariant x + y <= 1000000;\nloop invariant x + y <= 5000000;\nloop invariant x + y <= 10000000;\nloop invariant x + y <= 50000000;\nloop invariant x + y <= 100000000;\nloop invariant x + y <= 500000000;\nloop invariant x + y <= 1000000000;\nloop invariant x + y <= 5000000000;\nloop invariant x + y <= 10000000000;\nloop invariant x + y <= 50000000000;\nloop invariant x + y <= 100000000000;\nloop invariant x + y <= 500000000000;\nloop invariant x + y <= 1000000000000;\nloop invariant x + y <= 5000000000000;\nloop invariant x + y <= 10000000000000;\nloop invariant x + y <= 50000000000000;\nloop invariant x + y <= 100000000000000;\nloop invariant x + y <= 500000000000000;\nloop invariant x + y <= 1000000000000000;\nloop invariant x + y <= 5000000000000000;\nloop invariant x + y <= 10000000000000000;\nloop invariant x + y <= 50000000000000000;\nloop invariant x + y <= 100000000000000000;\nloop invariant x + y <= 500000000000000000;\nloop invariant x + y <= 1000000000000000000;\nloop invariant x + y <= 5000000000000000000;\nloop invariant x + y <= 10000000000000000000;\nloop invariant x + y <= 50000000000000000000;\nloop invariant x + y <= 100000000000000000000;\nloop invariant x + y <= 500000000000000000000;\nloop invariant x + y <= 1000000000000000000000;\nloop invariant x + y <= 5000000000000000000000;\n*/\n```",
            "```\n/*@\nloop invariant x >= -50;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x + y > 0;\nloop invariant x + y <= 100000;\nloop invariant x + y > x;\nloop invariant x + y <= x;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0;\nloop invariant y > 0;\nloop invariant 0 <= y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0;\nloop invariant y > 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i7: y >= 1 ==> y >= 1;\nloop invariant i8: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i9: y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i10: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i11: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i12: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i13: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i14: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i15: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i16: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i17: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i18: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i19: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i20: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i21: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 50;\nloop invariant x >= (1 - (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= y <= 50 is neither established nor preserved.\nloop invariant x >= (1 - (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= -50 is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\nloop invariant x >= (y * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= (y * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant x <= y + 1;\nloop invariant x >= y - 100000;\nloop invariant x <= y + 100000;\nloop invariant x >= y - y * y / 2;\nloop invariant x <= y + y * y / 2;\nloop invariant x >= y - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2;\nloop invariant x >= y - y * y / 2 - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= y - 1 is partially proven to be inductive.\nloop invariant x <= y + 1 is partially proven to be inductive.\nloop invariant x >= y - 100000 is partially proven to be inductive.\nloop invariant x <= y + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x <= y + y * y / 2;\n\nloop invariant i13: x <= y + y * y / 2 + 100000;\n\nloop invariant i15: x <= y + y * y / 2 + y * y / 2;\n\nloop invariant i17: x <= y + y * y / 2 + y * y / 2 + 100000;\n\nloop invariant i19: x <= y + y * y / 2 + y * y / 2 + y * y / 2;\n\nloop invariant i21: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\n\nloop invariant i23: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x + 50;\nloop invariant -50 <= x <= y - 1;\nloop invariant -50 <= z1 <= x + 50;\nloop invariant -50 <= z2 <= y - 1;\nloop invariant -50 <= z3 <= y - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= x + 50 is neither established nor preserved.\nloop invariant -50 <= x <= y - 1 is partially proven to be inductive.\nloop invariant -50 <= z1 <= x + 50 is preserved but not established.\nloop invariant -50 <= z2 <= y - 1 is preserved but not established.\nloop invariant -50 <= z3 <= y - 1 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y >= 0;\nloop invariant x <= z1;\nloop invariant y <= z2;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z2 <= z3;\nloop invariant x + y <= z3;\nloop invariant x + y >= z1;\nloop invariant x + y >= z2;\nloop invariant x + y >= z3;\nloop invariant x + y <= x;\nloop invariant y <= x;\nloop invariant x + y <= y;\nloop invariant x + y <= z1;\nloop invariant x + y <= z2;\nloop invariant x + y <= z3;\nloop invariant x + y <= 0;\nloop invariant x + y <= 50;\nloop invariant x + y <= 100;\nloop invariant x + y <= 200;\nloop invariant x + y <= 500;\nloop invariant x + y <= 1000;\nloop invariant x + y <= 5000;\nloop invariant x + y <= 50000;\nloop invariant x + y <= 100000;\nloop invariant x + y <= 200000;\nloop invariant x + y <= 500000;\nloop invariant x + y <= 1000000;\nloop invariant x + y <= 5000000;\nloop invariant x + y <= 10000000;\nloop invariant x + y <= 50000000;\nloop invariant x + y <= 100000000;\nloop invariant x + y <= 500000000;\nloop invariant x + y <= 1000000000;\nloop invariant x + y <= 5000000000;\nloop invariant x + y <= 10000000000;\nloop invariant x + y <= 50000000000;\nloop invariant x + y <= 100000000000;\nloop invariant x + y <= 500000000000;\nloop invariant x + y <= 1000000000000;\nloop invariant x + y <= 5000000000000;\nloop invariant x + y <= 10000000000000;\nloop invariant x + y <= 50000000000000;\nloop invariant x + y <= 100000000000000;\nloop invariant x + y <= 500000000000000;\nloop invariant x + y <= 1000000000000000;\nloop invariant x + y <= 5000000000000000;\nloop invariant x + y <= 10000000000000000;\nloop invariant x + y <= 50000000000000000;\nloop invariant x + y <= 100000000000000000;\nloop invariant x + y <= 500000000000000000;\nloop invariant x + y <= 1000000000000000000;\nloop invariant x + y <= 5000000000000000000;\nloop invariant x + y <= 10000000000000000000;\nloop invariant x + y <= 50000000000000000000;\nloop invariant x + y <= 100000000000000000000;\nloop invariant x + y <= 500000000000000000000;\nloop invariant x + y <= 1000000000000000000000;\nloop invariant x + y <= 5000000000000000000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x + y >= 0 is preserved but not established.\nloop invariant x <= z1 is preserved but not established.\nloop invariant y <= z2 is preserved but not established.\nloop invariant z1 <= z2 is preserved but not established.\nloop invariant z1 <= z3 is preserved but not established.\nloop invariant z2 <= z3 is preserved but not established.\nloop invariant x + y <= z3 is partially proven to be inductive.\nloop invariant x + y >= z1 is preserved but not established.\nloop invariant x + y >= z2 is preserved but not established.\nloop invariant x + y >= z3 is partially proven to be inductive.\nloop invariant x + y <= x is partially proven to be inductive.\nloop invariant y <= x is partially proven to be inductive.\nloop invariant x + y <= y is partially proven to be inductive.\nloop invariant x + y <= z1 is partially proven to be inductive.\nloop invariant x + y <= z2 is partially proven to be inductive.\nloop invariant x + y <= 0 is partially proven to be inductive.\nloop invariant x + y <= 50 is partially proven to be inductive.\nloop invariant x + y <= 100 is partially proven to be inductive.\nloop invariant x + y <= 200 is partially proven to be inductive.\nloop invariant x + y <= 500 is partially proven to be inductive.\nloop invariant x + y <= 1000 is partially proven to be inductive.\nloop invariant x + y <= 5000 is partially proven to be inductive.\nloop invariant x + y <= 50000 is partially proven to be inductive.\nloop invariant x + y <= 100000 is partially proven to be inductive.\nloop invariant x + y <= 200000 is partially proven to be inductive.\nloop invariant x + y <= 500000 is partially proven to be inductive.\nloop invariant x + y <= 1000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000000000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: x + y <= 5000000000;\nloop invariant i36: x + y <= 10000000000;\nloop invariant i37: x + y <= 50000000000;\nloop invariant i38: x + y <= 100000000000;\nloop invariant i39: x + y <= 500000000000;\nloop invariant i40: x + y <= 1000000000000;\nloop invariant i41: x + y <= 5000000000000;\nloop invariant i42: x + y <= 10000000000000;\nloop invariant i43: x + y <= 50000000000000;\nloop invariant i44: x + y <= 100000000000000;\nloop invariant i45: x + y <= 500000000000000;\nloop invariant i46: x + y <= 1000000000000000;\nloop invariant i47: x + y <= 5000000000000000;\nloop invariant i48: x + y <= 10000000000000000;\nloop invariant i49: x + y <= 50000000000000000;\nloop invariant i50: x + y <= 100000000000000000;\nloop invariant i51: x + y <= 500000000000000000;\nloop invariant i52: x + y <= 1000000000000000000;\nloop invariant i53: x + y <= 5000000000000000000;\nloop invariant i54: x + y <= 10000000000000000000;\nloop invariant i55: x + y <= 50000000000000000000;\nloop invariant i56: x + y <= 100000000000000000000;\nloop invariant i57: x + y <= 500000000000000000000;\nloop invariant i58: x + y <= 1000000000000000000000;\nloop invariant i59: x + y <= 5000000000000000000000;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= -50;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x + y > 0;\nloop invariant x + y <= 100000;\nloop invariant x + y > x;\nloop invariant x + y <= x;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= -50;\nloop invariant x + y > -50;\nloop invariant x + y <= -50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x + y > 0 is partially proven to be inductive.\nloop invariant x + y <= 100000 is partially proven to be inductive.\nloop invariant x + y > x is partially proven to be inductive.\nloop invariant x + y <= x is partially proven to be inductive.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant x + y <= -50 is partially proven to be inductive.\nloop invariant x + y > -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0;\nloop invariant y > 0;\nloop invariant 0 <= y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x < 0;\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= x is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 is partially proven to be inductive.\nloop invariant 1 <= y <= 50 is partially proven to be inductive.\nloop invariant x >= (1 - (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant 0 <= y <= -50 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= (y * y / 2) is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= y - 1 is partially proven to be inductive.\nloop invariant x <= y + 1 is partially proven to be inductive.\nloop invariant x >= y - 100000 is partially proven to be inductive.\nloop invariant x <= y + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000 is partially proven to be inductive.\nloop invariant x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2 is partially proven to be inductive.\nloop invariant 0 <= y <= x + 50 is partially proven to be inductive.\nloop invariant -50 <= x <= y - 1 is partially proven to be inductive.\nloop invariant -50 <= z1 <= x + 50 is partially proven to be inductive.\nloop invariant -50 <= z2 <= y - 1 is partially proven to be inductive.\nloop invariant -50 <= z3 <= y - 1 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x <= z1 is partially proven to be inductive.\nloop invariant y <= z2 is partially proven to be inductive.\nloop invariant z1 <= z2 is partially proven to be inductive.\nloop invariant z1 <= z3 is partially proven to be inductive.\nloop invariant z2 <= z3 is partially proven to be inductive.\nloop invariant x + y <= z3 is partially proven to be inductive.\nloop invariant x + y >= z1 is partially proven to be inductive.\nloop invariant x + y >= z2 is partially proven to be inductive.\nloop invariant x + y >= z3 is partially proven to be inductive.\nloop invariant x + y <= x is partially proven to be inductive.\nloop invariant y <= x is partially proven to be inductive.\nloop invariant x + y <= y is partially proven to be inductive.\nloop invariant x + y <= z1 is partially proven to be inductive.\nloop invariant x + y <= z2 is partially proven to be inductive.\nloop invariant x + y <= 0 is partially proven to be inductive.\nloop invariant x + y <= 50 is partially proven to be inductive.\nloop invariant x + y <= 100 is partially proven to be inductive.\nloop invariant x + y <= 200 is partially proven to be inductive.\nloop invariant x + y <= 500 is partially proven to be inductive.\nloop invariant x + y <= 1000 is partially proven to be inductive.\nloop invariant x + y <= 5000 is partially proven to be inductive.\nloop invariant x + y <= 50000 is partially proven to be inductive.\nloop invariant x + y <= 100000 is partially proven to be inductive.\nloop invariant x + y <= 200000 is partially proven to be inductive.\nloop invariant x + y <= 500000 is partially proven to be inductive.\nloop invariant x + y <= 1000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 10000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 50000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 100000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 500000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 1000000000000000000000 is partially proven to be inductive.\nloop invariant x + y <= 5000000000000000000000 is partially proven to be inductive.\nloop invariant 1 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= x <= -50 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x + y > 0 is partially proven to be inductive.\nloop invariant x + y > x is partially proven to be inductive.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant x + y <= -50 is partially proven to be inductive.\nloop invariant x + y > -50 is partially proven to be inductive.\nloop invariant 0 <= y <= x is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x >= -50;\nloop invariant i4: y >= 1;\nloop invariant i5: x >= (y - 1) * y / 2;\nloop invariant i6: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i7: y >= 1 ==> y >= 1;\nloop invariant i8: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i9: y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i10: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i11: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i12: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i13: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i14: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i15: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i16: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i17: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i18: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i19: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i20: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i21: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i22: 1 <= y <= 50;\nloop invariant i23: x >= (1 - (y - 1) * y / 2);\nloop invariant i24: 0 <= y <= -50;\nloop invariant i25: x >= y;\nloop invariant i26: 0 <= y;\nloop invariant i27: x >= (y * y / 2);\nloop invariant i28: y >= 0;\nloop invariant i29: x <= y;\nloop invariant i30: x >= y - 1;\nloop invariant i31: x <= y + 1;\nloop invariant i32: x >= y - 100000;\nloop invariant i33: x <= y + 100000;\nloop invariant i34: x >= y - y * y / 2;\nloop invariant i35: x <= y + y * y / 2;\nloop invariant i36: x >= y - y * y / 2 - 100000;\nloop invariant i37: x <= y + y * y / 2 + 100000;\nloop invariant i38: x >= y - y * y / 2 - y * y / 2;\nloop invariant i39: x <= y + y * y / 2 + y * y / 2;\nloop invariant i40: x >= y - y * y / 2 - y * y / 2 - 100000;\nloop invariant i41: x <= y + y * y / 2 + y * y / 2 + 100000;\nloop invariant i42: x >= y - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant i43: x <= y + y * y / 2 + y * y / 2 + y * y / 2;\nloop invariant i44: x >= y - y * y / 2 - y * y / 2 - y * y / 2 - 100000;\nloop invariant i45: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\nloop invariant i46: x >= y - y * y / 2 - y * y / 2 - y * y / 2 - y * y / 2;\nloop invariant i47: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\nloop invariant i48: 0 <= y <= x + 50;\nloop invariant i49: -50 <= x <= y - 1;\nloop invariant i50: -50 <= z1 <= x + 50;\nloop invariant i51: -50 <= z2 <= y - 1;\nloop invariant i52: -50 <= z3 <= y - 1;\nloop invariant i53: x + y >= 0;\nloop invariant i54: x <= z1;\nloop invariant i55: y <= z2;\nloop invariant i56: z1 <= z2;\nloop invariant i57: z1 <= z3;\nloop invariant i58: z2 <= z3;\nloop invariant i59: x + y <= z3;\nloop invariant i60: x + y >= z1;\nloop invariant i61: x + y >= z2;\nloop invariant i62: x + y >= z3;\nloop invariant i63: x + y <= x;\nloop invariant i64: y <= x;\nloop invariant i65: x + y <= y;\nloop invariant i66: x + y <= z1;\nloop invariant i67: x + y <= z2;\nloop invariant i68: x + y <= 0;\nloop invariant i69: x + y <= 50;\nloop invariant i70: x + y <= 100;\nloop invariant i71: x + y <= 200;\nloop invariant i72: x + y <= 500;\nloop invariant i73: x + y <= 1000;\nloop invariant i74: x + y <= 5000;\nloop invariant i75: x + y <= 50000;\nloop invariant i76: x + y <= 100000;\nloop invariant i77: x + y <= 200000;\nloop invariant i78: x + y <= 500000;\nloop invariant i79: x + y <= 1000000;\nloop invariant i80: x + y <= 5000000;\nloop invariant i81: x + y <= 10000000;\nloop invariant i82: x + y <= 50000000;\nloop invariant i83: x + y <= 100000000;\nloop invariant i84: x + y <= 500000000;\nloop invariant i85: x + y <= 1000000000;\nloop invariant i86: x + y <= 5000000000;\nloop invariant i87: x + y <= 10000000000;\nloop invariant i88: x + y <= 50000000000;\nloop invariant i89: x + y <= 100000000000;\nloop invariant i90: x + y <= 500000000000;\nloop invariant i91: x + y <= 1000000000000;\nloop invariant i92: x + y <= 5000000000000;\nloop invariant i93: x + y <= 10000000000000;\nloop invariant i94: x + y <= 50000000000000;\nloop invariant i95: x + y <= 100000000000000;\nloop invariant i96: x + y <= 500000000000000;\nloop invariant i97: x + y <= 1000000000000000;\nloop invariant i98: x + y <= 5000000000000000;\nloop invariant i99: x + y <= 10000000000000000;\nloop invariant i100: x + y <= 50000000000000000;\nloop invariant i101: x + y <= 100000000000000000;\nloop invariant i102: x + y <= 500000000000000000;\nloop invariant i103: x + y <= 1000000000000000000;\nloop invariant i104: x + y <= 5000000000000000000;\nloop invariant i105: x + y <= 10000000000000000000;\nloop invariant i106: x + y <= 50000000000000000000;\nloop invariant i107: x + y <= 100000000000000000000;\nloop invariant i108: x + y <= 500000000000000000000;\nloop invariant i109: x + y <= 1000000000000000000000;\nloop invariant i110: x + y <= 5000000000000000000000;\nloop invariant i111: 1 <= y <= 100000;\nloop invariant i112: 0 <= x <= -50;\nloop invariant i113: x < 0;\nloop invariant i114: y <= 100000;\nloop invariant i115: x + y > 0;\nloop invariant i116: x + y > x;\nloop invariant i117: x + y >= -50;\nloop invariant i118: x + y <= -50;\nloop invariant i119: x + y > -50;\nloop invariant i120: 0 <= y <= x;\nloop invariant i121: y > 0;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 30,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i7: y >= 1 ==> y >= 1;\nloop invariant i8: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i9: y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i10: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i11: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i12: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i13: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i14: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i15: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i16: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i17: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i18: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i19: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\nloop invariant i20: x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2 ==> x >= (y - 1) * y / 2;\nloop invariant i21: y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1 ==> y >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: x <= y + y * y / 2;\n\nloop invariant i37: x <= y + y * y / 2 + 100000;\n\nloop invariant i39: x <= y + y * y / 2 + y * y / 2;\n\nloop invariant i41: x <= y + y * y / 2 + y * y / 2 + 100000;\n\nloop invariant i43: x <= y + y * y / 2 + y * y / 2 + y * y / 2;\n\nloop invariant i45: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + 100000;\n\nloop invariant i47: x <= y + y * y / 2 + y * y / 2 + y * y / 2 + y * y / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i86: x + y <= 5000000000;\nloop invariant i87: x + y <= 10000000000;\nloop invariant i88: x + y <= 50000000000;\nloop invariant i89: x + y <= 100000000000;\nloop invariant i90: x + y <= 500000000000;\nloop invariant i91: x + y <= 1000000000000;\nloop invariant i92: x + y <= 5000000000000;\nloop invariant i93: x + y <= 10000000000000;\nloop invariant i94: x + y <= 50000000000000;\nloop invariant i95: x + y <= 100000000000000;\nloop invariant i96: x + y <= 500000000000000;\nloop invariant i97: x + y <= 1000000000000000;\nloop invariant i98: x + y <= 5000000000000000;\nloop invariant i99: x + y <= 10000000000000000;\nloop invariant i100: x + y <= 50000000000000000;\nloop invariant i101: x + y <= 100000000000000000;\nloop invariant i102: x + y <= 500000000000000000;\nloop invariant i103: x + y <= 1000000000000000000;\nloop invariant i104: x + y <= 5000000000000000000;\nloop invariant i105: x + y <= 10000000000000000000;\nloop invariant i106: x + y <= 50000000000000000000;\nloop invariant i107: x + y <= 100000000000000000000;\nloop invariant i108: x + y <= 500000000000000000000;\nloop invariant i109: x + y <= 1000000000000000000000;\nloop invariant i110: x + y <= 5000000000000000000000;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/code2inv/86.c"
        ],
        "skipped": [],
        "total": 22,
        "success_count": 4,
        "failure_count": 18,
        "success_rate": 0.18181818181818182
    }
}