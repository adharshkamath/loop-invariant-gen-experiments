{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i - 1) * a;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant i > 0 && i <= SIZE;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant sn + a <= SIZE * a;\nloop invariant sn + a > i * a;\nloop invariant `v1 == unknown_int(); v2 == unknown_int(); v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE;\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 0;\nloop invariant SIZE >= i;\nloop invariant SIZE >= sn;\nloop invariant SIZE >= a;\nloop invariant SIZE >= 0;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= v1;\nloop invariant SIZE >= v2;\nloop invariant SIZE >= v3;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant -SIZE * a <= sn <= SIZE * a;\nloop invariant -SIZE * a <= v1 <= SIZE * a;\nloop invariant -SIZE * a <= v2 <= SIZE * a;\nloop invariant -SIZE * a <= v3 <= SIZE * a;\nloop invariant sn == SIZE * a + (SIZE - i) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * i;\nloop invariant v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant v3 <= 2147483647 && v3 >= -2147483648;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE*a || sn == 0;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= -1 || v1 >= 1;\nloop invariant v2 <= -1 || v2 >= 1;\nloop invariant v3 <= -1 || v3 >= 1;\nloop invariant v1 == v2 || v2 == v3 || v1 == v3;\nloop invariant v1 == v2 == v3 || v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 || v1 == v2 == v3 == 9;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i*a;\nloop invariant v1, v2, v3 are non-deterministic;\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant SIZE is non-deterministic;\nloop invariant SIZE <= unknown_int();\nloop invariant a == 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (SIZE*(SIZE+1))/2 if a == 1;\nloop invariant sn == (SIZE*(SIZE+1))/2;\nloop invariant sn == 0 if SIZE == 0;\nloop invariant sn == 0 if SIZE == 1;\nloop invariant sn == a if i == 1;\nloop invariant sn == i*a if i > 1;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == a * i - a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant v1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant SIZE >= 1;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= 1;\nloop invariant SIZE <= 2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= SIZE <= (2147483647 / a);\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant a == 1;\nloop invariant sn == i * a;\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant i == SIZE + 1 || sn == SIZE * a || sn == 0;\nloop invariant (i == SIZE + 1 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a);\nloop invariant (i > SIZE ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE; loop invariant sn == ((a * i) + ((1 - a) * i * (i - 1) / 2)); loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= i * a;\nloop invariant v1 = \\at(v1, Pre);\nloop invariant v2 = \\at(v2, Pre);\nloop invariant v3 = \\at(v3, Pre);\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 != SIZE;\nloop invariant v2 != SIZE;\nloop invariant v3 != SIZE;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i * a);\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i - 1) * a;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == (i - 1) * a;\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i > 0 && i <= SIZE;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant sn + a <= SIZE * a;\nloop invariant sn + a > i * a;\nloop invariant `v1 == unknown_int(); v2 == unknown_int(); v3 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE;\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 0;\nloop invariant SIZE >= i;\nloop invariant SIZE >= sn;\nloop invariant SIZE >= a;\nloop invariant SIZE >= 0;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= v1;\nloop invariant SIZE >= v2;\nloop invariant SIZE >= v3;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\nloop invariant SIZE >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= SIZE is neither established nor preserved.\nloop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= v1 <= 1 is neither established nor preserved.\nloop invariant 0 <= v2 <= 1 is neither established nor preserved.\nloop invariant 0 <= v3 <= 1 is neither established nor preserved.\nloop invariant SIZE >= 1 is partially proven to be inductive.\nloop invariant SIZE >= 0 is partially proven to be inductive.\nloop invariant SIZE >= i is partially proven to be inductive.\nloop invariant SIZE >= sn is partially proven to be inductive.\nloop invariant SIZE >= a is partially proven to be inductive.\nloop invariant SIZE >= v1 is partially proven to be inductive.\nloop invariant SIZE >= v2 is partially proven to be inductive.\nloop invariant SIZE >= v3 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant -SIZE * a <= sn <= SIZE * a;\nloop invariant -SIZE * a <= v1 <= SIZE * a;\nloop invariant -SIZE * a <= v2 <= SIZE * a;\nloop invariant -SIZE * a <= v3 <= SIZE * a;\nloop invariant sn == SIZE * a + (SIZE - i) * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is preserved but not established.\nloop invariant -SIZE * a <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant -SIZE * a <= v1 <= SIZE * a is preserved but not established.\nloop invariant -SIZE * a <= v2 <= SIZE * a is preserved but not established.\nloop invariant -SIZE * a <= v3 <= SIZE * a is preserved but not established.\nloop invariant sn == SIZE * a + (SIZE - i) * a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * i;\nloop invariant v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant v3 <= 2147483647 && v3 >= -2147483648;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == a * i is preserved but not established.\nloop invariant v1 <= 2147483647 && v1 >= -2147483648 is partially proven to be inductive.\nloop invariant v2 <= 2147483647 && v2 >= -2147483648 is partially proven to be inductive.\nloop invariant v3 <= 2147483647 && v3 >= -2147483648 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant i4: v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant i5: v3 <= 2147483647 && v3 >= -2147483648;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE*a || sn == 0;\nloop invariant i >= 1;\nloop invariant i <= SIZE;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= -1 || v1 >= 1;\nloop invariant v2 <= -1 || v2 >= 1;\nloop invariant v3 <= -1 || v3 >= 1;\nloop invariant v1 == v2 || v2 == v3 || v1 == v3;\nloop invariant v1 == v2 == v3 || v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8;\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 || v1 == v2 == v3 == 9;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= SIZE*a || sn == 0 is established but not preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= SIZE is neither established nor preserved.\nloop invariant v1 >= 0 is neither established nor preserved.\nloop invariant v2 >= 0 is neither established nor preserved.\nloop invariant v3 >= 0 is neither established nor preserved.\nloop invariant v1 <= -1 || v1 >= 1 is neither established nor preserved.\nloop invariant v2 <= -1 || v2 >= 1 is neither established nor preserved.\nloop invariant v3 <= -1 || v3 >= 1 is neither established nor preserved.\nloop invariant v1 == v2 || v2 == v3 || v1 == v3 is neither established nor preserved.\nloop invariant v1 == v2 == v3 || v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 is neither established nor preserved.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 is neither established nor preserved.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 || v1 == v2 == v3 == 9 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i*a;\nloop invariant v1, v2, v3 are non-deterministic;\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant SIZE is non-deterministic;\nloop invariant SIZE <= unknown_int();\nloop invariant a == 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\nloop invariant sn == (SIZE*(SIZE+1))/2 if a == 1;\nloop invariant sn == (SIZE*(SIZE+1))/2;\nloop invariant sn == 0 if SIZE == 0;\nloop invariant sn == 0 if SIZE == 1;\nloop invariant sn == a if i == 1;\nloop invariant sn == i*a if i > 1;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\nloop invariant sn == i*a if i > 0;\nloop invariant sn == i*a if i >= 0;\nloop invariant sn == i*a if i <= SIZE;\nloop invariant sn == i*a if i >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ','",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: a == 1;\nloop invariant i10: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == a * i - a;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant v1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant SIZE >= 1;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= 1;\nloop invariant SIZE <= 2147483647;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is neither established nor preserved.\nloop invariant sn == a * i - a is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is partially proven to be inductive.\nloop invariant v1 <= 2147483647 is partially proven to be inductive.\nloop invariant v1 >= -2147483648 is partially proven to be inductive.\nloop invariant v2 <= 2147483647 is partially proven to be inductive.\nloop invariant v2 >= -2147483648 is partially proven to be inductive.\nloop invariant v3 <= 2147483647 is partially proven to be inductive.\nloop invariant v3 >= -2147483648 is partially proven to be inductive.\nloop invariant SIZE >= 1 is partially proven to be inductive.\nloop invariant SIZE <= 2147483647 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == a * i - a;\nloop invariant i3: sn >= 0;\n\nloop invariant i5: v1 <= 2147483647;\nloop invariant i6: v1 >= -2147483648;\nloop invariant i7: v2 <= 2147483647;\nloop invariant i8: v2 >= -2147483648;\nloop invariant i9: v3 <= 2147483647;\nloop invariant i10: v3 >= -2147483648;\n\nloop invariant i12: SIZE <= 2147483647;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= SIZE <= (2147483647 / a);\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant a == 1;\nloop invariant sn == i * a;\nloop invariant sn == SIZE * a || sn == 0;\nloop invariant i == SIZE + 1 || sn == SIZE * a || sn == 0;\nloop invariant (i == SIZE + 1 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a);\nloop invariant (i > SIZE ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= SIZE <= (2147483647 / a) is preserved but not established.\nloop invariant 0 <= i <= SIZE + 1 is partially proven to be inductive.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant a == 1 is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant sn == SIZE * a || sn == 0 is partially proven to be inductive.\nloop invariant i == SIZE + 1 || sn == SIZE * a || sn == 0 is partially proven to be inductive.\nloop invariant (i == SIZE + 1 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a) is partially proven to be inductive.\nloop invariant (i > SIZE ==> sn == SIZE * a) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\nloop invariant i4: a == 1;\n\n\n\n\n\n\nloop invariant i11: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant i12: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant i13: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i14: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i15: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i16: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant i17: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i18: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i19: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i20: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i21: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE; loop invariant sn == ((a * i) + ((1 - a) * i * (i - 1) / 2)); loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE; loop invariant sn == ((a * i) + ((1 - a) * i * (i - 1) / 2)); loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= i * a;\nloop invariant v1 = \\at(v1, Pre);\nloop invariant v2 = \\at(v2, Pre);\nloop invariant v3 = \\at(v3, Pre);\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 != SIZE;\nloop invariant v2 != SIZE;\nloop invariant v3 != SIZE;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\nloop invariant SIZE <= 2147483647;\nloop invariant SIZE >= -2147483648;\nloop invariant SIZE >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: 0 <= sn <= i * a;\n\n\n\nloop invariant i6: v1 <= 2147483647;\nloop invariant i7: v2 <= 2147483647;\nloop invariant i8: v3 <= 2147483647;\nloop invariant i9: v1 >= -2147483648;\nloop invariant i10: v2 >= -2147483648;\nloop invariant i11: v3 >= -2147483648;\n\n\n\nloop invariant i15: SIZE <= 2147483647;\nloop invariant i16: SIZE >= -2147483648;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is neither established nor preserved.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant v1 == v1 is partially proven to be inductive.\nloop invariant v2 == v2 is partially proven to be inductive.\nloop invariant v3 == v3 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: v1 == v1;\nloop invariant i5: v2 == v2;\nloop invariant i6: v3 == v3;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i * a);\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn == (i * a) is preserved but not established.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: sn == (i - 1) * a;\nloop invariant i3: 0 <= v1 <= unknown_int();\nloop invariant i4: 0 <= v2 <= unknown_int();\nloop invariant i5: 0 <= v3 <= unknown_int();\nloop invariant i6: i > 0 && i <= SIZE;\nloop invariant i7: v1 == unknown_int();\nloop invariant i8: v2 == unknown_int();\nloop invariant i9: v3 == unknown_int();\nloop invariant i10: sn + a <= SIZE * a;\nloop invariant i11: sn + a > i * a;\nloop invariant i12: `v1 == unknown_int(); v2 == unknown_int(); v3 == unknown_int();\nloop invariant i13: i1;\nloop invariant i14: i2;\nloop invariant i15: i3;\nloop invariant i16: i4;\nloop invariant i17: i5;\nloop invariant i18: i6;\nloop invariant i19: i7;\nloop invariant i20: i8;\nloop invariant i21: i9;\nloop invariant i22: i10;\nloop invariant i23: i11;\nloop invariant i24: i12;\nloop invariant i25: i13;\nloop invariant i26: i14;\nloop invariant i27: i15;\nloop invariant i28: i16;\nloop invariant i29: i17;\nloop invariant i30: i18;\nloop invariant i31: i19;\nloop invariant i32: i20;\nloop invariant i33: i21;\nloop invariant i34: i22;\nloop invariant i35: i23;\nloop invariant i36: i24;\nloop invariant i37: i25;\nloop invariant i38: i26;\nloop invariant i39: i27;\nloop invariant i40: i28;\nloop invariant i41: i29;\nloop invariant i42: i30;\nloop invariant i43: i31;\nloop invariant i44: i32;\nloop invariant i45: i33;\nloop invariant i46: i34;\nloop invariant i47: i35;\nloop invariant i48: i36;\nloop invariant i49: i37;\nloop invariant i50: i38;\nloop invariant i51: i39;\nloop invariant i52: i40;\nloop invariant i53: i41;\nloop invariant i54: i42;\nloop invariant i55: i43;\nloop invariant i56: i44;\nloop invariant i57: i45;\nloop invariant i58: i46;\nloop invariant i59: i47;\nloop invariant i60: i48;\nloop invariant i61: i49;\nloop invariant i62: i50;\nloop invariant i63: i51;\nloop invariant i64: i52;\nloop invariant i65: i53;\nloop invariant i66: i54;\nloop invariant i67: i55;\nloop invariant i68: i56;\nloop invariant i69: i57;\nloop invariant i70: i58;\nloop invariant i71: i59;\nloop invariant i72: i60;\nloop invariant i73: i61;\nloop invariant i74: i62;\nloop invariant i75: i63;\nloop invariant i76: i64;\nloop invariant i77: i65;\nloop invariant i78: i66;\nloop invariant i79: i67;\nloop invariant i80: i68;\nloop invariant i81: i69;\nloop invariant i82: i70;\nloop invariant i83: i71;\nloop invariant i84: i72;\nloop invariant i85: i73;\nloop invariant i86: i74;\nloop invariant i87: i75;\nloop invariant i88: i76;\nloop invariant i89: i77;\nloop invariant i90: i78;\nloop invariant i91: i79;\nloop invariant i92: i80;\nloop invariant i93: i81;\nloop invariant i94: i82;\nloop invariant i95: i83;\nloop invariant i96: i84;\nloop invariant i97: i85;\nloop invariant i98: i86;\nloop invariant i99: i87;\nloop invariant i100: i88;\nloop invariant i101: i89;\nloop invariant i102: i90;\nloop invariant i103: i91;\nloop invariant i104: i92;\nloop invariant i105: i93;\nloop invariant i106: i94;\nloop invariant i107: i95;\nloop invariant i108: i96;\nloop invariant i109: i97;\nloop invariant i110: i98;\nloop invariant i111: i99;\nloop invariant i112: i100;\nloop invariant i113: i101;\nloop invariant i114: i102;\nloop invariant i115: i103;\nloop invariant i116: i104;\nloop invariant i117: i105;\nloop invariant i118: i106;\nloop invariant i119: i107;\nloop invariant i120: i108;\nloop invariant i121: i109;\nloop invariant i122: i110;\nloop invariant i123: i111;\nloop invariant i124: i112;\nloop invariant i125: i113;\nloop invariant i126: i114;\nloop invariant i127: i115;\nloop invariant i128: i116;\nloop invariant i129: i117;\nloop invariant i130: i118;\nloop invariant i131: i119;\nloop invariant i132: i120;\nloop invariant i133: i121;\nloop invariant i134: i122;\nloop invariant i135: i123;\nloop invariant i136: i124;\nloop invariant i137: i125;\nloop invariant i138: i126;\nloop invariant i139: i127;\nloop invariant i140: i128;\nloop invariant i141: i129;\nloop invariant i142: i130;\nloop invariant i143: i131;\nloop invariant i144: i132;\nloop invariant i145: i133;\nloop invariant i146: i134;\nloop invariant i147: i135;\nloop invariant i148: i136;\nloop invariant i149: i137;\nloop invariant i150: i138;\nloop invariant i151: i139;\nloop invariant i152: i140;\nloop invariant i153: i141;\nloop invariant i154: i142;\nloop invariant i155: i143;\nloop invariant i156: i144;\nloop invariant i157: i145;\nloop invariant i158: i146;\nloop invariant i159: i147;\nloop invariant i160: i148;\nloop invariant i161: i149;\nloop invariant i162: i150;\nloop invariant i163: i151;\nloop invariant i164: i152;\nloop invariant i165: i153;\nloop invariant i166: i154;\nloop invariant i167: i155;\nloop invariant i168: i156;\nloop invariant i169: i157;\nloop invariant i170: i158;\nloop invariant i171: 0 <= sn <= SIZE;\nloop invariant i172: 0 <= v1 <= 1;\nloop invariant i173: 0 <= v2 <= 1;\nloop invariant i174: 0 <= v3 <= 1;\nloop invariant i175: SIZE >= 1;\nloop invariant i176: SIZE >= 0;\nloop invariant i177: SIZE >= i;\nloop invariant i178: SIZE >= sn;\nloop invariant i179: SIZE >= a;\nloop invariant i180: SIZE >= v1;\nloop invariant i181: SIZE >= v2;\nloop invariant i182: SIZE >= v3;\nloop invariant i183: 1 <= i <= SIZE;\nloop invariant i184: -SIZE * a <= sn <= SIZE * a;\nloop invariant i185: -SIZE * a <= v1 <= SIZE * a;\nloop invariant i186: -SIZE * a <= v2 <= SIZE * a;\nloop invariant i187: -SIZE * a <= v3 <= SIZE * a;\nloop invariant i188: sn == SIZE * a + (SIZE - i) * a;\nloop invariant i189: sn == a * i;\nloop invariant i190: v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant i191: v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant i192: v3 <= 2147483647 && v3 >= -2147483648;\nloop invariant i193: 0 <= sn <= SIZE*a || sn == 0;\nloop invariant i194: i >= 1;\nloop invariant i195: i <= SIZE;\nloop invariant i196: v1 >= 0;\nloop invariant i197: v2 >= 0;\nloop invariant i198: v3 >= 0;\nloop invariant i199: v1 <= -1 || v1 >= 1;\nloop invariant i200: v2 <= -1 || v2 >= 1;\nloop invariant i201: v3 <= -1 || v3 >= 1;\nloop invariant i202: v1 == v2 || v2 == v3 || v1 == v3;\nloop invariant i203: v1 == v2 == v3 || v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1;\nloop invariant i204: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1;\nloop invariant i205: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2;\nloop invariant i206: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3;\nloop invariant i207: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4;\nloop invariant i208: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5;\nloop invariant i209: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6;\nloop invariant i210: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7;\nloop invariant i211: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8;\nloop invariant i212: v1 == v2 == v3 == 0 || v1 == v2 == v3 == -1 || v1 == v2 == v3 == 1 || v1 == v2 == v3 == 2 || v1 == v2 == v3 == 3 || v1 == v2 == v3 == 4 || v1 == v2 == v3 == 5 || v1 == v2 == v3 == 6 || v1 == v2 == v3 == 7 || v1 == v2 == v3 == 8 || v1 == v2 == v3 == 9;\nloop invariant i213: sn == i*a;\nloop invariant i214: v1, v2, v3 are non-deterministic;\nloop invariant i215: v1 <= unknown_int();\nloop invariant i216: v2 <= unknown_int();\nloop invariant i217: v3 <= unknown_int();\nloop invariant i218: SIZE is non-deterministic;\nloop invariant i219: SIZE <= unknown_int();\nloop invariant i220: a == 1;\nloop invariant i221: sn >= 0;\nloop invariant i222: sn <= SIZE*a;\nloop invariant i223: sn == (SIZE*(SIZE+1))/2 if a == 1;\nloop invariant i224: sn == (SIZE*(SIZE+1))/2;\nloop invariant i225: sn == 0 if SIZE == 0;\nloop invariant i226: sn == 0 if SIZE == 1;\nloop invariant i227: sn == a if i == 1;\nloop invariant i228: sn == i*a if i > 1;\nloop invariant i229: sn == i*a if i <= SIZE;\nloop invariant i230: sn == i*a if i >= 1;\nloop invariant i231: sn == i*a if i > 0;\nloop invariant i232: sn == i*a if i >= 0;\nloop invariant i233: sn == a * i - a;\nloop invariant i234: sn <= SIZE * a;\nloop invariant i235: v1 <= 2147483647;\nloop invariant i236: v1 >= -2147483648;\nloop invariant i237: v2 <= 2147483647;\nloop invariant i238: v2 >= -2147483648;\nloop invariant i239: v3 <= 2147483647;\nloop invariant i240: v3 >= -2147483648;\nloop invariant i241: SIZE <= 2147483647;\nloop invariant i242: 0 <= SIZE <= (2147483647 / a);\nloop invariant i243: 0 <= i <= SIZE + 1;\nloop invariant i244: 0 <= sn <= SIZE * a;\nloop invariant i245: sn == i * a;\nloop invariant i246: sn == SIZE * a || sn == 0;\nloop invariant i247: i == SIZE + 1 || sn == SIZE * a || sn == 0;\nloop invariant i248: (i == SIZE + 1 ==> sn == SIZE * a || sn == 0);\nloop invariant i249: (i <= SIZE ==> sn == i * a);\nloop invariant i250: (i > SIZE ==> sn == SIZE * a);\nloop invariant i251: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant i252: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant i253: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i254: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i255: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i256: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant i257: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i258: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i259: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i260: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i261: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i262: 0 <= i <= SIZE; loop invariant sn == ((a * i) + ((1 - a) * i * (i - 1) / 2)); loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0;\nloop invariant i263: 0 <= sn <= i * a;\nloop invariant i264: v1 = \\at(v1, Pre);\nloop invariant i265: v2 = \\at(v2, Pre);\nloop invariant i266: v3 = \\at(v3, Pre);\nloop invariant i267: v1 != SIZE;\nloop invariant i268: v2 != SIZE;\nloop invariant i269: v3 != SIZE;\nloop invariant i270: SIZE >= -2147483648;\nloop invariant i271: v1 == v1;\nloop invariant i272: v2 == v2;\nloop invariant i273: v3 == v3;\nloop invariant i274: sn == (i * a);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 198,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == (i - 1) * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i190: v1 <= 2147483647 && v1 >= -2147483648;\nloop invariant i191: v2 <= 2147483647 && v2 >= -2147483648;\nloop invariant i192: v3 <= 2147483647 && v3 >= -2147483648;\nloop invariant i193: 0 <= sn <= SIZE*a || sn == 0;\nloop invariant i194: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i220: a == 1;\nloop invariant i221: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i233: sn == a * i - a;\n\nloop invariant i235: v1 <= 2147483647;\nloop invariant i236: v1 >= -2147483648;\nloop invariant i237: v2 <= 2147483647;\nloop invariant i238: v2 >= -2147483648;\nloop invariant i239: v3 <= 2147483647;\nloop invariant i240: v3 >= -2147483648;\nloop invariant i241: SIZE <= 2147483647;\n\n\n\n\n\n\nloop invariant i248: (i == SIZE + 1 ==> sn == SIZE * a || sn == 0);\n\n\nloop invariant i251: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a);\nloop invariant i252: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a);\nloop invariant i253: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i254: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i255: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i256: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a);\nloop invariant i257: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0);\nloop invariant i258: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i259: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i260: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\nloop invariant i261: (i <= SIZE ==> sn == i * a ==> sn <= SIZE * a ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0 ==> sn == SIZE * a || sn == 0);\n\nloop invariant i263: 0 <= sn <= i * a;\n\n\n\n\n\n\nloop invariant i270: SIZE >= -2147483648;\nloop invariant i271: v1 == v1;\nloop invariant i272: v2 == v2;\nloop invariant i273: v3 == v3;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c"
        ],
        "skipped": [],
        "total": 19,
        "success_count": 4,
        "failure_count": 15,
        "success_rate": 0.21052631578947367
    }
}