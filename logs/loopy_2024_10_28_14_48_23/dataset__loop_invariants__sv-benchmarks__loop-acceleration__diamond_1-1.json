{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (y % 2) == (x % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant y % 2 == (x % 2);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant x >= y;\nloop invariant x <= y + 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x == y || x == y - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= y <= 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x <= y;\nloop invariant 0 <= x <= 99;\nloop invariant x <= y;\nloop invariant 99 <= x <= 101;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= unknown_uint();\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\nloop invariant x % 2 != y % 2 ==> (x + 1 * (x / 2)) % 2 == y % 2;\nloop invariant (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant if (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant y % 2 != 0 ==> (x % 2 != 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 99;\nloop invariant (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant (y % 2 == 1) ==> (x % 2 == 1);\nloop invariant (x % 2 == 0) ==> (x >= y);\nloop invariant (x % 2 == 1) ==> (x >= y + 1);\nloop invariant (x % 2 == 0) ==> (x >= 2 * y);\nloop invariant (x % 2 == 1) ==> (x >= 2 * y + 1);\nloop invariant (x % 2 == 0) ==> (x >= y + 1);\nloop invariant (x % 2 == 1) ==> (x >= y);\nloop invariant (x % 2 == 0) ==> (y <= x / 2);\nloop invariant (x % 2 == 1) ==> (y <= (x - 1) / 2);\nloop invariant (x % 2 == 0) ==> (x <= 2 * y);\nloop invariant (x % 2 == 1) ==> (x <= 2 * y + 1);\nloop invariant (x % 2 == 0) ==> (x <= 99);\nloop invariant (x % 2 == 1) ==> (x <= 99);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) ==> ((y % 2) == 0);\nloop invariant (! (x % 2) ==> ((y % 2) == 1);\nloop invariant x + ((y / 2) * (y / 2 + 1)) == 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (y % 2) == (x % 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant (x + y) % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (y % 2) == (x % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (y % 2) == (x % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) == (y % 2);\nloop invariant y % 2 == (x % 2);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant x >= y;\nloop invariant x <= y + 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\nloop invariant x % 2 == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant y % 2 == (x % 2) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant x >= y is preserved but not established.\nloop invariant x <= y + 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x % 2 == (y % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\nloop invariant i4: x >= 0;\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x == y || x == y - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant x == y || x == y - 1 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= y is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant i3: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant i4: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i5: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant i6: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i7: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i8: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i9: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= y <= 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x <= y;\nloop invariant 0 <= x <= 99;\nloop invariant x <= y;\nloop invariant 99 <= x <= 101;\nloop invariant x == y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant 99 <= x <= 101 is preserved but not established.\nloop invariant x == y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= unknown_uint();\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\nloop invariant x % 2 != y % 2 ==> (x + 1 * (x / 2)) % 2 == y % 2;\nloop invariant (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\n\nloop invariant i5: (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant i6: (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant i7: (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant i8: (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1) is partially proven to be inductive.\nloop invariant (x % 2) == 0 ==> x >= 2 * (x / 2) is partially proven to be inductive.\nloop invariant (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\nloop invariant i4: (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant i5: (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant i6: (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant if (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant y % 2 != 0 ==> (x % 2 != 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 99;\nloop invariant (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant (y % 2 == 1) ==> (x % 2 == 1);\nloop invariant (x % 2 == 0) ==> (x >= y);\nloop invariant (x % 2 == 1) ==> (x >= y + 1);\nloop invariant (x % 2 == 0) ==> (x >= 2 * y);\nloop invariant (x % 2 == 1) ==> (x >= 2 * y + 1);\nloop invariant (x % 2 == 0) ==> (x >= y + 1);\nloop invariant (x % 2 == 1) ==> (x >= y);\nloop invariant (x % 2 == 0) ==> (y <= x / 2);\nloop invariant (x % 2 == 1) ==> (y <= (x - 1) / 2);\nloop invariant (x % 2 == 0) ==> (x <= 2 * y);\nloop invariant (x % 2 == 1) ==> (x <= 2 * y + 1);\nloop invariant (x % 2 == 0) ==> (x <= 99);\nloop invariant (x % 2 == 1) ==> (x <= 99);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 99 is preserved but not established.\nloop invariant (y % 2 == 0) ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant (y % 2 == 1) ==> (x % 2 == 1) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x >= y) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x >= y + 1) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x >= 2 * y) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x >= 2 * y + 1) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x >= y + 1) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x >= y) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (y <= x / 2) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (y <= (x - 1) / 2) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x <= 2 * y) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x <= 2 * y + 1) is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (x <= 99) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (x <= 99) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: (y % 2 == 0) ==> (x % 2 == 0);\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: (x % 2 == 1) ==> (x <= 99);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) ==> ((y % 2) == 0);\nloop invariant (! (x % 2) ==> ((y % 2) == 1);\nloop invariant x + ((y / 2) * (y / 2 + 1)) == 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ';'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (y % 2) == (x % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (y % 2) == (x % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 40: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: (x % 2) == (y % 2);\nloop invariant i3: (x + y) % 2 == 0;\nloop invariant i4: (y % 2) == (x % 2);\nloop invariant i5: y % 2 == (x % 2);\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 99;\nloop invariant i8: x >= y;\nloop invariant i9: x <= y + 99;\nloop invariant i10: x % 2 == y % 2;\nloop invariant i11: x % 2 == (y % 2);\nloop invariant i12: x == y || x == y - 1;\nloop invariant i13: 0 <= x <= y;\nloop invariant i14: 0 <= y;\nloop invariant i15: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant i16: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant i17: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i18: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant i19: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i20: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i21: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i22: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant i23: 0 <= y <= 99;\nloop invariant i24: x <= y;\nloop invariant i25: 99 <= x <= 101;\nloop invariant i26: x == y;\nloop invariant i27: 0 <= y <= unknown_uint();\nloop invariant i28: x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\nloop invariant i29: x % 2 != y % 2 ==> (x + 1 * (x / 2)) % 2 == y % 2;\nloop invariant i30: (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant i31: (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant i32: (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant i33: (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant i34: (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant i35: (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant i36: (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\nloop invariant i37: 1 <= x <= 99;\nloop invariant i38: if (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i39: y % 2 != 0 ==> (x % 2 != 0);\nloop invariant i40: (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i41: (y % 2 == 1) ==> (x % 2 == 1);\nloop invariant i42: (x % 2 == 0) ==> (x >= y);\nloop invariant i43: (x % 2 == 1) ==> (x >= y + 1);\nloop invariant i44: (x % 2 == 0) ==> (x >= 2 * y);\nloop invariant i45: (x % 2 == 1) ==> (x >= 2 * y + 1);\nloop invariant i46: (x % 2 == 0) ==> (x >= y + 1);\nloop invariant i47: (x % 2 == 1) ==> (x >= y);\nloop invariant i48: (x % 2 == 0) ==> (y <= x / 2);\nloop invariant i49: (x % 2 == 1) ==> (y <= (x - 1) / 2);\nloop invariant i50: (x % 2 == 0) ==> (x <= 2 * y);\nloop invariant i51: (x % 2 == 1) ==> (x <= 2 * y + 1);\nloop invariant i52: (x % 2 == 0) ==> (x <= 99);\nloop invariant i53: (x % 2 == 1) ==> (x <= 99);\nloop invariant i54: (x % 2) ==> ((y % 2) == 0);\nloop invariant i55: (! (x % 2) ==> ((y % 2) == 1);\nloop invariant i56: x + ((y / 2) * (y / 2 + 1)) == 99;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 0;\n\n\n\n\n\n\n\nloop invariant i14: 0 <= y;\nloop invariant i15: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0;\nloop invariant i16: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1;\nloop invariant i17: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i18: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1;\nloop invariant i19: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i20: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i21: y % 2 == (x % 2) ==> (x % 2) == 0 ==> x % 2 == 0 ==> y % 2 == 0 ==> x % 2 == 0 ==> y % 2 == 0;\nloop invariant i22: y % 2 == (x % 2) ==> (x % 2) == 1 ==> x % 2 == 1 ==> y % 2 == 1 ==> x % 2 == 1 ==> y % 2 == 1;\n\n\n\n\n\nloop invariant i28: x % 2 == y % 2 ==> (x + 2 * (x / 2)) % 2 == y % 2;\n\nloop invariant i30: (y % 2 == 0 ==> x == 2 * (x / 2)) ==> (y % 2 == 0 ==> x % 2 == 0);\nloop invariant i31: (y % 2 != 0 ==> x == 1 + 2 * (x / 2)) ==> (y % 2 != 0 ==> x % 2 == 1);\nloop invariant i32: (y % 2 == 0 ==> x % 2 == 0) ==> (y % 2 == 0 ==> x == 2 * (x / 2));\nloop invariant i33: (y % 2 != 0 ==> x % 2 == 1) ==> (y % 2 != 0 ==> x == 1 + 2 * (x / 2));\nloop invariant i34: (x % 2) == (y % 2) ==> ((x % 2) == 0) || ((x % 2) == 1);\nloop invariant i35: (x % 2) == 0 ==> x >= 2 * (x / 2);\nloop invariant i36: (x % 2) == 1 ==> x >= 2 * ((x - 1) / 2) + 1;\n\n\n\nloop invariant i40: (y % 2 == 0) ==> (x % 2 == 0);\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i53: (x % 2 == 1) ==> (x <= 99);\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c"
        ],
        "skipped": [],
        "total": 4,
        "success_count": 0,
        "failure_count": 4,
        "success_rate": 0.0
    }
}