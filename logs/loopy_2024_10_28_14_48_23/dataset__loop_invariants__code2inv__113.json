{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/113.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn <= i;\nloop invariant sn >= i - 1;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i-1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sn <= n;\nloop invariant i == sn + 1;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == sn + 1;\nloop invariant (n == 0 ==> sn == 0);\nloop invariant (sn == n ==> i == n + 1);\n*/\n```",
            "```\n/*@\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - 1 - (n - i));\nloop invariant sn == (n - 2 - (n - i));\nloop invariant sn == (n - 3 - (n - i));\nloop invariant sn == (n - 4 - (n - i));\nloop invariant sn == (n - 5 - (n - i));\nloop invariant sn == (n - 6 - (n - i));\nloop invariant sn == (n - 7 - (n - i));\nloop invariant sn == (n - 8 - (n - i));\nloop invariant sn == (n - 9 - (n - i));\nloop invariant sn == (n - 10 - (n - i));\nloop invariant sn == (n - 11 - (n - i));\nloop invariant sn == (n - 12 - (n - i));\nloop invariant sn == (n - 13 - (n - i));\nloop invariant sn == (n - 14 - (n - i));\nloop invariant sn == (n - 15 - (n - i));\nloop invariant sn == (n - 16 - (n - i));\nloop invariant sn == (n - 17 - (n - i));\nloop invariant sn == (n - 18 - (n - i));\nloop invariant sn == (n - 19 - (n - i));\nloop invariant sn == (n - 20 - (n - i));\nloop invariant sn == (n - 21 - (n - i));\nloop invariant sn == (n - 22 - (n - i));\nloop invariant sn == (n - 23 - (n - i));\nloop invariant sn == (n - 24 - (n - i));\nloop invariant sn == (n - 25 - (n - i));\nloop invariant sn == (n - 26 - (n - i));\nloop invariant sn == (n - 27 - (n - i));\nloop invariant sn == (n - 28 - (n - i));\nloop invariant sn == (n - 29 - (n - i));\nloop invariant sn == (n - 30 - (n - i));\nloop invariant sn == (n - 31 - (n - i));\nloop invariant sn == (n - 32 - (n - i));\nloop invariant sn == (n - 33 - (n - i));\nloop invariant sn == (n - 34 - (n - i));\nloop invariant sn == (n - 35 - (n - i));\nloop invariant sn == (n - 36 - (n - i));\nloop invariant sn == (n - 37 - (n - i));\nloop invariant sn == (n - 38 - (n - i));\nloop invariant sn == (n - 39 - (n - i));\nloop invariant sn == (n - 40 - (n - i));\nloop invariant sn == (n - 41 - (n - i));\nloop invariant sn == (n - 42 - (n - i));\nloop invariant sn == (n - 43 - (n - i));\nloop invariant sn == (n - 44 - (n - i));\nloop invariant sn == (n - 45 - (n - i));\nloop invariant sn == (n - 46 - (n - i));\nloop invariant sn == (n - 47 - (n - i));\nloop invariant sn == (n - 48 - (n - i));\nloop invariant sn == (n - 49 - (n - i));\nloop invariant sn == (n - 50 - (n - i));\nloop invariant sn == (n - 51 - (n - i));\nloop invariant sn == (n - 52 - (n - i));\nloop invariant sn == (n - 53 - (n - i));\nloop invariant sn == (n - 54 - (n - i));\nloop invariant sn == (n - 55 - (n - i));\nloop invariant sn == (n - 56 - (n - i));\nloop invariant sn == (n - 57 - (n - i));\nloop invariant sn == (n - 58 - (n - i));\nloop invariant sn == (n - 59 - (n - i));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant n >= 0;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant ( (i <= n) ==> (sn == i - 1) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn <= i;\nloop invariant sn >= i - 1;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\nloop invariant sn <= sn + 1;\nloop invariant sn >= sn - 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn >= i;\nloop invariant sn <= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 1 <= i <= n is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= sn + 1 is partially proven to be inductive.\nloop invariant sn >= sn - 1 is partially proven to be inductive.\nloop invariant sn >= i is preserved but not established.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn <= i;\nloop invariant i6: sn >= i - 1;\nloop invariant i7: sn <= sn + 1;\nloop invariant i8: sn >= sn - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i-1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i-1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i-1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sn <= n;\nloop invariant i == sn + 1;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 1 <= sn <= n is preserved but not established.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == sn + 1;\nloop invariant (n == 0 ==> sn == 0);\nloop invariant (sn == n ==> i == n + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant (n == 0 ==> sn == 0) is partially proven to be inductive.\nloop invariant (sn == n ==> i == n + 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i == sn + 1;\nloop invariant i5: (n == 0 ==> sn == 0);\nloop invariant i6: (sn == n ==> i == n + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i <= n is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nAssertion sn == n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn <= i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 61,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - 1 - (n - i));\nloop invariant sn == (n - 2 - (n - i));\nloop invariant sn == (n - 3 - (n - i));\nloop invariant sn == (n - 4 - (n - i));\nloop invariant sn == (n - 5 - (n - i));\nloop invariant sn == (n - 6 - (n - i));\nloop invariant sn == (n - 7 - (n - i));\nloop invariant sn == (n - 8 - (n - i));\nloop invariant sn == (n - 9 - (n - i));\nloop invariant sn == (n - 10 - (n - i));\nloop invariant sn == (n - 11 - (n - i));\nloop invariant sn == (n - 12 - (n - i));\nloop invariant sn == (n - 13 - (n - i));\nloop invariant sn == (n - 14 - (n - i));\nloop invariant sn == (n - 15 - (n - i));\nloop invariant sn == (n - 16 - (n - i));\nloop invariant sn == (n - 17 - (n - i));\nloop invariant sn == (n - 18 - (n - i));\nloop invariant sn == (n - 19 - (n - i));\nloop invariant sn == (n - 20 - (n - i));\nloop invariant sn == (n - 21 - (n - i));\nloop invariant sn == (n - 22 - (n - i));\nloop invariant sn == (n - 23 - (n - i));\nloop invariant sn == (n - 24 - (n - i));\nloop invariant sn == (n - 25 - (n - i));\nloop invariant sn == (n - 26 - (n - i));\nloop invariant sn == (n - 27 - (n - i));\nloop invariant sn == (n - 28 - (n - i));\nloop invariant sn == (n - 29 - (n - i));\nloop invariant sn == (n - 30 - (n - i));\nloop invariant sn == (n - 31 - (n - i));\nloop invariant sn == (n - 32 - (n - i));\nloop invariant sn == (n - 33 - (n - i));\nloop invariant sn == (n - 34 - (n - i));\nloop invariant sn == (n - 35 - (n - i));\nloop invariant sn == (n - 36 - (n - i));\nloop invariant sn == (n - 37 - (n - i));\nloop invariant sn == (n - 38 - (n - i));\nloop invariant sn == (n - 39 - (n - i));\nloop invariant sn == (n - 40 - (n - i));\nloop invariant sn == (n - 41 - (n - i));\nloop invariant sn == (n - 42 - (n - i));\nloop invariant sn == (n - 43 - (n - i));\nloop invariant sn == (n - 44 - (n - i));\nloop invariant sn == (n - 45 - (n - i));\nloop invariant sn == (n - 46 - (n - i));\nloop invariant sn == (n - 47 - (n - i));\nloop invariant sn == (n - 48 - (n - i));\nloop invariant sn == (n - 49 - (n - i));\nloop invariant sn == (n - 50 - (n - i));\nloop invariant sn == (n - 51 - (n - i));\nloop invariant sn == (n - 52 - (n - i));\nloop invariant sn == (n - 53 - (n - i));\nloop invariant sn == (n - 54 - (n - i));\nloop invariant sn == (n - 55 - (n - i));\nloop invariant sn == (n - 56 - (n - i));\nloop invariant sn == (n - 57 - (n - i));\nloop invariant sn == (n - 58 - (n - i));\nloop invariant sn == (n - 59 - (n - i));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == (n - (n - i)) is preserved but not established.\nloop invariant sn == (n - 1 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 2 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 3 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 4 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 5 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 6 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 7 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 8 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 9 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 10 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 11 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 12 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 13 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 14 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 15 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 16 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 17 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 18 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 19 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 20 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 21 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 22 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 23 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 24 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 25 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 26 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 27 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 28 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 29 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 30 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 31 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 32 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 33 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 34 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 35 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 36 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 37 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 38 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 39 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 40 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 41 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 42 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 43 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 44 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 45 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 46 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 47 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 48 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 49 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 50 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 51 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 52 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 53 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 54 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 55 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 56 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 57 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 58 - (n - i)) is partially proven to be inductive.\nloop invariant sn == (n - 59 - (n - i)) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i >= 1;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn == (i - 1);\n\nloop invariant i8: sn == (n - 1 - (n - i));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= n - 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\nloop invariant i5: sn == i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant n >= 0;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n is preserved but not established.\nloop invariant 1 <= i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\nloop invariant i5: i >= 1;\nloop invariant i6: sn >= 0;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant n >= 1;\nloop invariant n == n;\nloop invariant sn == sn;\nloop invariant i == i;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant n == n is partially proven to be inductive.\nloop invariant sn == sn is partially proven to be inductive.\nloop invariant i == i is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: i >= 1;\n\nloop invariant i6: n == n;\nloop invariant i7: sn == sn;\nloop invariant i8: i == i;\nloop invariant i9: sn == i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant ( (i <= n) ==> (sn == i - 1) );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant ( (i <= n) ==> (sn == i - 1) ) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: sn >= 0;\n\nloop invariant i5: ( (i <= n) ==> (sn == i - 1) );\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == i - 1;\nloop invariant i == sn + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == i - 1;\nloop invariant i4: i == sn + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 104: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 1 <= i <= n;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= n;\nloop invariant i5: sn <= i;\nloop invariant i6: sn >= i - 1;\nloop invariant i7: sn <= sn + 1;\nloop invariant i8: sn >= sn - 1;\nloop invariant i9: sn >= i;\nloop invariant i10: 1 <= i <= n+1;\nloop invariant i11: 0 <= sn <= n;\nloop invariant i12: sn == i-1;\nloop invariant i13: 1 <= sn <= n;\nloop invariant i14: i == sn + 1;\nloop invariant i15: 1 <= i <= n + 1;\nloop invariant i16: (n == 0 ==> sn == 0);\nloop invariant i17: (sn == n ==> i == n + 1);\nloop invariant i18: i <= n;\nloop invariant i19: sn == i - 1;\nloop invariant i20: i >= 1;\nloop invariant i21: i <= n + 1;\nloop invariant i22: sn <= i - 1;\nloop invariant i23: sn == (i - 1);\nloop invariant i24: sn == (n - (n - i));\nloop invariant i25: sn == (n - 1 - (n - i));\nloop invariant i26: sn == (n - 2 - (n - i));\nloop invariant i27: sn == (n - 3 - (n - i));\nloop invariant i28: sn == (n - 4 - (n - i));\nloop invariant i29: sn == (n - 5 - (n - i));\nloop invariant i30: sn == (n - 6 - (n - i));\nloop invariant i31: sn == (n - 7 - (n - i));\nloop invariant i32: sn == (n - 8 - (n - i));\nloop invariant i33: sn == (n - 9 - (n - i));\nloop invariant i34: sn == (n - 10 - (n - i));\nloop invariant i35: sn == (n - 11 - (n - i));\nloop invariant i36: sn == (n - 12 - (n - i));\nloop invariant i37: sn == (n - 13 - (n - i));\nloop invariant i38: sn == (n - 14 - (n - i));\nloop invariant i39: sn == (n - 15 - (n - i));\nloop invariant i40: sn == (n - 16 - (n - i));\nloop invariant i41: sn == (n - 17 - (n - i));\nloop invariant i42: sn == (n - 18 - (n - i));\nloop invariant i43: sn == (n - 19 - (n - i));\nloop invariant i44: sn == (n - 20 - (n - i));\nloop invariant i45: sn == (n - 21 - (n - i));\nloop invariant i46: sn == (n - 22 - (n - i));\nloop invariant i47: sn == (n - 23 - (n - i));\nloop invariant i48: sn == (n - 24 - (n - i));\nloop invariant i49: sn == (n - 25 - (n - i));\nloop invariant i50: sn == (n - 26 - (n - i));\nloop invariant i51: sn == (n - 27 - (n - i));\nloop invariant i52: sn == (n - 28 - (n - i));\nloop invariant i53: sn == (n - 29 - (n - i));\nloop invariant i54: sn == (n - 30 - (n - i));\nloop invariant i55: sn == (n - 31 - (n - i));\nloop invariant i56: sn == (n - 32 - (n - i));\nloop invariant i57: sn == (n - 33 - (n - i));\nloop invariant i58: sn == (n - 34 - (n - i));\nloop invariant i59: sn == (n - 35 - (n - i));\nloop invariant i60: sn == (n - 36 - (n - i));\nloop invariant i61: sn == (n - 37 - (n - i));\nloop invariant i62: sn == (n - 38 - (n - i));\nloop invariant i63: sn == (n - 39 - (n - i));\nloop invariant i64: sn == (n - 40 - (n - i));\nloop invariant i65: sn == (n - 41 - (n - i));\nloop invariant i66: sn == (n - 42 - (n - i));\nloop invariant i67: sn == (n - 43 - (n - i));\nloop invariant i68: sn == (n - 44 - (n - i));\nloop invariant i69: sn == (n - 45 - (n - i));\nloop invariant i70: sn == (n - 46 - (n - i));\nloop invariant i71: sn == (n - 47 - (n - i));\nloop invariant i72: sn == (n - 48 - (n - i));\nloop invariant i73: sn == (n - 49 - (n - i));\nloop invariant i74: sn == (n - 50 - (n - i));\nloop invariant i75: sn == (n - 51 - (n - i));\nloop invariant i76: sn == (n - 52 - (n - i));\nloop invariant i77: sn == (n - 53 - (n - i));\nloop invariant i78: sn == (n - 54 - (n - i));\nloop invariant i79: sn == (n - 55 - (n - i));\nloop invariant i80: sn == (n - 56 - (n - i));\nloop invariant i81: sn == (n - 57 - (n - i));\nloop invariant i82: sn == (n - 58 - (n - i));\nloop invariant i83: sn == (n - 59 - (n - i));\nloop invariant i84: sn <= n - 1;\nloop invariant i85: i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\nloop invariant i86: n >= 0;\nloop invariant i87: n >= 1;\nloop invariant i88: n == n;\nloop invariant i89: sn == sn;\nloop invariant i90: i == i;\nloop invariant i91: ( (i <= n) ==> (sn == i - 1) );\nloop invariant i92: 0 <= i <= n + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 67,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn <= i;\nloop invariant i6: sn >= i - 1;\nloop invariant i7: sn <= sn + 1;\nloop invariant i8: sn >= sn - 1;\n\n\n\nloop invariant i12: sn == i-1;\n\nloop invariant i14: i == sn + 1;\n\nloop invariant i16: (n == 0 ==> sn == 0);\nloop invariant i17: (sn == n ==> i == n + 1);\n\nloop invariant i19: sn == i - 1;\nloop invariant i20: i >= 1;\n\nloop invariant i22: sn <= i - 1;\nloop invariant i23: sn == (i - 1);\n\nloop invariant i25: sn == (n - 1 - (n - i));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i88: n == n;\nloop invariant i89: sn == sn;\nloop invariant i90: i == i;\nloop invariant i91: ( (i <= n) ==> (sn == i - 1) );\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 1,
        "failure_count": 12,
        "success_rate": 0.07692307692307693
    }
}