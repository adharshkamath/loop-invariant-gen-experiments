{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + unknown_int());\nloop invariant (unknown_int() ==> x % 2 == 0);\nloop invariant (unknown_int() == false ==> x % 2 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2^32;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 1;\nloop invariant unknown_int() == 0;\nloop invariant x % 2 ==> x >= 2;\nloop invariant x % 2 ==> x < 4294967296;\nloop invariant x % 2 ==> x != 1;\nloop invariant x % 2 ==> x != 2^32;\nloop invariant x % 2 ==> x != 0;\nloop invariant x % 2 ==> x != 2;\nloop invariant x % 2 ==> x != 4;\nloop invariant x % 2 ==> x != 6;\nloop invariant x % 2 ==> x != 8;\nloop invariant x % 2 ==> x != 10;\nloop invariant x % 2 ==> x != 12;\nloop invariant x % 2 ==> x != 14;\nloop invariant x % 2 ==> x != 16;\nloop invariant x % 2 ==> x != 18;\nloop invariant x % 2 ==> x != 20;\nloop invariant x % 2 ==> x != 22;\nloop invariant x % 2 ==> x != 24;\nloop invariant x % 2 ==> x != 26;\nloop invariant x % 2 ==> x != 28;\nloop invariant x % 2 ==> x != 30;\nloop invariant x % 2 ==> x != 32;\nloop invariant x % 2 ==> x != 34;\nloop invariant x % 2 ==> x != 36;\nloop invariant x % 2 ==> x != 38;\nloop invariant x % 2 ==> x != 40;\nloop invariant x % 2 ==> x != 42;\nloop invariant x % 2 ==> x != 44;\nloop invariant x % 2 ==> x != 46;\nloop invariant x % 2 ==> x != 48;\nloop invariant x % 2 ==> x != 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= x % 2 <= 1;\nloop invariant (x % 2) == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2 * unknown_int();\nloop invariant unknown_int() ==> (x % 2 == 0);\nloop invariant unknown_int() ==> (x >= 1);\nloop invariant unknown_int() ==> (2 * unknown_int() >= x);\nloop invariant unknown_int() ==> (x % 2 == 1) ==> (x + 2 >= 3);\nloop invariant unknown_int() ==> (x % 2 == 1) ==> (x + 2 <= 2 * unknown_int() + 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * unknown_int();\nloop invariant unknown_int() == true ==> x % 2 == 0;\nloop invariant unknown_int() == false ==> x % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2^(sizeof(unsigned int) * 8) - 1;\nloop invariant unknown_int() ==> (x % 2) == 0;\nloop invariant !unknown_int() ==> (x % 2) == 1;\nloop invariant x >= 2;\nloop invariant !unknown_int() ==> x > 2;\nloop invariant x == 1 + 2 * (unknown_int() ? (unsigned int) (1 / (unsigned int) 0) : (unsigned int) (1 / (unsigned int) 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant x % 2 == 0;\nloop invariant (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> 1 < x <= 2 * x;\nloop invariant ~unknown_int() ==> x == 1;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x <= 2 * x;\nloop invariant unknown_int() ==> x < 2 * x;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 1;\nloop invariant x % 2 == 0 ==> x is even;\nloop invariant x % 2 != 0 ==> x is odd;\nloop invariant x % 2 == 0 ==> x is not odd;\nloop invariant x % 2 != 0 ==> x is not even;\nloop invariant x is even ==> x % 2 == 0;\nloop invariant x is odd ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x is divisible by 2;\nloop invariant x % 2 != 0 ==> x is not divisible by 2;\nloop invariant x is not divisible by 2 ==> x % 2 != 0;\nloop invariant x is divisible by 2 ==> x % 2 == 0;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not divisible by 2 ==> x is odd;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant (x % 2) == 0;\nloop invariant x >= 0;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 2 == 0 is preserved but not established.\nAssertion x % 2 != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * (1 + unknown_int());\nloop invariant (unknown_int() ==> x % 2 == 0);\nloop invariant (unknown_int() == false ==> x % 2 == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2^32;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 1;\nloop invariant unknown_int() == 0;\nloop invariant x % 2 ==> x >= 2;\nloop invariant x % 2 ==> x < 4294967296;\nloop invariant x % 2 ==> x != 1;\nloop invariant x % 2 ==> x != 2^32;\nloop invariant x % 2 ==> x != 0;\nloop invariant x % 2 ==> x != 2;\nloop invariant x % 2 ==> x != 4;\nloop invariant x % 2 ==> x != 6;\nloop invariant x % 2 ==> x != 8;\nloop invariant x % 2 ==> x != 10;\nloop invariant x % 2 ==> x != 12;\nloop invariant x % 2 ==> x != 14;\nloop invariant x % 2 ==> x != 16;\nloop invariant x % 2 ==> x != 18;\nloop invariant x % 2 ==> x != 20;\nloop invariant x % 2 ==> x != 22;\nloop invariant x % 2 ==> x != 24;\nloop invariant x % 2 ==> x != 26;\nloop invariant x % 2 ==> x != 28;\nloop invariant x % 2 ==> x != 30;\nloop invariant x % 2 ==> x != 32;\nloop invariant x % 2 ==> x != 34;\nloop invariant x % 2 ==> x != 36;\nloop invariant x % 2 ==> x != 38;\nloop invariant x % 2 ==> x != 40;\nloop invariant x % 2 ==> x != 42;\nloop invariant x % 2 ==> x != 44;\nloop invariant x % 2 ==> x != 46;\nloop invariant x % 2 ==> x != 48;\nloop invariant x % 2 ==> x != 50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\nloop invariant i6: x % 2 ==> x < 4294967296;\n\n\nloop invariant i9: x % 2 ==> x != 0;\nloop invariant i10: x % 2 ==> x != 2;\nloop invariant i11: x % 2 ==> x != 4;\nloop invariant i12: x % 2 ==> x != 6;\nloop invariant i13: x % 2 ==> x != 8;\nloop invariant i14: x % 2 ==> x != 10;\nloop invariant i15: x % 2 ==> x != 12;\nloop invariant i16: x % 2 ==> x != 14;\nloop invariant i17: x % 2 ==> x != 16;\nloop invariant i18: x % 2 ==> x != 18;\nloop invariant i19: x % 2 ==> x != 20;\nloop invariant i20: x % 2 ==> x != 22;\nloop invariant i21: x % 2 ==> x != 24;\nloop invariant i22: x % 2 ==> x != 26;\nloop invariant i23: x % 2 ==> x != 28;\nloop invariant i24: x % 2 ==> x != 30;\nloop invariant i25: x % 2 ==> x != 32;\nloop invariant i26: x % 2 ==> x != 34;\nloop invariant i27: x % 2 ==> x != 36;\nloop invariant i28: x % 2 ==> x != 38;\nloop invariant i29: x % 2 ==> x != 40;\nloop invariant i30: x % 2 ==> x != 42;\nloop invariant i31: x % 2 ==> x != 44;\nloop invariant i32: x % 2 ==> x != 46;\nloop invariant i33: x % 2 ==> x != 48;\nloop invariant i34: x % 2 ==> x != 50;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= x % 2 <= 1;\nloop invariant (x % 2) == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nloop invariant 0 <= x % 2 <= 1 is partially proven to be inductive.\nloop invariant (x % 2) == 1 is partially proven to be inductive.\nAssertion x % 2 != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\nloop invariant i2: 0 <= x % 2 <= 1;\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2 * unknown_int();\nloop invariant unknown_int() ==> (x % 2 == 0);\nloop invariant unknown_int() ==> (x >= 1);\nloop invariant unknown_int() ==> (2 * unknown_int() >= x);\nloop invariant unknown_int() ==> (x % 2 == 1) ==> (x + 2 >= 3);\nloop invariant unknown_int() ==> (x % 2 == 1) ==> (x + 2 <= 2 * unknown_int() + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * unknown_int();\nloop invariant unknown_int() == true ==> x % 2 == 0;\nloop invariant unknown_int() == false ==> x % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^(sizeof(unsigned int) * 8) - 1;\nloop invariant unknown_int() ==> (x % 2) == 0;\nloop invariant !unknown_int() ==> (x % 2) == 1;\nloop invariant x >= 2;\nloop invariant !unknown_int() ==> x > 2;\nloop invariant x == 1 + 2 * (unknown_int() ? (unsigned int) (1 / (unsigned int) 0) : (unsigned int) (1 / (unsigned int) 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant x % 2 == 0;\nloop invariant (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\nloop invariant i4: (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant i5: (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i6: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i7: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i8: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i9: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i10: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i11: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i12: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i13: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i14: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 < x;\nloop invariant x % 2 == 0;\nloop invariant unknown_int() ==> 1 < x <= 2 * x;\nloop invariant ~unknown_int() ==> x == 1;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> x % 2 == 0;\nloop invariant unknown_int() ==> x <= 2 * x;\nloop invariant unknown_int() ==> x < 2 * x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant x % 2 == 0 is preserved but not established.\nAssertion x % 2 != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 24,
                "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant x % 2 == 0 ==> x is even;\nloop invariant x % 2 != 0 ==> x is odd;\nloop invariant x % 2 == 0 ==> x is not odd;\nloop invariant x % 2 != 0 ==> x is not even;\nloop invariant x is even ==> x % 2 == 0;\nloop invariant x is odd ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x is divisible by 2;\nloop invariant x % 2 != 0 ==> x is not divisible by 2;\nloop invariant x is not divisible by 2 ==> x % 2 != 0;\nloop invariant x is divisible by 2 ==> x % 2 == 0;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not divisible by 2 ==> x is odd;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is even ==> x is not odd;\nloop invariant x is odd ==> x is not even;\nloop invariant x is not even ==> x is odd;\nloop invariant x is not odd ==> x is even;\nloop invariant x is even ==> x is divisible by 2;\nloop invariant x is not even ==> x is not divisible by 2;\nloop invariant x is divisible by 2 ==> x is even;\nloop invariant x is not divisible by 2 ==> x is not even;\nloop invariant x is odd ==> x is not divisible by 2;\nloop invariant x is not odd ==> x is divisible by 2;\nloop invariant x is divisible by 2 ==> x is not odd;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token 'is'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\nloop invariant i1: 0 <= x <= 2^32 - 1;\nloop invariant i2: (x % 2) == 0;\nloop invariant i3: x >= 0;\nloop invariant i4: unknown_int() ==> x >= 1;\nloop invariant i5: unknown_int() ==> x % 2 == 0;\nloop invariant i6: unknown_int() ==> x >= 0;\nloop invariant i7: 0 <= x;\nloop invariant i8: x % 2 == 0;\nloop invariant i9: 0 <= x <= 2 * (1 + unknown_int());\nloop invariant i10: (unknown_int() ==> x % 2 == 0);\nloop invariant i11: (unknown_int() == false ==> x % 2 == 1);\nloop invariant i12: 1 <= x <= 2^32;\nloop invariant i13: unknown_int() == 1;\nloop invariant i14: unknown_int() == 0;\nloop invariant i15: x % 2 ==> x >= 2;\nloop invariant i16: x % 2 ==> x < 4294967296;\nloop invariant i17: x % 2 ==> x != 1;\nloop invariant i18: x % 2 ==> x != 2^32;\nloop invariant i19: x % 2 ==> x != 0;\nloop invariant i20: x % 2 ==> x != 2;\nloop invariant i21: x % 2 ==> x != 4;\nloop invariant i22: x % 2 ==> x != 6;\nloop invariant i23: x % 2 ==> x != 8;\nloop invariant i24: x % 2 ==> x != 10;\nloop invariant i25: x % 2 ==> x != 12;\nloop invariant i26: x % 2 ==> x != 14;\nloop invariant i27: x % 2 ==> x != 16;\nloop invariant i28: x % 2 ==> x != 18;\nloop invariant i29: x % 2 ==> x != 20;\nloop invariant i30: x % 2 ==> x != 22;\nloop invariant i31: x % 2 ==> x != 24;\nloop invariant i32: x % 2 ==> x != 26;\nloop invariant i33: x % 2 ==> x != 28;\nloop invariant i34: x % 2 ==> x != 30;\nloop invariant i35: x % 2 ==> x != 32;\nloop invariant i36: x % 2 ==> x != 34;\nloop invariant i37: x % 2 ==> x != 36;\nloop invariant i38: x % 2 ==> x != 38;\nloop invariant i39: x % 2 ==> x != 40;\nloop invariant i40: x % 2 ==> x != 42;\nloop invariant i41: x % 2 ==> x != 44;\nloop invariant i42: x % 2 ==> x != 46;\nloop invariant i43: x % 2 ==> x != 48;\nloop invariant i44: x % 2 ==> x != 50;\nloop invariant i45: 0 <= x <= 2147483647;\nloop invariant i46: 0 <= x % 2 <= 1;\nloop invariant i47: (x % 2) == 1;\nloop invariant i48: 1 <= x <= 2 * unknown_int();\nloop invariant i49: unknown_int() ==> (x % 2 == 0);\nloop invariant i50: unknown_int() ==> (x >= 1);\nloop invariant i51: unknown_int() ==> (2 * unknown_int() >= x);\nloop invariant i52: unknown_int() ==> (x % 2 == 1) ==> (x + 2 >= 3);\nloop invariant i53: unknown_int() ==> (x % 2 == 1) ==> (x + 2 <= 2 * unknown_int() + 1);\nloop invariant i54: 1 <= x;\nloop invariant i55: x >= 2 * unknown_int();\nloop invariant i56: unknown_int() == true ==> x % 2 == 0;\nloop invariant i57: unknown_int() == false ==> x % 2 == 1;\nloop invariant i58: 0 <= x <= 2^(sizeof(unsigned int) * 8) - 1;\nloop invariant i59: unknown_int() ==> (x % 2) == 0;\nloop invariant i60: !unknown_int() ==> (x % 2) == 1;\nloop invariant i61: x >= 2;\nloop invariant i62: !unknown_int() ==> x > 2;\nloop invariant i63: x == 1 + 2 * (unknown_int() ? (unsigned int) (1 / (unsigned int) 0) : (unsigned int) (1 / (unsigned int) 1));\nloop invariant i64: 0 <= x <= unknown_int();\nloop invariant i65: (x + 2) % 2 == 0;\nloop invariant i66: (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant i67: (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i68: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i69: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i70: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i71: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i72: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i73: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i74: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i75: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i76: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i77: 0 < x;\nloop invariant i78: unknown_int() ==> 1 < x <= 2 * x;\nloop invariant i79: ~unknown_int() ==> x == 1;\nloop invariant i80: unknown_int() ==> x <= 2 * x;\nloop invariant i81: unknown_int() ==> x < 2 * x;\nloop invariant i82: i1;\nloop invariant i83: i2;\nloop invariant i84: i3;\nloop invariant i85: i4;\nloop invariant i86: i5;\nloop invariant i87: i6;\nloop invariant i88: i7;\nloop invariant i89: i8;\nloop invariant i90: i9;\nloop invariant i91: i10;\nloop invariant i92: i11;\nloop invariant i93: i12;\nloop invariant i94: i13;\nloop invariant i95: i14;\nloop invariant i96: i15;\nloop invariant i97: i16;\nloop invariant i98: i17;\nloop invariant i99: i18;\nloop invariant i100: i19;\nloop invariant i101: i20;\nloop invariant i102: i21;\nloop invariant i103: i22;\nloop invariant i104: i23;\nloop invariant i105: i24;\nloop invariant i106: i25;\nloop invariant i107: i26;\nloop invariant i108: i27;\nloop invariant i109: i28;\nloop invariant i110: i29;\nloop invariant i111: i30;\nloop invariant i112: i31;\nloop invariant i113: i32;\nloop invariant i114: i33;\nloop invariant i115: i34;\nloop invariant i116: i35;\nloop invariant i117: i36;\nloop invariant i118: i37;\nloop invariant i119: i38;\nloop invariant i120: i39;\nloop invariant i121: i40;\nloop invariant i122: i41;\nloop invariant i123: i42;\nloop invariant i124: i43;\nloop invariant i125: i44;\nloop invariant i126: i45;\nloop invariant i127: i46;\nloop invariant i128: i47;\nloop invariant i129: i48;\nloop invariant i130: i49;\nloop invariant i131: i50;\nloop invariant i132: i51;\nloop invariant i133: i52;\nloop invariant i134: i53;\nloop invariant i135: i54;\nloop invariant i136: i55;\nloop invariant i137: i56;\nloop invariant i138: i57;\nloop invariant i139: i58;\nloop invariant i140: i59;\nloop invariant i141: i60;\nloop invariant i142: i61;\nloop invariant i143: i62;\nloop invariant i144: i63;\nloop invariant i145: i64;\nloop invariant i146: i65;\nloop invariant i147: i66;\nloop invariant i148: i67;\nloop invariant i149: i68;\nloop invariant i150: i69;\nloop invariant i151: i70;\nloop invariant i152: i71;\nloop invariant i153: i72;\nloop invariant i154: i73;\nloop invariant i155: i74;\nloop invariant i156: i75;\nloop invariant i157: i76;\nloop invariant i158: i77;\nloop invariant i159: i78;\nloop invariant i160: i79;\nloop invariant i161: i80;\nloop invariant i162: i81;\nloop invariant i163: i82;\nloop invariant i164: i83;\nloop invariant i165: i84;\nloop invariant i166: i85;\nloop invariant i167: i86;\nloop invariant i168: i87;\nloop invariant i169: i88;\nloop invariant i170: i89;\nloop invariant i171: i90;\nloop invariant i172: i91;\nloop invariant i173: i92;\nloop invariant i174: i93;\nloop invariant i175: i94;\nloop invariant i176: i95;\nloop invariant i177: i96;\nloop invariant i178: i97;\nloop invariant i179: i98;\nloop invariant i180: i99;\nloop invariant i181: i100;\nloop invariant i182: i101;\nloop invariant i183: i102;\nloop invariant i184: i103;\nloop invariant i185: i104;\nloop invariant i186: i105;\nloop invariant i187: i106;\nloop invariant i188: i107;\nloop invariant i189: i108;\nloop invariant i190: i109;\nloop invariant i191: i110;\nloop invariant i192: i111;\nloop invariant i193: i112;\nloop invariant i194: i113;\nloop invariant i195: i114;\nloop invariant i196: i115;\nloop invariant i197: i116;\nloop invariant i198: i117;\nloop invariant i199: i118;\nloop invariant i200: i119;\nloop invariant i201: i120;\nloop invariant i202: i121;\nloop invariant i203: i122;\nloop invariant i204: i123;\nloop invariant i205: i124;\nloop invariant i206: i125;\nloop invariant i207: i126;\nloop invariant i208: i127;\nloop invariant i209: i128;\nloop invariant i210: i129;\nloop invariant i211: i130;\nloop invariant i212: i131;\nloop invariant i213: i132;\nloop invariant i214: i133;\nloop invariant i215: i134;\nloop invariant i216: i135;\nloop invariant i217: i136;\nloop invariant i218: i137;\nloop invariant i219: i138;\nloop invariant i220: i139;\nloop invariant i221: i140;\nloop invariant i222: i141;\nloop invariant i223: i142;\nloop invariant i224: i143;\nloop invariant i225: i144;\nloop invariant i226: i145;\nloop invariant i227: i146;\nloop invariant i228: i147;\nloop invariant i229: i148;\nloop invariant i230: i149;\nloop invariant i231: i150;\nloop invariant i232: i151;\nloop invariant i233: i152;\nloop invariant i234: i153;\nloop invariant i235: i154;\nloop invariant i236: i155;\nloop invariant i237: i156;\nloop invariant i238: i157;\nloop invariant i239: i158;\nloop invariant i240: 0 <= x <= 2;\nloop invariant i241: x >= 1;\nloop invariant i242: x % 2 == 0 ==> x is even;\nloop invariant i243: x % 2 != 0 ==> x is odd;\nloop invariant i244: x % 2 == 0 ==> x is not odd;\nloop invariant i245: x % 2 != 0 ==> x is not even;\nloop invariant i246: x is even ==> x % 2 == 0;\nloop invariant i247: x is odd ==> x % 2 != 0;\nloop invariant i248: x % 2 == 0 ==> x is divisible by 2;\nloop invariant i249: x % 2 != 0 ==> x is not divisible by 2;\nloop invariant i250: x is not divisible by 2 ==> x % 2 != 0;\nloop invariant i251: x is divisible by 2 ==> x % 2 == 0;\nloop invariant i252: x is even ==> x is divisible by 2;\nloop invariant i253: x is odd ==> x is not divisible by 2;\nloop invariant i254: x is not divisible by 2 ==> x is odd;\nloop invariant i255: x is divisible by 2 ==> x is even;\nloop invariant i256: x is even ==> x is not odd;\nloop invariant i257: x is odd ==> x is not even;\nloop invariant i258: x is not even ==> x is odd;\nloop invariant i259: x is not odd ==> x is even;\nloop invariant i260: x is not even ==> x is not divisible by 2;\nloop invariant i261: x is not divisible by 2 ==> x is not even;\nloop invariant i262: x is not odd ==> x is divisible by 2;\nloop invariant i263: x is divisible by 2 ==> x is not odd;\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 224,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 1;\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\nloop invariant i7: 0 <= x;\n\n\n\n\n\n\n\n\nloop invariant i16: x % 2 ==> x < 4294967296;\n\n\nloop invariant i19: x % 2 ==> x != 0;\nloop invariant i20: x % 2 ==> x != 2;\nloop invariant i21: x % 2 ==> x != 4;\nloop invariant i22: x % 2 ==> x != 6;\nloop invariant i23: x % 2 ==> x != 8;\nloop invariant i24: x % 2 ==> x != 10;\nloop invariant i25: x % 2 ==> x != 12;\nloop invariant i26: x % 2 ==> x != 14;\nloop invariant i27: x % 2 ==> x != 16;\nloop invariant i28: x % 2 ==> x != 18;\nloop invariant i29: x % 2 ==> x != 20;\nloop invariant i30: x % 2 ==> x != 22;\nloop invariant i31: x % 2 ==> x != 24;\nloop invariant i32: x % 2 ==> x != 26;\nloop invariant i33: x % 2 ==> x != 28;\nloop invariant i34: x % 2 ==> x != 30;\nloop invariant i35: x % 2 ==> x != 32;\nloop invariant i36: x % 2 ==> x != 34;\nloop invariant i37: x % 2 ==> x != 36;\nloop invariant i38: x % 2 ==> x != 38;\nloop invariant i39: x % 2 ==> x != 40;\nloop invariant i40: x % 2 ==> x != 42;\nloop invariant i41: x % 2 ==> x != 44;\nloop invariant i42: x % 2 ==> x != 46;\nloop invariant i43: x % 2 ==> x != 48;\nloop invariant i44: x % 2 ==> x != 50;\n\nloop invariant i46: 0 <= x % 2 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i66: (x + 2) % 2 == 0 ==> x % 2 == 0;\nloop invariant i67: (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i68: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i69: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i70: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i71: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i72: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i73: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i74: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i75: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i76: (x + 2) % 2 == 0 ==> x % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0 ==> (x + 2) % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c"
        ],
        "skipped": [],
        "total": 6,
        "success_count": 0,
        "failure_count": 6,
        "success_rate": 0.0
    }
}