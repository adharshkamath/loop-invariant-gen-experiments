{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 2*ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize_0 - (leader_len + 2*ielen);\nloop invariant p <= bufsize + leader_len;\nloop invariant p <= bufsize + leader_len - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2*i;\nloop invariant p <= bufsize + leader_len - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 - 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= ielen;\nloop invariant ielen <= bufsize_0 / 2;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize_0 / 2;\nloop invariant bufsize_0 / 2 <= bufsize_0;\nloop invariant bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= p + 2*i;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\n*/\n```",
            "```\n/*@\nloop invariant p == 0;\nloop invariant bufsize == bufsize_0;\nloop invariant 0 <= p && p <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= i && i <= ielen;\nloop invariant 0 <= bufsize_0 && bufsize_0 <= bufsize;\nloop invariant 0 <= leader_len && leader_len <= bufsize;\nloop invariant 0 <= ielen && ielen <= bufsize;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len + i * 2 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p + 1 <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant bufsize < leader_len ==> i = 0;\nloop invariant bufsize >= leader_len ==> 0 <= i <= ielen - 1;\nloop invariant bufsize >= leader_len ==> bufsize > 2 * i;\nloop invariant bufsize >= leader_len ==> ielen > i;\nloop invariant bufsize >= leader_len ==> p = 2 * i + leader_len;\nloop invariant bufsize < leader_len ==> p = bufsize_0 - bufsize + leader_len;\nloop invariant bufsize < leader_len ==> (ielen - i) * 2 >= bufsize_0 - bufsize;\nloop invariant bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\nloop invariant bufsize < leader_len ==> i < ielen;\nloop invariant bufsize < leader_len ==> 2 * i + leader_len <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p;\nloop invariant p + 1 < bufsize_0;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2*ielen;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant p + 1 < bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant (bufsize - 2) * (bufsize - 2 + 1) / 2 <= p;\nloop invariant p <= bufsize_0 - 2 * i;\nloop invariant i * i + i <= p;\nloop invariant p <= bufsize_0 - 2 * (ielen - i);\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 40;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize_0 - leader_len <= bufsize_0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*ielen;\nloop invariant bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant ielen <= bufsize_0 - leader_len / 2;\nloop invariant 2*i <= bufsize <= bufsize_0 - leader_len - ielen;\nloop invariant p <= bufsize_0 - leader_len - ielen;\nloop invariant p >= 2*i;\nloop invariant p <= bufsize_0;\nloop invariant p >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 2*ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize_0 - (leader_len + 2*ielen);\nloop invariant p <= bufsize + leader_len;\nloop invariant p <= bufsize + leader_len - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2*i;\nloop invariant p <= bufsize + leader_len - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i + 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*ielen;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*i;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 - 2;\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 - 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - (leader_len + 2*ielen) is neither established nor preserved.\nloop invariant p <= bufsize + leader_len is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen is preserved but not established.\nloop invariant p <= bufsize + leader_len - 2 - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen is preserved but not established.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen is preserved but not established.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*i + 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2*i + 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*ielen is neither established nor preserved.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*i is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2*i - 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 - 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 0;\nloop invariant i4: bufsize_0 >= leader_len;\nloop invariant i5: bufsize_0 >= 2*ielen;\nloop invariant i6: bufsize >= 2;\n\nloop invariant i8: p >= 0;\nloop invariant i9: p <= bufsize_0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= ielen;\nloop invariant ielen <= bufsize_0 / 2;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize_0 / 2;\nloop invariant bufsize_0 / 2 <= bufsize_0;\nloop invariant bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= leader_len is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= ielen is partially proven to be inductive.\nloop invariant ielen <= bufsize_0 / 2 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= bufsize_0 / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 1) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 2) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 3) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 4) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 5) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 6) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 7) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 8) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 9) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 10) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 11) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 12) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 13) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 14) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 15) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 16) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 17) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 18) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 19) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 20) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 21) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 22) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 23) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 24) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 25) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 26) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 27) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 28) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 29) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 30) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 31) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 32) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 33) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 34) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 35) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 36) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 37) / 2 is partially proven to be inductive.\nloop invariant bufsize_0 / 2 <= (bufsize_0 + 38) / 2 is partially proven to be inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 1 <= bufsize_0;\nloop invariant i2: 0 <= bufsize;\nloop invariant i3: 0 <= p;\nloop invariant i4: p <= bufsize_0;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= ielen;\nloop invariant i7: 0 <= leader_len;\nloop invariant i8: leader_len <= bufsize_0;\nloop invariant i9: 0 <= ielen;\nloop invariant i10: ielen <= bufsize_0 / 2;\nloop invariant i11: 0 <= bufsize_0;\nloop invariant i12: 0 <= bufsize_0 / 2;\nloop invariant i13: bufsize_0 / 2 <= bufsize_0;\nloop invariant i14: bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant i15: bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant i16: bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant i17: bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant i18: bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant i19: bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant i20: bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant i21: bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant i22: bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant i23: bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant i24: bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant i25: bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant i26: bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant i27: bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant i28: bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant i29: bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant i30: bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant i31: bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant i32: bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant i33: bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant i34: bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant i35: bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant i36: bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant i37: bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant i38: bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant i39: bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant i40: bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant i41: bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant i42: bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant i43: bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant i44: bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant i45: bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant i46: bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant i47: bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant i48: bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant i49: bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant i50: bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant i51: bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant i52: bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= p + 2*i;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\nloop invariant bufsize_0 >= bufsize + p + 2*i;\nloop invariant bufsize >= bufsize_0 - p - 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize_0 >= p + 2*i is established but not preserved.\nloop invariant p + 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - p - 2*i is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize + p + 2*i is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= 0;\n\n\n\nloop invariant i6: bufsize >= bufsize_0 - p - 2*i;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: i <= ielen;\nloop invariant i4: bufsize >= 2;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant p == 0;\nloop invariant bufsize == bufsize_0;\nloop invariant 0 <= p && p <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= i && i <= ielen;\nloop invariant 0 <= bufsize_0 && bufsize_0 <= bufsize;\nloop invariant 0 <= leader_len && leader_len <= bufsize;\nloop invariant 0 <= ielen && ielen <= bufsize;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant p == 0 is preserved but not established.\nloop invariant bufsize == bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p && p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i && i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 && bufsize_0 <= bufsize is partially proven to be inductive.\nloop invariant 0 <= leader_len && leader_len <= bufsize is partially proven to be inductive.\nloop invariant 0 <= ielen && ielen <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\nloop invariant i3: 0 <= p && p <= bufsize_0;\nloop invariant i4: 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant i5: 0 <= i && i <= ielen;\n\n\nloop invariant i8: 0 <= ielen && ielen <= bufsize;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len + i * 2 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p + 1 <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len + i * 2 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 <= bufsize_0 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: leader_len + i * 2 <= p <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant i5: bufsize >= 2;\nloop invariant i6: p >= leader_len;\nloop invariant i7: p <= bufsize_0;\nloop invariant i8: 0 <= bufsize <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant bufsize < leader_len ==> i = 0;\nloop invariant bufsize >= leader_len ==> 0 <= i <= ielen - 1;\nloop invariant bufsize >= leader_len ==> bufsize > 2 * i;\nloop invariant bufsize >= leader_len ==> ielen > i;\nloop invariant bufsize >= leader_len ==> p = 2 * i + leader_len;\nloop invariant bufsize < leader_len ==> p = bufsize_0 - bufsize + leader_len;\nloop invariant bufsize < leader_len ==> (ielen - i) * 2 >= bufsize_0 - bufsize;\nloop invariant bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\nloop invariant bufsize < leader_len ==> i < ielen;\nloop invariant bufsize < leader_len ==> 2 * i + leader_len <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 39: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\n\n\n\n\n\n\n\nloop invariant i9: bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p + 1 < bufsize_0;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 is established but not preserved.\nloop invariant leader_len <= bufsize is preserved but not established.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\n\n\nloop invariant i4: leader_len <= bufsize_0;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= ielen;\nloop invariant i7: bufsize >= 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2*ielen;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize >= 2*ielen;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: bufsize >= 2;\nloop invariant i6: bufsize >= 2*i;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant p + 1 < bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 2 * (ielen - i) is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - p is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 0;\nloop invariant i3: bufsize >= 2 * (ielen - i);\nloop invariant i4: p >= 0;\nloop invariant i5: p <= bufsize_0;\nloop invariant i6: bufsize >= bufsize_0 - p;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant (bufsize - 2) * (bufsize - 2 + 1) / 2 <= p;\nloop invariant p <= bufsize_0 - 2 * i;\nloop invariant i * i + i <= p;\nloop invariant p <= bufsize_0 - 2 * (ielen - i);\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 40;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is established but not preserved.\nloop invariant (bufsize - 2) * (bufsize - 2 + 1) / 2 <= p is preserved but not established.\nloop invariant p <= bufsize_0 - 2 * i is established but not preserved.\nloop invariant i * i + i <= p is established but not preserved.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 1 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 2 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 3 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 4 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 5 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 6 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 7 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 8 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 9 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 10 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 11 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 12 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 13 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 14 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 15 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 16 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 17 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 18 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 19 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 20 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 21 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 22 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 23 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 24 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 25 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 26 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 27 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 28 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 29 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 30 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 31 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 32 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 33 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 34 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 35 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 36 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 37 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 38 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 39 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 * (ielen - i) + 40 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: 0 <= i;\nloop invariant i4: i <= ielen;\nloop invariant i5: 0 <= bufsize;\nloop invariant i6: bufsize <= bufsize_0;\n\n\n\n\nloop invariant i11: p <= bufsize_0 - 2 * (ielen - i);\nloop invariant i12: p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant i13: p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant i14: p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant i15: p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant i16: p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant i17: p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant i18: p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant i19: p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant i20: p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant i21: p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant i22: p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant i23: p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant i24: p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant i25: p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant i26: p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant i27: p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant i28: p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant i29: p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant i30: p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant i31: p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant i32: p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant i33: p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant i34: p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant i35: p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant i36: p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant i37: p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant i38: p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant i39: p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant i40: p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant i41: p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant i42: p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant i43: p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant i44: p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant i45: p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant i46: p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant i47: p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant i48: p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant i49: p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant i50: p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant i51: p <= bufsize_0 - 2 * (ielen - i) + 40;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 38: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize_0 - leader_len <= bufsize_0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*ielen;\nloop invariant bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2*i is established but not preserved.\nloop invariant bufsize <= bufsize_0 - 2*i is established but not preserved.\nloop invariant bufsize_0 - leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len - 2*ielen <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2*ielen is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len - 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\nloop invariant i4: 0 <= p <= bufsize_0;\n\n\nloop invariant i7: bufsize_0 - leader_len <= bufsize_0;\nloop invariant i8: bufsize_0 >= leader_len;\nloop invariant i9: bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant i10: bufsize_0 >= leader_len + 2*ielen;\nloop invariant i11: bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant i12: bufsize_0 >= leader_len + 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant ielen <= bufsize_0 - leader_len / 2;\nloop invariant 2*i <= bufsize <= bufsize_0 - leader_len - ielen;\nloop invariant p <= bufsize_0 - leader_len - ielen;\nloop invariant p >= 2*i;\nloop invariant p <= bufsize_0;\nloop invariant p >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant ielen <= bufsize_0 - leader_len / 2 is partially proven to be inductive.\nloop invariant 2*i <= bufsize <= bufsize_0 - leader_len - ielen is preserved but not established.\nloop invariant p <= bufsize_0 - leader_len - ielen is partially proven to be inductive.\nloop invariant p >= 2*i is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i4: leader_len <= bufsize_0;\nloop invariant i5: ielen <= bufsize_0 - leader_len / 2;\n\n\nloop invariant i8: p >= 2*i;\nloop invariant i9: p <= bufsize_0;\nloop invariant i10: p >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 157: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 0;\nloop invariant i4: bufsize_0 >= leader_len;\nloop invariant i5: bufsize_0 >= 2*ielen;\nloop invariant i6: bufsize >= 2;\nloop invariant i7: bufsize >= 2*i;\nloop invariant i8: p >= 0;\nloop invariant i9: p <= bufsize_0;\nloop invariant i10: p <= bufsize_0 - (leader_len + 2*ielen);\nloop invariant i11: p <= bufsize + leader_len;\nloop invariant i12: p <= bufsize + leader_len - 2*ielen;\nloop invariant i13: p <= bufsize + leader_len - 2*i;\nloop invariant i14: p <= bufsize + leader_len - 2;\nloop invariant i15: p <= bufsize + leader_len - 2*ielen + 2;\nloop invariant i16: p <= bufsize + leader_len - 2*i + 2;\nloop invariant i17: p <= bufsize + leader_len - 2 - 2*ielen;\nloop invariant i18: p <= bufsize + leader_len - 2 - 2*i;\nloop invariant i19: p <= bufsize + leader_len - 2 - 2;\nloop invariant i20: p <= bufsize + leader_len - 2*ielen + 2 - 2;\nloop invariant i21: p <= bufsize + leader_len - 2*i + 2 - 2;\nloop invariant i22: p <= bufsize + leader_len - 2 - 2*ielen + 2;\nloop invariant i23: p <= bufsize + leader_len - 2 - 2*i + 2;\nloop invariant i24: p <= bufsize + leader_len - 2 - 2 - 2*ielen;\nloop invariant i25: p <= bufsize + leader_len - 2 - 2 - 2*i;\nloop invariant i26: p <= bufsize + leader_len - 2 - 2 - 2;\nloop invariant i27: p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2;\nloop invariant i28: p <= bufsize + leader_len - 2*i - 2 - 2;\nloop invariant i29: p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2;\nloop invariant i30: p <= bufsize + leader_len - 2 - 2*i + 2 - 2;\nloop invariant i31: p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2;\nloop invariant i32: p <= bufsize + leader_len - 2 - 2 - 2*i + 2;\nloop invariant i33: p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen;\nloop invariant i34: p <= bufsize + leader_len - 2 - 2 - 2 - 2*i;\nloop invariant i35: p <= bufsize + leader_len - 2 - 2 - 2 - 2;\nloop invariant i36: p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant i37: p <= bufsize + leader_len - 2*i - 2 - 2 - 2;\nloop invariant i38: p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2;\nloop invariant i39: p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2;\nloop invariant i40: p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2;\nloop invariant i41: p <= bufsize + leader_len - 2 - 2 - 2*i + 2 - 2;\nloop invariant i42: p <= bufsize + leader_len - 2 - 2 - 2 - 2*ielen + 2;\nloop invariant i43: p <= bufsize + leader_len - 2 - 2 - 2 - 2*i + 2;\nloop invariant i44: p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*ielen;\nloop invariant i45: p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2*i;\nloop invariant i46: p <= bufsize + leader_len - 2 - 2 - 2 - 2 - 2;\nloop invariant i47: p <= bufsize + leader_len - 2*ielen + 2 - 2 - 2 - 2 - 2;\nloop invariant i48: p <= bufsize + leader_len - 2*i - 2 - 2 - 2 - 2;\nloop invariant i49: p <= bufsize + leader_len - 2 - 2*ielen + 2 - 2 - 2 - 2;\nloop invariant i50: p <= bufsize + leader_len - 2 - 2*i + 2 - 2 - 2 - 2;\nloop invariant i51: p <= bufsize + leader_len - 2 - 2 - 2*ielen + 2 - 2 - 2;\nloop invariant i52: 1 <= bufsize_0;\nloop invariant i53: 0 <= bufsize;\nloop invariant i54: 0 <= p;\nloop invariant i55: 0 <= i;\nloop invariant i56: i <= ielen;\nloop invariant i57: 0 <= leader_len;\nloop invariant i58: leader_len <= bufsize_0;\nloop invariant i59: 0 <= ielen;\nloop invariant i60: ielen <= bufsize_0 / 2;\nloop invariant i61: 0 <= bufsize_0;\nloop invariant i62: 0 <= bufsize_0 / 2;\nloop invariant i63: bufsize_0 / 2 <= bufsize_0;\nloop invariant i64: bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant i65: bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant i66: bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant i67: bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant i68: bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant i69: bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant i70: bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant i71: bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant i72: bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant i73: bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant i74: bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant i75: bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant i76: bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant i77: bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant i78: bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant i79: bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant i80: bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant i81: bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant i82: bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant i83: bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant i84: bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant i85: bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant i86: bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant i87: bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant i88: bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant i89: bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant i90: bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant i91: bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant i92: bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant i93: bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant i94: bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant i95: bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant i96: bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant i97: bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant i98: bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant i99: bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant i100: bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant i101: bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant i102: bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\nloop invariant i103: bufsize_0 >= p + 2*i;\nloop invariant i104: p + 2*i <= bufsize_0;\nloop invariant i105: bufsize >= bufsize_0 - p - 2*i;\nloop invariant i106: bufsize_0 >= bufsize + p + 2*i;\nloop invariant i107: p == 0;\nloop invariant i108: bufsize == bufsize_0;\nloop invariant i109: 0 <= p && p <= bufsize_0;\nloop invariant i110: 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant i111: 0 <= i && i <= ielen;\nloop invariant i112: 0 <= bufsize_0 && bufsize_0 <= bufsize;\nloop invariant i113: 0 <= leader_len && leader_len <= bufsize;\nloop invariant i114: 0 <= ielen && ielen <= bufsize;\nloop invariant i115: leader_len + i * 2 <= p <= bufsize_0;\nloop invariant i116: bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant i117: p >= leader_len;\nloop invariant i118: 0 <= bufsize <= bufsize_0;\nloop invariant i119: p + 1 <= bufsize_0;\nloop invariant i120: bufsize < leader_len ==> i = 0;\nloop invariant i121: bufsize >= leader_len ==> 0 <= i <= ielen - 1;\nloop invariant i122: bufsize >= leader_len ==> bufsize > 2 * i;\nloop invariant i123: bufsize >= leader_len ==> ielen > i;\nloop invariant i124: bufsize >= leader_len ==> p = 2 * i + leader_len;\nloop invariant i125: bufsize < leader_len ==> p = bufsize_0 - bufsize + leader_len;\nloop invariant i126: bufsize < leader_len ==> (ielen - i) * 2 >= bufsize_0 - bufsize;\nloop invariant i127: bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\nloop invariant i128: bufsize < leader_len ==> i < ielen;\nloop invariant i129: bufsize < leader_len ==> 2 * i + leader_len <= bufsize_0;\nloop invariant i130: p + 1 < bufsize_0;\nloop invariant i131: leader_len <= bufsize;\nloop invariant i132: bufsize >= 2*ielen;\nloop invariant i133: i >= 0;\nloop invariant i134: bufsize >= leader_len;\nloop invariant i135: 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\nloop invariant i136: bufsize >= 2 * (ielen - i);\nloop invariant i137: bufsize >= bufsize_0 - p;\nloop invariant i138: bufsize <= bufsize_0;\nloop invariant i139: bufsize >= 2 * i;\nloop invariant i140: (bufsize - 2) * (bufsize - 2 + 1) / 2 <= p;\nloop invariant i141: p <= bufsize_0 - 2 * i;\nloop invariant i142: i * i + i <= p;\nloop invariant i143: p <= bufsize_0 - 2 * (ielen - i);\nloop invariant i144: p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant i145: p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant i146: p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant i147: p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant i148: p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant i149: p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant i150: p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant i151: p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant i152: p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant i153: p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant i154: p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant i155: p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant i156: p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant i157: p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant i158: p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant i159: p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant i160: p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant i161: p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant i162: p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant i163: p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant i164: p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant i165: p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant i166: p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant i167: p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant i168: p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant i169: p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant i170: p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant i171: p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant i172: p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant i173: p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant i174: p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant i175: p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant i176: p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant i177: p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant i178: p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant i179: p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant i180: p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant i181: p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant i182: p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant i183: p <= bufsize_0 - 2 * (ielen - i) + 40;\nloop invariant i184: p <= bufsize_0 - 2*i;\nloop invariant i185: bufsize <= bufsize_0 - 2*i;\nloop invariant i186: bufsize_0 - leader_len <= bufsize_0;\nloop invariant i187: bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant i188: bufsize_0 >= leader_len + 2*ielen;\nloop invariant i189: bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant i190: bufsize_0 >= leader_len + 2*i;\nloop invariant i191: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i192: ielen <= bufsize_0 - leader_len / 2;\nloop invariant i193: 2*i <= bufsize <= bufsize_0 - leader_len - ielen;\nloop invariant i194: p <= bufsize_0 - leader_len - ielen;\nloop invariant i195: p >= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "combined_annotation_num_solver_calls": 20,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 0;\nloop invariant i4: bufsize_0 >= leader_len;\nloop invariant i5: bufsize_0 >= 2*ielen;\nloop invariant i6: bufsize >= 2;\nloop invariant i7: bufsize >= 2*i;\nloop invariant i8: p >= 0;\nloop invariant i9: p <= bufsize_0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i52: 1 <= bufsize_0;\nloop invariant i53: 0 <= bufsize;\nloop invariant i54: 0 <= p;\nloop invariant i55: 0 <= i;\nloop invariant i56: i <= ielen;\nloop invariant i57: 0 <= leader_len;\nloop invariant i58: leader_len <= bufsize_0;\nloop invariant i59: 0 <= ielen;\nloop invariant i60: ielen <= bufsize_0 / 2;\nloop invariant i61: 0 <= bufsize_0;\nloop invariant i62: 0 <= bufsize_0 / 2;\nloop invariant i63: bufsize_0 / 2 <= bufsize_0;\nloop invariant i64: bufsize_0 / 2 <= bufsize_0 / 2;\nloop invariant i65: bufsize_0 / 2 <= (bufsize_0 + 1) / 2;\nloop invariant i66: bufsize_0 / 2 <= (bufsize_0 + 2) / 2;\nloop invariant i67: bufsize_0 / 2 <= (bufsize_0 + 3) / 2;\nloop invariant i68: bufsize_0 / 2 <= (bufsize_0 + 4) / 2;\nloop invariant i69: bufsize_0 / 2 <= (bufsize_0 + 5) / 2;\nloop invariant i70: bufsize_0 / 2 <= (bufsize_0 + 6) / 2;\nloop invariant i71: bufsize_0 / 2 <= (bufsize_0 + 7) / 2;\nloop invariant i72: bufsize_0 / 2 <= (bufsize_0 + 8) / 2;\nloop invariant i73: bufsize_0 / 2 <= (bufsize_0 + 9) / 2;\nloop invariant i74: bufsize_0 / 2 <= (bufsize_0 + 10) / 2;\nloop invariant i75: bufsize_0 / 2 <= (bufsize_0 + 11) / 2;\nloop invariant i76: bufsize_0 / 2 <= (bufsize_0 + 12) / 2;\nloop invariant i77: bufsize_0 / 2 <= (bufsize_0 + 13) / 2;\nloop invariant i78: bufsize_0 / 2 <= (bufsize_0 + 14) / 2;\nloop invariant i79: bufsize_0 / 2 <= (bufsize_0 + 15) / 2;\nloop invariant i80: bufsize_0 / 2 <= (bufsize_0 + 16) / 2;\nloop invariant i81: bufsize_0 / 2 <= (bufsize_0 + 17) / 2;\nloop invariant i82: bufsize_0 / 2 <= (bufsize_0 + 18) / 2;\nloop invariant i83: bufsize_0 / 2 <= (bufsize_0 + 19) / 2;\nloop invariant i84: bufsize_0 / 2 <= (bufsize_0 + 20) / 2;\nloop invariant i85: bufsize_0 / 2 <= (bufsize_0 + 21) / 2;\nloop invariant i86: bufsize_0 / 2 <= (bufsize_0 + 22) / 2;\nloop invariant i87: bufsize_0 / 2 <= (bufsize_0 + 23) / 2;\nloop invariant i88: bufsize_0 / 2 <= (bufsize_0 + 24) / 2;\nloop invariant i89: bufsize_0 / 2 <= (bufsize_0 + 25) / 2;\nloop invariant i90: bufsize_0 / 2 <= (bufsize_0 + 26) / 2;\nloop invariant i91: bufsize_0 / 2 <= (bufsize_0 + 27) / 2;\nloop invariant i92: bufsize_0 / 2 <= (bufsize_0 + 28) / 2;\nloop invariant i93: bufsize_0 / 2 <= (bufsize_0 + 29) / 2;\nloop invariant i94: bufsize_0 / 2 <= (bufsize_0 + 30) / 2;\nloop invariant i95: bufsize_0 / 2 <= (bufsize_0 + 31) / 2;\nloop invariant i96: bufsize_0 / 2 <= (bufsize_0 + 32) / 2;\nloop invariant i97: bufsize_0 / 2 <= (bufsize_0 + 33) / 2;\nloop invariant i98: bufsize_0 / 2 <= (bufsize_0 + 34) / 2;\nloop invariant i99: bufsize_0 / 2 <= (bufsize_0 + 35) / 2;\nloop invariant i100: bufsize_0 / 2 <= (bufsize_0 + 36) / 2;\nloop invariant i101: bufsize_0 / 2 <= (bufsize_0 + 37) / 2;\nloop invariant i102: bufsize_0 / 2 <= (bufsize_0 + 38) / 2;\n\n\nloop invariant i105: bufsize >= bufsize_0 - p - 2*i;\n\n\n\nloop invariant i109: 0 <= p && p <= bufsize_0;\nloop invariant i110: 0 <= bufsize && bufsize <= bufsize_0;\nloop invariant i111: 0 <= i && i <= ielen;\n\n\nloop invariant i114: 0 <= ielen && ielen <= bufsize;\nloop invariant i115: leader_len + i * 2 <= p <= bufsize_0;\nloop invariant i116: bufsize_0 - leader_len - i * 2 <= bufsize <= bufsize_0;\nloop invariant i117: p >= leader_len;\nloop invariant i118: 0 <= bufsize <= bufsize_0;\nloop invariant i119: p + 1 <= bufsize_0;\n\nloop invariant i121: bufsize >= leader_len ==> 0 <= i <= ielen - 1;\nloop invariant i122: bufsize >= leader_len ==> bufsize > 2 * i;\nloop invariant i123: bufsize >= leader_len ==> ielen > i;\n\n\n\nloop invariant i127: bufsize < leader_len ==> (ielen - i) * 2 <= bufsize_0;\nloop invariant i128: bufsize < leader_len ==> i < ielen;\nloop invariant i129: bufsize < leader_len ==> 2 * i + leader_len <= bufsize_0;\nloop invariant i130: p + 1 < bufsize_0;\n\nloop invariant i132: bufsize >= 2*ielen;\nloop invariant i133: i >= 0;\n\nloop invariant i135: 0 <= i < ielen; loop invariant 0 <= p <= bufsize_0; loop invariant 0 <= bufsize <= bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p + 1; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> 0 <= p; loop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> bufsize_0 >= bufsize_0; loop invariant p + 1 < bufsize_0 ==> i + 1 < ielen; loop invariant p + 1 < bufsize_0 ==> i + 1 >= 0; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2; loop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\nloop invariant i136: bufsize >= 2 * (ielen - i);\nloop invariant i137: bufsize >= bufsize_0 - p;\nloop invariant i138: bufsize <= bufsize_0;\nloop invariant i139: bufsize >= 2 * i;\n\n\n\nloop invariant i143: p <= bufsize_0 - 2 * (ielen - i);\nloop invariant i144: p <= bufsize_0 - 2 * (ielen - i) + 1;\nloop invariant i145: p <= bufsize_0 - 2 * (ielen - i) + 2;\nloop invariant i146: p <= bufsize_0 - 2 * (ielen - i) + 3;\nloop invariant i147: p <= bufsize_0 - 2 * (ielen - i) + 4;\nloop invariant i148: p <= bufsize_0 - 2 * (ielen - i) + 5;\nloop invariant i149: p <= bufsize_0 - 2 * (ielen - i) + 6;\nloop invariant i150: p <= bufsize_0 - 2 * (ielen - i) + 7;\nloop invariant i151: p <= bufsize_0 - 2 * (ielen - i) + 8;\nloop invariant i152: p <= bufsize_0 - 2 * (ielen - i) + 9;\nloop invariant i153: p <= bufsize_0 - 2 * (ielen - i) + 10;\nloop invariant i154: p <= bufsize_0 - 2 * (ielen - i) + 11;\nloop invariant i155: p <= bufsize_0 - 2 * (ielen - i) + 12;\nloop invariant i156: p <= bufsize_0 - 2 * (ielen - i) + 13;\nloop invariant i157: p <= bufsize_0 - 2 * (ielen - i) + 14;\nloop invariant i158: p <= bufsize_0 - 2 * (ielen - i) + 15;\nloop invariant i159: p <= bufsize_0 - 2 * (ielen - i) + 16;\nloop invariant i160: p <= bufsize_0 - 2 * (ielen - i) + 17;\nloop invariant i161: p <= bufsize_0 - 2 * (ielen - i) + 18;\nloop invariant i162: p <= bufsize_0 - 2 * (ielen - i) + 19;\nloop invariant i163: p <= bufsize_0 - 2 * (ielen - i) + 20;\nloop invariant i164: p <= bufsize_0 - 2 * (ielen - i) + 21;\nloop invariant i165: p <= bufsize_0 - 2 * (ielen - i) + 22;\nloop invariant i166: p <= bufsize_0 - 2 * (ielen - i) + 23;\nloop invariant i167: p <= bufsize_0 - 2 * (ielen - i) + 24;\nloop invariant i168: p <= bufsize_0 - 2 * (ielen - i) + 25;\nloop invariant i169: p <= bufsize_0 - 2 * (ielen - i) + 26;\nloop invariant i170: p <= bufsize_0 - 2 * (ielen - i) + 27;\nloop invariant i171: p <= bufsize_0 - 2 * (ielen - i) + 28;\nloop invariant i172: p <= bufsize_0 - 2 * (ielen - i) + 29;\nloop invariant i173: p <= bufsize_0 - 2 * (ielen - i) + 30;\nloop invariant i174: p <= bufsize_0 - 2 * (ielen - i) + 31;\nloop invariant i175: p <= bufsize_0 - 2 * (ielen - i) + 32;\nloop invariant i176: p <= bufsize_0 - 2 * (ielen - i) + 33;\nloop invariant i177: p <= bufsize_0 - 2 * (ielen - i) + 34;\nloop invariant i178: p <= bufsize_0 - 2 * (ielen - i) + 35;\nloop invariant i179: p <= bufsize_0 - 2 * (ielen - i) + 36;\nloop invariant i180: p <= bufsize_0 - 2 * (ielen - i) + 37;\nloop invariant i181: p <= bufsize_0 - 2 * (ielen - i) + 38;\nloop invariant i182: p <= bufsize_0 - 2 * (ielen - i) + 39;\nloop invariant i183: p <= bufsize_0 - 2 * (ielen - i) + 40;\n\n\nloop invariant i186: bufsize_0 - leader_len <= bufsize_0;\nloop invariant i187: bufsize_0 - leader_len - 2*ielen <= bufsize_0;\nloop invariant i188: bufsize_0 >= leader_len + 2*ielen;\nloop invariant i189: bufsize_0 - leader_len - 2*i <= bufsize_0;\nloop invariant i190: bufsize_0 >= leader_len + 2*i;\nloop invariant i191: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i192: ielen <= bufsize_0 - leader_len / 2;\n\n\nloop invariant i195: p >= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c"
        ],
        "skipped": [],
        "total": 15,
        "success_count": 2,
        "failure_count": 13,
        "success_rate": 0.13333333333333333
    }
}