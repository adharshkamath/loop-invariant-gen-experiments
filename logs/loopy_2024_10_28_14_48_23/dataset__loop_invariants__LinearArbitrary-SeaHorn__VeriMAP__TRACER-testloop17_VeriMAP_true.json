{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i <= N;\nloop invariant i == j;\nloop invariant k == 0;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == (i < 1 ? 1 : 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i <= N;\nloop invariant (i == 0 ==> k == 1);\nloop invariant (i > 0 ==> k == 0);\nloop invariant (j == i);\nloop invariant (i >= 1 ==> j == i);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i > 0 ==> j > 0);\nloop invariant (i < N ==> j < N);\nloop invariant (i == 0 ==> j == 0);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == 0 ==> j == 0);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0 && i <= N;\nloop invariant j >= 0 && j <= N;\nloop invariant k = (i == 0);\nloop invariant i < N ==> k = 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i <= N;\nloop invariant i == j;\nloop invariant k == (i == 0);\nloop invariant k == (!(i >= 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i + j <= 2N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant k == (0 && i >= 1);\nloop invariant k == (1 && i == 0);\n*/\n```",
            "```\n/*@\nloop invariant i <= N;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == (i < 1 ? 1 : 0);\nloop invariant j == i;\nloop invariant N > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant k ==> j == 1;\nloop invariant !k ==> j == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant k == (i < 1 ? 1 : 0);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i < N;\nloop invariant j == i;\nloop invariant k == (i < 1 ? 1 : 0);\nloop invariant k > 0 ==> i == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < N;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= k*(N-1) + j == i;\nloop invariant (i < 1 ==> k == 1) && (i >= 1 ==> k == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= i + j <= N;\nloop invariant k = (i<1 ? 1 : 0);\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= j <= N;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= N;\nloop invariant j <= N;\nloop invariant k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i >= N ==> k == 1;\nloop invariant i >= N ==> j == N;\nloop invariant i < N ==> j < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i <= j <= 2N;\nloop invariant k == (i == 0 ? 1 : 0);\nloop invariant k <= i <= N;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i == j;\nloop invariant k == i % 2;\nloop invariant k == (i - 1) % 2;\nloop invariant k == (i - 2) % 2;\nloop invariant k == (i - 3) % 2;\nloop invariant k == (i - 4) % 2;\nloop invariant k == (i - 5) % 2;\nloop invariant k == (i - 6) % 2;\nloop invariant k == (i - 7) % 2;\nloop invariant k == (i - 8) % 2;\nloop invariant k == (i - 9) % 2;\nloop invariant k == (i - 10) % 2;\nloop invariant k == (i - 11) % 2;\nloop invariant k == (i - 12) % 2;\nloop invariant k == (i - 13) % 2;\nloop invariant k == (i - 14) % 2;\nloop invariant k == (i - 15) % 2;\nloop invariant k == (i - 16) % 2;\nloop invariant k == (i - 17) % 2;\nloop invariant k == (i - 18) % 2;\nloop invariant k == (i - 19) % 2;\nloop invariant k == (i - 20) % 2;\nloop invariant k == (i - 21) % 2;\nloop invariant k == (i - 22) % 2;\nloop invariant k == (i - 23) % 2;\nloop invariant k == (i - 24) % 2;\nloop invariant k == (i - 25) % 2;\nloop invariant k == (i - 26) % 2;\nloop invariant k == (i - 27) % 2;\nloop invariant k == (i - 28) % 2;\nloop invariant k == (i - 29) % 2;\nloop invariant k == (i - 30) % 2;\nloop invariant k == (i - 31) % 2;\nloop invariant k == (i - 32) % 2;\nloop invariant k == (i - 33) % 2;\nloop invariant k == (i - 34) % 2;\nloop invariant k == (i - 35) % 2;\nloop invariant k == (i - 36) % 2;\nloop invariant k == (i - 37) % 2;\nloop invariant k == (i - 38) % 2;\nloop invariant k == (i - 39) % 2;\nloop invariant k == (i - 40) % 2;\nloop invariant k == (i - 41) % 2;\nloop invariant k == (i - 42) % 2;\nloop invariant k == (i - 43) % 2;\nloop invariant k == (i - 44) % 2;\nloop invariant k == (i - 45) % 2;\nloop invariant k == (i - 46) % 2;\nloop invariant k == (i - 47) % 2;\nloop invariant k == (i - 48) % 2;\nloop invariant k == (i - 49) % 2;\nloop invariant k == (i - 50) % 2;\nloop invariant k == (i - 51) % 2;\nloop invariant k == (i - 52) % 2;\nloop invariant k == (i - 53) % 2;\nloop invariant k == (i - 54) % 2;\nloop invariant k == (i - 55) % 2;\nloop invariant k == (i - 56) % 2;\nloop invariant k == (i - 57) % 2;\nloop invariant k == (i - 58) % 2;\nloop invariant k == (i - 59) % 2;\nloop invariant k == (i - 60) % 2;\nloop invariant k == (i - 61) % 2;\nloop invariant k == (i - 62) % 2;\nloop invariant k == (i - 63) % 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i <= N;\nloop invariant i == j;\nloop invariant k == 0;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == (i < 1 ? 1 : 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant k == (i < 1 ? 1 : 0) is preserved but not established.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= j <= N;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: i == j;\n\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i <= N;\nloop invariant (i == 0 ==> k == 1);\nloop invariant (i > 0 ==> k == 0);\nloop invariant (j == i);\nloop invariant (i >= 1 ==> j == i);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i > 0 ==> j > 0);\nloop invariant (i < N ==> j < N);\nloop invariant (i == 0 ==> j == 0);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == 0 ==> j == 0);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\nloop invariant (i >= 1 ==> j >= 1);\nloop invariant (i < N ==> j < N);\nloop invariant (i == N ==> j == N);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= j <= N is preserved but not established.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant (i == 0 ==> k == 1) is partially proven to be inductive.\nloop invariant (i > 0 ==> k == 0) is partially proven to be inductive.\nloop invariant (j == i) is partially proven to be inductive.\nloop invariant (i >= 1 ==> j == i) is partially proven to be inductive.\nloop invariant (i < N ==> j < N) is partially proven to be inductive.\nloop invariant (i == N ==> j == N) is partially proven to be inductive.\nloop invariant (i > 0 ==> j > 0) is partially proven to be inductive.\nloop invariant (i == 0 ==> j == 0) is partially proven to be inductive.\nloop invariant (i >= 1 ==> j >= 1) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\nloop invariant i2: 0 <= k <= 1;\nloop invariant i3: 0 <= i <= N;\n\n\nloop invariant i6: (j == i);\nloop invariant i7: (i >= 1 ==> j == i);\nloop invariant i8: (i < N ==> j < N);\nloop invariant i9: (i == N ==> j == N);\nloop invariant i10: (i > 0 ==> j > 0);\nloop invariant i11: (i == 0 ==> j == 0);\nloop invariant i12: (i >= 1 ==> j >= 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0 && i <= N;\nloop invariant j >= 0 && j <= N;\nloop invariant k = (i == 0);\nloop invariant i < N ==> k = 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0 && i <= N;\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i <= N;\nloop invariant i == j;\nloop invariant k == (i == 0);\nloop invariant k == (!(i >= 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == (i == 0) is preserved but not established.\nloop invariant k == (!(i >= 1)) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= j <= N;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: i == j;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= i + j <= 2N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: unexpected token 'N'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\n\nloop invariant i4: 0 <= k <= 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant k == (0 && i >= 1);\nloop invariant k == (1 && i == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i + j == N is preserved but not established.\nloop invariant k == (0 && i >= 1) is partially proven to be inductive.\nloop invariant k == (1 && i == 0) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i <= N;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant k == (i < 1 ? 1 : 0);\nloop invariant j == i;\nloop invariant N > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i <= N is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant k == (i < 1 ? 1 : 0) is preserved but not established.\nloop invariant j == i is partially proven to be inductive.\nloop invariant N > 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i <= N;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: k >= 0;\nloop invariant i5: k <= 1;\n\nloop invariant i7: j == i;\nloop invariant i8: N > 0;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= 1;\nloop invariant i + j == N;\nloop invariant k ==> j == 1;\nloop invariant !k ==> j == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= i is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant i + j == N is preserved but not established.\nloop invariant k ==> j == 1 is partially proven to be inductive.\nloop invariant !k ==> j == 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: 0 <= k <= 1;\n\nloop invariant i5: k ==> j == 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= j <= N;\nloop invariant k == (i < 1 ? 1 : 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 0 <= j <= N is partially proven to be inductive.\nloop invariant k == (i < 1 ? 1 : 0) is preserved but not established.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i < N;\nloop invariant j == i;\nloop invariant k == (i < 1 ? 1 : 0);\nloop invariant k > 0 ==> i == N;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i < N is partially proven to be inductive.\nloop invariant j == i is partially proven to be inductive.\nloop invariant k == (i < 1 ? 1 : 0) is preserved but not established.\nloop invariant k > 0 ==> i == N is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\n\nloop invariant i5: j == i;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i < N;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= k*(N-1) + j == i;\nloop invariant (i < 1 ==> k == 1) && (i >= 1 ==> k == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < N is partially proven to be inductive.\nloop invariant 0 <= j <= i is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant 0 <= k*(N-1) + j == i is partially proven to be inductive.\nloop invariant (i < 1 ==> k == 1) && (i >= 1 ==> k == 0) is preserved but not established.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\n\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: 0 <= k <= 1;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant 0 <= i + j <= N;\nloop invariant k = (i<1 ? 1 : 0);\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= j <= N;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= N;\nloop invariant j <= N;\nloop invariant k <= 1;\nloop invariant i < N ==> k == 0;\nloop invariant i >= N ==> k == 1;\nloop invariant i >= N ==> j == N;\nloop invariant i < N ==> j < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant k == 0 ==> i < N;\nloop invariant k == 1 ==> i >= N;\nloop invariant j == N ==> i >= N;\nloop invariant j < N ==> i < N;\nloop invariant j >= i;\nloop invariant j <= N;\nloop invariant k == (i<1 ? 1 : 0);\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant i >= 0;\nloop invariant i <= N;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\n\nloop invariant i4: 0 <= k <= 1;\n\nloop invariant i6: i >= 0;\nloop invariant i7: j >= 0;\nloop invariant i8: k >= 0;\nloop invariant i9: i <= N;\n\nloop invariant i11: k <= 1;\n\n\n\n\nloop invariant i16: j >= i;\n\n\n\n\nloop invariant i21: j < N ==> i < N;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant i <= j <= 2N;\nloop invariant k == (i == 0 ? 1 : 0);\nloop invariant k <= i <= N;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\nloop invariant j >= 0;\nloop invariant j <= 2N;\nloop invariant k >= i;\nloop invariant i <= j;\nloop invariant j <= N;\nloop invariant k <= j;\nloop invariant j >= i;\nloop invariant k >= j;\nloop invariant i >= 0;\nloop invariant j >= i;\nloop invariant k <= j - i;\nloop invariant j >= i + k;\nloop invariant k <= i;\nloop invariant i <= j - k;\nloop invariant j >= k + i;\nloop invariant k <= i + k;\nloop invariant i >= k;\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant k <= N;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 25: unexpected token 'N'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\n\nloop invariant i4: k <= i <= N;\nloop invariant i5: k >= 0;\nloop invariant i6: j >= 0;\n\n\nloop invariant i9: i <= j;\n\nloop invariant i11: k <= j;\nloop invariant i12: j >= i;\n\nloop invariant i14: i >= 0;\n\n\nloop invariant i17: k <= i;\n\n\nloop invariant i20: k <= i + k;\nloop invariant i21: i >= k;\nloop invariant i22: j >= k;\nloop invariant i23: k <= N;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 65,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= N;\nloop invariant j >= 0;\nloop invariant j <= N;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i == j;\nloop invariant k == i % 2;\nloop invariant k == (i - 1) % 2;\nloop invariant k == (i - 2) % 2;\nloop invariant k == (i - 3) % 2;\nloop invariant k == (i - 4) % 2;\nloop invariant k == (i - 5) % 2;\nloop invariant k == (i - 6) % 2;\nloop invariant k == (i - 7) % 2;\nloop invariant k == (i - 8) % 2;\nloop invariant k == (i - 9) % 2;\nloop invariant k == (i - 10) % 2;\nloop invariant k == (i - 11) % 2;\nloop invariant k == (i - 12) % 2;\nloop invariant k == (i - 13) % 2;\nloop invariant k == (i - 14) % 2;\nloop invariant k == (i - 15) % 2;\nloop invariant k == (i - 16) % 2;\nloop invariant k == (i - 17) % 2;\nloop invariant k == (i - 18) % 2;\nloop invariant k == (i - 19) % 2;\nloop invariant k == (i - 20) % 2;\nloop invariant k == (i - 21) % 2;\nloop invariant k == (i - 22) % 2;\nloop invariant k == (i - 23) % 2;\nloop invariant k == (i - 24) % 2;\nloop invariant k == (i - 25) % 2;\nloop invariant k == (i - 26) % 2;\nloop invariant k == (i - 27) % 2;\nloop invariant k == (i - 28) % 2;\nloop invariant k == (i - 29) % 2;\nloop invariant k == (i - 30) % 2;\nloop invariant k == (i - 31) % 2;\nloop invariant k == (i - 32) % 2;\nloop invariant k == (i - 33) % 2;\nloop invariant k == (i - 34) % 2;\nloop invariant k == (i - 35) % 2;\nloop invariant k == (i - 36) % 2;\nloop invariant k == (i - 37) % 2;\nloop invariant k == (i - 38) % 2;\nloop invariant k == (i - 39) % 2;\nloop invariant k == (i - 40) % 2;\nloop invariant k == (i - 41) % 2;\nloop invariant k == (i - 42) % 2;\nloop invariant k == (i - 43) % 2;\nloop invariant k == (i - 44) % 2;\nloop invariant k == (i - 45) % 2;\nloop invariant k == (i - 46) % 2;\nloop invariant k == (i - 47) % 2;\nloop invariant k == (i - 48) % 2;\nloop invariant k == (i - 49) % 2;\nloop invariant k == (i - 50) % 2;\nloop invariant k == (i - 51) % 2;\nloop invariant k == (i - 52) % 2;\nloop invariant k == (i - 53) % 2;\nloop invariant k == (i - 54) % 2;\nloop invariant k == (i - 55) % 2;\nloop invariant k == (i - 56) % 2;\nloop invariant k == (i - 57) % 2;\nloop invariant k == (i - 58) % 2;\nloop invariant k == (i - 59) % 2;\nloop invariant k == (i - 60) % 2;\nloop invariant k == (i - 61) % 2;\nloop invariant k == (i - 62) % 2;\nloop invariant k == (i - 63) % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant j <= N is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant k == i % 2 is partially proven to be inductive.\nloop invariant k == (i - 1) % 2 is preserved but not established.\nloop invariant k == (i - 2) % 2 is partially proven to be inductive.\nloop invariant k == (i - 3) % 2 is partially proven to be inductive.\nloop invariant k == (i - 4) % 2 is partially proven to be inductive.\nloop invariant k == (i - 5) % 2 is partially proven to be inductive.\nloop invariant k == (i - 6) % 2 is partially proven to be inductive.\nloop invariant k == (i - 7) % 2 is partially proven to be inductive.\nloop invariant k == (i - 8) % 2 is partially proven to be inductive.\nloop invariant k == (i - 9) % 2 is partially proven to be inductive.\nloop invariant k == (i - 10) % 2 is partially proven to be inductive.\nloop invariant k == (i - 11) % 2 is partially proven to be inductive.\nloop invariant k == (i - 12) % 2 is partially proven to be inductive.\nloop invariant k == (i - 13) % 2 is partially proven to be inductive.\nloop invariant k == (i - 14) % 2 is partially proven to be inductive.\nloop invariant k == (i - 15) % 2 is partially proven to be inductive.\nloop invariant k == (i - 16) % 2 is partially proven to be inductive.\nloop invariant k == (i - 17) % 2 is partially proven to be inductive.\nloop invariant k == (i - 18) % 2 is partially proven to be inductive.\nloop invariant k == (i - 19) % 2 is partially proven to be inductive.\nloop invariant k == (i - 20) % 2 is partially proven to be inductive.\nloop invariant k == (i - 21) % 2 is partially proven to be inductive.\nloop invariant k == (i - 22) % 2 is partially proven to be inductive.\nloop invariant k == (i - 23) % 2 is partially proven to be inductive.\nloop invariant k == (i - 24) % 2 is partially proven to be inductive.\nloop invariant k == (i - 25) % 2 is partially proven to be inductive.\nloop invariant k == (i - 26) % 2 is partially proven to be inductive.\nloop invariant k == (i - 27) % 2 is partially proven to be inductive.\nloop invariant k == (i - 28) % 2 is partially proven to be inductive.\nloop invariant k == (i - 29) % 2 is partially proven to be inductive.\nloop invariant k == (i - 30) % 2 is partially proven to be inductive.\nloop invariant k == (i - 31) % 2 is partially proven to be inductive.\nloop invariant k == (i - 32) % 2 is partially proven to be inductive.\nloop invariant k == (i - 33) % 2 is partially proven to be inductive.\nloop invariant k == (i - 34) % 2 is partially proven to be inductive.\nloop invariant k == (i - 35) % 2 is partially proven to be inductive.\nloop invariant k == (i - 36) % 2 is partially proven to be inductive.\nloop invariant k == (i - 37) % 2 is partially proven to be inductive.\nloop invariant k == (i - 38) % 2 is partially proven to be inductive.\nloop invariant k == (i - 39) % 2 is partially proven to be inductive.\nloop invariant k == (i - 40) % 2 is partially proven to be inductive.\nloop invariant k == (i - 41) % 2 is partially proven to be inductive.\nloop invariant k == (i - 42) % 2 is partially proven to be inductive.\nloop invariant k == (i - 43) % 2 is partially proven to be inductive.\nloop invariant k == (i - 44) % 2 is partially proven to be inductive.\nloop invariant k == (i - 45) % 2 is partially proven to be inductive.\nloop invariant k == (i - 46) % 2 is partially proven to be inductive.\nloop invariant k == (i - 47) % 2 is partially proven to be inductive.\nloop invariant k == (i - 48) % 2 is partially proven to be inductive.\nloop invariant k == (i - 49) % 2 is partially proven to be inductive.\nloop invariant k == (i - 50) % 2 is partially proven to be inductive.\nloop invariant k == (i - 51) % 2 is partially proven to be inductive.\nloop invariant k == (i - 52) % 2 is partially proven to be inductive.\nloop invariant k == (i - 53) % 2 is partially proven to be inductive.\nloop invariant k == (i - 54) % 2 is partially proven to be inductive.\nloop invariant k == (i - 55) % 2 is partially proven to be inductive.\nloop invariant k == (i - 56) % 2 is partially proven to be inductive.\nloop invariant k == (i - 57) % 2 is partially proven to be inductive.\nloop invariant k == (i - 58) % 2 is partially proven to be inductive.\nloop invariant k == (i - 59) % 2 is partially proven to be inductive.\nloop invariant k == (i - 60) % 2 is partially proven to be inductive.\nloop invariant k == (i - 61) % 2 is partially proven to be inductive.\nloop invariant k == (i - 62) % 2 is partially proven to be inductive.\nloop invariant k == (i - 63) % 2 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= N;\nloop invariant i3: j >= 0;\nloop invariant i4: j <= N;\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\nloop invariant i7: i == j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 44: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= j <= N;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: i == j;\nloop invariant i4: k == 0;\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\nloop invariant i7: k == (i < 1 ? 1 : 0);\nloop invariant i8: 1 <= j <= N;\nloop invariant i9: 0 <= k <= 1;\nloop invariant i10: (i == 0 ==> k == 1);\nloop invariant i11: (i > 0 ==> k == 0);\nloop invariant i12: (j == i);\nloop invariant i13: (i >= 1 ==> j == i);\nloop invariant i14: (i < N ==> j < N);\nloop invariant i15: (i == N ==> j == N);\nloop invariant i16: (i > 0 ==> j > 0);\nloop invariant i17: (i == 0 ==> j == 0);\nloop invariant i18: (i >= 1 ==> j >= 1);\nloop invariant i19: i >= 0 && i <= N;\nloop invariant i20: j >= 0 && j <= N;\nloop invariant i21: k = (i == 0);\nloop invariant i22: i < N ==> k = 0;\nloop invariant i23: k == (i == 0);\nloop invariant i24: k == (!(i >= 1));\nloop invariant i25: 0 <= i + j <= 2N;\nloop invariant i26: i + j == N;\nloop invariant i27: k == (0 && i >= 1);\nloop invariant i28: k == (1 && i == 0);\nloop invariant i29: i <= N;\nloop invariant i30: i >= 0;\nloop invariant i31: j >= 0;\nloop invariant i32: j == i;\nloop invariant i33: N > 0;\nloop invariant i34: 0 <= j <= i;\nloop invariant i35: k ==> j == 1;\nloop invariant i36: !k ==> j == 0;\nloop invariant i37: i < N;\nloop invariant i38: k > 0 ==> i == N;\nloop invariant i39: 0 <= i < N;\nloop invariant i40: 0 <= k*(N-1) + j == i;\nloop invariant i41: (i < 1 ==> k == 1) && (i >= 1 ==> k == 0);\nloop invariant i42: 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\nloop invariant i43: 0 <= i + j <= N;\nloop invariant i44: k = (i<1 ? 1 : 0);\nloop invariant i45: j <= N;\nloop invariant i46: i < N ==> k == 0;\nloop invariant i47: i >= N ==> k == 1;\nloop invariant i48: i >= N ==> j == N;\nloop invariant i49: i < N ==> j < N;\nloop invariant i50: j >= i;\nloop invariant i51: k == (i<1 ? 1 : 0);\nloop invariant i52: k == 0 ==> i < N;\nloop invariant i53: k == 1 ==> i >= N;\nloop invariant i54: j == N ==> i >= N;\nloop invariant i55: j < N ==> i < N;\nloop invariant i56: i <= j <= 2N;\nloop invariant i57: k == (i == 0 ? 1 : 0);\nloop invariant i58: k <= i <= N;\nloop invariant i59: j <= 2N;\nloop invariant i60: k >= i;\nloop invariant i61: i <= j;\nloop invariant i62: k <= j;\nloop invariant i63: k >= j;\nloop invariant i64: k <= j - i;\nloop invariant i65: j >= i + k;\nloop invariant i66: k <= i;\nloop invariant i67: i <= j - k;\nloop invariant i68: j >= k + i;\nloop invariant i69: k <= i + k;\nloop invariant i70: i >= k;\nloop invariant i71: j >= k;\nloop invariant i72: k <= N;\nloop invariant i73: k == i % 2;\nloop invariant i74: k == (i - 1) % 2;\nloop invariant i75: k == (i - 2) % 2;\nloop invariant i76: k == (i - 3) % 2;\nloop invariant i77: k == (i - 4) % 2;\nloop invariant i78: k == (i - 5) % 2;\nloop invariant i79: k == (i - 6) % 2;\nloop invariant i80: k == (i - 7) % 2;\nloop invariant i81: k == (i - 8) % 2;\nloop invariant i82: k == (i - 9) % 2;\nloop invariant i83: k == (i - 10) % 2;\nloop invariant i84: k == (i - 11) % 2;\nloop invariant i85: k == (i - 12) % 2;\nloop invariant i86: k == (i - 13) % 2;\nloop invariant i87: k == (i - 14) % 2;\nloop invariant i88: k == (i - 15) % 2;\nloop invariant i89: k == (i - 16) % 2;\nloop invariant i90: k == (i - 17) % 2;\nloop invariant i91: k == (i - 18) % 2;\nloop invariant i92: k == (i - 19) % 2;\nloop invariant i93: k == (i - 20) % 2;\nloop invariant i94: k == (i - 21) % 2;\nloop invariant i95: k == (i - 22) % 2;\nloop invariant i96: k == (i - 23) % 2;\nloop invariant i97: k == (i - 24) % 2;\nloop invariant i98: k == (i - 25) % 2;\nloop invariant i99: k == (i - 26) % 2;\nloop invariant i100: k == (i - 27) % 2;\nloop invariant i101: k == (i - 28) % 2;\nloop invariant i102: k == (i - 29) % 2;\nloop invariant i103: k == (i - 30) % 2;\nloop invariant i104: k == (i - 31) % 2;\nloop invariant i105: k == (i - 32) % 2;\nloop invariant i106: k == (i - 33) % 2;\nloop invariant i107: k == (i - 34) % 2;\nloop invariant i108: k == (i - 35) % 2;\nloop invariant i109: k == (i - 36) % 2;\nloop invariant i110: k == (i - 37) % 2;\nloop invariant i111: k == (i - 38) % 2;\nloop invariant i112: k == (i - 39) % 2;\nloop invariant i113: k == (i - 40) % 2;\nloop invariant i114: k == (i - 41) % 2;\nloop invariant i115: k == (i - 42) % 2;\nloop invariant i116: k == (i - 43) % 2;\nloop invariant i117: k == (i - 44) % 2;\nloop invariant i118: k == (i - 45) % 2;\nloop invariant i119: k == (i - 46) % 2;\nloop invariant i120: k == (i - 47) % 2;\nloop invariant i121: k == (i - 48) % 2;\nloop invariant i122: k == (i - 49) % 2;\nloop invariant i123: k == (i - 50) % 2;\nloop invariant i124: k == (i - 51) % 2;\nloop invariant i125: k == (i - 52) % 2;\nloop invariant i126: k == (i - 53) % 2;\nloop invariant i127: k == (i - 54) % 2;\nloop invariant i128: k == (i - 55) % 2;\nloop invariant i129: k == (i - 56) % 2;\nloop invariant i130: k == (i - 57) % 2;\nloop invariant i131: k == (i - 58) % 2;\nloop invariant i132: k == (i - 59) % 2;\nloop invariant i133: k == (i - 60) % 2;\nloop invariant i134: k == (i - 61) % 2;\nloop invariant i135: k == (i - 62) % 2;\nloop invariant i136: k == (i - 63) % 2;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= j <= N;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: i == j;\nloop invariant i4: k == 0;\nloop invariant i5: k >= 0;\nloop invariant i6: k <= 1;\n\n\nloop invariant i9: 0 <= k <= 1;\n\nloop invariant i11: (i > 0 ==> k == 0);\nloop invariant i12: (j == i);\nloop invariant i13: (i >= 1 ==> j == i);\nloop invariant i14: (i < N ==> j < N);\nloop invariant i15: (i == N ==> j == N);\nloop invariant i16: (i > 0 ==> j > 0);\nloop invariant i17: (i == 0 ==> j == 0);\nloop invariant i18: (i >= 1 ==> j >= 1);\nloop invariant i19: i >= 0 && i <= N;\nloop invariant i20: j >= 0 && j <= N;\n\n\n\n\n\n\nloop invariant i27: k == (0 && i >= 1);\n\nloop invariant i29: i <= N;\nloop invariant i30: i >= 0;\nloop invariant i31: j >= 0;\nloop invariant i32: j == i;\nloop invariant i33: N > 0;\nloop invariant i34: 0 <= j <= i;\nloop invariant i35: k ==> j == 1;\nloop invariant i36: !k ==> j == 0;\nloop invariant i37: i < N;\nloop invariant i38: k > 0 ==> i == N;\nloop invariant i39: 0 <= i < N;\nloop invariant i40: 0 <= k*(N-1) + j == i;\n\nloop invariant i42: 0 <= i <= N; loop invariant 0 <= j <= N; loop invariant 0 <= k <= 1; loop invariant !(k>0) ==> (i >= 1); loop invariant !(k>0) ==> (j >= 1);\nloop invariant i43: 0 <= i + j <= N;\n\nloop invariant i45: j <= N;\nloop invariant i46: i < N ==> k == 0;\nloop invariant i47: i >= N ==> k == 1;\nloop invariant i48: i >= N ==> j == N;\nloop invariant i49: i < N ==> j < N;\nloop invariant i50: j >= i;\nloop invariant i51: k == (i<1 ? 1 : 0);\nloop invariant i52: k == 0 ==> i < N;\nloop invariant i53: k == 1 ==> i >= N;\nloop invariant i54: j == N ==> i >= N;\nloop invariant i55: j < N ==> i < N;\n\nloop invariant i57: k == (i == 0 ? 1 : 0);\nloop invariant i58: k <= i <= N;\n\nloop invariant i60: k >= i;\nloop invariant i61: i <= j;\nloop invariant i62: k <= j;\nloop invariant i63: k >= j;\nloop invariant i64: k <= j - i;\nloop invariant i65: j >= i + k;\nloop invariant i66: k <= i;\nloop invariant i67: i <= j - k;\nloop invariant i68: j >= k + i;\nloop invariant i69: k <= i + k;\nloop invariant i70: i >= k;\nloop invariant i71: j >= k;\nloop invariant i72: k <= N;\nloop invariant i73: k == i % 2;\nloop invariant i74: k == (i - 1) % 2;\nloop invariant i75: k == (i - 2) % 2;\nloop invariant i76: k == (i - 3) % 2;\nloop invariant i77: k == (i - 4) % 2;\nloop invariant i78: k == (i - 5) % 2;\nloop invariant i79: k == (i - 6) % 2;\nloop invariant i80: k == (i - 7) % 2;\nloop invariant i81: k == (i - 8) % 2;\nloop invariant i82: k == (i - 9) % 2;\nloop invariant i83: k == (i - 10) % 2;\nloop invariant i84: k == (i - 11) % 2;\nloop invariant i85: k == (i - 12) % 2;\nloop invariant i86: k == (i - 13) % 2;\nloop invariant i87: k == (i - 14) % 2;\nloop invariant i88: k == (i - 15) % 2;\nloop invariant i89: k == (i - 16) % 2;\nloop invariant i90: k == (i - 17) % 2;\nloop invariant i91: k == (i - 18) % 2;\nloop invariant i92: k == (i - 19) % 2;\nloop invariant i93: k == (i - 20) % 2;\nloop invariant i94: k == (i - 21) % 2;\nloop invariant i95: k == (i - 22) % 2;\nloop invariant i96: k == (i - 23) % 2;\nloop invariant i97: k == (i - 24) % 2;\nloop invariant i98: k == (i - 25) % 2;\nloop invariant i99: k == (i - 26) % 2;\nloop invariant i100: k == (i - 27) % 2;\nloop invariant i101: k == (i - 28) % 2;\nloop invariant i102: k == (i - 29) % 2;\nloop invariant i103: k == (i - 30) % 2;\nloop invariant i104: k == (i - 31) % 2;\nloop invariant i105: k == (i - 32) % 2;\nloop invariant i106: k == (i - 33) % 2;\nloop invariant i107: k == (i - 34) % 2;\nloop invariant i108: k == (i - 35) % 2;\nloop invariant i109: k == (i - 36) % 2;\nloop invariant i110: k == (i - 37) % 2;\nloop invariant i111: k == (i - 38) % 2;\nloop invariant i112: k == (i - 39) % 2;\nloop invariant i113: k == (i - 40) % 2;\nloop invariant i114: k == (i - 41) % 2;\nloop invariant i115: k == (i - 42) % 2;\nloop invariant i116: k == (i - 43) % 2;\nloop invariant i117: k == (i - 44) % 2;\nloop invariant i118: k == (i - 45) % 2;\nloop invariant i119: k == (i - 46) % 2;\nloop invariant i120: k == (i - 47) % 2;\nloop invariant i121: k == (i - 48) % 2;\nloop invariant i122: k == (i - 49) % 2;\nloop invariant i123: k == (i - 50) % 2;\nloop invariant i124: k == (i - 51) % 2;\nloop invariant i125: k == (i - 52) % 2;\nloop invariant i126: k == (i - 53) % 2;\nloop invariant i127: k == (i - 54) % 2;\nloop invariant i128: k == (i - 55) % 2;\nloop invariant i129: k == (i - 56) % 2;\nloop invariant i130: k == (i - 57) % 2;\nloop invariant i131: k == (i - 58) % 2;\nloop invariant i132: k == (i - 59) % 2;\nloop invariant i133: k == (i - 60) % 2;\nloop invariant i134: k == (i - 61) % 2;\nloop invariant i135: k == (i - 62) % 2;\nloop invariant i136: k == (i - 63) % 2;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 24,
        "success_count": 4,
        "failure_count": 20,
        "success_rate": 0.16666666666666666
    }
}