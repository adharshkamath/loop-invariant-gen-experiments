{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/130.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= x1;\nloop invariant x3 >= x2;\nloop invariant x3 >= x1;\nloop invariant x1 >= 0 ==> x1 >= d1;\nloop invariant x2 >= 0 ==> x2 >= d2;\nloop invariant x3 >= 0 ==> x3 >= d3;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0 ==> x3 >= 0;\nloop invariant x2 <= x2 + d2 * x1;\nloop invariant x3 <= x3 + d3 * x1;\nloop invariant x2 >= x2 - d2 * x1;\nloop invariant x3 >= x3 - d3 * x1;\nloop invariant x1 >= x1 - d1 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= d1;\nloop invariant 0 <= x2 <= d2;\nloop invariant 0 <= x3 <= d3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant x1 <= 1;\nloop invariant x2 <= 1;\nloop invariant x3 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 <= x1;\nloop invariant d2 <= x2;\nloop invariant d3 <= x3;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 <= 1;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= x2 - d2;\nloop invariant x1 >= x3 - d3;\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= x2 - d2;\nloop invariant x1 >= x3 - d3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 0 < x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant x2 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 0;\nloop invariant 0 <= x3 <= 0;\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant x2 <= x1;\nloop invariant x3 <= x1;\nloop invariant x2 <= x3;\nloop invariant x3 == 1 ==> x2 == 0;\nloop invariant x2 == 0 ==> x3 == 1;\nloop invariant x3 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> x3 == 1;\nloop invariant d2 == 1 ==> x2 == 0;\nloop invariant x2 == 0 ==> d2 == 1;\nloop invariant d1 == 1 ==> x1 == 1;\nloop invariant x1 == 1 ==> d1 == 1;\nloop invariant d3 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d3 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 >= d1 * (x2 + x3);\nloop invariant x2 >= d2 * (x3);\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= d1 * (x2 + x3);\nloop invariant x2 >= d2 * (x3);\nloop invariant x3 >= d3;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x1 <= INT_MAX;\nloop invariant 0 <= x2 <= INT_MAX;\nloop invariant 0 <= x3 <= INT_MAX;\nloop invariant 1 <= d1 <= INT_MAX;\nloop invariant 1 <= d2 <= INT_MAX;\nloop invariant 1 <= d3 <= INT_MAX;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= x1 - (x1 / d1) * d1;\nloop invariant x3 >= x2 - (x2 / d2) * d2;\nloop invariant x3 >= x1 - (x1 / d1) * d1 - (x2 / d2) * d2;\n*/\n```",
            "```\n/*@\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= d1;\nloop invariant x1 >= d2;\nloop invariant x1 >= d3;\nloop invariant x2 >= d2;\nloop invariant x2 >= d3;\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= d1 <= 1;\nloop invariant 1 <= d2 <= 1;\nloop invariant 1 <= d3 <= 1;\nloop invariant 1 <= x1 <= 1;\nloop invariant x2 <= 1;\nloop invariant x3 <= 1;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= d1 <= 10;\nloop invariant 1 <= d2 <= 10;\nloop invariant 1 <= d3 <= 10;\nloop invariant 1 <= x1 <= 10;\nloop invariant 1 <= x2 <= 10;\nloop invariant 1 <= x3 <= 10;\nloop invariant x1 >= 0 ==> x2 >= 0;\nloop invariant x1 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= x2;\nloop invariant x1 >= 0 ==> x1 >= x3;\nloop invariant x1 >= 0 ==> x2 >= x3;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= x1;\nloop invariant x3 >= x2;\nloop invariant x3 >= x1;\nloop invariant x1 >= 0 ==> x1 >= d1;\nloop invariant x2 >= 0 ==> x2 >= d2;\nloop invariant x3 >= 0 ==> x3 >= d3;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x2 >= x1 is neither established nor preserved.\nloop invariant x3 >= x2 is neither established nor preserved.\nloop invariant x3 >= x1 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 is established but not preserved.\nloop invariant x2 >= 0 ==> x2 >= d2 is established but not preserved.\nloop invariant x3 >= 0 ==> x3 >= d3 is established but not preserved.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: d1 >= 0;\nloop invariant i2: d2 >= 0;\nloop invariant i3: d3 >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i13: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant i14: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant i15: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant i16: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i17: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i18: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i19: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i20: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i21: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i22: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i23: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i24: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i25: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i26: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i27: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i28: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i29: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i30: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i31: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i32: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i33: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i34: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x2 >= x3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x1 >= x2 is neither established nor preserved.\nloop invariant x2 >= x3 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 1;\nloop invariant i2: 0 <= d2 <= 1;\nloop invariant i3: 0 <= d3 <= 1;\nloop invariant i4: x1 >= 0;\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0 ==> x3 >= 0;\nloop invariant x2 <= x2 + d2 * x1;\nloop invariant x3 <= x3 + d3 * x1;\nloop invariant x2 >= x2 - d2 * x1;\nloop invariant x3 >= x3 - d3 * x1;\nloop invariant x1 >= x1 - d1 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant x2 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x2 <= x2 + d2 * x1 is partially proven to be inductive.\nloop invariant x3 <= x3 + d3 * x1 is partially proven to be inductive.\nloop invariant x2 >= x2 - d2 * x1 is partially proven to be inductive.\nloop invariant x3 >= x3 - d3 * x1 is partially proven to be inductive.\nloop invariant x1 >= x1 - d1 * x1 is partially proven to be inductive.\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 is partially proven to be inductive.\nloop invariant x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1 is partially proven to be inductive.\nloop invariant x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant i11: x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant i12: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 1;\nloop invariant x1 >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x2 <= 1 is neither established nor preserved.\nloop invariant x1 >= 1 is established but not preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= d1;\nloop invariant 0 <= x2 <= d2;\nloop invariant 0 <= x3 <= d3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= d1 is established but not preserved.\nloop invariant 0 <= x2 <= d2 is neither established nor preserved.\nloop invariant 0 <= x3 <= d3 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant d1 > 0;\nloop invariant d2 > 0;\nloop invariant d3 > 0;\nloop invariant x1 <= 1;\nloop invariant x2 <= 1;\nloop invariant x3 <= 1;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant d1 <= x1;\nloop invariant d2 <= x2;\nloop invariant d3 <= x3;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 <= 1;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant d1 > 0 is partially proven to be inductive.\nloop invariant d2 > 0 is partially proven to be inductive.\nloop invariant d3 > 0 is partially proven to be inductive.\nloop invariant x1 <= 1 is partially proven to be inductive.\nloop invariant x2 <= 1 is partially proven to be inductive.\nloop invariant x3 <= 1 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant d1 <= x1 is established but not preserved.\nloop invariant d2 <= x2 is preserved but not established.\nloop invariant d3 <= x3 is preserved but not established.\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) is partially proven to be inductive.\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) is partially proven to be inductive.\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) is partially proven to be inductive.\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2) is partially proven to be inductive.\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2) is partially proven to be inductive.\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2) is partially proven to be inductive.\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1 is partially proven to be inductive.\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 <= 1 is partially proven to be inductive.\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1 is partially proven to be inductive.\nloop invariant x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\nloop invariant i4: d1 > 0;\nloop invariant i5: d2 > 0;\nloop invariant i6: d3 > 0;\nloop invariant i7: x1 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i24: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= x2 - d2;\nloop invariant x1 >= x3 - d3;\nloop invariant 0 <= x1;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= x2 - d2;\nloop invariant x1 >= x3 - d3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nloop invariant x1 >= x2 is neither established nor preserved.\nloop invariant x1 >= x3 is neither established nor preserved.\nloop invariant x2 >= x3 is neither established nor preserved.\nloop invariant x1 >= x2 - d2 is established but not preserved.\nloop invariant x1 >= x3 - d3 is established but not preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant 0 < x1 <= 1;\nloop invariant 0 <= x2 <= 1;\nloop invariant 0 <= x3 <= 1;\nloop invariant x2 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant 0 < x1 <= 1 is established but not preserved.\nloop invariant 0 <= x2 <= 1 is preserved but not established.\nloop invariant 0 <= x3 <= 1 is preserved but not established.\nloop invariant x2 >= 0 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= d1 <= 1;\nloop invariant i2: 0 <= d2 <= 1;\nloop invariant i3: 0 <= d3 <= 1;\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 1;\nloop invariant 0 <= x2 <= 0;\nloop invariant 0 <= x3 <= 0;\nloop invariant 0 <= d1 <= 1;\nloop invariant 0 <= d2 <= 1;\nloop invariant 0 <= d3 <= 1;\nloop invariant x2 <= x1;\nloop invariant x3 <= x1;\nloop invariant x2 <= x3;\nloop invariant x3 == 1 ==> x2 == 0;\nloop invariant x2 == 0 ==> x3 == 1;\nloop invariant x3 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> x3 == 1;\nloop invariant d2 == 1 ==> x2 == 0;\nloop invariant x2 == 0 ==> d2 == 1;\nloop invariant d1 == 1 ==> x1 == 1;\nloop invariant x1 == 1 ==> d1 == 1;\nloop invariant d3 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d3 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\nloop invariant d3 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d2 == 1;\nloop invariant d2 == 1 ==> d1 == 1;\nloop invariant d1 == 1 ==> d3 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 0 is preserved but not established.\nloop invariant 0 <= x3 <= 0 is preserved but not established.\nloop invariant 0 <= d1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= d3 <= 1 is partially proven to be inductive.\nloop invariant x2 <= x1 is partially proven to be inductive.\nloop invariant x3 <= x1 is partially proven to be inductive.\nloop invariant x2 <= x3 is partially proven to be inductive.\nloop invariant x3 == 1 ==> x2 == 0 is partially proven to be inductive.\nloop invariant x2 == 0 ==> x3 == 1 is preserved but not established.\nloop invariant x3 == 1 ==> d3 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 ==> x3 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 ==> x2 == 0 is partially proven to be inductive.\nloop invariant x2 == 0 ==> d2 == 1 is partially proven to be inductive.\nloop invariant d1 == 1 ==> x1 == 1 is partially proven to be inductive.\nloop invariant x1 == 1 ==> d1 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 ==> d2 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 ==> d3 == 1 is partially proven to be inductive.\nloop invariant d1 == 1 ==> d2 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 ==> d1 == 1 is partially proven to be inductive.\nloop invariant d1 == 1 ==> d3 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 ==> d1 == 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 0 <= x1 <= 1;\n\n\nloop invariant i4: 0 <= d1 <= 1;\nloop invariant i5: 0 <= d2 <= 1;\nloop invariant i6: 0 <= d3 <= 1;\n\n\n\n\n\nloop invariant i12: x3 == 1 ==> d3 == 1;\n\n\nloop invariant i15: x2 == 0 ==> d2 == 1;\n\nloop invariant i17: x1 == 1 ==> d1 == 1;\nloop invariant i18: d3 == 1 ==> d2 == 1;\nloop invariant i19: d2 == 1 ==> d3 == 1;\nloop invariant i20: d1 == 1 ==> d2 == 1;\nloop invariant i21: d2 == 1 ==> d1 == 1;\nloop invariant i22: d1 == 1 ==> d3 == 1;\nloop invariant i23: d3 == 1 ==> d1 == 1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 >= d1 * (x2 + x3);\nloop invariant x2 >= d2 * (x3);\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= d1 * (x2 + x3);\nloop invariant x2 >= d2 * (x3);\nloop invariant x3 >= d3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 is partially proven to be inductive.\nloop invariant 0 <= x2 is preserved but not established.\nloop invariant 0 <= x3 is preserved but not established.\nloop invariant x1 >= d1 * (x2 + x3) is preserved but not established.\nloop invariant x2 >= d2 * (x3) is preserved but not established.\nloop invariant x3 >= d3 is preserved but not established.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x1 <= INT_MAX;\nloop invariant 0 <= x2 <= INT_MAX;\nloop invariant 0 <= x3 <= INT_MAX;\nloop invariant 1 <= d1 <= INT_MAX;\nloop invariant 1 <= d2 <= INT_MAX;\nloop invariant 1 <= d3 <= INT_MAX;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x2 >= x1 - (x1 / d1) * d1;\nloop invariant x3 >= x2 - (x2 / d2) * d2;\nloop invariant x3 >= x1 - (x1 / d1) * d1 - (x2 / d2) * d2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x1 <= INT_MAX is established but not preserved.\nloop invariant 0 <= x2 <= INT_MAX is neither established nor preserved.\nloop invariant 0 <= x3 <= INT_MAX is neither established nor preserved.\nloop invariant 1 <= d1 <= INT_MAX is partially proven to be inductive.\nloop invariant 1 <= d2 <= INT_MAX is partially proven to be inductive.\nloop invariant 1 <= d3 <= INT_MAX is partially proven to be inductive.\nloop invariant x2 <= x1 is neither established nor preserved.\nloop invariant x3 <= x2 is neither established nor preserved.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x3 >= 0 is partially proven to be inductive.\nloop invariant x2 >= x1 - (x1 / d1) * d1 is established but not preserved.\nloop invariant x3 >= x2 - (x2 / d2) * d2 is established but not preserved.\nloop invariant x3 >= x1 - (x1 / d1) * d1 - (x2 / d2) * d2 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\nloop invariant i4: 1 <= d1 <= INT_MAX;\nloop invariant i5: 1 <= d2 <= INT_MAX;\nloop invariant i6: 1 <= d3 <= INT_MAX;\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant d1 >= 0;\nloop invariant d2 >= 0;\nloop invariant d3 >= 0;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 >= x2 + x3;\nloop invariant x1 >= d1;\nloop invariant x1 >= d2;\nloop invariant x1 >= d3;\nloop invariant x2 >= d2;\nloop invariant x2 >= d3;\nloop invariant x3 >= d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant d1 >= 0 is partially proven to be inductive.\nloop invariant d2 >= 0 is partially proven to be inductive.\nloop invariant d3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant x1 >= x2 + x3 is preserved but not established.\nloop invariant x1 >= d1 is partially proven to be inductive.\nloop invariant x1 >= d2 is partially proven to be inductive.\nloop invariant x1 >= d3 is partially proven to be inductive.\nloop invariant x2 >= d2 is preserved but not established.\nloop invariant x2 >= d3 is partially proven to be inductive.\nloop invariant x3 >= d3 is preserved but not established.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: d1 >= 0;\nloop invariant i2: d2 >= 0;\nloop invariant i3: d3 >= 0;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= d1 <= 1;\nloop invariant 1 <= d2 <= 1;\nloop invariant 1 <= d3 <= 1;\nloop invariant 1 <= x1 <= 1;\nloop invariant x2 <= 1;\nloop invariant x3 <= 1;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\nloop invariant x3 <= x1;\nloop invariant x3 <= 1;\nloop invariant x2 <= 1;\nloop invariant x1 >= 1;\nloop invariant x3 >= 0;\nloop invariant x2 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 >= 1;\nloop invariant x2 = 0;\nloop invariant x3 = 0;\nloop invariant x2 <= x1;\nloop invariant x3 <= x2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 1 <= d1 <= 1;\nloop invariant i2: 1 <= d2 <= 1;\nloop invariant i3: 1 <= d3 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= d1 <= 10;\nloop invariant 1 <= d2 <= 10;\nloop invariant 1 <= d3 <= 10;\nloop invariant 1 <= x1 <= 10;\nloop invariant 1 <= x2 <= 10;\nloop invariant 1 <= x3 <= 10;\nloop invariant x1 >= 0 ==> x2 >= 0;\nloop invariant x1 >= 0 ==> x3 >= 0;\nloop invariant x1 >= 0 ==> x1 >= x2;\nloop invariant x1 >= 0 ==> x1 >= x3;\nloop invariant x1 >= 0 ==> x2 >= x3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= d1 <= 10 is partially proven to be inductive.\nloop invariant 1 <= d2 <= 10 is partially proven to be inductive.\nloop invariant 1 <= d3 <= 10 is partially proven to be inductive.\nloop invariant 1 <= x1 <= 10 is established but not preserved.\nloop invariant 1 <= x2 <= 10 is neither established nor preserved.\nloop invariant 1 <= x3 <= 10 is neither established nor preserved.\nloop invariant x1 >= 0 ==> x2 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x3 >= 0 is partially proven to be inductive.\nloop invariant x1 >= 0 ==> x1 >= x2 is neither established nor preserved.\nloop invariant x1 >= 0 ==> x1 >= x3 is neither established nor preserved.\nloop invariant x1 >= 0 ==> x2 >= x3 is established but not preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: 1 <= d1 <= 10;\nloop invariant i2: 1 <= d2 <= 10;\nloop invariant i3: 1 <= d3 <= 10;\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 140: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: d1 >= 0;\nloop invariant i2: d2 >= 0;\nloop invariant i3: d3 >= 0;\nloop invariant i4: x1 >= 0;\nloop invariant i5: x2 >= 0;\nloop invariant i6: x3 >= 0;\nloop invariant i7: x2 >= x1;\nloop invariant i8: x3 >= x2;\nloop invariant i9: x3 >= x1;\nloop invariant i10: x1 >= 0 ==> x1 >= d1;\nloop invariant i11: x2 >= 0 ==> x2 >= d2;\nloop invariant i12: x3 >= 0 ==> x3 >= d3;\nloop invariant i13: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant i14: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant i15: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant i16: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i17: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i18: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i19: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i20: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i21: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i22: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i23: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i24: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i25: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i26: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i27: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i28: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i29: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i30: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i31: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i32: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i33: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i34: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i35: 0 <= d1 <= 1;\nloop invariant i36: 0 <= d2 <= 1;\nloop invariant i37: 0 <= d3 <= 1;\nloop invariant i38: x1 >= x2;\nloop invariant i39: x2 >= x3;\nloop invariant i40: 0 <= x1;\nloop invariant i41: x2 >= 0 ==> x3 >= 0;\nloop invariant i42: x2 <= x2 + d2 * x1;\nloop invariant i43: x3 <= x3 + d3 * x1;\nloop invariant i44: x2 >= x2 - d2 * x1;\nloop invariant i45: x3 >= x3 - d3 * x1;\nloop invariant i46: x1 >= x1 - d1 * x1;\nloop invariant i47: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant i48: x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant i49: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant i50: 0 <= x2 <= 1;\nloop invariant i51: x1 >= 1;\nloop invariant i52: 0 <= x1 <= d1;\nloop invariant i53: 0 <= x2 <= d2;\nloop invariant i54: 0 <= x3 <= d3;\nloop invariant i55: 0 <= x1 <= 1;\nloop invariant i56: 0 <= x3 <= 1;\nloop invariant i57: d1 > 0;\nloop invariant i58: d2 > 0;\nloop invariant i59: d3 > 0;\nloop invariant i60: x1 <= 1;\nloop invariant i61: x2 <= 1;\nloop invariant i62: x3 <= 1;\nloop invariant i63: d1 <= x1;\nloop invariant i64: d2 <= x2;\nloop invariant i65: d3 <= x3;\nloop invariant i66: x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant i67: x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant i68: x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant i69: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 == (1 + (x3 - 1) * x3 / 2);\nloop invariant i70: x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 == (1 + (x1 - 1) * x1 / 2);\nloop invariant i71: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 == (1 + (x2 - 1) * x2 / 2);\nloop invariant i72: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1;\nloop invariant i73: x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 <= 1;\nloop invariant i74: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\nloop invariant i75: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\nloop invariant i76: x2 == (1 + (x3 - 1) * x3 / 2) ==> x3 >= 0;\nloop invariant i77: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\nloop invariant i78: x1 >= x3;\nloop invariant i79: x1 >= x2 - d2;\nloop invariant i80: x1 >= x3 - d3;\nloop invariant i81: 0 < x1 <= 1;\nloop invariant i82: 0 <= x2 <= 0;\nloop invariant i83: 0 <= x3 <= 0;\nloop invariant i84: x2 <= x1;\nloop invariant i85: x3 <= x1;\nloop invariant i86: x2 <= x3;\nloop invariant i87: x3 == 1 ==> x2 == 0;\nloop invariant i88: x2 == 0 ==> x3 == 1;\nloop invariant i89: x3 == 1 ==> d3 == 1;\nloop invariant i90: d3 == 1 ==> x3 == 1;\nloop invariant i91: d2 == 1 ==> x2 == 0;\nloop invariant i92: x2 == 0 ==> d2 == 1;\nloop invariant i93: d1 == 1 ==> x1 == 1;\nloop invariant i94: x1 == 1 ==> d1 == 1;\nloop invariant i95: d3 == 1 ==> d2 == 1;\nloop invariant i96: d2 == 1 ==> d3 == 1;\nloop invariant i97: d1 == 1 ==> d2 == 1;\nloop invariant i98: d2 == 1 ==> d1 == 1;\nloop invariant i99: d1 == 1 ==> d3 == 1;\nloop invariant i100: d3 == 1 ==> d1 == 1;\nloop invariant i101: 0 <= x2;\nloop invariant i102: 0 <= x3;\nloop invariant i103: x1 >= d1 * (x2 + x3);\nloop invariant i104: x2 >= d2 * (x3);\nloop invariant i105: x3 >= d3;\nloop invariant i106: 1 <= x1 <= INT_MAX;\nloop invariant i107: 0 <= x2 <= INT_MAX;\nloop invariant i108: 0 <= x3 <= INT_MAX;\nloop invariant i109: 1 <= d1 <= INT_MAX;\nloop invariant i110: 1 <= d2 <= INT_MAX;\nloop invariant i111: 1 <= d3 <= INT_MAX;\nloop invariant i112: x3 <= x2;\nloop invariant i113: x2 >= x1 - (x1 / d1) * d1;\nloop invariant i114: x3 >= x2 - (x2 / d2) * d2;\nloop invariant i115: x3 >= x1 - (x1 / d1) * d1 - (x2 / d2) * d2;\nloop invariant i116: x1 >= x2 + x3;\nloop invariant i117: x1 >= d1;\nloop invariant i118: x1 >= d2;\nloop invariant i119: x1 >= d3;\nloop invariant i120: x2 >= d2;\nloop invariant i121: x2 >= d3;\nloop invariant i122: 1 <= d1 <= 1;\nloop invariant i123: 1 <= d2 <= 1;\nloop invariant i124: 1 <= d3 <= 1;\nloop invariant i125: 1 <= x1 <= 1;\nloop invariant i126: x2 = 0;\nloop invariant i127: x3 = 0;\nloop invariant i128: 1 <= d1 <= 10;\nloop invariant i129: 1 <= d2 <= 10;\nloop invariant i130: 1 <= d3 <= 10;\nloop invariant i131: 1 <= x1 <= 10;\nloop invariant i132: 1 <= x2 <= 10;\nloop invariant i133: 1 <= x3 <= 10;\nloop invariant i134: x1 >= 0 ==> x2 >= 0;\nloop invariant i135: x1 >= 0 ==> x3 >= 0;\nloop invariant i136: x1 >= 0 ==> x1 >= x2;\nloop invariant i137: x1 >= 0 ==> x1 >= x3;\nloop invariant i138: x1 >= 0 ==> x2 >= x3;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 21,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: d1 >= 0;\nloop invariant i2: d2 >= 0;\nloop invariant i3: d3 >= 0;\nloop invariant i4: x1 >= 0;\n\n\n\n\n\n\n\n\nloop invariant i13: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0;\nloop invariant i14: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0;\nloop invariant i15: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0;\nloop invariant i16: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i17: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i18: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i19: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i20: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i21: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i22: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i23: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i24: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i25: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i26: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i27: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i28: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i29: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i30: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i31: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i32: x2 >= 0 ==> x2 >= d2 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0 ==> x2 >= 0;\nloop invariant i33: x3 >= 0 ==> x3 >= d3 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0 ==> x3 >= 0;\nloop invariant i34: x1 >= 0 ==> x1 >= d1 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0 ==> x1 >= 0;\nloop invariant i35: 0 <= d1 <= 1;\nloop invariant i36: 0 <= d2 <= 1;\nloop invariant i37: 0 <= d3 <= 1;\n\n\nloop invariant i40: 0 <= x1;\n\nloop invariant i42: x2 <= x2 + d2 * x1;\nloop invariant i43: x3 <= x3 + d3 * x1;\nloop invariant i44: x2 >= x2 - d2 * x1;\nloop invariant i45: x3 >= x3 - d3 * x1;\nloop invariant i46: x1 >= x1 - d1 * x1;\nloop invariant i47: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1;\nloop invariant i48: x1 >= x1 - d1 * x1 ==> x3 >= x3 - d3 * x1;\nloop invariant i49: x1 >= x1 - d1 * x1 ==> x2 >= x2 - d2 * x1 ==> x3 >= x3 - d3 * x1;\n\n\nloop invariant i52: 0 <= x1 <= d1;\n\n\nloop invariant i55: 0 <= x1 <= 1;\n\nloop invariant i57: d1 > 0;\nloop invariant i58: d2 > 0;\nloop invariant i59: d3 > 0;\nloop invariant i60: x1 <= 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 <= 1;\n\nloop invariant i74: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 <= 1;\nloop invariant i75: x1 == (1 + (x2 - 1) * x2 / 2) ==> x2 >= 0;\n\nloop invariant i77: x3 == (1 + (x1 - 1) * x1 / 2) ==> x1 >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i89: x3 == 1 ==> d3 == 1;\n\n\nloop invariant i92: x2 == 0 ==> d2 == 1;\n\nloop invariant i94: x1 == 1 ==> d1 == 1;\nloop invariant i95: d3 == 1 ==> d2 == 1;\nloop invariant i96: d2 == 1 ==> d3 == 1;\nloop invariant i97: d1 == 1 ==> d2 == 1;\nloop invariant i98: d2 == 1 ==> d1 == 1;\nloop invariant i99: d1 == 1 ==> d3 == 1;\nloop invariant i100: d3 == 1 ==> d1 == 1;\n\n\n\n\n\n\n\n\nloop invariant i109: 1 <= d1 <= INT_MAX;\nloop invariant i110: 1 <= d2 <= INT_MAX;\nloop invariant i111: 1 <= d3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: 1 <= d1 <= 1;\nloop invariant i123: 1 <= d2 <= 1;\nloop invariant i124: 1 <= d3 <= 1;\n\n\n\nloop invariant i128: 1 <= d1 <= 10;\nloop invariant i129: 1 <= d2 <= 10;\nloop invariant i130: 1 <= d3 <= 10;\n\n\n\n\n\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c"
        ],
        "skipped": [],
        "total": 9,
        "success_count": 0,
        "failure_count": 9,
        "success_rate": 0.0
    }
}