{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == i * a;\nloop invariant a == 1;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == i * a;\nloop invariant a == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i - 1) * a;\nloop invariant a >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant a == 1;\nloop invariant i <= SIZE;\nloop invariant sn <= SIZE*a;\nloop invariant SIZE >= 0;\nloop invariant sn == (i-1)*a;\nloop invariant i == SIZE+1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn = (a * i) - a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn <= SIZE * a;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == (a*i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\nloop invariant sn == i * a ==> 0 <= i <= SIZE;\nloop invariant sn == i * a ==> 0 <= i * a <= SIZE * a;\nloop invariant sn == i * a ==> i * a == i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= sn <= SIZE;\nloop invariant SIZE*a >= sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= a * i;\nloop invariant sn <= a * (i - 1);\nloop invariant sn == (a * i) ==> (i == 0);\nloop invariant sn == (a * i) ==> (i == SIZE + 1);\nloop invariant sn == (a * i) ==> (i == SIZE);\nloop invariant sn == (a * i) ==> (i == 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == i * a;\nloop invariant a == 1;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn <= a * SIZE;\nloop invariant sn == i * a;\nloop invariant a == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= a * SIZE is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant a == 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\nloop invariant i5: a == 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == (i - 1) * a;\nloop invariant a >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn == (i - 1) * a;\nloop invariant i3: a >= 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant a == 1;\nloop invariant i <= SIZE;\nloop invariant sn <= SIZE*a;\nloop invariant SIZE >= 0;\nloop invariant sn == (i-1)*a;\nloop invariant i == SIZE+1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE*a is partially proven to be inductive.\nloop invariant a == 1 is partially proven to be inductive.\nloop invariant i <= SIZE is partially proven to be inductive.\nloop invariant sn <= SIZE*a is partially proven to be inductive.\nloop invariant SIZE >= 0 is partially proven to be inductive.\nloop invariant sn == (i-1)*a is partially proven to be inductive.\nloop invariant i == SIZE+1 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: a == 1;\n\n\n\nloop invariant i7: sn == (i-1)*a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn = (a * i) - a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn <= SIZE * a;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is neither established nor preserved.\nloop invariant sn <= SIZE * a is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: sn >= 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant sn == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 1 <= sn <= SIZE * a is preserved but not established.\nloop invariant sn == i * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == (a*i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE*a is partially proven to be inductive.\nloop invariant sn == (a*i) is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= SIZE * a is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn >= 0;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\nloop invariant sn == i * a ==> 0 <= i <= SIZE;\nloop invariant sn == i * a ==> 0 <= i * a <= SIZE * a;\nloop invariant sn == i * a ==> i * a == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nloop invariant sn == i * a ==> 0 <= i <= SIZE is partially proven to be inductive.\nloop invariant sn == i * a ==> 0 <= i * a <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a ==> i * a == i * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n\n\nloop invariant i6: sn == i * a ==> i * a == i * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 1 <= sn <= SIZE;\nloop invariant SIZE*a >= sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 1 <= sn <= SIZE is preserved but not established.\nloop invariant SIZE*a >= sn >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= a * i;\nloop invariant sn <= a * (i - 1);\nloop invariant sn == (a * i) ==> (i == 0);\nloop invariant sn == (a * i) ==> (i == SIZE + 1);\nloop invariant sn == (a * i) ==> (i == SIZE);\nloop invariant sn == (a * i) ==> (i == 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant sn >= a * i is preserved but not established.\nloop invariant sn <= a * (i - 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == 0) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE + 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 1) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE - 2) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 2) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 3) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 4) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 5) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 6) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 7) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 8) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 9) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 10) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 11) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 12) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 13) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 14) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 15) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 16) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 17) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 18) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 19) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 20) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 21) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 22) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 23) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 24) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 25) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 26) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 27) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 28) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 29) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 30) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 31) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 32) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 33) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 34) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 35) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 36) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 37) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 38) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 39) is partially proven to be inductive.\nloop invariant sn == (a * i) ==> (i == SIZE * SIZE + 40) is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: sn <= a * (i - 1);\nloop invariant i4: sn == (a * i) ==> (i == 0);\nloop invariant i5: sn == (a * i) ==> (i == SIZE + 1);\nloop invariant i6: sn == (a * i) ==> (i == SIZE);\nloop invariant i7: sn == (a * i) ==> (i == 1);\nloop invariant i8: sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant i9: sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant i10: sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant i11: sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant i12: sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant i13: sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant i14: sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant i15: sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant i16: sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant i17: sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant i18: sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant i19: sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant i20: sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant i21: sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant i22: sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant i23: sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant i24: sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant i25: sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant i26: sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant i27: sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant i28: sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant i29: sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant i30: sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant i31: sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant i32: sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant i33: sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant i34: sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant i35: sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant i36: sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant i37: sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant i38: sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant i39: sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant i40: sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant i41: sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant i42: sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant i43: sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant i44: sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant i45: sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant i46: sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant i47: sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant i48: sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant i49: sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant i50: sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant sn == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE is preserved but not established.\nloop invariant 0 <= sn <= SIZE * a is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: 1 <= i <= SIZE;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= a * SIZE;\nloop invariant i4: sn == i * a;\nloop invariant i5: a == 1;\nloop invariant i6: 0 <= i <= SIZE;\nloop invariant i7: sn == (i - 1) * a;\nloop invariant i8: a >= 0;\nloop invariant i9: 0 <= sn <= SIZE*a;\nloop invariant i10: i <= SIZE;\nloop invariant i11: sn <= SIZE*a;\nloop invariant i12: SIZE >= 0;\nloop invariant i13: sn == (i-1)*a;\nloop invariant i14: i == SIZE+1;\nloop invariant i15: 0 <= i <= SIZE + 1;\nloop invariant i16: sn = (a * i) - a;\nloop invariant i17: sn <= SIZE * a;\nloop invariant i18: 1 <= sn <= SIZE * a;\nloop invariant i19: sn == (a*i);\nloop invariant i20: sn = a * i;\nloop invariant i21: 1 <= i <= SIZE + 1;\nloop invariant i22: 0 <= sn <= SIZE * a;\nloop invariant i23: sn == i * a ==> 0 <= i <= SIZE;\nloop invariant i24: sn == i * a ==> 0 <= i * a <= SIZE * a;\nloop invariant i25: sn == i * a ==> i * a == i * a;\nloop invariant i26: 1 <= sn <= SIZE;\nloop invariant i27: SIZE*a >= sn >= 0;\nloop invariant i28: sn >= a * i;\nloop invariant i29: sn <= a * (i - 1);\nloop invariant i30: sn == (a * i) ==> (i == 0);\nloop invariant i31: sn == (a * i) ==> (i == SIZE + 1);\nloop invariant i32: sn == (a * i) ==> (i == SIZE);\nloop invariant i33: sn == (a * i) ==> (i == 1);\nloop invariant i34: sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant i35: sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant i36: sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant i37: sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant i38: sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant i39: sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant i40: sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant i41: sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant i42: sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant i43: sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant i44: sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant i45: sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant i46: sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant i47: sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant i48: sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant i49: sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant i50: sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant i51: sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant i52: sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant i53: sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant i54: sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant i55: sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant i56: sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant i57: sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant i58: sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant i59: sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant i60: sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant i61: sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant i62: sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant i63: sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant i64: sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant i65: sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant i66: sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant i67: sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant i68: sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant i69: sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant i70: sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant i71: sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant i72: sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant i73: sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant i74: sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant i75: sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant i76: sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\nloop invariant i5: a == 1;\n\nloop invariant i7: sn == (i - 1) * a;\nloop invariant i8: a >= 0;\n\n\n\n\nloop invariant i13: sn == (i-1)*a;\n\n\n\n\n\n\n\n\n\nloop invariant i23: sn == i * a ==> 0 <= i <= SIZE;\nloop invariant i24: sn == i * a ==> 0 <= i * a <= SIZE * a;\nloop invariant i25: sn == i * a ==> i * a == i * a;\n\n\n\nloop invariant i29: sn <= a * (i - 1);\nloop invariant i30: sn == (a * i) ==> (i == 0);\nloop invariant i31: sn == (a * i) ==> (i == SIZE + 1);\nloop invariant i32: sn == (a * i) ==> (i == SIZE);\nloop invariant i33: sn == (a * i) ==> (i == 1);\nloop invariant i34: sn == (a * i) ==> (i == SIZE * SIZE);\nloop invariant i35: sn == (a * i) ==> (i == SIZE * SIZE + 1);\nloop invariant i36: sn == (a * i) ==> (i == SIZE * SIZE - 1);\nloop invariant i37: sn == (a * i) ==> (i == SIZE * SIZE - 2);\nloop invariant i38: sn == (a * i) ==> (i == SIZE * SIZE + 2);\nloop invariant i39: sn == (a * i) ==> (i == SIZE * SIZE + 3);\nloop invariant i40: sn == (a * i) ==> (i == SIZE * SIZE + 4);\nloop invariant i41: sn == (a * i) ==> (i == SIZE * SIZE + 5);\nloop invariant i42: sn == (a * i) ==> (i == SIZE * SIZE + 6);\nloop invariant i43: sn == (a * i) ==> (i == SIZE * SIZE + 7);\nloop invariant i44: sn == (a * i) ==> (i == SIZE * SIZE + 8);\nloop invariant i45: sn == (a * i) ==> (i == SIZE * SIZE + 9);\nloop invariant i46: sn == (a * i) ==> (i == SIZE * SIZE + 10);\nloop invariant i47: sn == (a * i) ==> (i == SIZE * SIZE + 11);\nloop invariant i48: sn == (a * i) ==> (i == SIZE * SIZE + 12);\nloop invariant i49: sn == (a * i) ==> (i == SIZE * SIZE + 13);\nloop invariant i50: sn == (a * i) ==> (i == SIZE * SIZE + 14);\nloop invariant i51: sn == (a * i) ==> (i == SIZE * SIZE + 15);\nloop invariant i52: sn == (a * i) ==> (i == SIZE * SIZE + 16);\nloop invariant i53: sn == (a * i) ==> (i == SIZE * SIZE + 17);\nloop invariant i54: sn == (a * i) ==> (i == SIZE * SIZE + 18);\nloop invariant i55: sn == (a * i) ==> (i == SIZE * SIZE + 19);\nloop invariant i56: sn == (a * i) ==> (i == SIZE * SIZE + 20);\nloop invariant i57: sn == (a * i) ==> (i == SIZE * SIZE + 21);\nloop invariant i58: sn == (a * i) ==> (i == SIZE * SIZE + 22);\nloop invariant i59: sn == (a * i) ==> (i == SIZE * SIZE + 23);\nloop invariant i60: sn == (a * i) ==> (i == SIZE * SIZE + 24);\nloop invariant i61: sn == (a * i) ==> (i == SIZE * SIZE + 25);\nloop invariant i62: sn == (a * i) ==> (i == SIZE * SIZE + 26);\nloop invariant i63: sn == (a * i) ==> (i == SIZE * SIZE + 27);\nloop invariant i64: sn == (a * i) ==> (i == SIZE * SIZE + 28);\nloop invariant i65: sn == (a * i) ==> (i == SIZE * SIZE + 29);\nloop invariant i66: sn == (a * i) ==> (i == SIZE * SIZE + 30);\nloop invariant i67: sn == (a * i) ==> (i == SIZE * SIZE + 31);\nloop invariant i68: sn == (a * i) ==> (i == SIZE * SIZE + 32);\nloop invariant i69: sn == (a * i) ==> (i == SIZE * SIZE + 33);\nloop invariant i70: sn == (a * i) ==> (i == SIZE * SIZE + 34);\nloop invariant i71: sn == (a * i) ==> (i == SIZE * SIZE + 35);\nloop invariant i72: sn == (a * i) ==> (i == SIZE * SIZE + 36);\nloop invariant i73: sn == (a * i) ==> (i == SIZE * SIZE + 37);\nloop invariant i74: sn == (a * i) ==> (i == SIZE * SIZE + 38);\nloop invariant i75: sn == (a * i) ==> (i == SIZE * SIZE + 39);\nloop invariant i76: sn == (a * i) ==> (i == SIZE * SIZE + 40);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c"
        ],
        "skipped": [],
        "total": 21,
        "success_count": 4,
        "failure_count": 17,
        "success_rate": 0.19047619047619047
    }
}