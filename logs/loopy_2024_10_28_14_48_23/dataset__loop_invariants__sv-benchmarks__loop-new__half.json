{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\n*/\n```",
            "```\n/*@\nloop invariant i == i;\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n < k;\n*/\n```",
            "```\n/*@\nloop invariant k < 0 ==> n == k;\nloop invariant k < 0 ==> k <= i <= 2*k;\nloop invariant k < 0 ==> n == (i/2);\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> n == k;\nloop invariant k >= 0 ==> k <= i <= 2*k;\nloop invariant k >= 0 ==> n == (i/2);\nloop invariant k >= 0 ==> i % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2 * k;\nloop invariant n == i / 2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i < 2*k;\nloop invariant n >= 0;\nloop invariant n == (k + 1) / 2;\nloop invariant n == (k + 2) / 2;\nloop invariant n == (k + 3) / 2;\nloop invariant n == (k + 4) / 2;\nloop invariant n == (k + 5) / 2;\nloop invariant n == (k + 6) / 2;\nloop invariant n == (k + 7) / 2;\nloop invariant n == (k + 8) / 2;\nloop invariant n == (k + 9) / 2;\nloop invariant n == (k + 10) / 2;\nloop invariant n == (k + 11) / 2;\nloop invariant n == (k + 12) / 2;\nloop invariant n == (k + 13) / 2;\nloop invariant n == (k + 14) / 2;\nloop invariant n == (k + 15) / 2;\nloop invariant n == (k + 16) / 2;\nloop invariant n == (k + 17) / 2;\nloop invariant n == (k + 18) / 2;\nloop invariant n == (k + 19) / 2;\nloop invariant n == (k + 20) / 2;\nloop invariant n == (k + 21) / 2;\nloop invariant n == (k + 22) / 2;\nloop invariant n == (k + 23) / 2;\nloop invariant n == (k + 24) / 2;\nloop invariant n == (k + 25) / 2;\nloop invariant n == (k + 26) / 2;\nloop invariant n == (k + 27) / 2;\nloop invariant n == (k + 28) / 2;\nloop invariant n == (k + 29) / 2;\nloop invariant n == (k + 30) / 2;\nloop invariant n == (k + 31) / 2;\nloop invariant n == (k + 32) / 2;\nloop invariant n == (k + 33) / 2;\nloop invariant n == (k + 34) / 2;\nloop invariant n == (k + 35) / 2;\nloop invariant n == (k + 36) / 2;\nloop invariant n == (k + 37) / 2;\nloop invariant n == (k + 38) / 2;\nloop invariant n == (k + 39) / 2;\nloop invariant n == (k + 40) / 2;\nloop invariant n == (k + 41) / 2;\nloop invariant n == (k + 42) / 2;\nloop invariant n == (k + 43) / 2;\nloop invariant n == (k + 44) / 2;\nloop invariant n == (k + 45) / 2;\nloop invariant n == (k + 46) / 2;\nloop invariant n == (k + 47) / 2;\nloop invariant n == (k + 48) / 2;\nloop invariant n == (k + 49) / 2;\nloop invariant n == (k + 50) / 2;\nloop invariant n == (k + 51) / 2;\nloop invariant n == (k + 52) / 2;\nloop invariant n == (k + 53) / 2;\nloop invariant n == (k + 54) / 2;\nloop invariant n == (k + 55) / 2;\nloop invariant n == (k + 56) / 2;\nloop invariant n == (k + 57) / 2;\nloop invariant n == (k + 58) / 2;\nloop invariant n == (k + 59) / 2;\nloop invariant n == (k + 60) / 2;\nloop invariant n == (k + 61) / 2;\nloop invariant n == (k + 62) / 2;\nloop invariant n == (k + 63) / 2;\nloop invariant n == (k + 64) / 2;\nloop invariant n == (k + 65) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2*k;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 == 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant if (k >= 0) then n == k else n == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k; loop invariant n >= 0; loop invariant n >= i/2; loop invariant n <= i; loop invariant n >= i - 2; loop invariant n <= i - 1; loop invariant n >= i - 2*k; loop invariant n <= i - k; loop invariant n >= i - 2*k + 1; loop invariant n <= i - k + 1; loop invariant n >= i - 2*k + 2; loop invariant n <= i - k + 2; loop invariant n >= i - 2*k + 3; loop invariant n <= i - k + 3; loop invariant n >= i - 2*k + 4; loop invariant n <= i - k + 4; loop invariant n >= i - 2*k + 5; loop invariant n <= i - k + 5; loop invariant n >= i - 2*k + 6; loop invariant n <= i - k + 6; loop invariant n >= i - 2*k + 7; loop invariant n <= i - k + 7; loop invariant n >= i - 2*k + 8; loop invariant n <= i - k + 8; loop invariant n >= i - 2*k + 9; loop invariant n <= i - k + 9; loop invariant n >= i - 2*k + 10; loop invariant n <= i - k + 10; loop invariant n >= i - 2*k + 11; loop invariant n <= i - k + 11; loop invariant n >= i - 2*k + 12; loop invariant n <= i - k + 12; loop invariant n >= i - 2*k + 13; loop invariant n <= i - k + 13; loop invariant n >= i - 2*k + 14; loop invariant n <= i - k + 14; loop invariant n >= i - 2*k + 15; loop invariant n <= i - k + 15; loop invariant n >= i - 2*k + 16; loop invariant n <= i - k + 16; loop invariant n >= i - 2*k + 17; loop invariant n <= i - k + 17; loop invariant n >= i - 2*k + 18; loop invariant n <= i - k + 18; loop invariant n >= i - 2*k + 19; loop invariant n <= i - k + 19; loop invariant n >= i - 2*k + 20; loop invariant n <= i - k + 20; loop invariant n >= i - 2*k + 21; loop invariant n <= i - k + 21; loop invariant n >= i - 2*k + 22; loop invariant n <= i - k + 22; loop invariant n >= i - 2*k + 23; loop invariant n <= i - k + 23; loop invariant n >= i - 2*k + 24; loop invariant n <= i - k + 24; loop invariant n >= i - 2*k + 25; loop invariant n <= i - k + 25; loop invariant n >= i - 2*k + 26; loop invariant n <= i - k + 26; loop invariant n >= i - 2*k + 27; loop invariant n <= i - k + 27; loop invariant n >= i - 2*k + 28; loop invariant n <= i - k + 28; loop invariant n >= i - 2*k + 29; loop invariant n <= i - k + 29; loop invariant n >= i - 2*k + 30; loop invariant n <= i - k + 30; loop invariant n >= i - 2*k + 31; loop invariant n <= i - k + 31; loop invariant n >= i - 2*k + 32; loop invariant n <= i - k + 32; loop invariant n >= i - 2*k + 33; loop invariant n <= i - k + 33; loop invariant n >= i - 2*k + 34; loop invariant n <= i - k + 34; loop invariant n >= i - 2*k + 35; loop invariant n <= i - k + 35; loop invariant n >= i - 2*k + 36; loop invariant n <= i - k + 36; loop invariant n >= i - 2*k + 37;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i / 2;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant k < 0 || n <= k;\nloop invariant n >= 0;\nloop invariant n <= i;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2 * k);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2);\nloop invariant 0 <= i <= 2 * k;\nloop invariant k < 0 || n <= k;\nloop invariant n >= 0;\nloop invariant n <= i;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2 * k);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k;\nloop invariant i % 2 == 0 ==> i <= 2*k;\nloop invariant i % 2 != 0 ==> i <= 2*k;\nloop invariant i % 2 == 0 ==> i >= 0;\nloop invariant i % 2 != 0 ==> i >= 0;\nloop invariant n == k ==> i == 2*k;\nloop invariant n == k ==> i == 2*k;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 0 ==> n == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant n == k - (i - k) / 2;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == i/2;\nloop invariant i % 2 != 0 ==> n == (i-1)/2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i == i;\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n < k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == i is partially proven to be inductive.\nloop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant i % 2 == 0 ==> n == k is neither established nor preserved.\nloop invariant i % 2 != 0 ==> n < k is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i == i;\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant k < 0 ==> n == k;\nloop invariant k < 0 ==> k <= i <= 2*k;\nloop invariant k < 0 ==> n == (i/2);\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> n == k;\nloop invariant k >= 0 ==> k <= i <= 2*k;\nloop invariant k >= 0 ==> n == (i/2);\nloop invariant k >= 0 ==> i % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant k < 0 ==> n == k is preserved but not established.\nloop invariant k < 0 ==> k <= i <= 2*k is partially proven to be inductive.\nloop invariant k < 0 ==> n == (i/2) is partially proven to be inductive.\nloop invariant k < 0 ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant k >= 0 ==> n == k is preserved but not established.\nloop invariant k >= 0 ==> k <= i <= 2*k is partially proven to be inductive.\nloop invariant k >= 0 ==> n == (i/2) is partially proven to be inductive.\nloop invariant k >= 0 ==> i % 2 == 0 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: k < 0 ==> n == (i/2);\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2 * k;\nloop invariant n == i / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 2 * k is preserved but not established.\nloop invariant n == i / 2 is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i < 2*k;\nloop invariant n >= 0;\nloop invariant n == (k + 1) / 2;\nloop invariant n == (k + 2) / 2;\nloop invariant n == (k + 3) / 2;\nloop invariant n == (k + 4) / 2;\nloop invariant n == (k + 5) / 2;\nloop invariant n == (k + 6) / 2;\nloop invariant n == (k + 7) / 2;\nloop invariant n == (k + 8) / 2;\nloop invariant n == (k + 9) / 2;\nloop invariant n == (k + 10) / 2;\nloop invariant n == (k + 11) / 2;\nloop invariant n == (k + 12) / 2;\nloop invariant n == (k + 13) / 2;\nloop invariant n == (k + 14) / 2;\nloop invariant n == (k + 15) / 2;\nloop invariant n == (k + 16) / 2;\nloop invariant n == (k + 17) / 2;\nloop invariant n == (k + 18) / 2;\nloop invariant n == (k + 19) / 2;\nloop invariant n == (k + 20) / 2;\nloop invariant n == (k + 21) / 2;\nloop invariant n == (k + 22) / 2;\nloop invariant n == (k + 23) / 2;\nloop invariant n == (k + 24) / 2;\nloop invariant n == (k + 25) / 2;\nloop invariant n == (k + 26) / 2;\nloop invariant n == (k + 27) / 2;\nloop invariant n == (k + 28) / 2;\nloop invariant n == (k + 29) / 2;\nloop invariant n == (k + 30) / 2;\nloop invariant n == (k + 31) / 2;\nloop invariant n == (k + 32) / 2;\nloop invariant n == (k + 33) / 2;\nloop invariant n == (k + 34) / 2;\nloop invariant n == (k + 35) / 2;\nloop invariant n == (k + 36) / 2;\nloop invariant n == (k + 37) / 2;\nloop invariant n == (k + 38) / 2;\nloop invariant n == (k + 39) / 2;\nloop invariant n == (k + 40) / 2;\nloop invariant n == (k + 41) / 2;\nloop invariant n == (k + 42) / 2;\nloop invariant n == (k + 43) / 2;\nloop invariant n == (k + 44) / 2;\nloop invariant n == (k + 45) / 2;\nloop invariant n == (k + 46) / 2;\nloop invariant n == (k + 47) / 2;\nloop invariant n == (k + 48) / 2;\nloop invariant n == (k + 49) / 2;\nloop invariant n == (k + 50) / 2;\nloop invariant n == (k + 51) / 2;\nloop invariant n == (k + 52) / 2;\nloop invariant n == (k + 53) / 2;\nloop invariant n == (k + 54) / 2;\nloop invariant n == (k + 55) / 2;\nloop invariant n == (k + 56) / 2;\nloop invariant n == (k + 57) / 2;\nloop invariant n == (k + 58) / 2;\nloop invariant n == (k + 59) / 2;\nloop invariant n == (k + 60) / 2;\nloop invariant n == (k + 61) / 2;\nloop invariant n == (k + 62) / 2;\nloop invariant n == (k + 63) / 2;\nloop invariant n == (k + 64) / 2;\nloop invariant n == (k + 65) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < 2*k is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n == (k + 1) / 2 is preserved but not established.\nloop invariant n == (k + 2) / 2 is partially proven to be inductive.\nloop invariant n == (k + 3) / 2 is partially proven to be inductive.\nloop invariant n == (k + 4) / 2 is partially proven to be inductive.\nloop invariant n == (k + 5) / 2 is partially proven to be inductive.\nloop invariant n == (k + 6) / 2 is partially proven to be inductive.\nloop invariant n == (k + 7) / 2 is partially proven to be inductive.\nloop invariant n == (k + 8) / 2 is partially proven to be inductive.\nloop invariant n == (k + 9) / 2 is partially proven to be inductive.\nloop invariant n == (k + 10) / 2 is partially proven to be inductive.\nloop invariant n == (k + 11) / 2 is partially proven to be inductive.\nloop invariant n == (k + 12) / 2 is partially proven to be inductive.\nloop invariant n == (k + 13) / 2 is partially proven to be inductive.\nloop invariant n == (k + 14) / 2 is partially proven to be inductive.\nloop invariant n == (k + 15) / 2 is partially proven to be inductive.\nloop invariant n == (k + 16) / 2 is partially proven to be inductive.\nloop invariant n == (k + 17) / 2 is partially proven to be inductive.\nloop invariant n == (k + 18) / 2 is partially proven to be inductive.\nloop invariant n == (k + 19) / 2 is partially proven to be inductive.\nloop invariant n == (k + 20) / 2 is partially proven to be inductive.\nloop invariant n == (k + 21) / 2 is partially proven to be inductive.\nloop invariant n == (k + 22) / 2 is partially proven to be inductive.\nloop invariant n == (k + 23) / 2 is partially proven to be inductive.\nloop invariant n == (k + 24) / 2 is partially proven to be inductive.\nloop invariant n == (k + 25) / 2 is partially proven to be inductive.\nloop invariant n == (k + 26) / 2 is partially proven to be inductive.\nloop invariant n == (k + 27) / 2 is partially proven to be inductive.\nloop invariant n == (k + 28) / 2 is partially proven to be inductive.\nloop invariant n == (k + 29) / 2 is partially proven to be inductive.\nloop invariant n == (k + 30) / 2 is partially proven to be inductive.\nloop invariant n == (k + 31) / 2 is partially proven to be inductive.\nloop invariant n == (k + 32) / 2 is partially proven to be inductive.\nloop invariant n == (k + 33) / 2 is partially proven to be inductive.\nloop invariant n == (k + 34) / 2 is partially proven to be inductive.\nloop invariant n == (k + 35) / 2 is partially proven to be inductive.\nloop invariant n == (k + 36) / 2 is partially proven to be inductive.\nloop invariant n == (k + 37) / 2 is partially proven to be inductive.\nloop invariant n == (k + 38) / 2 is partially proven to be inductive.\nloop invariant n == (k + 39) / 2 is partially proven to be inductive.\nloop invariant n == (k + 40) / 2 is partially proven to be inductive.\nloop invariant n == (k + 41) / 2 is partially proven to be inductive.\nloop invariant n == (k + 42) / 2 is partially proven to be inductive.\nloop invariant n == (k + 43) / 2 is partially proven to be inductive.\nloop invariant n == (k + 44) / 2 is partially proven to be inductive.\nloop invariant n == (k + 45) / 2 is partially proven to be inductive.\nloop invariant n == (k + 46) / 2 is partially proven to be inductive.\nloop invariant n == (k + 47) / 2 is partially proven to be inductive.\nloop invariant n == (k + 48) / 2 is partially proven to be inductive.\nloop invariant n == (k + 49) / 2 is partially proven to be inductive.\nloop invariant n == (k + 50) / 2 is partially proven to be inductive.\nloop invariant n == (k + 51) / 2 is partially proven to be inductive.\nloop invariant n == (k + 52) / 2 is partially proven to be inductive.\nloop invariant n == (k + 53) / 2 is partially proven to be inductive.\nloop invariant n == (k + 54) / 2 is partially proven to be inductive.\nloop invariant n == (k + 55) / 2 is partially proven to be inductive.\nloop invariant n == (k + 56) / 2 is partially proven to be inductive.\nloop invariant n == (k + 57) / 2 is partially proven to be inductive.\nloop invariant n == (k + 58) / 2 is partially proven to be inductive.\nloop invariant n == (k + 59) / 2 is partially proven to be inductive.\nloop invariant n == (k + 60) / 2 is partially proven to be inductive.\nloop invariant n == (k + 61) / 2 is partially proven to be inductive.\nloop invariant n == (k + 62) / 2 is partially proven to be inductive.\nloop invariant n == (k + 63) / 2 is partially proven to be inductive.\nloop invariant n == (k + 64) / 2 is partially proven to be inductive.\nloop invariant n == (k + 65) / 2 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2*k;\nloop invariant k < 0 ==> i % 2 == 0;\nloop invariant k >= 0 ==> i % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nloop invariant k >= 0 ==> n == 2*k is preserved but not established.\nloop invariant k < 0 ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant k >= 0 ==> i % 2 == 1 is preserved but not established.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant if (k >= 0) then n == k else n == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k; loop invariant n >= 0; loop invariant n >= i/2; loop invariant n <= i; loop invariant n >= i - 2; loop invariant n <= i - 1; loop invariant n >= i - 2*k; loop invariant n <= i - k; loop invariant n >= i - 2*k + 1; loop invariant n <= i - k + 1; loop invariant n >= i - 2*k + 2; loop invariant n <= i - k + 2; loop invariant n >= i - 2*k + 3; loop invariant n <= i - k + 3; loop invariant n >= i - 2*k + 4; loop invariant n <= i - k + 4; loop invariant n >= i - 2*k + 5; loop invariant n <= i - k + 5; loop invariant n >= i - 2*k + 6; loop invariant n <= i - k + 6; loop invariant n >= i - 2*k + 7; loop invariant n <= i - k + 7; loop invariant n >= i - 2*k + 8; loop invariant n <= i - k + 8; loop invariant n >= i - 2*k + 9; loop invariant n <= i - k + 9; loop invariant n >= i - 2*k + 10; loop invariant n <= i - k + 10; loop invariant n >= i - 2*k + 11; loop invariant n <= i - k + 11; loop invariant n >= i - 2*k + 12; loop invariant n <= i - k + 12; loop invariant n >= i - 2*k + 13; loop invariant n <= i - k + 13; loop invariant n >= i - 2*k + 14; loop invariant n <= i - k + 14; loop invariant n >= i - 2*k + 15; loop invariant n <= i - k + 15; loop invariant n >= i - 2*k + 16; loop invariant n <= i - k + 16; loop invariant n >= i - 2*k + 17; loop invariant n <= i - k + 17; loop invariant n >= i - 2*k + 18; loop invariant n <= i - k + 18; loop invariant n >= i - 2*k + 19; loop invariant n <= i - k + 19; loop invariant n >= i - 2*k + 20; loop invariant n <= i - k + 20; loop invariant n >= i - 2*k + 21; loop invariant n <= i - k + 21; loop invariant n >= i - 2*k + 22; loop invariant n <= i - k + 22; loop invariant n >= i - 2*k + 23; loop invariant n <= i - k + 23; loop invariant n >= i - 2*k + 24; loop invariant n <= i - k + 24; loop invariant n >= i - 2*k + 25; loop invariant n <= i - k + 25; loop invariant n >= i - 2*k + 26; loop invariant n <= i - k + 26; loop invariant n >= i - 2*k + 27; loop invariant n <= i - k + 27; loop invariant n >= i - 2*k + 28; loop invariant n <= i - k + 28; loop invariant n >= i - 2*k + 29; loop invariant n <= i - k + 29; loop invariant n >= i - 2*k + 30; loop invariant n <= i - k + 30; loop invariant n >= i - 2*k + 31; loop invariant n <= i - k + 31; loop invariant n >= i - 2*k + 32; loop invariant n <= i - k + 32; loop invariant n >= i - 2*k + 33; loop invariant n <= i - k + 33; loop invariant n >= i - 2*k + 34; loop invariant n <= i - k + 34; loop invariant n >= i - 2*k + 35; loop invariant n <= i - k + 35; loop invariant n >= i - 2*k + 36; loop invariant n <= i - k + 36; loop invariant n >= i - 2*k + 37;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k; loop invariant n >= 0; loop invariant n >= i/2; loop invariant n <= i; loop invariant n >= i - 2; loop invariant n <= i - 1; loop invariant n >= i - 2*k; loop invariant n <= i - k; loop invariant n >= i - 2*k + 1; loop invariant n <= i - k + 1; loop invariant n >= i - 2*k + 2; loop invariant n <= i - k + 2; loop invariant n >= i - 2*k + 3; loop invariant n <= i - k + 3; loop invariant n >= i - 2*k + 4; loop invariant n <= i - k + 4; loop invariant n >= i - 2*k + 5; loop invariant n <= i - k + 5; loop invariant n >= i - 2*k + 6; loop invariant n <= i - k + 6; loop invariant n >= i - 2*k + 7; loop invariant n <= i - k + 7; loop invariant n >= i - 2*k + 8; loop invariant n <= i - k + 8; loop invariant n >= i - 2*k + 9; loop invariant n <= i - k + 9; loop invariant n >= i - 2*k + 10; loop invariant n <= i - k + 10; loop invariant n >= i - 2*k + 11; loop invariant n <= i - k + 11; loop invariant n >= i - 2*k + 12; loop invariant n <= i - k + 12; loop invariant n >= i - 2*k + 13; loop invariant n <= i - k + 13; loop invariant n >= i - 2*k + 14; loop invariant n <= i - k + 14; loop invariant n >= i - 2*k + 15; loop invariant n <= i - k + 15; loop invariant n >= i - 2*k + 16; loop invariant n <= i - k + 16; loop invariant n >= i - 2*k + 17; loop invariant n <= i - k + 17; loop invariant n >= i - 2*k + 18; loop invariant n <= i - k + 18; loop invariant n >= i - 2*k + 19; loop invariant n <= i - k + 19; loop invariant n >= i - 2*k + 20; loop invariant n <= i - k + 20; loop invariant n >= i - 2*k + 21; loop invariant n <= i - k + 21; loop invariant n >= i - 2*k + 22; loop invariant n <= i - k + 22; loop invariant n >= i - 2*k + 23; loop invariant n <= i - k + 23; loop invariant n >= i - 2*k + 24; loop invariant n <= i - k + 24; loop invariant n >= i - 2*k + 25; loop invariant n <= i - k + 25; loop invariant n >= i - 2*k + 26; loop invariant n <= i - k + 26; loop invariant n >= i - 2*k + 27; loop invariant n <= i - k + 27; loop invariant n >= i - 2*k + 28; loop invariant n <= i - k + 28; loop invariant n >= i - 2*k + 29; loop invariant n <= i - k + 29; loop invariant n >= i - 2*k + 30; loop invariant n <= i - k + 30; loop invariant n >= i - 2*k + 31; loop invariant n <= i - k + 31; loop invariant n >= i - 2*k + 32; loop invariant n <= i - k + 32; loop invariant n >= i - 2*k + 33; loop invariant n <= i - k + 33; loop invariant n >= i - 2*k + 34; loop invariant n <= i - k + 34; loop invariant n >= i - 2*k + 35; loop invariant n <= i - k + 35; loop invariant n >= i - 2*k + 36; loop invariant n <= i - k + 36; loop invariant n >= i - 2*k + 37 is preserved but not established.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k - i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= 2*k - i is established but not preserved.\nAssertion k < 0 || n == k: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i / 2;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant n == i / 2 is partially proven to be inductive.\nloop invariant k >= 0 ==> n == k is preserved but not established.\nloop invariant k < 0 ==> n == 0 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant k < 0 || n <= k;\nloop invariant n >= 0;\nloop invariant n <= i;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2 * k);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2);\nloop invariant 0 <= i <= 2 * k;\nloop invariant k < 0 || n <= k;\nloop invariant n >= 0;\nloop invariant n <= i;\nloop invariant (k < 0 ==> n == k);\nloop invariant (k >= 0 ==> n == 2 * k);\nloop invariant (i % 2 == 0 ==> n == i / 2);\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * k is preserved but not established.\nloop invariant k < 0 || n <= k is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n <= i is partially proven to be inductive.\nloop invariant (k < 0 ==> n == k) is partially proven to be inductive.\nloop invariant (k >= 0 ==> n == 2 * k) is preserved but not established.\nloop invariant (i % 2 == 0 ==> n == i / 2) is partially proven to be inductive.\nloop invariant (i % 2 != 0 ==> n == (i - 1) / 2) is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: n >= 0;\nloop invariant i4: n <= i;\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k;\nloop invariant i % 2 == 0 ==> i <= 2*k;\nloop invariant i % 2 != 0 ==> i <= 2*k;\nloop invariant i % 2 == 0 ==> i >= 0;\nloop invariant i % 2 != 0 ==> i >= 0;\nloop invariant n == k ==> i == 2*k;\nloop invariant n == k ==> i == 2*k;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> i % 2 == 0;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 2*k ==> n == k;\nloop invariant i == 0 ==> n == 0;\nloop invariant i == 0 ==> n == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> n == k is preserved but not established.\nloop invariant i % 2 != 0 ==> n == k is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i <= 2*k is partially proven to be inductive.\nloop invariant i % 2 != 0 ==> i <= 2*k is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i >= 0 is partially proven to be inductive.\nloop invariant i % 2 != 0 ==> i >= 0 is partially proven to be inductive.\nloop invariant n == k ==> i == 2*k is partially proven to be inductive.\nloop invariant i == 2*k ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant i == 2*k ==> n == k is partially proven to be inductive.\nloop invariant i == 0 ==> n == 0 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\nloop invariant i6: i % 2 != 0 ==> i <= 2*k;\nloop invariant i7: i % 2 == 0 ==> i >= 0;\nloop invariant i8: i % 2 != 0 ==> i >= 0;\n\nloop invariant i10: i == 2*k ==> i % 2 == 0;\n\nloop invariant i12: i == 0 ==> n == 0;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant n == k - (i - k) / 2;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2 * k is preserved but not established.\nloop invariant n == k - (i - k) / 2 is neither established nor preserved.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nloop invariant k >= 0 ==> n == k is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant i % 2 == 0 ==> n == i/2;\nloop invariant i % 2 != 0 ==> n == (i-1)/2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant i % 2 == 0 ==> n == i/2 is established but not preserved.\nloop invariant i % 2 != 0 ==> n == (i-1)/2 is established but not preserved.\nAssertion k < 0 || n == k: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 105: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: i3;\nloop invariant i4: i == i;\nloop invariant i5: 0 <= i <= 2*k;\nloop invariant i6: i % 2 == 0 ==> n == k;\nloop invariant i7: i % 2 != 0 ==> n < k;\nloop invariant i8: k < 0 ==> n == k;\nloop invariant i9: k < 0 ==> k <= i <= 2*k;\nloop invariant i10: k < 0 ==> n == (i/2);\nloop invariant i11: k < 0 ==> i % 2 == 0;\nloop invariant i12: k >= 0 ==> n == k;\nloop invariant i13: k >= 0 ==> k <= i <= 2*k;\nloop invariant i14: k >= 0 ==> n == (i/2);\nloop invariant i15: k >= 0 ==> i % 2 == 0;\nloop invariant i16: i >= 0;\nloop invariant i17: i <= 2 * k;\nloop invariant i18: n == i / 2;\nloop invariant i19: i < 2*k;\nloop invariant i20: n >= 0;\nloop invariant i21: n == (k + 1) / 2;\nloop invariant i22: n == (k + 2) / 2;\nloop invariant i23: n == (k + 3) / 2;\nloop invariant i24: n == (k + 4) / 2;\nloop invariant i25: n == (k + 5) / 2;\nloop invariant i26: n == (k + 6) / 2;\nloop invariant i27: n == (k + 7) / 2;\nloop invariant i28: n == (k + 8) / 2;\nloop invariant i29: n == (k + 9) / 2;\nloop invariant i30: n == (k + 10) / 2;\nloop invariant i31: n == (k + 11) / 2;\nloop invariant i32: n == (k + 12) / 2;\nloop invariant i33: n == (k + 13) / 2;\nloop invariant i34: n == (k + 14) / 2;\nloop invariant i35: n == (k + 15) / 2;\nloop invariant i36: n == (k + 16) / 2;\nloop invariant i37: n == (k + 17) / 2;\nloop invariant i38: n == (k + 18) / 2;\nloop invariant i39: n == (k + 19) / 2;\nloop invariant i40: n == (k + 20) / 2;\nloop invariant i41: n == (k + 21) / 2;\nloop invariant i42: n == (k + 22) / 2;\nloop invariant i43: n == (k + 23) / 2;\nloop invariant i44: n == (k + 24) / 2;\nloop invariant i45: n == (k + 25) / 2;\nloop invariant i46: n == (k + 26) / 2;\nloop invariant i47: n == (k + 27) / 2;\nloop invariant i48: n == (k + 28) / 2;\nloop invariant i49: n == (k + 29) / 2;\nloop invariant i50: n == (k + 30) / 2;\nloop invariant i51: n == (k + 31) / 2;\nloop invariant i52: n == (k + 32) / 2;\nloop invariant i53: n == (k + 33) / 2;\nloop invariant i54: n == (k + 34) / 2;\nloop invariant i55: n == (k + 35) / 2;\nloop invariant i56: n == (k + 36) / 2;\nloop invariant i57: n == (k + 37) / 2;\nloop invariant i58: n == (k + 38) / 2;\nloop invariant i59: n == (k + 39) / 2;\nloop invariant i60: n == (k + 40) / 2;\nloop invariant i61: n == (k + 41) / 2;\nloop invariant i62: n == (k + 42) / 2;\nloop invariant i63: n == (k + 43) / 2;\nloop invariant i64: n == (k + 44) / 2;\nloop invariant i65: n == (k + 45) / 2;\nloop invariant i66: n == (k + 46) / 2;\nloop invariant i67: n == (k + 47) / 2;\nloop invariant i68: n == (k + 48) / 2;\nloop invariant i69: n == (k + 49) / 2;\nloop invariant i70: n == (k + 50) / 2;\nloop invariant i71: n == (k + 51) / 2;\nloop invariant i72: n == (k + 52) / 2;\nloop invariant i73: n == (k + 53) / 2;\nloop invariant i74: n == (k + 54) / 2;\nloop invariant i75: n == (k + 55) / 2;\nloop invariant i76: n == (k + 56) / 2;\nloop invariant i77: n == (k + 57) / 2;\nloop invariant i78: n == (k + 58) / 2;\nloop invariant i79: n == (k + 59) / 2;\nloop invariant i80: n == (k + 60) / 2;\nloop invariant i81: n == (k + 61) / 2;\nloop invariant i82: n == (k + 62) / 2;\nloop invariant i83: n == (k + 63) / 2;\nloop invariant i84: n == (k + 64) / 2;\nloop invariant i85: n == (k + 65) / 2;\nloop invariant i86: 0 <= n <= k;\nloop invariant i87: k >= 0 ==> n == 2*k;\nloop invariant i88: k >= 0 ==> i % 2 == 1;\nloop invariant i89: if (k >= 0) then n == k else n == 0;\nloop invariant i90: 0 <= i <= 2*k; loop invariant n >= 0; loop invariant n >= i/2; loop invariant n <= i; loop invariant n >= i - 2; loop invariant n <= i - 1; loop invariant n >= i - 2*k; loop invariant n <= i - k; loop invariant n >= i - 2*k + 1; loop invariant n <= i - k + 1; loop invariant n >= i - 2*k + 2; loop invariant n <= i - k + 2; loop invariant n >= i - 2*k + 3; loop invariant n <= i - k + 3; loop invariant n >= i - 2*k + 4; loop invariant n <= i - k + 4; loop invariant n >= i - 2*k + 5; loop invariant n <= i - k + 5; loop invariant n >= i - 2*k + 6; loop invariant n <= i - k + 6; loop invariant n >= i - 2*k + 7; loop invariant n <= i - k + 7; loop invariant n >= i - 2*k + 8; loop invariant n <= i - k + 8; loop invariant n >= i - 2*k + 9; loop invariant n <= i - k + 9; loop invariant n >= i - 2*k + 10; loop invariant n <= i - k + 10; loop invariant n >= i - 2*k + 11; loop invariant n <= i - k + 11; loop invariant n >= i - 2*k + 12; loop invariant n <= i - k + 12; loop invariant n >= i - 2*k + 13; loop invariant n <= i - k + 13; loop invariant n >= i - 2*k + 14; loop invariant n <= i - k + 14; loop invariant n >= i - 2*k + 15; loop invariant n <= i - k + 15; loop invariant n >= i - 2*k + 16; loop invariant n <= i - k + 16; loop invariant n >= i - 2*k + 17; loop invariant n <= i - k + 17; loop invariant n >= i - 2*k + 18; loop invariant n <= i - k + 18; loop invariant n >= i - 2*k + 19; loop invariant n <= i - k + 19; loop invariant n >= i - 2*k + 20; loop invariant n <= i - k + 20; loop invariant n >= i - 2*k + 21; loop invariant n <= i - k + 21; loop invariant n >= i - 2*k + 22; loop invariant n <= i - k + 22; loop invariant n >= i - 2*k + 23; loop invariant n <= i - k + 23; loop invariant n >= i - 2*k + 24; loop invariant n <= i - k + 24; loop invariant n >= i - 2*k + 25; loop invariant n <= i - k + 25; loop invariant n >= i - 2*k + 26; loop invariant n <= i - k + 26; loop invariant n >= i - 2*k + 27; loop invariant n <= i - k + 27; loop invariant n >= i - 2*k + 28; loop invariant n <= i - k + 28; loop invariant n >= i - 2*k + 29; loop invariant n <= i - k + 29; loop invariant n >= i - 2*k + 30; loop invariant n <= i - k + 30; loop invariant n >= i - 2*k + 31; loop invariant n <= i - k + 31; loop invariant n >= i - 2*k + 32; loop invariant n <= i - k + 32; loop invariant n >= i - 2*k + 33; loop invariant n <= i - k + 33; loop invariant n >= i - 2*k + 34; loop invariant n <= i - k + 34; loop invariant n >= i - 2*k + 35; loop invariant n <= i - k + 35; loop invariant n >= i - 2*k + 36; loop invariant n <= i - k + 36; loop invariant n >= i - 2*k + 37;\nloop invariant i91: 0 <= n <= 2*k - i;\nloop invariant i92: k < 0 ==> n == 0;\nloop invariant i93: 0 <= i <= 2 * k;\nloop invariant i94: k < 0 || n <= k;\nloop invariant i95: n <= i;\nloop invariant i96: (k < 0 ==> n == k);\nloop invariant i97: (k >= 0 ==> n == 2 * k);\nloop invariant i98: (i % 2 == 0 ==> n == i / 2);\nloop invariant i99: (i % 2 != 0 ==> n == (i - 1) / 2);\nloop invariant i100: i % 2 != 0 ==> n == k;\nloop invariant i101: i % 2 == 0 ==> i <= 2*k;\nloop invariant i102: i % 2 != 0 ==> i <= 2*k;\nloop invariant i103: i % 2 == 0 ==> i >= 0;\nloop invariant i104: i % 2 != 0 ==> i >= 0;\nloop invariant i105: n == k ==> i == 2*k;\nloop invariant i106: i == 2*k ==> i % 2 == 0;\nloop invariant i107: i == 2*k ==> n == k;\nloop invariant i108: i == 0 ==> n == 0;\nloop invariant i109: n == k - (i - k) / 2;\nloop invariant i110: i % 2 == 0 ==> n == i/2;\nloop invariant i111: i % 2 != 0 ==> n == (i-1)/2;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 36,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\nloop invariant i4: i == i;\n\n\n\n\n\nloop invariant i10: k < 0 ==> n == (i/2);\nloop invariant i11: k < 0 ==> i % 2 == 0;\n\n\n\n\nloop invariant i16: i >= 0;\n\n\n\nloop invariant i20: n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i92: k < 0 ==> n == 0;\n\n\nloop invariant i95: n <= i;\n\n\n\n\n\n\nloop invariant i102: i % 2 != 0 ==> i <= 2*k;\nloop invariant i103: i % 2 == 0 ==> i >= 0;\nloop invariant i104: i % 2 != 0 ==> i >= 0;\n\nloop invariant i106: i == 2*k ==> i % 2 == 0;\n\nloop invariant i108: i == 0 ==> n == 0;\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c"
        ],
        "skipped": [],
        "total": 18,
        "success_count": 3,
        "failure_count": 15,
        "success_rate": 0.16666666666666666
    }
}