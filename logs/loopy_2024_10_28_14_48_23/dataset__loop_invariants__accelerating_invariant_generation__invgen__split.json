{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/split.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i + j) == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i - j == n % 2 * k;\nloop invariant j - i == (n + 1) % 2 * k;\nloop invariant i + j + n == k * 2;\nloop invariant i - j + n == (n + 1) % 2 * k;\nloop invariant j - i + n == n % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant j + i == n;\nloop invariant j + i == 2*k;\nloop invariant b == (n % 2 == 0);\nloop invariant j == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= k;\nloop invariant i + n <= k;\nloop invariant i + j + n <= k;\nloop invariant i - j <= k;\nloop invariant i - j + n <= k;\nloop invariant i + j - n <= k;\nloop invariant i + j + n - k <= k;\nloop invariant i - j - n <= k;\nloop invariant i - j - n + k <= k;\nloop invariant i + j - n + k <= k;\nloop invariant i + j + n - k + k <= k;\nloop invariant i - j - n + k - k <= k;\nloop invariant i - j - n - k <= k;\nloop invariant i + j - n - k <= k;\nloop invariant i + j + n - k - k <= k;\nloop invariant i - j - n - k + k <= k;\nloop invariant i + j - n - k + k <= k;\nloop invariant i + j + n - k - k + k <= k;\nloop invariant i - j - n - k + k - k <= k;\nloop invariant i - j - n - k - k <= k;\nloop invariant i + j - n - k - k <= k;\nloop invariant i + j + n - k - k - k <= k;\nloop invariant i - j - n - k + k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\n*/\n```",
            "```\n/*@\nloop invariant i = j;\nloop invariant k >= 0;\nloop invariant b âˆˆ {0, 1};\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2*k;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant b == (!b);\nloop invariant i + j == n;\nloop invariant i == j;\nloop invariant n == 2*k;\nloop invariant b == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i == j;\nloop invariant i + j == n;\nloop invariant i == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant (i + j) == n;\nloop invariant (i == j) ==> (n == 2*i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n % 2 == 1);\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n % 2 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j >= n;\nloop invariant i - j <= n;\nloop invariant i + j - n <= k;\nloop invariant i - j + n <= k;\nloop invariant i + j - n + i - j <= k;\nloop invariant i - j + n + i - j <= k;\nloop invariant i + j - n + i - j - i + j <= k;\nloop invariant i - j + n + i - j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= k <= 100;\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant k % 2 == 1 ==> b == (n % 2 == 0);\nloop invariant k % 2 == 0 ==> b == (n % 2 == 1);\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i + j == 2 * k;\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 != 0) ==> (i == j + 1);\nloop invariant (n % 2 == 0) ==> (b == 0);\nloop invariant (n % 2 != 0) ==> (b == 1);\nloop invariant 0 <= n;\nloop invariant n <= 2 * k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 50;\nloop invariant 0 <= j <= 50;\nloop invariant i + j == n;\nloop invariant i == j ==> b == true;\nloop invariant i != j ==> b == false;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j = n;\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i + j) == n;\nloop invariant b ==> i == j;\nloop invariant !b ==> i == j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant i >= 0 is preserved but not established.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant (i + j) == n is preserved but not established.\nloop invariant b ==> i == j is established but not preserved.\nloop invariant !b ==> i == j is established but not preserved.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant 1 <= j <= 100;\nloop invariant i + j == k;\nloop invariant i >= j;\nloop invariant j >= i;\nloop invariant i - j == n % 2 * k;\nloop invariant j - i == (n + 1) % 2 * k;\nloop invariant i + j + n == k * 2;\nloop invariant i - j + n == (n + 1) % 2 * k;\nloop invariant j - i + n == n % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\nloop invariant (n + 1) % 2 * k + i + j == k * 2;\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant n % 2 * k + j - i == n % 2 * k;\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant n % 2 * k + i + j == k * 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 100 is preserved but not established.\nloop invariant 1 <= j <= 100 is partially proven to be inductive.\nloop invariant i + j == k is preserved but not established.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i - j == n % 2 * k is partially proven to be inductive.\nloop invariant j - i == (n + 1) % 2 * k is preserved but not established.\nloop invariant i + j + n == k * 2 is partially proven to be inductive.\nloop invariant i - j + n == (n + 1) % 2 * k is partially proven to be inductive.\nloop invariant j - i + n == n % 2 * k is partially proven to be inductive.\nloop invariant n % 2 * k + i + j == k * 2 is partially proven to be inductive.\nloop invariant (n + 1) % 2 * k + i + j == k * 2 is partially proven to be inductive.\nloop invariant n % 2 * k + i - j == (n + 1) % 2 * k is partially proven to be inductive.\nloop invariant (n + 1) % 2 * k + i - j == n % 2 * k is partially proven to be inductive.\nloop invariant n % 2 * k + j - i == n % 2 * k is partially proven to be inductive.\nloop invariant (n + 1) % 2 * k + j - i == (n + 1) % 2 * k is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\nloop invariant j == k - i;\nloop invariant i + j == n;\nloop invariant b == (n % 2 == 0);\nloop invariant n >= 0;\nloop invariant n < 2*k;\nloop invariant i == j;\nloop invariant i == k - j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= k is preserved but not established.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant b == (n % 2 == 0) is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n < 2*k is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i == k - j is preserved but not established.\nloop invariant j == k - i is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\nloop invariant i5: n >= 0;\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant 0 <= i <= k;\nloop invariant j + i == n;\nloop invariant j + i == 2*k;\nloop invariant b == (n % 2 == 0);\nloop invariant j == i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= k is preserved but not established.\nloop invariant 0 <= i <= k is partially proven to be inductive.\nloop invariant j + i == n is preserved but not established.\nloop invariant j + i == 2*k is preserved but not established.\nloop invariant b == (n % 2 == 0) is partially proven to be inductive.\nloop invariant j == i is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= k;\nloop invariant i + n <= k;\nloop invariant i + j + n <= k;\nloop invariant i - j <= k;\nloop invariant i - j + n <= k;\nloop invariant i + j - n <= k;\nloop invariant i + j + n - k <= k;\nloop invariant i - j - n <= k;\nloop invariant i - j - n + k <= k;\nloop invariant i + j - n + k <= k;\nloop invariant i + j + n - k + k <= k;\nloop invariant i - j - n + k - k <= k;\nloop invariant i - j - n - k <= k;\nloop invariant i + j - n - k <= k;\nloop invariant i + j + n - k - k <= k;\nloop invariant i - j - n - k + k <= k;\nloop invariant i + j - n - k + k <= k;\nloop invariant i + j + n - k - k + k <= k;\nloop invariant i - j - n - k + k - k <= k;\nloop invariant i - j - n - k - k <= k;\nloop invariant i + j - n - k - k <= k;\nloop invariant i + j + n - k - k - k <= k;\nloop invariant i - j - n - k + k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\nloop invariant i - j - n - k + k - k - k + k <= k;\nloop invariant i - j - n - k - k + k <= k;\nloop invariant i + j - n - k - k + k <= k;\nloop invariant i + j + n - k - k - k + k <= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= k is preserved but not established.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant i + j <= k is preserved but not established.\nloop invariant i + n <= k is established but not preserved.\nloop invariant i + j + n <= k is established but not preserved.\nloop invariant i - j <= k is partially proven to be inductive.\nloop invariant i - j + n <= k is partially proven to be inductive.\nloop invariant i + j - n <= k is partially proven to be inductive.\nloop invariant i + j + n - k <= k is partially proven to be inductive.\nloop invariant i - j - n <= k is partially proven to be inductive.\nloop invariant i - j - n + k <= k is partially proven to be inductive.\nloop invariant i + j - n + k <= k is preserved but not established.\nloop invariant i + j + n - k + k <= k is partially proven to be inductive.\nloop invariant i - j - n + k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k <= k is partially proven to be inductive.\nloop invariant i + j - n - k <= k is partially proven to be inductive.\nloop invariant i + j + n - k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k <= k is partially proven to be inductive.\nloop invariant i + j - n - k + k <= k is partially proven to be inductive.\nloop invariant i + j + n - k - k + k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k - k <= k is partially proven to be inductive.\nloop invariant i + j - n - k - k <= k is partially proven to be inductive.\nloop invariant i + j + n - k - k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k - k + k <= k is partially proven to be inductive.\nloop invariant i - j - n - k - k + k <= k is partially proven to be inductive.\nloop invariant i + j - n - k - k + k <= k is partially proven to be inductive.\nloop invariant i + j + n - k - k - k + k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k - k - k <= k is partially proven to be inductive.\nloop invariant i - j - n - k + k - k - k + k <= k is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: i - j - n <= k;\nloop invariant i11: i - j - n + k <= k;\n\n\nloop invariant i14: i - j - n + k - k <= k;\nloop invariant i15: i - j - n - k <= k;\n\n\nloop invariant i18: i - j - n - k + k <= k;\n\n\nloop invariant i21: i - j - n - k + k - k <= k;\nloop invariant i22: i - j - n - k - k <= k;\n\n\nloop invariant i25: i - j - n - k + k - k + k <= k;\nloop invariant i26: i - j - n - k - k + k <= k;\n\n\nloop invariant i29: i - j - n - k + k - k - k <= k;\nloop invariant i30: i - j - n - k + k - k - k + k <= k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i = j;\nloop invariant k >= 0;\nloop invariant b âˆˆ {0, 1};\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n <= 2*k;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant b == (!b);\nloop invariant i + j == n;\nloop invariant i == j;\nloop invariant n == 2*k;\nloop invariant b == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\nloop invariant i2: k >= 0;\n\nloop invariant i4: n >= 0;\n\n\nloop invariant i7: n <= 2*k;\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i == j;\nloop invariant i + j == n;\nloop invariant i == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= k is preserved but not established.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant i == k is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant (i + j) == n;\nloop invariant (i == j) ==> (n == 2*i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is neither established nor preserved.\nloop invariant 0 <= j <= 100 is established but not preserved.\nloop invariant (i + j) == n is preserved but not established.\nloop invariant (i == j) ==> (n == 2*i) is partially proven to be inductive.\nAssertion i == j: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n % 2 == 1);\nloop invariant 0 <= j <= k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i == j) ==> (n % 2 == 0);\nloop invariant (i == j) ==> (n % 2 == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= k is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant (i == j) ==> (n % 2 == 0) is partially proven to be inductive.\nloop invariant (i == j) ==> (n % 2 == 1) is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j >= n;\nloop invariant i - j <= n;\nloop invariant i + j - n <= k;\nloop invariant i - j + n <= k;\nloop invariant i + j - n + i - j <= k;\nloop invariant i - j + n + i - j <= k;\nloop invariant i + j - n + i - j - i + j <= k;\nloop invariant i - j + n + i - j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant i >= 0 is preserved but not established.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i <= k is neither established nor preserved.\nloop invariant j <= k is established but not preserved.\nloop invariant i + j >= n is partially proven to be inductive.\nloop invariant i - j <= n is partially proven to be inductive.\nloop invariant i + j - n <= k is preserved but not established.\nloop invariant i - j + n <= k is established but not preserved.\nloop invariant i + j - n + i - j <= k is established but not preserved.\nloop invariant i - j + n + i - j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j <= k is partially proven to be inductive.\nloop invariant i - j + n + i - j - i + j <= k is partially proven to be inductive.\nloop invariant i + j - n + i - j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nloop invariant i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k is established but not preserved.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n\n\nloop invariant i7: i - j <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= k <= 100;\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant k % 2 == 1 ==> b == (n % 2 == 0);\nloop invariant k % 2 == 0 ==> b == (n % 2 == 1);\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant k % 2 == 1 ==> j == (n / 2);\nloop invariant k % 2 == 0 ==> i == (n / 2);\nloop invariant k % 2 == 1 ==> i >= j;\nloop invariant k % 2 == 0 ==> j >= i;\nloop invariant k % 2 == 1 ==> i == j;\nloop invariant k % 2 == 0 ==> i != j;\nloop invariant k % 2 == 1 ==> i != j;\nloop invariant k % 2 == 1 ==> i + j == n;\nloop invariant k % 2 == 0 ==> i + j == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= k <= 100 is partially proven to be inductive.\nloop invariant 0 <= i <= 100 is preserved but not established.\nloop invariant 0 <= j <= 100 is partially proven to be inductive.\nloop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant i + j == n is preserved but not established.\nloop invariant k % 2 == 1 ==> b == (n % 2 == 0) is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> b == (n % 2 == 1) is preserved but not established.\nloop invariant k % 2 == 1 ==> i == (n / 2 + 1) is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> j == (n / 2 + 1) is preserved but not established.\nloop invariant k % 2 == 1 ==> j == (n / 2) is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> i == (n / 2) is partially proven to be inductive.\nloop invariant k % 2 == 1 ==> i >= j is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> j >= i is partially proven to be inductive.\nloop invariant k % 2 == 1 ==> i == j is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> i != j is partially proven to be inductive.\nloop invariant k % 2 == 1 ==> i != j is partially proven to be inductive.\nloop invariant k % 2 == 1 ==> i + j == n is partially proven to be inductive.\nloop invariant k % 2 == 0 ==> i + j == n is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 1 <= k <= 100;\n\n\nloop invariant i4: 0 <= n <= 2*k;\n\nloop invariant i6: k % 2 == 1 ==> b == (n % 2 == 0);\n\nloop invariant i8: k % 2 == 1 ==> i == (n / 2 + 1);\n\nloop invariant i10: k % 2 == 1 ==> j == (n / 2);\n\nloop invariant i12: k % 2 == 1 ==> i >= j;\n\nloop invariant i14: k % 2 == 1 ==> i == j;\n\nloop invariant i16: k % 2 == 1 ==> i != j;\nloop invariant i17: k % 2 == 1 ==> i + j == n;\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= k is preserved but not established.\nloop invariant 0 <= j <= k is established but not preserved.\nloop invariant i + j == n is preserved but not established.\nloop invariant i <= j is established but not preserved.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i + j == 2 * k;\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 != 0) ==> (i == j + 1);\nloop invariant (n % 2 == 0) ==> (b == 0);\nloop invariant (n % 2 != 0) ==> (b == 1);\nloop invariant 0 <= n;\nloop invariant n <= 2 * k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is preserved but not established.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant i + j == 2 * k is neither established nor preserved.\nloop invariant (n % 2 == 0) ==> (i == j) is partially proven to be inductive.\nloop invariant (n % 2 != 0) ==> (i == j + 1) is partially proven to be inductive.\nloop invariant (n % 2 == 0) ==> (b == 0) is preserved but not established.\nloop invariant (n % 2 != 0) ==> (b == 1) is partially proven to be inductive.\nloop invariant 0 <= n is partially proven to be inductive.\nloop invariant n <= 2 * k is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: 0 <= n;\nloop invariant i9: n <= 2 * k;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 50;\nloop invariant 0 <= j <= 50;\nloop invariant i + j == n;\nloop invariant i == j ==> b == true;\nloop invariant i != j ==> b == false;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable true. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i + j = n;\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\nloop invariant (i > j) ==> ((i + k) >= j);\nloop invariant (i <= j) ==> ((i + k) < j);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\nloop invariant i4: (i > j) ==> ((i + k) >= j);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 77: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: (i + j) == n;\nloop invariant i5: b ==> i == j;\nloop invariant i6: !b ==> i == j;\nloop invariant i7: 1 <= i <= 100;\nloop invariant i8: 1 <= j <= 100;\nloop invariant i9: i + j == k;\nloop invariant i10: i >= j;\nloop invariant i11: j >= i;\nloop invariant i12: i - j == n % 2 * k;\nloop invariant i13: j - i == (n + 1) % 2 * k;\nloop invariant i14: i + j + n == k * 2;\nloop invariant i15: i - j + n == (n + 1) % 2 * k;\nloop invariant i16: j - i + n == n % 2 * k;\nloop invariant i17: n % 2 * k + i + j == k * 2;\nloop invariant i18: (n + 1) % 2 * k + i + j == k * 2;\nloop invariant i19: n % 2 * k + i - j == (n + 1) % 2 * k;\nloop invariant i20: (n + 1) % 2 * k + i - j == n % 2 * k;\nloop invariant i21: n % 2 * k + j - i == n % 2 * k;\nloop invariant i22: (n + 1) % 2 * k + j - i == (n + 1) % 2 * k;\nloop invariant i23: 0 <= i <= k;\nloop invariant i24: 0 <= j <= k;\nloop invariant i25: i + j == n;\nloop invariant i26: b == (n % 2 == 0);\nloop invariant i27: n >= 0;\nloop invariant i28: n < 2*k;\nloop invariant i29: i == j;\nloop invariant i30: i == k - j;\nloop invariant i31: j == k - i;\nloop invariant i32: j + i == n;\nloop invariant i33: j + i == 2*k;\nloop invariant i34: j == i;\nloop invariant i35: i + j <= k;\nloop invariant i36: i + n <= k;\nloop invariant i37: i + j + n <= k;\nloop invariant i38: i - j <= k;\nloop invariant i39: i - j + n <= k;\nloop invariant i40: i + j - n <= k;\nloop invariant i41: i + j + n - k <= k;\nloop invariant i42: i - j - n <= k;\nloop invariant i43: i - j - n + k <= k;\nloop invariant i44: i + j - n + k <= k;\nloop invariant i45: i + j + n - k + k <= k;\nloop invariant i46: i - j - n + k - k <= k;\nloop invariant i47: i - j - n - k <= k;\nloop invariant i48: i + j - n - k <= k;\nloop invariant i49: i + j + n - k - k <= k;\nloop invariant i50: i - j - n - k + k <= k;\nloop invariant i51: i + j - n - k + k <= k;\nloop invariant i52: i + j + n - k - k + k <= k;\nloop invariant i53: i - j - n - k + k - k <= k;\nloop invariant i54: i - j - n - k - k <= k;\nloop invariant i55: i + j - n - k - k <= k;\nloop invariant i56: i + j + n - k - k - k <= k;\nloop invariant i57: i - j - n - k + k - k + k <= k;\nloop invariant i58: i - j - n - k - k + k <= k;\nloop invariant i59: i + j - n - k - k + k <= k;\nloop invariant i60: i + j + n - k - k - k + k <= k;\nloop invariant i61: i - j - n - k + k - k - k <= k;\nloop invariant i62: i - j - n - k + k - k - k + k <= k;\nloop invariant i63: i = j;\nloop invariant i64: k >= 0;\nloop invariant i65: b âˆˆ {0, 1};\nloop invariant i66: n <= 2*k;\nloop invariant i67: i <= n;\nloop invariant i68: j <= n;\nloop invariant i69: b == (!b);\nloop invariant i70: n == 2*k;\nloop invariant i71: b == 1;\nloop invariant i72: i == k;\nloop invariant i73: 0 <= i <= 100;\nloop invariant i74: 0 <= j <= 100;\nloop invariant i75: (i == j) ==> (n == 2*i);\nloop invariant i76: (i == j) ==> (n % 2 == 0);\nloop invariant i77: (i == j) ==> (n % 2 == 1);\nloop invariant i78: i <= k;\nloop invariant i79: j <= k;\nloop invariant i80: i + j >= n;\nloop invariant i81: i - j <= n;\nloop invariant i82: i + j - n + i - j <= k;\nloop invariant i83: i - j + n + i - j <= k;\nloop invariant i84: i + j - n + i - j - i + j <= k;\nloop invariant i85: i - j + n + i - j - i + j <= k;\nloop invariant i86: i + j - n + i - j - i + j - i + j <= k;\nloop invariant i87: i - j + n + i - j - i + j - i + j <= k;\nloop invariant i88: i + j - n + i - j - i + j - i + j - i + j <= k;\nloop invariant i89: i - j + n + i - j - i + j - i + j - i + j <= k;\nloop invariant i90: i + j - n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i91: i - j + n + i - j - i + j - i + j - i + j - i + j <= k;\nloop invariant i92: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i93: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i94: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i95: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i96: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i97: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i98: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i99: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i100: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i101: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i102: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i103: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i104: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i105: i - j + n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i106: i + j - n + i - j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j - i + j <= k;\nloop invariant i107: 1 <= k <= 100;\nloop invariant i108: k % 2 == 1 ==> b == (n % 2 == 0);\nloop invariant i109: k % 2 == 0 ==> b == (n % 2 == 1);\nloop invariant i110: k % 2 == 1 ==> i == (n / 2 + 1);\nloop invariant i111: k % 2 == 0 ==> j == (n / 2 + 1);\nloop invariant i112: k % 2 == 1 ==> j == (n / 2);\nloop invariant i113: k % 2 == 0 ==> i == (n / 2);\nloop invariant i114: k % 2 == 1 ==> i >= j;\nloop invariant i115: k % 2 == 0 ==> j >= i;\nloop invariant i116: k % 2 == 1 ==> i == j;\nloop invariant i117: k % 2 == 0 ==> i != j;\nloop invariant i118: k % 2 == 1 ==> i != j;\nloop invariant i119: k % 2 == 1 ==> i + j == n;\nloop invariant i120: k % 2 == 0 ==> i + j == n;\nloop invariant i121: i <= j;\nloop invariant i122: 0 <= i;\nloop invariant i123: 0 <= j;\nloop invariant i124: i + j == 2 * k;\nloop invariant i125: (n % 2 == 0) ==> (i == j);\nloop invariant i126: (n % 2 != 0) ==> (i == j + 1);\nloop invariant i127: (n % 2 == 0) ==> (b == 0);\nloop invariant i128: (n % 2 != 0) ==> (b == 1);\nloop invariant i129: 0 <= n;\nloop invariant i130: n <= 2 * k;\nloop invariant i131: 0 <= i <= 50;\nloop invariant i132: 0 <= j <= 50;\nloop invariant i133: i == j ==> b == true;\nloop invariant i134: i != j ==> b == false;\nloop invariant i135: i + j = n;\nloop invariant i136: (i <= j) ==> ((i + k) < j);\nloop invariant i137: (i > j) ==> ((i + k) >= j);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "combined_annotation_num_solver_calls": 33,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i27: n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i42: i - j - n <= k;\nloop invariant i43: i - j - n + k <= k;\n\n\nloop invariant i46: i - j - n + k - k <= k;\nloop invariant i47: i - j - n - k <= k;\n\n\nloop invariant i50: i - j - n - k + k <= k;\n\n\nloop invariant i53: i - j - n - k + k - k <= k;\nloop invariant i54: i - j - n - k - k <= k;\n\n\nloop invariant i57: i - j - n - k + k - k + k <= k;\nloop invariant i58: i - j - n - k - k + k <= k;\n\n\nloop invariant i61: i - j - n - k + k - k - k <= k;\nloop invariant i62: i - j - n - k + k - k - k + k <= k;\n\nloop invariant i64: k >= 0;\n\nloop invariant i66: n <= 2*k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i81: i - j <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i107: 1 <= k <= 100;\nloop invariant i108: k % 2 == 1 ==> b == (n % 2 == 0);\n\nloop invariant i110: k % 2 == 1 ==> i == (n / 2 + 1);\n\nloop invariant i112: k % 2 == 1 ==> j == (n / 2);\n\nloop invariant i114: k % 2 == 1 ==> i >= j;\n\nloop invariant i116: k % 2 == 1 ==> i == j;\n\nloop invariant i118: k % 2 == 1 ==> i != j;\nloop invariant i119: k % 2 == 1 ==> i + j == n;\n\n\n\n\n\n\n\n\n\nloop invariant i129: 0 <= n;\nloop invariant i130: n <= 2 * k;\n\n\n\n\n\n\nloop invariant i137: (i > j) ==> ((i + k) >= j);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../dataset/loop_invariants/code2inv/105.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/123.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/ddlm2013.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/split.c"
        ],
        "skipped": [],
        "total": 28,
        "success_count": 5,
        "failure_count": 23,
        "success_rate": 0.17857142857142858
    }
}