{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  while(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x && x <= (y + z);\nloop invariant 0 <= y && y <= (x + z);\nloop invariant 0 <= z && z <= (x + y);\nloop invariant (k%3 == 0) ==> x == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> x == (x + y + z + 1) / 3;\nloop invariant (k%3 == 0) ==> y == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> y == (x + y + z + 1) / 3;\nloop invariant (k%3 == 0) ==> z == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> z == (x + y + z + 1) / 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k;\nloop invariant k <= x + y + z;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= unknown1(); loop invariant x <= y; loop invariant y <= z; loop invariant x <= z; loop invariant y <= unknown1(); loop invariant z <= unknown1(); loop invariant x + y + z == k; loop invariant x + y + z == unknown1(); loop invariant unknown1() ==> (x <= y); loop invariant unknown1() ==> (y <= z); loop invariant unknown1() ==> (x <= z); loop invariant unknown1() ==> (y <= unknown1()); loop invariant unknown1() ==> (z <= unknown1()); loop invariant unknown1() ==> (x + y + z == k); loop invariant unknown1() ==> (x + y + z == unknown1());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant k == x + y + z;\nloop invariant k % 3 == 0 ==> x == 0;\nloop invariant k % 3 == 1 ==> x == 1;\nloop invariant k % 3 == 2 ==> x == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y && y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z >= (1 + (y - 1) * y / 2);\nloop invariant k >= (1 + (y - 1) * y / 2);\nloop invariant x <= z && y <= z && k <= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= k <= 300000;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0 ==> x == 0;\nloop invariant 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\nloop invariant k == x + y + z;\nloop invariant 0 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 0;\nloop invariant 1 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 1;\nloop invariant 2 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 1;\nloop invariant 3 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 2;\nloop invariant 4 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 3;\nloop invariant 5 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant x+y+z = k;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 3*z;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant x == y ==> (x == z);\nloop invariant (x != y) ==> (x != z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant k == x + y + z;\nloop invariant (k%3 == 0 ==> x == k/3);\nloop invariant (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1);\nloop invariant (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2);\nloop invariant y >= x;\nloop invariant z >= x;\nloop invariant y >= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant k >= x;\nloop invariant k >= y;\nloop invariant k >= z;\nloop invariant k <= x + y + z;\nloop invariant k <= 3 * x;\nloop invariant k <= 3 * y;\nloop invariant k <= 3 * z;\nloop invariant x == y ==> z == x;\nloop invariant x == z ==> y == x;\nloop invariant y == z ==> x == y;\nloop invariant x <= y ==> x == z;\nloop invariant y <= x ==> y == z;\nloop invariant z <= x ==> z == y;\nloop invariant z <= y ==> z == x;\nloop invariant y <= x ==> y == z;\nloop invariant z <= y ==> z == x;\nloop invariant x <= y ==> x == z;\nloop invariant x <= z ==> x == y;\nloop invariant y <= z ==> y == x;\nloop invariant z <= x ==> z == y;\nloop invariant x <= y ==> x == z;\nloop invariant x <= z ==> x == y;\nloop invariant y <= x ==> y == z;\nloop invariant y <= z ==> y == x;\nloop invariant z <= x ==> z == y;\nloop invariant z <= y ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 3*y;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant x+y+z == k;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= unknown1();\nloop invariant y >= x;\nloop invariant z >= y;\nloop invariant 0 <= k <= 3 * (x + y + z);\nloop invariant k == x + y + z ==> unknown1() ==> x >= y && y >= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= z;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= k <= 2*(x+y+z);\nloop invariant x <= y <= z;\nloop invariant y <= z;\nloop invariant x <= k <= 2*(x+y+z);\nloop invariant y <= k <= 2*(x+y+z);\nloop invariant z <= k <= 2*(x+y+z);\nloop invariant k <= 2*(x+y+z);\nloop invariant k >= 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x && x <= (y + z);\nloop invariant 0 <= y && y <= (x + z);\nloop invariant 0 <= z && z <= (x + y);\nloop invariant (k%3 == 0) ==> x == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> x == (x + y + z + 1) / 3;\nloop invariant (k%3 == 0) ==> y == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> y == (x + y + z + 1) / 3;\nloop invariant (k%3 == 0) ==> z == (x + y + z) / 3;\nloop invariant (k%3 != 0) ==> z == (x + y + z + 1) / 3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x && x <= (y + z) is partially proven to be inductive.\nloop invariant 0 <= y && y <= (x + z) is partially proven to be inductive.\nloop invariant 0 <= z && z <= (x + y) is partially proven to be inductive.\nloop invariant (k%3 == 0) ==> x == (x + y + z) / 3 is partially proven to be inductive.\nloop invariant (k%3 != 0) ==> x == (x + y + z + 1) / 3 is established but not preserved.\nloop invariant (k%3 == 0) ==> y == (x + y + z) / 3 is partially proven to be inductive.\nloop invariant (k%3 != 0) ==> y == (x + y + z + 1) / 3 is partially proven to be inductive.\nloop invariant (k%3 == 0) ==> z == (x + y + z) / 3 is partially proven to be inductive.\nloop invariant (k%3 != 0) ==> z == (x + y + z + 1) / 3 is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x && x <= (y + z);\nloop invariant i2: 0 <= y && y <= (x + z);\nloop invariant i3: 0 <= z && z <= (x + y);\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant k <= x + y + z;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k is inductive.\nloop invariant k <= x + y + z is inductive.\nloop invariant x <= y is inductive.\nloop invariant y <= z is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant z >= 0 is inductive.\nloop invariant k >= 0 is inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k;\nloop invariant i2: k <= x + y + z;\nloop invariant i3: x <= y;\nloop invariant i4: y <= z;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: z >= 0;\nloop invariant i8: k >= 0;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= unknown1(); loop invariant x <= y; loop invariant y <= z; loop invariant x <= z; loop invariant y <= unknown1(); loop invariant z <= unknown1(); loop invariant x + y + z == k; loop invariant x + y + z == unknown1(); loop invariant unknown1() ==> (x <= y); loop invariant unknown1() ==> (y <= z); loop invariant unknown1() ==> (x <= z); loop invariant unknown1() ==> (y <= unknown1()); loop invariant unknown1() ==> (z <= unknown1()); loop invariant unknown1() ==> (x + y + z == k); loop invariant unknown1() ==> (x + y + z == unknown1());\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= z <= k;\nloop invariant k == x + y + z;\nloop invariant k % 3 == 0 ==> x == 0;\nloop invariant k % 3 == 1 ==> x == 1;\nloop invariant k % 3 == 2 ==> x == 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= k is partially proven to be inductive.\nloop invariant 0 <= y <= k is partially proven to be inductive.\nloop invariant 0 <= z <= k is partially proven to be inductive.\nloop invariant k == x + y + z is partially proven to be inductive.\nloop invariant k % 3 == 0 ==> x == 0 is established but not preserved.\nloop invariant k % 3 == 1 ==> x == 1 is established but not preserved.\nloop invariant k % 3 == 2 ==> x == 2 is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= k;\nloop invariant i2: 0 <= y <= k;\nloop invariant i3: 0 <= z <= k;\nloop invariant i4: k == x + y + z;\n\n\nloop invariant i7: k % 3 == 2 ==> x == 2;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y && y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z >= (1 + (y - 1) * y / 2);\nloop invariant k >= (1 + (y - 1) * y / 2);\nloop invariant x <= z && y <= z && k <= z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y && y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant z >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant k >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x <= z && y <= z && k <= z is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= k <= 300000;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\nloop invariant x == y && y == z ==> y <= x;\nloop invariant x == y && y == z ==> x >= y;\nloop invariant x == y && y == z ==> y >= x;\nloop invariant x == y && y == z ==> x == y;\nloop invariant x == y && y == z ==> y == z;\nloop invariant x == y && y == z ==> z == x;\nloop invariant x == y && y == z ==> x == z;\nloop invariant x == y && y == z ==> y == x;\nloop invariant x == y && y == z ==> z == y;\nloop invariant x == y && y == z ==> x <= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is established but not preserved.\nloop invariant 0 <= z <= 100000 is established but not preserved.\nloop invariant 0 <= k <= 300000 is partially proven to be inductive.\nloop invariant x == y && y == z ==> x == y is partially proven to be inductive.\nloop invariant x == y && y == z ==> y == z is partially proven to be inductive.\nloop invariant x == y && y == z ==> z == x is partially proven to be inductive.\nloop invariant x == y && y == z ==> x == z is partially proven to be inductive.\nloop invariant x == y && y == z ==> y == x is partially proven to be inductive.\nloop invariant x == y && y == z ==> z == y is partially proven to be inductive.\nloop invariant x == y && y == z ==> x <= y is partially proven to be inductive.\nloop invariant x == y && y == z ==> y <= x is partially proven to be inductive.\nloop invariant x == y && y == z ==> x >= y is partially proven to be inductive.\nloop invariant x == y && y == z ==> y >= x is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: x == y && y == z ==> x == y;\nloop invariant i6: x == y && y == z ==> y == z;\nloop invariant i7: x == y && y == z ==> z == x;\nloop invariant i8: x == y && y == z ==> x == z;\nloop invariant i9: x == y && y == z ==> y == x;\nloop invariant i10: x == y && y == z ==> z == y;\nloop invariant i11: x == y && y == z ==> x <= y;\nloop invariant i12: x == y && y == z ==> y <= x;\nloop invariant i13: x == y && y == z ==> x >= y;\nloop invariant i14: x == y && y == z ==> y >= x;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0 ==> x == 0;\nloop invariant 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\nloop invariant k == x + y + z;\nloop invariant 0 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 0;\nloop invariant 1 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 1;\nloop invariant 2 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 1;\nloop invariant 3 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 2;\nloop invariant 4 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 3;\nloop invariant 5 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant 0 <= x <= 1 ==> x == 0 || x == 1 is partially proven to be inductive.\nloop invariant 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2 is partially proven to be inductive.\nloop invariant 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3 is partially proven to be inductive.\nloop invariant 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 is partially proven to be inductive.\nloop invariant 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 is partially proven to be inductive.\nloop invariant 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 is partially proven to be inductive.\nloop invariant 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 is partially proven to be inductive.\nloop invariant 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 is partially proven to be inductive.\nloop invariant 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 is partially proven to be inductive.\nloop invariant 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10 is partially proven to be inductive.\nloop invariant 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30 is partially proven to be inductive.\nloop invariant k == x + y + z is partially proven to be inductive.\nloop invariant 0 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 0 is established but not preserved.\nloop invariant 1 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 1 is partially proven to be inductive.\nloop invariant 2 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 1 is partially proven to be inductive.\nloop invariant 3 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 2 is partially proven to be inductive.\nloop invariant 4 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 3 is partially proven to be inductive.\nloop invariant 5 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 4 is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 0 ==> x == 0;\nloop invariant i2: 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant i3: 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant i4: 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant i5: 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i6: 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant i7: 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant i8: 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant i9: 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant i10: 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant i11: 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant i12: 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant i13: 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant i14: 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\nloop invariant i15: k == x + y + z;\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= z;\nloop invariant x+y+z = k;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y <= z;\n\nloop invariant i3: y >= 0;\nloop invariant i4: z >= 0;\nloop invariant i5: x >= 0;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 3*z;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant x == y ==> (x == z);\nloop invariant (x != y) ==> (x != z);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= 3*z is established but not preserved.\nloop invariant 0 <= z <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is established but not preserved.\nloop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant x == y ==> (x == z) is established but not preserved.\nloop invariant (x != y) ==> (x != z) is established but not preserved.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant k == x + y + z;\nloop invariant (k%3 == 0 ==> x == k/3);\nloop invariant (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1);\nloop invariant (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2);\nloop invariant y >= x;\nloop invariant z >= x;\nloop invariant y >= z;\n*/\n```",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= k is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant 0 <= z is inductive.\nloop invariant k == x + y + z is inductive.\nloop invariant (k%3 == 0 ==> x == k/3) is inductive.\nloop invariant (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1) is inductive.\nloop invariant (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2) is inductive.\nloop invariant y >= x is inductive.\nloop invariant z >= x is inductive.\nloop invariant y >= z is inductive.\nAssertion x == y == z: Valid"
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= k;\nloop invariant k >= x;\nloop invariant k >= y;\nloop invariant k >= z;\nloop invariant k <= x + y + z;\nloop invariant k <= 3 * x;\nloop invariant k <= 3 * y;\nloop invariant k <= 3 * z;\nloop invariant x == y ==> z == x;\nloop invariant x == z ==> y == x;\nloop invariant y == z ==> x == y;\nloop invariant x <= y ==> x == z;\nloop invariant y <= x ==> y == z;\nloop invariant z <= x ==> z == y;\nloop invariant z <= y ==> z == x;\nloop invariant y <= x ==> y == z;\nloop invariant z <= y ==> z == x;\nloop invariant x <= y ==> x == z;\nloop invariant x <= z ==> x == y;\nloop invariant y <= z ==> y == x;\nloop invariant z <= x ==> z == y;\nloop invariant x <= y ==> x == z;\nloop invariant x <= z ==> x == y;\nloop invariant y <= x ==> y == z;\nloop invariant y <= z ==> y == x;\nloop invariant z <= x ==> z == y;\nloop invariant z <= y ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == z;\nloop invariant k == x + y + z ==> y == x;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == y;\nloop invariant k == x + y + z ==> z == x;\nloop invariant k == x + y + z ==> x == y;\nloop invariant k == x + y + z ==> y == z;\nloop invariant k == x + y + z ==> z == x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant 0 <= k is partially proven to be inductive.\nloop invariant k >= x is partially proven to be inductive.\nloop invariant k >= y is partially proven to be inductive.\nloop invariant k >= z is partially proven to be inductive.\nloop invariant k <= x + y + z is partially proven to be inductive.\nloop invariant k <= 3 * x is established but not preserved.\nloop invariant k <= 3 * y is partially proven to be inductive.\nloop invariant k <= 3 * z is partially proven to be inductive.\nloop invariant x == y ==> z == x is partially proven to be inductive.\nloop invariant x == z ==> y == x is partially proven to be inductive.\nloop invariant y == z ==> x == y is partially proven to be inductive.\nloop invariant x <= y ==> x == z is partially proven to be inductive.\nloop invariant y <= x ==> y == z is partially proven to be inductive.\nloop invariant z <= x ==> z == y is partially proven to be inductive.\nloop invariant z <= y ==> z == x is partially proven to be inductive.\nloop invariant x <= z ==> x == y is partially proven to be inductive.\nloop invariant y <= z ==> y == x is partially proven to be inductive.\nloop invariant k == x + y + z ==> x == y is partially proven to be inductive.\nloop invariant k == x + y + z ==> y == z is partially proven to be inductive.\nloop invariant k == x + y + z ==> z == x is partially proven to be inductive.\nloop invariant k == x + y + z ==> x == z is partially proven to be inductive.\nloop invariant k == x + y + z ==> y == x is partially proven to be inductive.\nloop invariant k == x + y + z ==> z == y is partially proven to be inductive.\nAssertion x == y == z: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= k;\nloop invariant i5: k >= x;\nloop invariant i6: k >= y;\nloop invariant i7: k >= z;\nloop invariant i8: k <= x + y + z;\n\n\n\nloop invariant i12: x == y ==> z == x;\nloop invariant i13: x == z ==> y == x;\n\n\nloop invariant i16: y <= x ==> y == z;\nloop invariant i17: z <= x ==> z == y;\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 3*y;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant z <= k;\nloop invariant x+y+z == k;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= 3*y is inductive.\nloop invariant x <= k is inductive.\nloop invariant y <= k is inductive.\nloop invariant z <= k is inductive.\nloop invariant x+y+z == k is inductive.\nloop invariant x <= y is inductive.\nloop invariant x <= z is inductive.\nloop invariant y <= z is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant z >= 0 is inductive.\nloop invariant k >= 0 is inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 3*y;\nloop invariant i2: x <= k;\nloop invariant i3: y <= k;\nloop invariant i4: z <= k;\nloop invariant i5: x+y+z == k;\nloop invariant i6: x <= y;\nloop invariant i7: x <= z;\nloop invariant i8: y <= z;\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 0;\nloop invariant i11: z >= 0;\nloop invariant i12: k >= 0;\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= unknown1();\nloop invariant y >= x;\nloop invariant z >= y;\nloop invariant 0 <= k <= 3 * (x + y + z);\nloop invariant k == x + y + z ==> unknown1() ==> x >= y && y >= z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\n\nloop invariant i2: y >= x;\nloop invariant i3: z >= y;\nloop invariant i4: 0 <= k <= 3 * (x + y + z);\n\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= z;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= k <= 2*(x+y+z);\nloop invariant x <= y <= z;\nloop invariant y <= z;\nloop invariant x <= k <= 2*(x+y+z);\nloop invariant y <= k <= 2*(x+y+z);\nloop invariant z <= k <= 2*(x+y+z);\nloop invariant k <= 2*(x+y+z);\nloop invariant k >= 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= z is partially proven to be inductive.\nloop invariant 0 <= y <= z is partially proven to be inductive.\nloop invariant 0 <= k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant x <= y <= z is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant x <= k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant y <= k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant z <= k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant k <= 2*(x+y+z) is partially proven to be inductive.\nloop invariant k >= 2*(x+y+z) is established but not preserved.\nloop invariant k <= 2*(x+y+z) ==> k == 2*(x+y+z) is partially proven to be inductive.\nloop invariant k >= 2*(x+y+z) ==> k == 2*(x+y+z) is partially proven to be inductive.\nAssertion x == y == z: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= z;\nloop invariant i2: 0 <= y <= z;\nloop invariant i3: 0 <= k <= 2*(x+y+z);\nloop invariant i4: x <= y <= z;\nloop invariant i5: y <= z;\nloop invariant i6: x <= k <= 2*(x+y+z);\nloop invariant i7: y <= k <= 2*(x+y+z);\nloop invariant i8: z <= k <= 2*(x+y+z);\nloop invariant i9: k <= 2*(x+y+z);\n\n\nloop invariant i12: k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 34: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x && x <= (y + z);\nloop invariant i2: 0 <= y && y <= (x + z);\nloop invariant i3: 0 <= z && z <= (x + y);\nloop invariant i4: (k%3 == 0) ==> x == (x + y + z) / 3;\nloop invariant i5: (k%3 != 0) ==> x == (x + y + z + 1) / 3;\nloop invariant i6: (k%3 == 0) ==> y == (x + y + z) / 3;\nloop invariant i7: (k%3 != 0) ==> y == (x + y + z + 1) / 3;\nloop invariant i8: (k%3 == 0) ==> z == (x + y + z) / 3;\nloop invariant i9: (k%3 != 0) ==> z == (x + y + z + 1) / 3;\nloop invariant i10: 0 <= k;\nloop invariant i11: k <= x + y + z;\nloop invariant i12: x <= y;\nloop invariant i13: y <= z;\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\nloop invariant i16: z >= 0;\nloop invariant i17: k >= 0;\nloop invariant i18: 0 <= k <= unknown1(); loop invariant x <= y; loop invariant y <= z; loop invariant x <= z; loop invariant y <= unknown1(); loop invariant z <= unknown1(); loop invariant x + y + z == k; loop invariant x + y + z == unknown1(); loop invariant unknown1() ==> (x <= y); loop invariant unknown1() ==> (y <= z); loop invariant unknown1() ==> (x <= z); loop invariant unknown1() ==> (y <= unknown1()); loop invariant unknown1() ==> (z <= unknown1()); loop invariant unknown1() ==> (x + y + z == k); loop invariant unknown1() ==> (x + y + z == unknown1());\nloop invariant i19: 0 <= x <= k;\nloop invariant i20: 0 <= y <= k;\nloop invariant i21: 0 <= z <= k;\nloop invariant i22: k == x + y + z;\nloop invariant i23: k % 3 == 0 ==> x == 0;\nloop invariant i24: k % 3 == 1 ==> x == 1;\nloop invariant i25: k % 3 == 2 ==> x == 2;\nloop invariant i26: 0 <= y && y <= 100000;\nloop invariant i27: x >= (1 + (y - 1) * y / 2);\nloop invariant i28: z >= (1 + (y - 1) * y / 2);\nloop invariant i29: k >= (1 + (y - 1) * y / 2);\nloop invariant i30: x <= z && y <= z && k <= z;\nloop invariant i31: 0 <= x <= 100000;\nloop invariant i32: 0 <= y <= 100000;\nloop invariant i33: 0 <= z <= 100000;\nloop invariant i34: 0 <= k <= 300000;\nloop invariant i35: x == y && y == z ==> x == y;\nloop invariant i36: x == y && y == z ==> y == z;\nloop invariant i37: x == y && y == z ==> z == x;\nloop invariant i38: x == y && y == z ==> x == z;\nloop invariant i39: x == y && y == z ==> y == x;\nloop invariant i40: x == y && y == z ==> z == y;\nloop invariant i41: x == y && y == z ==> x <= y;\nloop invariant i42: x == y && y == z ==> y <= x;\nloop invariant i43: x == y && y == z ==> x >= y;\nloop invariant i44: x == y && y == z ==> y >= x;\nloop invariant i45: 0 <= x <= 0 ==> x == 0;\nloop invariant i46: 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant i47: 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant i48: 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant i49: 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i50: 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant i51: 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant i52: 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant i53: 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant i54: 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant i55: 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant i56: 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant i57: 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant i58: 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\nloop invariant i59: 0 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 0;\nloop invariant i60: 1 <= k <= 30 ==> k == x + y + z && x == 0 && y == 0 && z == 1;\nloop invariant i61: 2 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 1;\nloop invariant i62: 3 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 2;\nloop invariant i63: 4 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 3;\nloop invariant i64: 5 <= k <= 30 ==> k == x + y + z && x == 0 && y == 1 && z == 4;\nloop invariant i65: 0 <= x <= y <= z;\nloop invariant i66: x+y+z = k;\nloop invariant i67: 0 <= k <= 3*z;\nloop invariant i68: x == y ==> (x == z);\nloop invariant i69: (x != y) ==> (x != z);\nloop invariant i70: 0 <= x;\nloop invariant i71: 0 <= y;\nloop invariant i72: 0 <= z;\nloop invariant i73: (k%3 == 0 ==> x == k/3);\nloop invariant i74: (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1);\nloop invariant i75: (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2);\nloop invariant i76: y >= x;\nloop invariant i77: z >= x;\nloop invariant i78: y >= z;\nloop invariant i79: k >= x;\nloop invariant i80: k >= y;\nloop invariant i81: k >= z;\nloop invariant i82: k <= 3 * x;\nloop invariant i83: k <= 3 * y;\nloop invariant i84: k <= 3 * z;\nloop invariant i85: x == y ==> z == x;\nloop invariant i86: x == z ==> y == x;\nloop invariant i87: y == z ==> x == y;\nloop invariant i88: x <= y ==> x == z;\nloop invariant i89: y <= x ==> y == z;\nloop invariant i90: z <= x ==> z == y;\nloop invariant i91: z <= y ==> z == x;\nloop invariant i92: x <= z ==> x == y;\nloop invariant i93: y <= z ==> y == x;\nloop invariant i94: k == x + y + z ==> x == y;\nloop invariant i95: k == x + y + z ==> y == z;\nloop invariant i96: k == x + y + z ==> z == x;\nloop invariant i97: k == x + y + z ==> x == z;\nloop invariant i98: k == x + y + z ==> y == x;\nloop invariant i99: k == x + y + z ==> z == y;\nloop invariant i100: i1;\nloop invariant i101: i2;\nloop invariant i102: i3;\nloop invariant i103: i4;\nloop invariant i104: i5;\nloop invariant i105: i6;\nloop invariant i106: i7;\nloop invariant i107: i8;\nloop invariant i108: i9;\nloop invariant i109: i10;\nloop invariant i110: i11;\nloop invariant i111: i12;\nloop invariant i112: i13;\nloop invariant i113: i14;\nloop invariant i114: i15;\nloop invariant i115: i16;\nloop invariant i116: i17;\nloop invariant i117: i18;\nloop invariant i118: i19;\nloop invariant i119: i20;\nloop invariant i120: i21;\nloop invariant i121: i22;\nloop invariant i122: i23;\nloop invariant i123: i24;\nloop invariant i124: i25;\nloop invariant i125: i26;\nloop invariant i126: i27;\nloop invariant i127: i28;\nloop invariant i128: i29;\nloop invariant i129: i30;\nloop invariant i130: i31;\nloop invariant i131: i32;\nloop invariant i132: i33;\nloop invariant i133: i34;\nloop invariant i134: i35;\nloop invariant i135: i36;\nloop invariant i136: i37;\nloop invariant i137: i38;\nloop invariant i138: i39;\nloop invariant i139: i40;\nloop invariant i140: i41;\nloop invariant i141: i42;\nloop invariant i142: i43;\nloop invariant i143: i44;\nloop invariant i144: i45;\nloop invariant i145: i46;\nloop invariant i146: i47;\nloop invariant i147: i48;\nloop invariant i148: i49;\nloop invariant i149: i50;\nloop invariant i150: i51;\nloop invariant i151: i52;\nloop invariant i152: i53;\nloop invariant i153: i54;\nloop invariant i154: i55;\nloop invariant i155: i56;\nloop invariant i156: i57;\nloop invariant i157: i58;\nloop invariant i158: i59;\nloop invariant i159: i60;\nloop invariant i160: i61;\nloop invariant i161: i62;\nloop invariant i162: i63;\nloop invariant i163: i64;\nloop invariant i164: i65;\nloop invariant i165: i66;\nloop invariant i166: i67;\nloop invariant i167: i68;\nloop invariant i168: i69;\nloop invariant i169: i70;\nloop invariant i170: i71;\nloop invariant i171: i72;\nloop invariant i172: i73;\nloop invariant i173: i74;\nloop invariant i174: i75;\nloop invariant i175: i76;\nloop invariant i176: i77;\nloop invariant i177: i78;\nloop invariant i178: i79;\nloop invariant i179: i80;\nloop invariant i180: i81;\nloop invariant i181: i82;\nloop invariant i182: i83;\nloop invariant i183: i84;\nloop invariant i184: i85;\nloop invariant i185: i86;\nloop invariant i186: i87;\nloop invariant i187: i88;\nloop invariant i188: i89;\nloop invariant i189: i90;\nloop invariant i190: i91;\nloop invariant i191: i92;\nloop invariant i192: i93;\nloop invariant i193: i94;\nloop invariant i194: i95;\nloop invariant i195: i96;\nloop invariant i196: i97;\nloop invariant i197: i98;\nloop invariant i198: i99;\nloop invariant i199: i100;\nloop invariant i200: i101;\nloop invariant i201: i102;\nloop invariant i202: i103;\nloop invariant i203: i104;\nloop invariant i204: i105;\nloop invariant i205: i106;\nloop invariant i206: i107;\nloop invariant i207: i108;\nloop invariant i208: i109;\nloop invariant i209: i110;\nloop invariant i210: i111;\nloop invariant i211: i112;\nloop invariant i212: i113;\nloop invariant i213: i114;\nloop invariant i214: i115;\nloop invariant i215: i116;\nloop invariant i216: i117;\nloop invariant i217: i118;\nloop invariant i218: i119;\nloop invariant i219: i120;\nloop invariant i220: i121;\nloop invariant i221: i122;\nloop invariant i222: i123;\nloop invariant i223: i124;\nloop invariant i224: i125;\nloop invariant i225: i126;\nloop invariant i226: i127;\nloop invariant i227: i128;\nloop invariant i228: i129;\nloop invariant i229: i130;\nloop invariant i230: i131;\nloop invariant i231: i132;\nloop invariant i232: i133;\nloop invariant i233: i134;\nloop invariant i234: i135;\nloop invariant i235: i136;\nloop invariant i236: i137;\nloop invariant i237: i138;\nloop invariant i238: i139;\nloop invariant i239: i140;\nloop invariant i240: i141;\nloop invariant i241: i142;\nloop invariant i242: i143;\nloop invariant i243: i144;\nloop invariant i244: i145;\nloop invariant i245: i146;\nloop invariant i246: i147;\nloop invariant i247: i148;\nloop invariant i248: i149;\nloop invariant i249: i150;\nloop invariant i250: i151;\nloop invariant i251: i152;\nloop invariant i252: i153;\nloop invariant i253: i154;\nloop invariant i254: i155;\nloop invariant i255: i156;\nloop invariant i256: i157;\nloop invariant i257: i158;\nloop invariant i258: 0 <= k <= 3*y;\nloop invariant i259: x <= k;\nloop invariant i260: y <= k;\nloop invariant i261: z <= k;\nloop invariant i262: x+y+z == k;\nloop invariant i263: x <= z;\nloop invariant i264: 1 <= x <= unknown1();\nloop invariant i265: z >= y;\nloop invariant i266: 0 <= k <= 3 * (x + y + z);\nloop invariant i267: k == x + y + z ==> unknown1() ==> x >= y && y >= z;\nloop invariant i268: 0 <= x <= z;\nloop invariant i269: 0 <= y <= z;\nloop invariant i270: 0 <= k <= 2*(x+y+z);\nloop invariant i271: x <= y <= z;\nloop invariant i272: x <= k <= 2*(x+y+z);\nloop invariant i273: y <= k <= 2*(x+y+z);\nloop invariant i274: z <= k <= 2*(x+y+z);\nloop invariant i275: k <= 2*(x+y+z);\nloop invariant i276: k >= 2*(x+y+z);\nloop invariant i277: k <= 2*(x+y+z) ==> k == 2*(x+y+z);\nloop invariant i278: k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
        "combined_annotation_num_solver_calls": 179,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  /*@\nloop invariant i1: 0 <= x && x <= (y + z);\nloop invariant i2: 0 <= y && y <= (x + z);\nloop invariant i3: 0 <= z && z <= (x + y);\nloop invariant i4: (k%3 == 0) ==> x == (x + y + z) / 3;\nloop invariant i5: (k%3 != 0) ==> x == (x + y + z + 1) / 3;\nloop invariant i6: (k%3 == 0) ==> y == (x + y + z) / 3;\nloop invariant i7: (k%3 != 0) ==> y == (x + y + z + 1) / 3;\nloop invariant i8: (k%3 == 0) ==> z == (x + y + z) / 3;\nloop invariant i9: (k%3 != 0) ==> z == (x + y + z + 1) / 3;\nloop invariant i10: 0 <= k;\nloop invariant i11: k <= x + y + z;\nloop invariant i12: x <= y;\nloop invariant i13: y <= z;\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\nloop invariant i16: z >= 0;\nloop invariant i17: k >= 0;\n\nloop invariant i19: 0 <= x <= k;\nloop invariant i20: 0 <= y <= k;\nloop invariant i21: 0 <= z <= k;\nloop invariant i22: k == x + y + z;\n\nloop invariant i24: k % 3 == 1 ==> x == 1;\nloop invariant i25: k % 3 == 2 ==> x == 2;\n\n\n\n\n\n\n\n\n\nloop invariant i35: x == y && y == z ==> x == y;\nloop invariant i36: x == y && y == z ==> y == z;\nloop invariant i37: x == y && y == z ==> z == x;\nloop invariant i38: x == y && y == z ==> x == z;\nloop invariant i39: x == y && y == z ==> y == x;\nloop invariant i40: x == y && y == z ==> z == y;\nloop invariant i41: x == y && y == z ==> x <= y;\nloop invariant i42: x == y && y == z ==> y <= x;\nloop invariant i43: x == y && y == z ==> x >= y;\nloop invariant i44: x == y && y == z ==> y >= x;\nloop invariant i45: 0 <= x <= 0 ==> x == 0;\nloop invariant i46: 0 <= x <= 1 ==> x == 0 || x == 1;\nloop invariant i47: 0 <= x <= 2 ==> x == 0 || x == 1 || x == 2;\nloop invariant i48: 0 <= x <= 3 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant i49: 0 <= x <= 4 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i50: 0 <= x <= 5 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\nloop invariant i51: 0 <= x <= 6 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\nloop invariant i52: 0 <= x <= 7 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\nloop invariant i53: 0 <= x <= 8 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\nloop invariant i54: 0 <= x <= 9 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\nloop invariant i55: 0 <= x <= 10 ==> x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\nloop invariant i56: 0 <= y <= 10 ==> y == 0 || y == 1 || y == 2 || y == 3 || y == 4 || y == 5 || y == 6 || y == 7 || y == 8 || y == 9 || y == 10;\nloop invariant i57: 0 <= z <= 10 ==> z == 0 || z == 1 || z == 2 || z == 3 || z == 4 || z == 5 || z == 6 || z == 7 || z == 8 || z == 9 || z == 10;\nloop invariant i58: 0 <= k <= 30 ==> k == 0 || k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 6 || k == 7 || k == 8 || k == 9 || k == 10 || k == 11 || k == 12 || k == 13 || k == 14 || k == 15 || k == 16 || k == 17 || k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24 || k == 25 || k == 26 || k == 27 || k == 28 || k == 29 || k == 30;\n\n\n\n\n\n\nloop invariant i65: 0 <= x <= y <= z;\n\nloop invariant i67: 0 <= k <= 3*z;\nloop invariant i68: x == y ==> (x == z);\nloop invariant i69: (x != y) ==> (x != z);\nloop invariant i70: 0 <= x;\nloop invariant i71: 0 <= y;\nloop invariant i72: 0 <= z;\nloop invariant i73: (k%3 == 0 ==> x == k/3);\nloop invariant i74: (k%3 != 0 ==> k%3 == 1 ==> x == k/3 + 1);\nloop invariant i75: (k%3 != 0 ==> k%3 == 2 ==> x == k/3 + 2);\nloop invariant i76: y >= x;\nloop invariant i77: z >= x;\nloop invariant i78: y >= z;\nloop invariant i79: k >= x;\nloop invariant i80: k >= y;\nloop invariant i81: k >= z;\nloop invariant i82: k <= 3 * x;\nloop invariant i83: k <= 3 * y;\nloop invariant i84: k <= 3 * z;\nloop invariant i85: x == y ==> z == x;\nloop invariant i86: x == z ==> y == x;\nloop invariant i87: y == z ==> x == y;\nloop invariant i88: x <= y ==> x == z;\nloop invariant i89: y <= x ==> y == z;\nloop invariant i90: z <= x ==> z == y;\nloop invariant i91: z <= y ==> z == x;\nloop invariant i92: x <= z ==> x == y;\nloop invariant i93: y <= z ==> y == x;\nloop invariant i94: k == x + y + z ==> x == y;\nloop invariant i95: k == x + y + z ==> y == z;\nloop invariant i96: k == x + y + z ==> z == x;\nloop invariant i97: k == x + y + z ==> x == z;\nloop invariant i98: k == x + y + z ==> y == x;\nloop invariant i99: k == x + y + z ==> z == y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i258: 0 <= k <= 3*y;\nloop invariant i259: x <= k;\nloop invariant i260: y <= k;\nloop invariant i261: z <= k;\nloop invariant i262: x+y+z == k;\nloop invariant i263: x <= z;\n\nloop invariant i265: z >= y;\nloop invariant i266: 0 <= k <= 3 * (x + y + z);\n\nloop invariant i268: 0 <= x <= z;\nloop invariant i269: 0 <= y <= z;\nloop invariant i270: 0 <= k <= 2*(x+y+z);\nloop invariant i271: x <= y <= z;\nloop invariant i272: x <= k <= 2*(x+y+z);\nloop invariant i273: y <= k <= 2*(x+y+z);\nloop invariant i274: z <= k <= 2*(x+y+z);\nloop invariant i275: k <= 2*(x+y+z);\n\n\nloop invariant i278: k >= 2*(x+y+z) ==> k == 2*(x+y+z);\n*/\nwhile(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n}\n \n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c"
        ],
        "skipped": [],
        "total": 17,
        "success_count": 3,
        "failure_count": 14,
        "success_rate": 0.17647058823529413
    }
}