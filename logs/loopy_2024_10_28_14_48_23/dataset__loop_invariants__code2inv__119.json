{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/119.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn = i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= size - 1;\nloop invariant i >= 1;\nloop invariant i <= size;\nloop invariant sn + i = size;\nloop invariant sn + i + 1 = size + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= size; 0 <= i <= size + 1; i <= size ==> sn == size; i <= size ==> sn <= size; i <= size ==> sn >= size; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 1 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant size >= 0;\nloop invariant i <= size + 1 ==> sn <= size;\nloop invariant sn >= 1 ==> sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i + sn == size;\nloop invariant i + sn == size;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= size + 1;\nloop invariant i <= size ==> sn <= size - 1;\nloop invariant i <= size ==> sn + 1 == i;\nloop invariant i <= size ==> sn == size;\nloop invariant sn <= size;\nloop invariant sn <= size ==> sn + 1 == i;\nloop invariant sn <= size ==> sn == size - 1;\nloop invariant sn <= size ==> sn == size - 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 < i <= size;\nloop invariant sn == (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant sn == 0;\nloop invariant size >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant size >= sn;\nloop invariant size >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant size >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i == (sn + 1);\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= i;\nloop invariant sn == (i - 1);\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant i >= 1;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i == sn + 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn = i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= size - 1;\nloop invariant i >= 1;\nloop invariant i <= size;\nloop invariant sn + i = size;\nloop invariant sn + i + 1 = size + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: i >= 1;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= size; 0 <= i <= size + 1; i <= size ==> sn == size; i <= size ==> sn <= size; i <= size ==> sn >= size; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token '0'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 1 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant size >= 0;\nloop invariant i <= size + 1 ==> sn <= size;\nloop invariant sn >= 1 ==> sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 1 <= sn <= size is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant size >= 0 is partially proven to be inductive.\nloop invariant i <= size + 1 ==> sn <= size is partially proven to be inductive.\nloop invariant sn >= 1 ==> sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\nloop invariant i5: i <= size + 1 ==> sn <= size;\nloop invariant i6: sn >= 1 ==> sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant i + sn == size;\nloop invariant i + sn == size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i + sn == size is neither established nor preserved.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= size + 1;\nloop invariant i <= size ==> sn <= size - 1;\nloop invariant i <= size ==> sn + 1 == i;\nloop invariant i <= size ==> sn == size;\nloop invariant sn <= size;\nloop invariant sn <= size ==> sn + 1 == i;\nloop invariant sn <= size ==> sn == size - 1;\nloop invariant sn <= size ==> sn == size - 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= size + 1 is preserved but not established.\nloop invariant i <= size ==> sn <= size - 1 is partially proven to be inductive.\nloop invariant i <= size ==> sn + 1 == i is partially proven to be inductive.\nloop invariant i <= size ==> sn == size is preserved but not established.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn <= size ==> sn + 1 == i is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 is preserved but not established.\nloop invariant sn <= size ==> sn == size - 1 ==> size >= 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1 is partially proven to be inductive.\nloop invariant sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i <= size ==> sn <= size - 1;\nloop invariant i5: i <= size ==> sn + 1 == i;\n\n\nloop invariant i8: sn <= size ==> sn + 1 == i;\n\nloop invariant i10: sn <= size ==> sn == size - 1 ==> size >= 1;\n\nloop invariant i12: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant i13: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant i14: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant i15: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 < i <= size;\nloop invariant sn == (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 < i <= size is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant sn == 0;\nloop invariant size >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant size >= sn;\nloop invariant size >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i >= 0;\nloop invariant sn <= size;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is preserved but not established.\nloop invariant sn == 0 is partially proven to be inductive.\nloop invariant size >= 0 is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant size >= sn is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: sn >= 0;\nloop invariant i7: i >= 0;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= i - 1;\nloop invariant i3: sn <= i;\nloop invariant i4: sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant size >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn == (i - 1);\nloop invariant i == (sn + 1);\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\nloop invariant sn == (i - 1);\nloop invariant sn == (size - (size - i));\nloop invariant sn == (size - (i - 1));\nloop invariant sn == (size - (size - i));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant size >= 0 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (sn + 1) is partially proven to be inductive.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn == (size - (size - i)) is preserved but not established.\nloop invariant sn == (size - (i - 1)) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn == (i - 1);\nloop invariant i6: i == (sn + 1);\n\nloop invariant i8: sn <= i;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= i;\nloop invariant sn == (i - 1);\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\nloop invariant sn <= size;\nloop invariant size >= 1;\nloop invariant i == sn + 1;\nloop invariant sn == i - 1;\nloop invariant sn <= size;\nloop invariant sn <= i;\nloop invariant sn >= 0;\nloop invariant i <= size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant size >= 1 is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: 0 <= sn <= i;\nloop invariant i3: sn == (i - 1);\nloop invariant i4: i >= 1;\nloop invariant i5: sn >= 0;\n\n\n\nloop invariant i9: i == sn + 1;\nloop invariant i10: sn == i - 1;\nloop invariant i11: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant i >= 1;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= i - 1;\nloop invariant i3: sn <= i;\nloop invariant i4: i >= 1;\nloop invariant i5: sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i == sn + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= size;\nloop invariant i2: sn = i - 1;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= size - 1;\nloop invariant i5: i >= 1;\nloop invariant i6: i <= size;\nloop invariant i7: sn + i = size;\nloop invariant i8: sn + i + 1 = size + 1;\nloop invariant i9: 0 <= sn <= size; 0 <= i <= size + 1; i <= size ==> sn == size; i <= size ==> sn <= size; i <= size ==> sn >= size; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0; i <= size ==> sn <= 1073741823; i <= size ==> sn >= -1073741823; i <= size ==> sn >= 0;\nloop invariant i10: sn <= size;\nloop invariant i11: sn <= i;\nloop invariant i12: 0 <= i <= size + 1;\nloop invariant i13: 1 <= sn <= size;\nloop invariant i14: sn == i - 1;\nloop invariant i15: size >= 0;\nloop invariant i16: i <= size + 1 ==> sn <= size;\nloop invariant i17: sn >= 1 ==> sn == i - 1;\nloop invariant i18: 0 <= i <= size;\nloop invariant i19: 0 <= sn <= size;\nloop invariant i20: i + sn == size;\nloop invariant i21: i <= size + 1;\nloop invariant i22: i <= size ==> sn <= size - 1;\nloop invariant i23: i <= size ==> sn + 1 == i;\nloop invariant i24: i <= size ==> sn == size;\nloop invariant i25: sn <= size ==> sn + 1 == i;\nloop invariant i26: sn <= size ==> sn == size - 1;\nloop invariant i27: sn <= size ==> sn == size - 1 ==> size >= 1;\nloop invariant i28: sn <= size ==> sn == size - 1 ==> i == size + 1;\nloop invariant i29: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant i30: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant i31: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant i32: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\nloop invariant i33: 0 < i <= size;\nloop invariant i34: sn == (i - 1);\nloop invariant i35: i == 0;\nloop invariant i36: sn == 0;\nloop invariant i37: i >= 0;\nloop invariant i38: size >= sn;\nloop invariant i39: sn >= i - 1;\nloop invariant i40: i == (sn + 1);\nloop invariant i41: sn == (size - (size - i));\nloop invariant i42: sn == (size - (i - 1));\nloop invariant i43: 0 <= sn <= i;\nloop invariant i44: size >= 1;\nloop invariant i45: i == sn + 1;\nloop invariant i46: 1 <= i <= size + 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: i >= 1;\n\n\n\n\n\nloop invariant i11: sn <= i;\n\n\nloop invariant i14: sn == i - 1;\n\nloop invariant i16: i <= size + 1 ==> sn <= size;\nloop invariant i17: sn >= 1 ==> sn == i - 1;\n\n\n\n\nloop invariant i22: i <= size ==> sn <= size - 1;\nloop invariant i23: i <= size ==> sn + 1 == i;\n\nloop invariant i25: sn <= size ==> sn + 1 == i;\n\nloop invariant i27: sn <= size ==> sn == size - 1 ==> size >= 1;\n\nloop invariant i29: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1;\nloop invariant i30: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1;\nloop invariant i31: sn <= size ==> sn == size - 1 ==> sn == size - 1 ==> size >= 1 ==> size >= 1;\nloop invariant i32: sn <= size ==> sn == size - 1 ==> i == size + 1 ==> size >= 1 ==> size >= 1;\n\nloop invariant i34: sn == (i - 1);\n\n\nloop invariant i37: i >= 0;\n\nloop invariant i39: sn >= i - 1;\nloop invariant i40: i == (sn + 1);\n\n\nloop invariant i43: 0 <= sn <= i;\n\nloop invariant i45: i == sn + 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../dataset/loop_invariants/code2inv/113.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/69.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/half.c",
            "../dataset/loop_invariants/code2inv/101.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../dataset/loop_invariants/code2inv/86.c",
            "../dataset/loop_invariants/code2inv/119.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 4,
        "failure_count": 19,
        "success_rate": 0.17391304347826086
    }
}